// ************************************************************************ //
// The types declared in this file were generated from data read from the
// WSDL File described below:
// WSDL     : D:\temp\to be deleted\downloads\ebaysvc.wsdl
//  >Import : D:\temp\to be deleted\downloads\ebaysvc.wsdl>0
// Encoding : UTF-8
// Version  : 1.0
// (26/03/2020 9:14:03 AM - - $Rev: 34800 $)
// ************************************************************************ //

unit ebaysvc;

interface

uses InvokeRegistry, SOAPHTTPClient, Types, XSBuiltIns;

const
  IS_OPTN = $0001;
  IS_UNBD = $0002;
  IS_ATTR = $0010;
  IS_TEXT = $0020;


type

  // ************************************************************************ //
  // The following types, referred to in the WSDL document are not being represented
  // in this file. They are either aliases[@] of other types represented or were referred
  // to but never[!] declared in the document. The types from the latter category
  // typically map to predefined/known XML or Embarcadero types; however, they could also 
  // indicate incorrect WSDL documents that failed to declare or import a schema type.
  // ************************************************************************ //
  // !:duration        - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:boolean         - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:int             - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:anyURI          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:long            - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:string          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:dateTime        - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:double          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:time            - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:token           - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:base64Binary    - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:float           - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:decimal         - "http://www.w3.org/2001/XMLSchema"[Gbl]

  RefundFailureReasonType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreSubscriptionType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MultiLegShippingDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FlatRateInsuranceRangeCostType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxesType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerProfilesType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  OrderTransactionType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentsInformationType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  OfferDiscountsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SummaryEventScheduleType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductIdentifiersType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VeROSiteDetailType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UnpaidItemType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerProductType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaginatedOrderTransactionArrayType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SearchStandingDashboardType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PowerSellerDashboardType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PolicyComplianceDashboardType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerAccountDashboardType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PerformanceDashboardType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreThemeArrayType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StorePreferencesType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProStoresCheckoutPreferenceType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BidderNoticePreferencesType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerReturnPreferencesType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerProfilePreferencesType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PurchaseReminderEmailPreferencesType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReviseStatusType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SearchDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemCompatibilityListType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingServicePackageDetailsType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellereBayPaymentProcessConsentCodeType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreCustomListingHeaderType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DisputeFilterCountType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationStatisticsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReminderCustomizationType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RemindersType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyingSummaryType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBayFavoriteSellerListType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBayFavoriteSearchListType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RecommendationValidationRulesType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingDesignerType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  QuantityInfoType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingOverrideType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  GroupValidationRulesType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumUnpaidItemStrikesInfoDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VerifiedUserRequirementsDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumBuyerPolicyViolationsDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumItemRequirementsDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MultiLegShipmentType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  QuantityRestrictionPerBuyerInfoType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingServiceCostOverrideType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SuggestedCategoryType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreCustomListingHeaderLinkType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PromotionDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SchedulingInfoType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PictureSetMemberType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAutoListType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBaySellingSummaryType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAlertType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EndItemRequestContainerType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerPaymentPreferencesType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UnpaidItemAssistancePreferencesType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationEventPropertyType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationUserDataType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerSearchType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UnitOfMeasurementType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VeROReportedItemType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SMSSubscriptionType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesFolderType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesFolderSummaryType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ValueRecommendationType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NameValueRelationshipType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NameRecommendationType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBayFavoriteSellerType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PicturesType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductSuggestionType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TicketListingDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UserIdentityType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TransactionReferenceType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StorefrontType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemTransactionIDType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemPolicyViolationType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NameValueListType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  GiftSummaryType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumUnpaidItemStrikesDurationDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MessageMediaType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PolicyViolationDurationDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ModifyNameType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingCheckoutRedirectPreferenceType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LineItemType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MetadataType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingRecommendationType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LookupAttributeType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShipmentTrackingDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerVendorDetailsType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SupportedSellerProfileType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxDetailsType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxIdentifierAttributeType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreFontType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreColorType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreColorSchemeType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreThemeType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreLogoType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundTransactionType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundFundingSourceType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RateTableDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReasonCodeDetailType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerPaymentProfileType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerDiscountType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerShippingProfileType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerReturnProfileType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EndItemResponseContainerType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TokenStatusType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SiteDetailsType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingLocationDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TimeZoneDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  URLDetailsType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RegionDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DispatchTimeMaxDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingFeatureDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SiteBuyerRequirementDetailsType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RecoupmentPolicyDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExcludeShippingLocationDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RegionOfOriginDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UnitOfMeasurementDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemSpecificDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnPolicyDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingCarrierDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingPackageDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerSoldOrderType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerEmailLogType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TimeRangeType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerFolderDetailsType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentHoldDetailType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesForwardDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesResponseDetailsType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesAlertType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MembershipDetailType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MarkUpMarkDownEventType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UserAgreementInfoType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreVacationPreferencesType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PromotionalSaleDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundType           = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerProductDetailsType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddItemRequestContainerType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddItemResponseContainerType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddMemberMessagesAAQToBidderRequestContainerType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeedbackInfoType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayPLUSPreferenceType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CountryDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VeROReportItemType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerProductSpecificsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationKeyType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationProductListingDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationsType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemCompatibilityType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductListingDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ContextSearchAssetType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ThemeGroupType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PickupInStoreDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesSummaryType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ASQPreferencesType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBaySelectionType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BidAssistantListType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemListCustomizationType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerSoldTransactionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaginatedTransactionArrayType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MemberMessageType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingStatusType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyMessagesMessageType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemBestOffersType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  OfferType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CurrencyDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MyeBayFavoriteSearchType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaginationType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaginationResultType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MemberMessageExchangeType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CategoryMappingType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CategoryItemSpecificsType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RecommendationsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UserDefinedListType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaginatedItemArrayType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AmountType           = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundLineType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UnitInfoType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PromotedItemType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CrossPromotionsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DeliveryDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DescriptionTemplateType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DigitalGoodDeliveryEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DigitalDeliveryUserType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DepositSupportedDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ConditionEnabledDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ConditionType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ConditionValuesDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CombinedPaymentPreferencesType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CompatibleVehicleTypeDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CrossBorderTradeGBEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CrossBorderTradeNorthAmericaEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CrossPromotionPreferencesType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ContactHoursDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAutoRelistType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DispatchCutoffTimePreferencesType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAutoListAccordingToScheduleType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAutoListMinActiveItemsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CrossBorderTradeAustraliaEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DigitalGoodInfoType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EANEnabledDefinitionType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EANIdentifierEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EndOfAuctionEmailPreferencesType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DomesticReturnsShipmentPayeeDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DutchBINEnabledDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  EpidSupportedDefinitionType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExtendedContactDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationSpecificPictureSetType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PictureDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PictureURLsType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExpressConditionRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExpressEnabledDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExpressPicturesRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DiscountPriceInfoType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DisputeType          = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DomesticReturnsAcceptedDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DomesticReturnsDurationDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DistanceType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeatureDefinitionsType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharacteristicType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LabelType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CategoryGroupType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExtendedProductFinderIDType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharacteristicsSetType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ConditionValuesType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharityAffiliationDetailType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdContactByAddressEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdContactByEmailEnabledDefintionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdContactByPhoneEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdBestOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdCompanyNameEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdCounterOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdShippingMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdStreetCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CombinedFixedPriceTreatmentEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdPayPerLeadEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdPaymentMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdPhoneCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharityInfoType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharityIDType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NonProfitSocialAddressType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayPaymentMismatchDetailsType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ClassifiedAdAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentTransactionType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundTransactionInfoType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Group1MaxFlatShippingCostDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Group2MaxFlatShippingCostDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Group3MaxFlatShippingCostDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreOwnerExtendedListingDurationsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreOwnerExtendedListingDurationsDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentMethodDefinitionType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaxFlatShippingCostCBTExemptDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FreePicturePackEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemCompatibilityEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaxItemCompatibilityDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaxFlatShippingCostDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VariationsEnabledDefinitionType = class;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FreeGalleryPlusEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketSellerContactDetailsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SpecialitySubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RegularSubscriptionDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketPaymentMethodCheckOutEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketShippingMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketCounterOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PremiumSubscriptionDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PayPalRequiredForStoreOwnerDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReviseQuantityAllowedDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RevisePriceAllowedDefinitionType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NonSubscriptionDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnPolicyEnabledDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  HandlingTimeEnabledDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MinItemCompatibilityDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsShipmentPayeeDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnPolicyDescriptionEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeatureEligibilityType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductRequiredEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsAcceptedDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsDurationDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeeType              = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeedbackPeriodType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeedbackRequirementsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeedbackDetailType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FeedbackSummaryType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UPCEnabledDefinitionType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaxGranularFitmentCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentOptionsGroupEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ValueCategoryDefinitionType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProductCreationEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ISBNEnabledDefinitionType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProfileCategoryGroupDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  GlobalShippingEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PickupDropOffEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  KTypeSupportedDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VINSupportedDefinitionType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VRMSupportedDefinitionType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerProvidedTitleSupportedDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SkypeMeNonTransactionalEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalListingDistancesRegularDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalListingDistancesSpecialtyDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerContactDetailsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreInventoryEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SkypeMeTransactionalEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalListingDistancesNonSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ISBNIdentifierEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UPCIdentifierEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PayPalBuyerProtectionEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SafePaymentRequiredDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemSpecificsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaisaPayFullEscrowEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  HomePageFeaturedEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProPackEnabledDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ValuePackEnabledDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingDurationDefinitionsType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingTermRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UserConsentRequiredDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProPackPlusEnabledDefinitionType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketNonSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MinimumReservePriceDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TCREnabledDefinitionType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketSpecialitySubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketRegularSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketPremiumSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingEnhancementDurationDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketAdFormatEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketContactByPhoneEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketPhoneCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProShippingMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProCounterOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProSellerContactDetailsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketContactByAddressEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketBestOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketStreetCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketCompanyNameEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  LocalMarketContactByEmailEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProContactByPhoneEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProPhoneCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProContactByAddressEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  INEscrowWorkflowTimelineDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PayPalRequiredDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProAdFormatEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProStreetCountDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProCompanyNameEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProContactByEmailEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  eBayMotorsProBestOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreCustomPageType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreCustomCategoryType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExpressItemRequirementsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SiteHostedPictureDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InventoryFeesType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DeliveryStatusType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DigitalDeliverySelectedType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShipmentType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingServiceDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingCategoryDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PickupMethodSelectedType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PickupOptionsType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnPolicyType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MultiLegShippingServiceType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingPackageInfoType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnsWithinDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RestockingFeeValueDetailsType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerDiscountsType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingCostPaidByDetailsType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  WarrantyTypeDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  WarrantyOfferedDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ReturnsAcceptedDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  WarrantyDurationDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentOptionDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerOrderStatusType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CheckoutStatusType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TransactionStatusType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InventoryStatusType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ExternalTransactionType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FlatShippingPreferencesType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingInsuranceType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerFavoriteItemPreferencesType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PromotionalSaleType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalShippingServiceOptionsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShippingServiceOptionsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BiddingSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemBidDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BrandMPNIdentifierEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BiddingDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BrandMPNType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerPackageEnclosureType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  OrderType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BusinessSellerDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerGuaranteeEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BasicAmountType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BasicUpgradePackEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Base64BinaryType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferEnabledDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BidGroupType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BidGroupItemType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferCounterEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CancelDetailType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CalculatedShippingPreferencesType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CategoryType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingDurationDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingDurationReferenceType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SiteDefaultsType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CategoryFeatureType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumItemRequirementsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MaximumUnpaidItemStrikesInfoType = class;     { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerProtectionDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerRequirementDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerRoleMetricsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DiscountProfileType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VATDetailsType       = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SalesTaxType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharityType          = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerAutoSecondChanceOfferType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxJurisdictionType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ListingStartPriceDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerFeeDiscountDashboardType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerRoleMetricsType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VATRateType          = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerTemplateDetailsType = class;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellingManagerProductInventoryStatusType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxIdentifierType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CalculatedHandlingDiscountType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CalculatedShippingDiscountType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  FlatShippingDiscountType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PromotionalShippingDiscountDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerSatisfactionDashboardType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerDashboardAlertType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BuyerType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NonProfitAddressType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TransactionType      = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ErrorParameterType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MeasureType          = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CalculatedShippingRateType = class;           { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ShipPackageDetailsType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AdditionalAccountType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  UserType             = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AccountSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerType           = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  QuantityType         = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AccountEntryType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddMemberMessagesAAQToBidderResponseContainerType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AbstractResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerReverseDisputeResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SellerReverseDisputeResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SaveItemToSellingManagerTemplateResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SaveItemToSellingManagerTemplateResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerTemplateResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerTemplateResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerSaleRecordResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerSaleRecordResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RevokeTokenResponseType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RevokeTokenResponse  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ItemsCanceledEventType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemsCanceledEvent   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblElm] }
  SetPromotionalSaleResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetPromotionalSaleResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetNotificationPreferencesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetNotificationPreferencesResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SendInvoiceResponseType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SendInvoiceResponse  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetMessagePreferencesResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetMessagePreferencesResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseCheckoutStatusResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseCheckoutStatusResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseFixedPriceItemResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseFixedPriceItemResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseMyMessagesFoldersResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseMyMessagesFoldersResponse = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerProductResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerProductResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerInventoryFolderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerInventoryFolderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseInventoryStatusResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseInventoryStatusResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseMyMessagesResponseType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseMyMessagesResponse = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseItemResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseItemResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  UploadSiteHostedPicturesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  UploadSiteHostedPicturesResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ValidateTestUserRegistrationResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ValidateTestUserRegistrationResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ValidateChallengeInputResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ValidateChallengeInputResponse = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetUserPreferencesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetUserPreferencesResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddSecondChanceItemResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddSecondChanceItemResponse = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddItemResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddItemResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyRelistItemResponseType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyRelistItemResponse = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VeROReportItemsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VeROReportItemsResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddFixedPriceItemResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddFixedPriceItemResponse = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetUserNotesResponseType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetUserNotesResponse = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerTemplateAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerTemplateAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreResponse     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetShippingDiscountProfilesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetShippingDiscountProfilesResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerItemAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerItemAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetPromotionalSaleListingsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetPromotionalSaleListingsResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerFeedbackOptionsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerFeedbackOptionsResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStorePreferencesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStorePreferencesResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetTaxTableResponseType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetTaxTableResponse  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreCustomPageResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreCustomPageResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreCategoriesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreCategoriesResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoryFeaturesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoryFeaturesResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetBidderListResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetBidderListResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoriesResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoriesResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerListResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerListResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerEventsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerEventsResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetChallengeTokenResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetChallengeTokenResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCharitiesResponseType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCharitiesResponse = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategorySpecificsResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategorySpecificsResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoryMappingsResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoryMappingsResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAdFormatLeadsResponseType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAdFormatLeadsResponse = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAccountResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAccountResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetShippingDiscountProfilesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetShippingDiscountProfilesResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RespondToBestOfferResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RespondToBestOfferResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetBestOffersResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetBestOffersResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAllBiddersResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAllBiddersResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetApiAccessRulesResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetApiAccessRulesResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMemberMessagesResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMemberMessagesResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemsAwaitingFeedbackResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemsAwaitingFeedbackResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemTransactionsResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemTransactionsResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerTransactionsResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerTransactionsResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBayBuyingResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBayBuyingResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMessagePreferencesResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMessagePreferencesResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyMessagesResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyMessagesResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetDescriptionTemplatesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetDescriptionTemplatesResponse = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetDisputeResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetDisputeResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetClientAlertsAuthTokenResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetClientAlertsAuthTokenResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetContextualKeywordsResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetContextualKeywordsResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemResponse      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemShippingResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemShippingResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetFeedbackResponseType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetFeedbackResponse  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessageRTQResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessageRTQResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessagesAAQToBidderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessagesAAQToBidderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemsResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemsResponse     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessageAAQToPartnerResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessageAAQToPartnerResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerInventoryFolderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerInventoryFolderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSecondChanceItemResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSecondChanceItemResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddOrderResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddOrderResponse     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserDisputesResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserDisputesResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddDisputeResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddDisputeResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  NotificationMessageType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationMessage  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblElm] }
  GetSellingManagerInventoryResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerInventoryResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerItemAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerItemAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerSaleRecordResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerSaleRecordResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerInventoryFolderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerInventoryFolderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerEmailLogResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerEmailLogResponse = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerAlertsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerAlertsResponse = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreCategoryUpdateStatusResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreCategoryUpdateStatusResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreResponse     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerSoldListingsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerSoldListingsResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerTemplateAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerTemplateAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSessionIDResponseType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSessionIDResponse = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerTemplatesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerTemplatesResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetNotificationPreferencesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetNotificationPreferencesResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetNotificationsUsageResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetNotificationsUsageResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBaySellingResponseType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBaySellingResponse = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBayRemindersResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBayRemindersResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerDashboardResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerDashboardResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetOrderTransactionsResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetOrderTransactionsResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetPromotionalSaleDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetPromotionalSaleDetailsResponse = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetOrdersResponseType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetOrdersResponse    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreCustomPageResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreCustomPageResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GeteBayDetailsResponseType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GeteBayDetailsResponse = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RelistItemResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RelistItemResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RelistFixedPriceItemResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RelistFixedPriceItemResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RemoveFromWatchListResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RemoveFromWatchListResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RespondToFeedbackResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RespondToFeedbackResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  LeaveFeedbackResponseType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  LeaveFeedbackResponse = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GeteBayOfficialTimeResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GeteBayOfficialTimeResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  PlaceOfferResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  PlaceOfferResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  MoveSellingManagerInventoryFolderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  MoveSellingManagerInventoryFolderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetTokenStatusResponseType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetTokenStatusResponse = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetTaxTableResponseType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetTaxTableResponse  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserResponse      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserContactDetailsResponseType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserContactDetailsResponse = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreOptionsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreOptionsResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSuggestedCategoriesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSuggestedCategoriesResponse = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStorePreferencesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStorePreferencesResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetVeROReasonCodeDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetVeROReasonCodeDetailsResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetVeROReportStatusResponseType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetVeROReportStatusResponse = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserPreferencesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserPreferencesResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  CompleteSaleResponseType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  CompleteSaleResponse = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ConfirmIdentityResponseType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ConfirmIdentityResponse = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteMyMessagesResponseType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteMyMessagesResponse = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerInventoryFolderResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerInventoryFolderResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddToItemDescriptionResponseType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddToItemDescriptionResponse = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerProductResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerProductResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerTemplateResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerTemplateResponse = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddTransactionConfirmationItemResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddTransactionConfirmationItemResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddToWatchListResponseType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddToWatchListResponse = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndItemResponse      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndFixedPriceItemResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndFixedPriceItemResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndItemsResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndItemsResponse     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ExtendSiteHostedPicturesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ExtendSiteHostedPicturesResponse = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  FetchTokenResponseType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  FetchTokenResponse   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerProductResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerProductResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerItemAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerItemAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DisableUnpaidItemAssistanceResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DisableUnpaidItemAssistanceResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerTemplateResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerTemplateResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerTemplateAutomationRuleResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerTemplateAutomationRuleResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddFixedPriceItemResponseType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddFixedPriceItemResponse = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemFromSellingManagerTemplateResponseType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemFromSellingManagerTemplateResponse = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemResponse      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddDisputeResponseResponseType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddDisputeResponseResponse = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ErrorType            = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DuplicateInvocationDetailsType = class;       { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AbstractRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SellerReverseDisputeRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SellerReverseDisputeRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SendInvoiceRequestType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SendInvoiceRequest   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerTemplateRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerTemplateRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SaveItemToSellingManagerTemplateRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SaveItemToSellingManagerTemplateRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RevokeTokenRequestType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RevokeTokenRequest   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetPromotionalSaleRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetPromotionalSaleRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RemoveFromWatchListRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RemoveFromWatchListRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddToWatchListRequestType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddToWatchListRequest = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetPromotionalSaleListingsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetPromotionalSaleListingsRequest = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetNotificationPreferencesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetNotificationPreferencesRequest = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetMessagePreferencesRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetMessagePreferencesRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerSaleRecordRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerSaleRecordRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseFixedPriceItemRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseFixedPriceItemRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseInventoryStatusRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseInventoryStatusRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseCheckoutStatusRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseCheckoutStatusRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerInventoryFolderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerInventoryFolderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseSellingManagerProductRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseSellingManagerProductRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseMyMessagesFoldersRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseMyMessagesFoldersRequest = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseItemRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseItemRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ReviseMyMessagesRequestType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ReviseMyMessagesRequest = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ValidateChallengeInputRequestType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ValidateChallengeInputRequest = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ValidateTestUserRegistrationRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ValidateTestUserRegistrationRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  UploadSiteHostedPicturesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  UploadSiteHostedPicturesRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetUserPreferencesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetUserPreferencesRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddSecondChanceItemRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddSecondChanceItemRequest = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyRelistItemRequestType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyRelistItemRequest = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddItemRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddItemRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VeROReportItemsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VeROReportItemsRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  VerifyAddFixedPriceItemRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  VerifyAddFixedPriceItemRequest = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetShippingDiscountProfilesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetShippingDiscountProfilesRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerTemplateAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerTemplateAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreRequest      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerFeedbackOptionsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerFeedbackOptionsRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetSellingManagerItemAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetSellingManagerItemAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetTaxTableRequestType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetTaxTableRequest   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStorePreferencesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStorePreferencesRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetUserNotesRequestType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetUserNotesRequest  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreCategoriesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreCategoriesRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  SetStoreCustomPageRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  SetStoreCustomPageRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoryFeaturesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoryFeaturesRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerListRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerListRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoriesRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoriesRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetChallengeTokenRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetChallengeTokenRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCharitiesRequestType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCharitiesRequest  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategoryMappingsRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategoryMappingsRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetCategorySpecificsRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetCategorySpecificsRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetBidderListRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetBidderListRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAdFormatLeadsRequestType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAdFormatLeadsRequest = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAllBiddersRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAllBiddersRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RespondToBestOfferRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RespondToBestOfferRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetBestOffersRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetBestOffersRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetApiAccessRulesRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetApiAccessRulesRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMemberMessagesRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMemberMessagesRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMessagePreferencesRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMessagePreferencesRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerTransactionsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerTransactionsRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetOrderTransactionsRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetOrderTransactionsRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemTransactionsRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemTransactionsRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemsAwaitingFeedbackRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemsAwaitingFeedbackRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBayBuyingRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBayBuyingRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyMessagesRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyMessagesRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetDisputeRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetDisputeRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetDescriptionTemplatesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetDescriptionTemplatesRequest = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetClientAlertsAuthTokenRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetClientAlertsAuthTokenRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetContextualKeywordsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetContextualKeywordsRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemShippingRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemShippingRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  PlaceOfferRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  PlaceOfferRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetItemRequest       = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  LeaveFeedbackRequestType = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  LeaveFeedbackRequest = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetFeedbackRequestType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetFeedbackRequest   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetAccountRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetAccountRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessagesAAQToBidderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessagesAAQToBidderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddOrderRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddOrderRequest      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessageRTQRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessageRTQRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddMemberMessageAAQToPartnerRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddMemberMessageAAQToPartnerRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerInventoryFolderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerInventoryFolderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerProductRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerProductRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddTransactionConfirmationItemRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddTransactionConfirmationItemRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerSaleRecordRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerSaleRecordRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerEmailLogRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerEmailLogRequest = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreRequest      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerEventsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerEventsRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RespondToFeedbackRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RespondToFeedbackRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSecondChanceItemRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSecondChanceItemRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemsRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemsRequest      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddDisputeResponseRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddDisputeResponseRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DisableUnpaidItemAssistanceRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DisableUnpaidItemAssistanceRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetNotificationsUsageRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetNotificationsUsageRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetOrdersRequestType = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetOrdersRequest     = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserDisputesRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserDisputesRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetVeROReportStatusRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetVeROReportStatusRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemFromSellingManagerTemplateRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemFromSellingManagerTemplateRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddDisputeRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddDisputeRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerInventoryRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerInventoryRequest = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerInventoryFolderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerInventoryFolderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerItemAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerItemAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerAlertsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerAlertsRequest = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreCustomPageRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreCustomPageRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreCategoryUpdateStatusRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreCategoryUpdateStatusRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerTemplateAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerTemplateAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerSoldListingsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerSoldListingsRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellingManagerTemplatesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellingManagerTemplatesRequest = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetShippingDiscountProfilesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetShippingDiscountProfilesRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSessionIDRequestType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSessionIDRequest  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetNotificationPreferencesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetNotificationPreferencesRequest = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBaySellingRequestType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBaySellingRequest = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetMyeBayRemindersRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetMyeBayRemindersRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSellerDashboardRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSellerDashboardRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetPromotionalSaleDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetPromotionalSaleDetailsRequest = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RelistItemRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RelistItemRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  RelistFixedPriceItemRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  RelistFixedPriceItemRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GeteBayOfficialTimeRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GeteBayOfficialTimeRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  MoveSellingManagerInventoryFolderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  MoveSellingManagerInventoryFolderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserRequest       = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetTokenStatusRequestType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetTokenStatusRequest = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserContactDetailsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserContactDetailsRequest = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStoreOptionsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStoreOptionsRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetStorePreferencesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetStorePreferencesRequest = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetTaxTableRequestType = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetTaxTableRequest   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetSuggestedCategoriesRequestType = class;    { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetSuggestedCategoriesRequest = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetVeROReasonCodeDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetVeROReasonCodeDetailsRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GeteBayDetailsRequestType = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GeteBayDetailsRequest = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  GetUserPreferencesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  GetUserPreferencesRequest = class;            { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ConfirmIdentityRequestType = class;           { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ConfirmIdentityRequest = class;               { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerInventoryFolderRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerInventoryFolderRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteMyMessagesRequestType = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteMyMessagesRequest = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddToItemDescriptionRequestType = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddToItemDescriptionRequest = class;          { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddSellingManagerTemplateRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddSellingManagerTemplateRequest = class;     { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  CompleteSaleRequestType = class;              { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  CompleteSaleRequest  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerItemAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerItemAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndItemsRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndItemsRequest      = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndItemRequest       = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  FetchTokenRequestType = class;                { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  FetchTokenRequest    = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  ExtendSiteHostedPicturesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  ExtendSiteHostedPicturesRequest = class;      { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerProductRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerProductRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerTemplateRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerTemplateRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  EndFixedPriceItemRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  EndFixedPriceItemRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  DeleteSellingManagerTemplateAutomationRuleRequestType = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  DeleteSellingManagerTemplateAutomationRuleRequest = class;   { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddFixedPriceItemRequestType = class;         { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddFixedPriceItemRequest = class;             { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  AddItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblCplx] }
  AddItemRequest       = class;                 { "urn:ebay:apis:eBLBaseComponents"[Lit][GblElm] }
  BotBlockRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BotBlockResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DisputeResolutionType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CustomSecurityHeaderType = class;             { "urn:ebay:apis:eBLBaseComponents"[Hdr][GblCplx] }
  RequesterCredentials = class;                 { "urn:ebay:apis:eBLBaseComponents"[Hdr][GblElm] }
  UserIdPasswordType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DisputeMessageType   = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AdFormatEnabledDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AttributeType        = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DeliveryURLDetailType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationEnableType = class;               { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ProStoresDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ApplicationDeliveryPreferencesType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AttributeConversionEnabledFeatureDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AverageRatingSummaryType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AverageRatingDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemRatingDetailsType = class;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemType             = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AttributeSetType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ValType              = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AdFormatLeadType     = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AdditionalCompatibilityEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddressAttributeType = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ApiAccessRuleType    = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AddressType          = class;                 { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AffiliateTrackingDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  AnnouncementMessageType = class;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }

  {$SCOPEDENUMS ON}
  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerAccountStatusCodeType = (Current, PastDue, OnHold, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerDashboardAlertSeverityCodeType = (Informational, Warning, StrongWarning, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SearchStandingStatusCodeType = (Raised, Standard, Lowered, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  WirelessCarrierIDCodeType = (
      Cingular, 
      TMobile, 
      Sprint, 
      Nextel, 
      Verizon, 
      CincinnatiBell, 
      Dobson, 
      Alltel, 
      Leap, 
      USCellular, 
      Movistar, 
      Amena, 
      Vodafone, 
      ATT, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SMSSubscriptionErrorCodeCodeType = (SMSAggregatorNotAvailable, PhoneNumberInvalid, PhoneNumberChanged, PhoneNumberCarrierChanged, UserRequestedUnregistration, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SMSSubscriptionUserStatusCodeType = (Registered, Unregistered, Pending, Failed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MerchandizingPrefCodeType = (OptIn, OptOut, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellereBayPaymentProcessStatusCodeType = (AcceptedUA, MustAcceptUA, eBayPaymentProcessEnabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerGuaranteeLevelCodeType = (NotEligible, Regular, Premium, Ultra, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UPSRateOptionCodeType = (UPSDailyRates, UPSOnDemandRates, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FedExRateOptionCodeType = (FedExStandardList, FedExCounter, FedExDiscounted, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisplayPayNowButtonCodeType = (ShowPayNowButtonForAllPaymentMethods, ShowPayNowButtonForPayPalOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreItemListSortOrderCodeType = (EndingFirst, NewlyListed, LowestPriced, HighestPriced, LowestPricedPlusShipping, HighestPricedPlusShipping, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  USPSRateOptionCodeType = (USPSDiscounted, USPSRetail, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AspectUsageCodeType = (Product, Instance, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProductRequiredCodeType = (Disabled, Enabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SelectionModeCodeType = (Automatic, Manual, Prefilled, SelectionOnly, FreeText, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ValueTypeCodeType = (
      Decimal, 
      Numeric, 
      Text, 
      ISBN, 
      UPC, 
      EAN, 
      Date, 
      CodiceFiscale, 
      DNI, 
      RussianPassport, 
      CPFTaxID, 
      TurkeyID, 
      NIE, 
      NIF, 
      CEDULA, 
      NIT, 
      DriverLicense, 
      CNPJ, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UsageConstraintCodeType = (Optional, Recommended, Required, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ValueFormatCodeType = (FullDate, PartialDate, Year, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  VariationPictureRuleCodeType = (Required, Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  VariationSpecificsRuleCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionItemPriceTypeCodeType = (AuctionPrice, BuyItNowPrice, BestOfferOnlyPrice, ClassifiedAdPrice, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionalSaleTypeCodeType = (PriceDiscountOnly, FreeShippingOnly, PriceDiscountAndFreeShipping, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DiscountCodeType = (Percentage, Price, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RefundStatusCodeType = (Successful, Pending, Failed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RequiredSellerActionCodeType = (
      ResolveeBPCase, 
      MarkAsShipped, 
      ContacteBayCS, 
      ResolvePPPIcase, 
      SetupPayoutMethod, 
      UpdatePayoutMethod, 
      None, 
      UploadTrackingInfo, 
      ResolveBuyerMessageInr, 
      ResolveBuyerMessageSnad, 
      CustomCode, 
      ResolveReturn
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StatusCodeType = (Active, Inactive, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RefundSourceTypeCodeType = (StoreCredit, PaymentRefund, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RefundingSourceTypeCodeType = (ScheduledPayout, Paypal, BankAccount, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RefundFailureCodeType = (PaypalBillingAgreementCanceled, PaypalRiskDeclinesTransaction, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RefundLineTypeCodeType = (PurchasePrice, ShippingPrice, Additional, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreFontSizeCodeType = (XXS, XS, S, M, L, XL, XXL, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreFontFaceCodeType = (Arial, Courier, Times, Verdana, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreCustomListingHeaderDisplayCodeType = (None, Full, FullAndLeftNavigationBar, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreCustomPageStatusCodeType = (Active, Delete, Inactive, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreHeaderStyleCodeType = (Full, Minimized, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreItemListLayoutCodeType = (ListView, GalleryView, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreSubscriptionLevelCodeType = (Close, Basic, Featured, Anchor, Starter, Enterprise, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PictureFormatCodeType = (JPG, GIF, PNG, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreCustomListingHeaderLinkCodeType = (None, AboutMePage, CustomPage, CustomCategory, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TokenStatusCodeType = (Active, Expired, RevokedByeBay, RevokedByUser, RevokedByApp, Invalid, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TopRatedProgramCodeType = (US, UK, DE, Global, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TaxIdentifierAttributeCodeType = (IssuingCountry, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TransactionReferenceCodeType = (ExternalTransactionID, MandateReferenceNumber, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DigitalStatusCodeType = (Inactive, Activated, Downloaded, Deactivated, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaidStatusCodeType = (
      NotPaid, 
      BuyerHasNotCompletedCheckout, 
      PaymentPendingWithPayPal, 
      PaidWithPayPal, 
      MarkedAsPaid, 
      PaymentPendingWithEscrow, 
      PaidWithEscrow, 
      EscrowPaymentCancelled, 
      PaymentPendingWithPaisaPay, 
      PaidWithPaisaPay, 
      PaymentPending, 
      PaymentPendingWithPaisaPayEscrow, 
      PaidWithPaisaPayEscrow, 
      PaisaPayNotPaid, 
      Refunded, 
      WaitingForCODPayment, 
      PaidCOD, 
      CustomCode, 
      Paid, 
      PayUponInvoice
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReturnStatusCodeType = (
      Invalid, 
      NotApplicable, 
      ReturnRequestPendingApproval, 
      ReturnRequestRejected, 
      ReturnOpen, 
      ReturnShipped, 
      ReturnDelivered, 
      ReturnClosedWithRefund, 
      ReturnClosedEscalated, 
      ReturnClosedNoRefund, 
      ReturnEscalatedPendingBuyer, 
      ReturnEscalatedPendingSeller, 
      ReturnEscalatedPendingCS, 
      ReturnEscalatedClosedWithRefund, 
      ReturnEscalatedClosedNoRefund, 
      ReturnEscalated, 
      ReturnRequestPending, 
      ReturnRequestClosedWithRefund, 
      ReturnRequestClosedNoRefund, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  InquiryStatusCodeType = (
      Invalid, 
      NotApplicable, 
      TrackInquiryPendingBuyerResponse, 
      TrackInquiryPendingSellerResponse, 
      TrackInquiryClosedWithRefund, 
      TrackInquiryClosedNoRefund, 
      TrackInquiryEscalatedPendingBuyer, 
      TrackInquiryEscalatedPendingSeller, 
      TrackInquiryEscalatedPendingCS, 
      TrackInquiryEscalatedClosedWithRefund, 
      TrackInquiryEscalatedClosedNoRefund, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CollectionMethodCodeType = (INVOICE, NET);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SummaryWindowPeriodCodeType = (Last24Hours, Last7Days, Last31Days, CurrentWeek, LastWeek, CurrentMonth, LastMonth, Last60Days, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreCustomHeaderLayoutCodeType = (NoHeader, CustomHeaderShown, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MerchDisplayCodeType = (DefaultTheme, StoreTheme, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SummaryFrequencyCodeType = (
      EverySunday, 
      EveryMonday, 
      EveryTuesday, 
      EveryWednesday, 
      EveryThursday, 
      EveryFriday, 
      EverySaturday, 
      MonthlyOn1st, 
      MonthlyOn2nd, 
      MonthlyOn3rd, 
      MonthlyOn4th, 
      MonthlyOn5th, 
      MonthlyOn6th, 
      MonthlyOn7th, 
      MonthlyOn8th, 
      MonthlyOn9th, 
      MonthlyOn10th, 
      MonthlyOn11th, 
      MonthlyOn12th, 
      MonthlyOn13th, 
      MonthlyOn14th, 
      MonthlyOn15th, 
      MonthlyOn16th, 
      MonthlyOn17th, 
      MonthlyOn18th, 
      MonthlyOn19th, 
      MonthlyOn20th, 
      MonthlyOn21st, 
      MonthlyOn22nd, 
      MonthlyOn23rd, 
      MonthlyOn24th, 
      MonthlyOn25th, 
      MonthlyOn26th, 
      MonthlyOn27th, 
      MonthlyOn28th, 
      MonthlyOn29th, 
      MonthlyOn30th, 
      MonthlyOn31st, 
      Every31Days, 
      Every60Days, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TaxTypeCodeType = (SalesTax, WasteRecyclingFee, GST, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TaxDescriptionCodeType = (SalesTax, ElectronicWasteRecyclingFee, TireRecyclingFee, GST, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerEmailSentStatusCodeType = (Successful, Failed, Pending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerAutoSecondChanceOfferTypeCodeType = (BidsGreaterThanAmount, BidsGreaterThanCostPlusAmount, BidsGreaterThanCostPlusPercentage, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerEmailTypeCodeType = (
      ManualEntry, 
      WinningBuyerEmail, 
      PaymentReminderEmail, 
      PaymentReceivedEmail, 
      RequestForShippingAddressEmail, 
      FeedbackReminderEmail, 
      ShipmentSentEmail, 
      PersonalizedEmail, 
      InvoiceNotification, 
      CustomEmailTemplate1, 
      CustomEmailTemplate2, 
      CustomEmailTemplate3, 
      CustomEmailTemplate4, 
      CustomEmailTemplate5, 
      CustomEmailTemplate6, 
      CustomEmailTemplate7, 
      CustomEmailTemplate8, 
      CustomEmailTemplate9, 
      CustomEmailTemplate10, 
      CustomEmailTemplate11, 
      CustomEmailTemplate12, 
      CustomEmailTemplate13, 
      CustomEmailTemplate14, 
      CustomEmailTemplate15, 
      CustomEmailTemplate16, 
      CustomEmailTemplate17, 
      CustomEmailTemplate18, 
      CustomEmailTemplate19, 
      CustomEmailTemplate20, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CheckoutStatusCodeType = (CheckoutComplete, CheckoutIncomplete, BuyerRequestsTotal, SellerResponded, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerSearchTypeCodeType = (BuyerUserID, BuyerEmail, BuyerFullName, ItemID, Title, ProductID, ProductName, CustomLabel, SaleRecordID, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerPaidStatusCodeType = (Paid, PartiallyPaid, Unpaid, Pending, Refunded, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerShippedStatusCodeType = (Shipped, Unshipped, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerAutoRelistOptionCodeType = (RelistImmediately, RelistAfterDaysHours, RelistAtSpecificTimeOfDay, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerAlertTypeCodeType = (Sold, Inventory, Automation, PaisaPay, General, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerAutomationPropertyTypeCodeType = (ItemListFailedAutomationRules, ItemRelistFailedAutomationRules, ItemListFailedSecondChanceOfferAutoRules, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PayoutMethodType = (PAYPAL, EFT, MONEYBOOKERS);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerPaisaPayPropertyTypeCodeType = (PaisaPayAwaitingShipment, PaisaPayTimeExtensionRequestDeclined, PaisaPayPendingReceived, PaisaPayRefundInitiated, PaisaPayTimeExtensionRequested, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerAutoRelistTypeCodeType = (RelistOnceIfNotSold, RelistContinuouslyUntilSold, RelistContinuously, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DayOfWeekCodeType = (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerGeneralPropertyTypeCodeType = (NegativeFeedbackReceived, UnpaidItemDispute, BadEmailTemplate, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingTypeCodeType = (Flat, Calculated, Freight, Free, NotSpecified, FlatDomesticCalculatedInternational, CalculatedDomesticFlatInternational, FreightFlat, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingCarrierCodeType = (
      UPS, 
      USPS, 
      FedEx, 
      DeutschePost, 
      DHL, 
      Hermes, 
      iLoxx, 
      Other, 
      ColiposteDomestic, 
      ColiposteInternational, 
      Chronopost, 
      Correos, 
      Seur, 
      Nacex, 
      FourPX, 
      FourPXCHINA, 
      FourPXExpress, 
      FourPXLTD, 
      SevenLSP, 
      A1CourierServices, 
      ABF, 
      AeroPost, 
      ALLIEDEXPRESS, 
      AMWST, 
      AnPost, 
      APC, 
      ARAMEX, 
      ARVATO, 
      ASM_, 
      AustraliaPost, 
      AustralianAirExpress, 
      AVRT, 
      BPost, 
      Bartolini, 
      BELGIANPOST, 
      BKNS, 
      BluePackage, 
      BusinessPost, 
      CanPar, 
      CENF, 
      CEVA, 
      ChinaPost, 
      Chronoexpres, 
      CHUKOU1, 
      ChunghwaPost, 
      CitiPost, 
      CityLink, 
      ClickandQuick, 
      CNWY, 
      Colissimo, 
      CollectPlus, 
      CPC, 
      DAIPost, 
      DayandRoss, 
      DBSchenker, 
      DHLEXPRESS, 
      DHLGlobalMail, 
      DHLEKB, 
      DHLG, 
      DieSchweizerischePost, 
      DPD, 
      DPXThailand, 
      Ducros, 
      EGO, 
      EMF, 
      Exapaq, 
      Fastway, 
      FASTWAYCOURIERS, 
      FedExSmartPost, 
      FLYT, 
      FLYTExpress, 
      FlytExpressUSDirectline, 
      FTFT, 
      FulfilExpressAccStation, 
      FulfilExpresseForCity, 
      FulfilExpressEverydaySource, 
      FulfilExpressiTrimming, 
      GLS, 
      HDUSA, 
      HomeDeliveryNetwork, 
      HongKongPost, 
      HUNTEREXPRESS, 
      IndiaPost, 
      IndonesiaPost, 
      Interlink, 
      InterPost, 
      IoInvio, 
      Iparcel, 
      IsraelPost, 
      JapanPost, 
      KIALA, 
      KoreaPost, 
      LAPOSTE, 
      Landmark, 
      LDSO, 
      LTL, 
      MALAYSIAPOST, 
      MannaFreight, 
      Metapack, 
      MNGTurkey, 
      MondialRelay, 
      MRW, 
      MSI, 
      NEMF, 
      ODFL, 
      OFFD, 
      ONTRACK, 
      OsterreichischePostAG, 
      OVNT, 
      ParcelPool, 
      Parcelforce, 
      Philpost, 
      Pilot, 
      PITD, 
      PocztaPolska, 
      Pocztex, 
      POSTITALIANO, 
      PostNL, 
      PostNordNorway, 
      PosteItaliane, 
      Prestige, 
      Quantium, 
      RETL, 
      RoyalMail, 
      RRUN, 
      SAIA, 
      SDA, 
      SFC, 
      SFCExpress, 
      SINGAPOREPOST, 
      Siodemka, 
      SioliandFontana, 
      SkynetMalaysia, 
      SMARTSEND, 
      Sogetras, 
      Spediamo, 
      SpeeDee, 
      StarTrack, 
      SuntekExpressLTD, 
      SwissPost, 
      TELE, 
      TEMANDO, 
      THAILANDPOST, 
      TNT, 
      TNTEXPRESS, 
      TNTPost, 
      Toll, 
      TPG, 
      TWW, 
      UBI, 
      UKMail, 
      UPSMailInnovations, 
      UPSC, 
      USFG, 
      USPSCeP, 
      USPSPMI, 
      VietnamPost, 
      VITR, 
      WATKINS, 
      Winit, 
      Wise, 
      WNdirect, 
      WPX, 
      YANWEN, 
      Yodel, 
      YRC, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingRateTypeCodeType = (OnDemand, DailyPickup, StandardList, Counter, Discounted, CommercialPlus, GoldSilver, PlatTitanium, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingServiceCodeType = (
      UPSGround, 
      UPS3rdDay, 
      UPS2ndDay, 
      UPSNextDay, 
      USPSPriority, 
      USPSParcel, 
      USPSStandardPost, 
      USPSMedia, 
      USPSFirstClass, 
      ShippingMethodStandard, 
      ShippingMethodExpress, 
      USPSExpressMail, 
      UPSNextDayAir, 
      UPS2DayAirAM, 
      USPSExpressMailFlatRateEnvelope, 
      USPSExpressMailPaddedFlatRateEnvelope, 
      USPSPriorityMailFlatRateEnvelope, 
      USPSPriorityMailSmallFlatRateBox, 
      USPSPriorityMailFlatRateBox, 
      USPSPriorityMailLargeFlatRateBox, 
      USPSPriorityMailPaddedFlatRateEnvelope, 
      USPSPriorityMailLegalFlatRateEnvelope, 
      USPSExpressMailLegalFlatRateEnvelope, 
      USPSPriorityMailRegionalBoxA, 
      USPSPriorityMailRegionalBoxB, 
      USPSPriorityMailRegionalBoxC, 
      USPSExpressMailFlatRateBox, 
      Other, 
      LocalDelivery, 
      NotSelected, 
      InternationalNotSelected, 
      StandardInternational, 
      ExpeditedInternational, 
      USPSGlobalExpress, 
      USPSGlobalPriority, 
      USPSEconomyParcel, 
      USPSEconomyLetter, 
      USPSAirmailLetter, 
      USPSAirmailParcel, 
      UPSWorldWideExpressPlus, 
      UPSWorldWideExpress, 
      UPSWorldWideExpedited, 
      UPSWorldwideSaver, 
      UPSStandardToCanada, 
      USPSExpressMailInternationalFlatRateEnvelope, 
      USPSExpressMailInternationalPaddedFlatRateEnvelope, 
      USPSPriorityMailInternationalFlatRateEnvelope, 
      USPSPriorityMailInternationalSmallFlatRateBox, 
      USPSPriorityMailInternationalFlatRateBox, 
      USPSPriorityMailInternationalLargeFlatRateBox, 
      USPSPriorityMailInternationalPaddedFlatRateEnvelope, 
      USPSPriorityMailInternationalLegalFlatRateEnvelope, 
      USPSExpressMailInternationalLegalFlatRateEnvelope, 
      USPSExpressMailInternationalFlatRateBox, 
      OtherInternational, 
      AT_StandardDispatch, 
      AT_InsuredDispatch, 
      AT_Writing, 
      AT_COD, 
      AT_ExpressOrCourier, 
      AT_InsuredExpressOrCourier, 
      AT_SpecialDispatch, 
      AT_InsuredSpecialDispatch, 
      AT_Sonstige, 
      AT_UnversicherterVersandInternational, 
      AT_VersicherterVersandInternational, 
      AT_SonstigerVersandInternational, 
      AT_UnversicherterExpressVersandInternational, 
      AT_VersicherterExpressVersandInternational, 
      AT_EconomyDeliveryFromAbroad, 
      AT_StandardDeliveryFromAbroad, 
      AT_ExpressDeliveryFromAbroad, 
      AT_TrackedDeliveryFromAbroad, 
      AU_Regular, 
      AU_Express, 
      AU_Registered, 
      AU_Courier, 
      AU_Other, 
      AU_EMSInternationalCourierParcels, 
      AU_EMSInternationalCourierDocuments, 
      AU_ExpressPostInternationalDocuments, 
      AU_AirMailInternational, 
      AU_EconomyAirInternational, 
      AU_SeaMailInternational, 
      AU_StandardInternational, 
      AU_ExpeditedInternational, 
      AU_OtherInternational, 
      AU_AusPostRegisteredPostInternationalPaddedBag1kg, 
      AU_AusPostRegisteredPostInternationalPaddedBag500g, 
      AU_AusPostRegisteredPostInternationalParcel, 
      AU_ExpeditedDeliveryFromOutsideAU, 
      AU_EconomyDeliveryFromOutsideAU, 
      AU_StandardDeliveryFromOutsideAU, 
      AU_AustralianAirExpressMetro15kg, 
      AU_AustralianAirExpressFlatRate5kg, 
      AU_AustralianAirExpressFlatRate3kg, 
      AU_AustralianAirExpressFlatRate1kg, 
      AU_ExpressDelivery, 
      AU_StandardDelivery, 
      AU_eBayAusPost3kgFlatRateSatchel, 
      AU_eBayAusPost500gFlatRateSatchel, 
      AU_Freight, 
      BEFR_StandardDelivery, 
      BEFR_PriorityDelivery, 
      BEFR_ParcelPost, 
      BEFR_RegisteredMail, 
      BEFR_Other, 
      BEFR_DePostInternational, 
      BEFR_UPSInternational, 
      BEFR_FedExInternational, 
      BEFR_DHLInternational, 
      BEFR_TPGPostTNTInternational, 
      BEFR_StandardInternational, 
      BEFR_ExpeditedInternational, 
      BEFR_OtherInternational, 
      BEFR_LaPosteInternational, 
      BEFR_LaPosteStandardShipping, 
      BEFR_LaPosteCertifiedShipping, 
      BEFR_LaPosteTaxipostLLS, 
      BEFR_LaPosteTaxipost24h, 
      BEFR_LaPosteTaxipostSecur, 
      BEFR_PostInternationalStandard, 
      BEFR_PostInternationalRegistered, 
      BEFR_TNTInternational, 
      BEFR_EconomyDeliveryFromAbroad, 
      BEFR_StandardDeliveryFromAbroad, 
      BEFR_ExpressDeliveryFromAbroad, 
      BEFR_TrackedDeliveryFromAbroad, 
      BENL_StandardDelivery, 
      BENL_PriorityDelivery, 
      BENL_ParcelPost, 
      BENL_RegisteredMail, 
      BENL_Other, 
      BENL_DePostInternational, 
      BENL_UPSInternational, 
      BENL_FedExInternational, 
      BENL_DHLInternational, 
      BENL_TPGPostTNTInternational, 
      BENL_StandardInternational, 
      BENL_ExpeditedInternational, 
      BENL_OtherInternational, 
      BENL_LaPosteInternational, 
      BENL_DePostStandardShipping, 
      BENL_DePostCertifiedShipping, 
      BENL_DePostTaxipostLLS, 
      BENL_DePostTaxipost24h, 
      BENL_DePostTaxipostSecur, 
      BENL_OtherShippingMethods, 
      BENL_PostInternationalStandard, 
      BENL_PostInternationalRegistered, 
      BENL_TNTInternational, 
      BENL_EconomyDeliveryFromAbroad, 
      BENL_StandardDeliveryFromAbroad, 
      BENL_ExpressDeliveryFromAbroad, 
      BENL_TrackedDeliveryFromAbroad, 
      CA_StandardDelivery, 
      CA_ExpeditedDelivery, 
      CA_PostLettermail, 
      CA_PostRegularParcel, 
      CA_PostExpeditedParcel, 
      CA_PostXpresspost, 
      CA_PostPriorityCourier, 
      CanadaPostExpeditedFlatRateBox, 
      CA_PostExpeditedFlatRateBox, 
      CA_StandardInternational, 
      CA_ExpeditedInternational, 
      CA_OtherInternational, 
      CA_PostExpeditedParcelUSA, 
      CA_PostSmallPacketsUSA, 
      CA_PostXpresspostUSA, 
      CA_PostXpresspostInternational, 
      CA_PostInternationalParcelSurface, 
      CA_PostInternationalParcelAir, 
      CA_SmallPacketsInternational, 
      CA_PurolatorInternational, 
      CA_PostSmallPacketsUSAGround, 
      CA_PostSmallPacketsUSAAir, 
      CA_SmallPacketsInternationalGround, 
      CA_SmallPacketsInternationalAir, 
      CA_PostUSALetterPost, 
      CA_PostInternationalLetterPost, 
      CA_PostExpeditedFlatRateBoxUSA, 
      CA_UPSExpressCanada, 
      CA_UPSExpressSaverCanada, 
      CA_UPSExpeditedCanada, 
      CA_UPSStandardCanada, 
      CA_UPSExpressUnitedStates, 
      CA_UPSExpeditedUnitedStates, 
      CA_UPS3DaySelectUnitedStates, 
      CA_UPSStandardUnitedStates, 
      CA_UPSWorldWideExpress, 
      CA_UPSWorldWideExpedited, 
      CA_PriorityWorldwide, 
      CanadaPostExpeditedFlatRateBoxUSA, 
      CA_PostTrackedPacketsUSA, 
      CA_PostTrackedPacketsInternational, 
      CA_Freight, 
      CH_StandardDispatchAPost, 
      CH_StandardDispatchBPost, 
      CH_InsuredDispatch, 
      CH_Writing, 
      CH_COD, 
      CH_ExpressOrCourier, 
      CH_InsuredExpressOrCourier, 
      CH_SpecialDispatch, 
      CH_InsuredSpecialDispatch, 
      CH_Sonstige, 
      CH_SonstigerVersandInternational, 
      CH_EconomySendungenInternational, 
      CH_PrioritySendungenInternational, 
      CH_UrgentSendungenInternational, 
      CH_EconomyDeliveryFromAbroad, 
      CH_StandardDeliveryFromAbroad, 
      CH_ExpressDeliveryFromAbroad, 
      CH_TrackedDeliveryFromAbroad, 
      CN_PersonalDelivery, 
      CN_RegularPackage, 
      CN_DeliveryCompanyExpress, 
      CN_PostOfficeExpress, 
      CN_Others, 
      CN_FastPostOffice, 
      CN_ExpressDeliverySameCity, 
      CN_ExpressDeliveryOtherCities, 
      CN_StandardInternational, 
      CN_ExpeditedInternational, 
      CN_OtherInternational, 
      CN_CODInternational, 
      CN_StandardMailingInternational, 
      CN_RegularLogisticsInternational, 
      CN_EMSInternational, 
      CN_OthersInternational, 
      DE_StandardDispatch, 
      DE_InsuredDispatch, 
      DE_Writing, 
      DE_COD, 
      DE_ExpressOrCourier, 
      DE_InsuredExpressOrCourier, 
      DE_SpecialDispatch, 
      DE_InsuredSpecialDispatch, 
      DE_UnversicherterVersand, 
      DE_DeutschePostBrief, 
      DE_eBayDHLPaket24x7, 
      DE_DHLPostpaket, 
      DE_DHLPackchen, 
      DE_DeutschePostWarensendung, 
      DE_DeutschePostBuchersendung, 
      DE_HermesPaketUnversichert, 
      DE_HermesPaketVersichert, 
      DE_IloxxTransportXXL, 
      DE_IloxxUbernachtExpress, 
      DE_IloxxStandard, 
      DE_Sonstige, 
      DE_UnversicherterVersandInternational, 
      DE_VersicherterVersandInternational, 
      DE_DHLPostpaketInternational, 
      DE_DHLPackchenInternational, 
      DE_SonstigerVersandInternational, 
      DE_UnversicherterExpressVersandInternational, 
      DE_VersicherterExpressVersandInternational, 
      DE_DeutschePostBriefLandInternational, 
      DE_DeutschePostBriefLuftInternational, 
      DE_IloxxEuropaInternational, 
      DE_IloxxWorldWideInternational, 
      DE_Paket, 
      DE_Express, 
      DE_DHLPaket, 
      DE_DPBuecherWarensendung, 
      DE_HermesPaket, 
      DE_IloxxTransport, 
      DE_SonstigeDomestic, 
      DE_Einschreiben, 
      DE_Nachname, 
      DE_SpecialDelivery, 
      DE_UPS, 
      DE_DPD, 
      DE_GLS, 
      DE_PaketInternational, 
      DE_DHLPaketInternational, 
      DE_DHLPaketIntlExpress, 
      DE_SonstigeInternational, 
      DE_ExpressInternational, 
      DE_DPBriefInternational, 
      DE_IloxxTransportInternational, 
      DE_HermesPaketInternational, 
      DE_UPSInternational, 
      DE_DPDInternational, 
      DE_GLSInternational, 
      DE_eBayHermesPaketShop2ShopKaeufer, 
      DE_HermesPaketShop2ShopKaeufer, 
      DE_eBayHermesPaketShop2Shop, 
      DE_HermesPaketShop2Shop, 
      DE_HermesPaketSperrgut, 
      DE_eBayHermesPaketSperrgutShop2Shop, 
      DE_DHLPaeckchenPackstation, 
      DE_DHLPaketPackstation, 
      DE_eBayDHLPaeckchen, 
      DE_DHLStarPaeckchen, 
      DE_TrackedDeliveryFromAbroad, 
      ES_CartasNacionalesHasta20, 
      ES_CartasNacionalesDeMas20, 
      ES_CartasInternacionalesHasta20, 
      ES_CartasInternacionalesDeMas20, 
      ES_PaqueteAzulHasta2kg, 
      ES_PaqueteAzulDeMas2kg, 
      ES_PaqueteInternacionalEconomico, 
      ES_Urgente, 
      ES_Otros, 
      ES_StandardInternational, 
      ES_ExpeditedInternational, 
      ES_OtherInternational, 
      ES_CartasPostalInternational, 
      ES_EmsPostalExpressInternational, 
      ES_EconomyPacketInternational, 
      ES_EconomyDeliveryFromAbroad, 
      ES_StandardDeliveryFromAbroad, 
      ES_ExpressDeliveryFromAbroad, 
      ES_TrackedDeliveryFromAbroad, 
      ES_ENTREGA_KIALA_8KG, 
      FR_ChronoposteInternationalClassic, 
      FR_ColiposteColissimoDirect, 
      FR_DHLExpressEuropack, 
      FR_UPSStandard, 
      FR_PostOfficeLetter, 
      FR_PostOfficeLetterFollowed, 
      FR_PostOfficeLetterRecommended, 
      FR_ColiposteColissimo, 
      FR_ColiposteColissimoRecommended, 
      FR_UPSStandardAgainstRefund, 
      FR_Autre, 
      FR_Ecopli, 
      FR_Colieco, 
      FR_AuteModeDenvoiDeColis, 
      FR_RemiseEnMainPropre, 
      FR_StandardInternational, 
      FR_ExpeditedInternational, 
      FR_OtherInternational, 
      FR_LaPosteInternationalPriorityCourier, 
      FR_LaPosteInternationalEconomyCourier, 
      FR_LaPosteColissimoInternational, 
      FR_LaPosteColisEconomiqueInternational, 
      FR_LaPosteColissimoEmballageInternational, 
      FR_ChronopostClassicInternational, 
      FR_ChronopostPremiumInternational, 
      FR_UPSStandardInternational, 
      FR_UPSExpressInternational, 
      FR_DHLInternational, 
      FR_LaPosteLetterMax, 
      FR_KIALA_DELIVERY, 
      FR_TrackedDeliveryFromAbroad, 
      IN_Regular, 
      IN_Express, 
      IN_NationalCOD, 
      IN_Courier, 
      IN_LocalCOD, 
      IN_StandardInternational, 
      IN_ExpeditedInternational, 
      IN_OtherInternational, 
      IN_FlatRateCOD, 
      IN_BuyerPicksUpAndPays, 
      IT_RegularMail, 
      IT_PriorityMail, 
      IT_MailRegisteredLetter, 
      IT_MailRegisteredLetterWithMark, 
      IT_InsuredMail, 
      IT_QuickMail, 
      IT_RegularPackage, 
      IT_QuickPackage1, 
      IT_QuickPackage3, 
      IT_ExpressCourier, 
      IT_ExpressPackageMaxi, 
      IT_StandardInternational, 
      IT_ExpeditedInternational, 
      IT_OtherInternational, 
      IT_TrackedDeliveryFromAbroad, 
      NL_StandardDelivery, 
      NL_ParcelPost, 
      NL_RegisteredMail, 
      NL_Other, 
      NL_TPGPostTNTInternational, 
      NL_UPSInternational, 
      NL_FedExInternational, 
      NL_DHLInternational, 
      NL_DPDGBRInternational, 
      NL_GLSBusinessInternational, 
      NL_StandardInternational, 
      NL_ExpeditedInternational, 
      NL_OtherInternational, 
      NL_EconomyDeliveryFromAbroad, 
      NL_StandardDeliveryFromAbroad, 
      NL_ExpressDeliveryFromAbroad, 
      NL_TrackedDeliveryFromAbroad, 
      TW_RegisteredMail, 
      TW_UnregisteredMail, 
      TW_COD, 
      TW_DwellingMatchPost, 
      TW_DwellingMatchCOD, 
      TW_SelfPickup, 
      TW_ParcelPost, 
      TW_ExpressMail, 
      TW_Other, 
      TW_CPInternationalLetterPost, 
      TW_CPInternationalParcelPost, 
      TW_CPInternationalRegisteredLetterPost, 
      TW_CPInternationalRegisteredParcelPost, 
      TW_CPInternationalEMS, 
      TW_CPInternationalOceanShippingParcel, 
      TW_FedExInternationalPriority, 
      TW_FedExInternationalEconomy, 
      TW_UPSWorldwideExpedited, 
      TW_UPSWorldwideExpress, 
      TW_UPSWorldwideExpressPlus, 
      TW_OtherInternational, 
      UK_RoyalMailFirstClassStandard, 
      UK_RoyalMailSecondClassStandard, 
      UK_RoyalMailFirstClassRecorded, 
      UK_RoyalMailSecondClassRecorded, 
      UK_RoyalMailSpecialDelivery, 
      UK_RoyalMailStandardParcel, 
      UK_Parcelforce24, 
      UK_Parcelforce48, 
      UK_OtherCourier, 
      UK_myHermesDoorToDoorService, 
      UK_CollectDropAtStoreDeliveryToDoor, 
      UK_SellersStandardRate, 
      UK_CollectInPerson, 
      UK_SellersStandardInternationalRate, 
      UK_RoyalMailAirmailInternational, 
      UK_RoyalMailAirsureInternational, 
      UK_RoyalMailSurfaceMailInternational, 
      UK_RoyalMailInternationalSignedFor, 
      UK_RoyalMailHMForcesMailInternational, 
      UK_ParcelForceInternationalDatapost, 
      UK_ParcelForceIreland24International, 
      UK_ParcelForceEuro48International, 
      UK_ParcelForceInternationalScheduled, 
      UK_OtherCourierOrDeliveryInternational, 
      UK_CollectInPersonInternational, 
      UK_ParcelForceIntlExpress, 
      UK_ParcelForceIntlValue, 
      UK_ParcelForceIntlEconomy, 
      UK_TrackedDeliveryFromAbroad, 
      UK_IntlTrackedPostage, 
      IE_SellersStandardRate, 
      IE_FirstClassLetterService, 
      IE_SwiftPostNational, 
      IE_RegisteredPost, 
      IE_EMSSDSCourier, 
      IE_EconomySDSCourier, 
      IE_OtherCourier, 
      IE_CollectionInPerson, 
      IE_SellersStandardRateInternational, 
      IE_InternationalEconomyService, 
      IE_InternationalPriorityService, 
      IE_SwiftPostExpressInternational, 
      IE_SwiftPostInternational, 
      IE_EMSSDSCourierInternational, 
      IE_EconomySDSCourierInternational, 
      IE_OtherCourierInternational, 
      IE_CollectionInPersonInternational, 
      IE_EconomyDeliveryFromAbroad, 
      IE_StandardDeliveryFromAbroad, 
      IE_ExpressDeliveryFromAbroad, 
      IE_TrackedDeliveryFromAbroad, 
      PL_DomesticRegular, 
      PL_DomesticSpecial, 
      PL_EconomyDeliveryFromAbroad, 
      PL_StandardDeliveryFromAbroad, 
      PL_ExpressDeliveryFromAbroad, 
      PL_TrackedDeliveryFromAbroad, 
      FreightShipping, 
      FreightOtherShipping, 
      Freight, 
      FreightShippingInternational, 
      USPSGround, 
      ShippingMethodOvernight, 
      CustomCode, 
      USPSPriorityFlatRateEnvelope, 
      USPSPriorityFlatRateBox, 
      USPSGlobalPrioritySmallEnvelope, 
      USPSGlobalPriorityLargeEnvelope, 
      USPSExpressFlatRateEnvelope, 
      UPSWorldWideExpressBox10kg, 
      UPSWorldWideExpressBox25kg, 
      UPSWorldWideExpressPlusBox10kg, 
      UPSWorldWideExpressPlusBox25kg, 
      HK_LocalPickUpOnly, 
      HK_LocalCourier, 
      HK_DomesticRegularShipping, 
      HK_DomesticSpecialShipping, 
      HK_InternationalRegularShipping, 
      HK_InternationalSpecialShipping, 
      SG_LocalPickUpOnly, 
      SG_LocalCourier, 
      SG_DomesticStandardMail, 
      SG_DomesticNonStandardMail, 
      SG_DomesticSpeedpostIslandwide, 
      SG_InternationalStandardMail, 
      SG_InternationalExpressMailService, 
      SG_InternationalCourier, 
      BENL_DePostZendingNONPRIOR, 
      BENL_DePostZendingPRIOR, 
      BENL_DePostZendingAangetekend, 
      BENL_KilopostPakje, 
      BENL_Taxipost, 
      BENL_KialaAfhaalpunt, 
      BENL_VasteKostenStandaardVerzending, 
      BENL_VasteKostenVersneldeVerzending, 
      BENL_VerzekerdeVerzending, 
      BEFR_LaPosteEnvoiNONPRIOR, 
      BEFR_LaPosteEnvoiPRIOR, 
      BEFR_LaPosteEnvoiRecommande, 
      BEFR_PaquetKilopost, 
      BEFR_Taxipost, 
      BEFR_PointRetraitKiala, 
      BEFR_LivraisonStandardPrixforFaitaire, 
      BEFR_LivraisonExpressPrixforFaitaire, 
      BEFR_LivraisonSecurise, 
      BENL_DePostZendingPRIORInternational, 
      BENL_DePostZendingNONPRIORInternational, 
      BENL_DePostZendingAangetekendInternational, 
      BENL_KilopostPakjeInternational, 
      BENL_TaxipostExpressverzending, 
      BENL_VerzekerdeVerzendingInternational, 
      BEFR_LaPosteenvoiePRIOR, 
      BEFR_LaPosteenvoieNONPRIOR, 
      BEFR_LaPosteenvoieRecommande, 
      BEFR_PaquetKilopostInternationale, 
      BEFR_ExpressTaxipost, 
      BEFR_LivraisonStandardInternationalePrixforFaitaire, 
      BEFR_LivraisonExpressInternationalePrixforFaitaire, 
      BEFR_LivraisonSecuriseInternational, 
      FR_Chronopost, 
      UK_RoyalMailSpecialDeliveryNextDay, 
      CA_PostLightPacketInternational, 
      CA_PostLightPacketUSA, 
      PL_DHLInternational, 
      PL_InternationalRegular, 
      PL_InternationalSpecial, 
      PL_UPSInternational, 
      CAFR_StandardDelivery, 
      CAFR_ExpeditedDelivery, 
      CAFR_PostLettermail, 
      CAFR_PostRegularParcel, 
      CAFR_PostExpeditedParcel, 
      CAFR_PostXpresspost, 
      CAFR_PostPriorityCourier, 
      CAFR_StandardInternational, 
      CAFR_ExpeditedInternational, 
      CAFR_OtherInternational, 
      CAFR_PostExpeditedParcelUSA, 
      CAFR_PostSmallPacketsUSA, 
      CAFR_PostXpresspostUSA, 
      CAFR_PostXpresspostInternational, 
      CAFR_PostInternationalParcelSurface, 
      CAFR_PostInternationalParcelAir, 
      CAFR_SmallPacketsInternational, 
      CAFR_PurolatorInternational, 
      CAFR_PostSmallPacketsUSAGround, 
      CAFR_PostSmallPacketsUSAAir, 
      CAFR_SmallPacketsInternationalGround, 
      CAFR_SmallPacketsInternationalAir, 
      CAFR_PostUSALetterPost, 
      CAFR_PostInternationalLetterPost, 
      CAFR_UPSExpressCanada, 
      CAFR_UPSExpressSaverCanada, 
      CAFR_UPSExpeditedCanada, 
      CAFR_UPSStandardCanada, 
      CAFR_UPSExpressUnitedStates, 
      CAFR_UPSExpeditedUnitedStates, 
      CAFR_UPS3DaySelectUnitedStates, 
      CAFR_UPSStandardUnitedStates, 
      CAFR_UPSWorldWideExpress, 
      CAFR_UPSWorldWideExpedited, 
      UK_RoyalMailSpecialDelivery9am, 
      USPSFirstClassMailInternational, 
      USPSPriorityMailInternational, 
      USPSExpressMailInternational, 
      CH_StandardInternational, 
      CH_ExpeditedInternational, 
      CH_SonstigerVersandSieheArtikelbeschreibung, 
      TW_StandardInternationalFixedRate, 
      TW_ExpeditedInternationalFixedRate, 
      USPSGlobalExpressGuaranteed, 
      AU_RegularWithInsurance, 
      AU_ExpressWithInsurance, 
      DE_DeutschePostWarensendungInternational, 
      DE_DeutschePostByendung, 
      DE_HermesPaketUnversichertInternational, 
      DE_HermesPaketVersichertInternational, 
      DE_iLoxxTransportXXLInternational, 
      DE_iLoxxUbernachtExpressInternational, 
      DE_iLoxxStandardInternational, 
      DE_StandardInternational, 
      DE_ExpeditedInternational, 
      DE_DeutschePostBriefIntlEcon, 
      DE_DeutschePostBriefIntlPri, 
      AT_BitteTreffenSieEineAuswahl, 
      AT_EinschreibenVersandInklEinschreibengebuhr, 
      AT_NachnahmeVersandInklNachnahmegebuhr, 
      AT_ExpressOrCourierInternational, 
      AT_InsuredExpressOrCourierInternational, 
      AT_SpecialDispatchInternational, 
      AT_InsuredSpecialDispatchInternational, 
      AT_StandardInternational, 
      AT_ExpeditedInternational, 
      AT_OtherInternationalShipping, 
      CH_BitteTreffenSieEineAuswahl, 
      CH_UnversicherterVersand, 
      CH_VersicherterVersand, 
      CH_EinschreibenVersandInklEinschreibengebuhr, 
      CH_NachnahmeVersandInklNachnahmegebuhr, 
      CH_ExpressOrCourierInternational, 
      CH_InsuredExpressOrCourierInternational, 
      CH_SonderversandZBSperrgutKFZ, 
      CH_VersicherterSonderversandZBSperrgutKFZ, 
      CH_StandardversandAPostPriority, 
      CH_StandardversandBPostEconomy, 
      DE_BitteTreffenSieEineAuswahl, 
      DE_EinschreibenVersandInklEinschreibengebuhr, 
      DE_NachnahmeVersandInklNachnahmegebuhr, 
      DE_ExpressOrCourierInternational, 
      DE_InsuredExpressOrCourierInternational, 
      DE_SonderversandZBMobelKFZ, 
      DE_VersicherterSonderversandZBMobelKFZ, 
      DE_DeutschePostBriefInternational, 
      IE_StandardInternationalFlatRatePostage, 
      IE_ExpeditedInternationalFlatRatePostage, 
      IE_OtherInternationalPostage, 
      UK_StandardInternationalFlatRatePostage, 
      UK_ExpeditedInternationalFlatRatePostage, 
      UK_OtherInternationalPostage, 
      FR_ChronopostChronoRelais, 
      FR_Chrono10, 
      FR_Chrono13, 
      FR_Chrono18, 
      FR_ChronopostExpressInternational, 
      Pickup, 
      Delivery, 
      CA_Pickup, 
      DE_Pickup, 
      AU_Pickup, 
      AU_SmallParcels, 
      AU_SmallParcelWithTracking, 
      AU_SmallParcelWithTrackingAndSignature, 
      AU_RegularParcelWithTracking, 
      AU_RegularParcelWithTrackingAndSignature, 
      AU_PrePaidExpressPostSatchel5kg, 
      AU_PrePaidParcelPostSatchels500g, 
      AU_PrePaidParcelPostSatchels3kg, 
      AU_PrePaidParcelPostSatchels5kg, 
      AU_PrePaidExpressPostSatchel500g, 
      AU_PrePaidExpressPostSatchel3kg, 
      AU_PrePaidExpressPostPlatinum500g, 
      AU_PrePaidExpressPostPlatinum3kg, 
      AU_ExpressCourierInternational, 
      AU_ExpressPostInternational, 
      AU_PrePaidExpressPostInternationalEnvelopeC5, 
      AU_PrePaidExpressPostInternationalEnvelopeB4, 
      AU_PrePaidExpressPostInternationalSatchels2kg, 
      AU_PrePaidExpressPostInternationalSatchels3kg, 
      AU_PrePaidExpressPostInternationalBox5kg, 
      AU_PrePaidExpressPostInternationalBox10kg, 
      AU_PrePaidExpressPostInternationalBox20kg, 
      AU_RegisteredParcelPost, 
      AU_RegisteredSmallParcel, 
      AU_RegisteredParcelPostPrepaidSatchel500g, 
      AU_RegisteredParcelPostPrepaidSatchel3kg, 
      AU_RegisteredParcelPostPrepaidSatchel5kg, 
      AU_ExpressPostSatchel500g, 
      AU_ExpressPostSatchel3kg, 
      FR_Pickup, 
      AT_Pickup, 
      BENL_Pickup, 
      BEFR_Pickup, 
      CH_Pickup, 
      IT_Pickup, 
      NL_Pickup, 
      PL_Pickup, 
      ES_Pickup, 
      SG_Delivery, 
      UK_OtherCourier24, 
      UK_OtherCourier48, 
      UK_OtherCourier3Days, 
      UK_OtherCourier5Days, 
      Courier, 
      FedExPriorityOvernight, 
      FedExStandardOvernight, 
      FedEx2Day, 
      FedExGround, 
      FedExHomeDelivery, 
      FedExExpressSaver, 
      FedExGroundDisabled, 
      FedExHomeDeliveryDisabled, 
      FedExInternationalFirst, 
      FedExInternationalPriority, 
      FedExInternationalEconomy, 
      FedExInternationalGround, 
      EconomyShippingFromOutsideUS, 
      ExpeditedShippingFromOutsideUS, 
      StandardShippingFromOutsideUS, 
      UK_EconomyShippingFromOutside, 
      UK_ExpeditedShippingFromOutside, 
      UK_StandardShippingFromOutside, 
      DE_SparversandAusDemAusland, 
      DE_StandardversandAusDemAusland, 
      DE_ExpressversandAusDemAusland, 
      DE_DHL2KGPaket, 
      InternationalPriorityShipping, 
      SameDayShipping, 
      UK_RoyalMailNextDay, 
      UK_RoyalMailTracked, 
      eBayNowImmediateDelivery
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingServiceType = (Domestic, International);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShipmentStatusCodeType = (Active, Canceled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UnpaidItemStatusTypeCodeType = (FinalValueFeeDenied, FinalValueFeeCredited, FinalValueFeeEligible, AwaitingSellerResponse, AwaitingBuyerResponse, UnpaidItemFiled, UnpaidItemEligible, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingFeatureCodeType = (DeliveryConfirmation, SignatureConfirmation, StealthPostage, SaturdayDelivery, Other, NotDefined, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShipmentDeliveryStatusCodeType = (
      Created, 
      DroppedOff, 
      InTransit, 
      Delivered, 
      Returned, 
      Canceled, 
      LabelPrinted, 
      Unconfirmed, 
      Unknown, 
      Error, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingPackageCodeType = (
      None, 
      Letter, 
      LargeEnvelope, 
      USPSLargePack, 
      VeryLargePack, 
      ExtraLargePack, 
      UPSLetter, 
      USPSFlatRateEnvelope, 
      PackageThickEnvelope, 
      Roll, 
      Europallet, 
      OneWayPallet, 
      BulkyGoods, 
      Furniture, 
      Cars, 
      Motorbikes, 
      Caravan, 
      IndustryVehicles, 
      ParcelOrPaddedEnvelope, 
      SmallCanadaPostBox, 
      MediumCanadaPostBox, 
      LargeCanadaPostBox, 
      SmallCanadaPostBubbleMailer, 
      MediumCanadaPostBubbleMailer, 
      LargeCanadaPostBubbleMailer, 
      PaddedBags, 
      ToughBags, 
      ExpandableToughBags, 
      MailingBoxes, 
      Winepak, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeaturedFirstCodeType = (Enabled, Disabled, PowerSellerOnly, TopRatedSellerOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeaturedPlusCodeType = (Enabled, Disabled, PowerSellerOnly, TopRatedSellerOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  HomePageFeaturedCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  HighlightCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GiftIconCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProPackCodeType = (Enabled, Disabled, PowerSellerOnly, TopRatedSellerOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReasonHideFromSearchCodeType = (DuplicateListing, OutOfStock);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BoldTitleCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BorderCodeType = (Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerBusinessCodeType = (Undefined, Private_, Commercial, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MarkUpMarkDownEventTypeCodeType = (MarkUp, MarkDown, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MyMessagesAlertResolutionStatusCode = (Unresolved, ResolvedByAutoResolution, ResolvedByUser, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PeriodCodeType = (Days_1, Days_30, Days_180, Days_360, Days_540, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  QuestionTypeCodeType = (General, Shipping, Payment, MultipleItemShipping, CustomizedSubject, None, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SiteCodeType = (
      US, 
      Canada, 
      UK, 
      Australia, 
      Austria, 
      Belgium_French, 
      France, 
      Germany, 
      Italy, 
      Belgium_Dutch, 
      Netherlands, 
      Spain, 
      Switzerland, 
      Taiwan, 
      eBayMotors, 
      HongKong, 
      Singapore, 
      India, 
      China, 
      Ireland, 
      Malaysia, 
      Philippines, 
      Poland, 
      Sweden, 
      CustomCode, 
      CanadaFrench, 
      Russia
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  OrderStatusFilterCodeType = (All, AwaitingPayment, AwaitingShipment, PaidAndShipped, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FlatShippingRateOptionCodeType = (ChargeAmountForEachAdditionalItem, DeductAmountFromEachAdditionalItem, ShipAdditionalItemsFree, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FlatRateInsuranceRangeCodeType = (FlatRateInsuranceRange1, FlatRateInsuranceRange2, FlatRateInsuranceRange3, FlatRateInsuranceRange4, FlatRateInsuranceRange5, FlatRateInsuranceRange6, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ListingSubtypeCodeType = (ClassifiedAd, LocalMarketBestOfferOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  QuantityAvailableHintCodeType = (Limited, MoreThan, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DescriptionReviseModeCodeType = (Replace, Prepend, Append, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  HitCounterCodeType = (NoHitCounter, HonestyStyle, GreenLED, Hidden, BasicStyle, RetroStyle, HiddenStyle, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ListingEnhancementsCodeType = (Border, BoldTitle, Featured, Highlight, HomePageFeatured, ProPackBundle, BasicUpgradePackBundle, ValuePackBundle, ProPackPlusBundle, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GalleryTypeCodeType = (None, Featured, Gallery, Plus, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PhotoDisplayCodeType = (None, SlideShow, SuperSize, PicturePack, SiteHostedPictureShow, VendorHostedPictureShow, SuperSizePictureShow, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PickupStatusCodeType = (Invalid, NotApplicable, PendingMerchantConfirmation, ReadyToPickup, Pickedup, PickupCancelledOutOfStock, PickupCancelledBuyerRejected, PickupCancelledBuyerNoShow, PickupCancelled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PerformanceStatusCodeType = (TopRated, AboveStandard, Standard, BelowStandard, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PictureSourceCodeType = (EPS, PictureManager, Vendor, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GalleryStatusCodeType = (
      Success, 
      Pending, 
      InvalidUrl, 
      InvalidProtocol, 
      InvalidFile, 
      ServerDown, 
      ImageNonExistent, 
      ImageReadTimeOut, 
      InvalidFileFormat, 
      ImageProcessingError, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentHoldReasonCodeType = (
      NewSeller, 
      BelowStandardSeller, 
      EbpCaseOpen, 
      ReinstatementAfterSuspension, 
      CasualSeller, 
      NewPaypalAccountAdded, 
      NotAvailable, 
      SellerIsOnBlackList, 
      Other, 
      None, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DepositTypeCodeType = (None, OtherMethod, FastDeposit, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionItemSelectionCodeType = (Manual, Automatic, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PolicyComplianceStatusCodeType = (Good, Fair, Poor, Failing, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerLevelCodeType = (Bronze, Silver, Gold, Platinum, Titanium, None, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  QuantityOperatorCodeType = (LessThan, LessThanOrEqual, Equal, GreaterThan, GreaterThanOrEqual, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PreferredLocationCodeType = (ListedInCurrencyImplied, LocatedInCountryImplied, AvailableInCountryImplied, SiteImplied, BelgiumListing, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemConditionCodeType = (New, Used, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressTypeCodeType = (Contact, Registered, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemSpecificSourceCodeType = (ItemSpecific, Attribute, Product, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SearchFlagCodeType = (
      Charity, 
      Gift, 
      NowAndNew, 
      LocalSearch, 
      FreeShipping, 
      Gallery, 
      Picture, 
      GetItFast, 
      Lot, 
      GermanMotorsSearchable, 
      WorldOfGood, 
      DigitalDelivery, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentMethodSearchCodeType = (PayPal, PaisaPay, PayPalOrPaisaPay, CustomCode, PaisaPayEscrowEMI);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemTypeCodeType = (
      AuctionItemsOnly, 
      FixedPricedItem, 
      AllItems, 
      StoreInventoryOnly, 
      FixedPriceExcludeStoreInventory, 
      ExcludeStoreInventory, 
      AllItemTypes, 
      AllFixedPriceItemTypes, 
      CustomCode, 
      ClassifiedItemsOnly, 
      AdFormat
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SimpleItemSortCodeType = (BestMatch, CustomCode, EndTime, BidCount, Country, CurrentBid, Distance, StartDate, BestMatchCategoryGroup, PricePlusShipping);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentHoldStatusCodeType = (PaymentReview, MerchantHold, Released, None, NewSellerHold, PaymentHold, ReleasePending, ReleaseConfirmed, ReleaseFailed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CancelStatusCodeType = (
      Invalid, 
      NotApplicable, 
      CancelRequested, 
      CancelPending, 
      CancelRejected, 
      CancelClosedNoRefund, 
      CancelClosedWithRefund, 
      CancelClosedUnknownRefund, 
      CancelClosedForCommitment, 
      CancelComplete, 
      CancelFailed, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  NotificationEventPropertyNameCodeType = (TimeLeft, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  NotificationEventTypeCodeType = (
      None, 
      OutBid, 
      EndOfAuction, 
      AuctionCheckoutComplete, 
      CheckoutBuyerRequestsTotal, 
      Feedback, 
      FeedbackForSeller, 
      FixedPriceTransaction, 
      SecondChanceOffer, 
      AskSellerQuestion, 
      ItemListed, 
      ItemRevised, 
      BuyerResponseDispute, 
      SellerOpenedDispute, 
      SellerRespondedToDispute, 
      SellerClosedDispute, 
      BestOffer, 
      MyMessagesAlertHeader, 
      MyMessagesAlert, 
      MyMessageseBayMessageHeader, 
      MyMessageseBayMessage, 
      MyMessagesM2MMessageHeader, 
      MyMessagesM2MMessage, 
      INRBuyerOpenedDispute, 
      INRBuyerRespondedToDispute, 
      INRBuyerClosedDispute, 
      INRSellerRespondedToDispute, 
      Checkout, 
      WatchedItemEndingSoon, 
      ItemClosed, 
      ItemSuspended, 
      ItemSold, 
      ItemExtended, 
      UserIDChanged, 
      EmailAddressChanged, 
      PasswordChanged, 
      PasswordHintChanged, 
      PaymentDetailChanged, 
      AccountSuspended, 
      AccountSummary, 
      ThirdPartyCartCheckout, 
      ItemRevisedAddCharity, 
      ItemAddedToWatchList, 
      ItemRemovedFromWatchList, 
      ItemAddedToBidGroup, 
      ItemRemovedFromBidGroup, 
      FeedbackLeft, 
      FeedbackReceived, 
      FeedbackStarChanged, 
      BidPlaced, 
      BidReceived, 
      ItemWon, 
      ItemLost, 
      ItemUnsold, 
      CounterOfferReceived, 
      BestOfferDeclined, 
      BestOfferPlaced, 
      AddToWatchList, 
      PlaceOffer, 
      RemoveFromWatchList, 
      AddToBidGroup, 
      RemoveFromBidGroup, 
      ItemsCanceled, 
      TokenRevocation, 
      BulkDataExchangeJobCompleted, 
      CustomCode, 
      ItemMarkedShipped, 
      ItemMarkedPaid, 
      EBPMyResponseDue, 
      EBPOtherPartyResponseDue, 
      EBPEscalatedCase, 
      EBPAppealedCase, 
      EBPMyPaymentDue, 
      EBPPaymentDone, 
      EBPClosedAppeal, 
      EBPClosedCase, 
      MyMessagesHighPriorityMessage, 
      MyMessagesHighPriorityMessageHeader, 
      EBPOnHoldCase, 
      ReadyToShip, 
      ReadyForPayout, 
      BidItemEndingSoon, 
      ShoppingCartItemEndingSoon, 
      ReturnCreated, 
      ReturnWaitingForSellerInfo, 
      ReturnSellerInfoOverdue, 
      ReturnShipped, 
      ReturnDelivered, 
      ReturnRefundOverdue, 
      ReturnClosed, 
      ReturnEscalated, 
      BuyerCancelRequested, 
      UnmatchedPaymentReceived, 
      RefundSuccess, 
      RefundFailure, 
      OrderInquiryOpened, 
      OrderInquiryReminderForEscalation, 
      OrderInquiryProvideShipmentInformation, 
      OrderInquiryClosed, 
      OrderInquiryEscalatedToCase, 
      ItemReadyForPickup, 
      ItemOutOfStock, 
      BuyerNoShow, 
      WebnextMobilePhotoSync, 
      PaymentReminder, 
      EBNOrderPickedUp, 
      EBNOrderCanceled, 
      M2MMessageStatusChange
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  NotificationEventStateCodeType = (
      New, 
      Failed, 
      MarkedDown, 
      Pending, 
      FailedPending, 
      MarkedDownPending, 
      Delivered, 
      Undeliverable, 
      Rejected, 
      Canceled, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BidActionCodeType = (
      Unknown, 
      Bid, 
      NotUsed, 
      Retraction, 
      AutoRetraction, 
      Cancelled, 
      AutoCancel, 
      Absentee, 
      BuyItNow, 
      Purchase, 
      CustomCode, 
      Offer, 
      Counter, 
      Accept, 
      Decline
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ShippingRegionCodeType = (
      Africa, 
      Asia, 
      Caribbean, 
      Europe, 
      LatinAmerica, 
      MiddleEast, 
      NorthAmerica, 
      Oceania, 
      SouthAmerica, 
      EuropeanUnion, 
      WillNotShip, 
      Worldwide, 
      Americas, 
      None, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  EBaySubscriptionTypeCodeType = (
      SellerAssistant, 
      SellerAssistantPro, 
      EBayStoreBasic, 
      EBayStoreFeatured, 
      EBayStoreAnchor, 
      SellingManager, 
      SellingManagerPro, 
      PictureManagerLevel1, 
      PictureManagerLevel2, 
      PictureManagerLevel3, 
      PictureManagerLevel4, 
      PictureManagerLevel5, 
      PictureManagerLevel6, 
      PictureManagerLevel7, 
      SellerReportsBasic, 
      SellerReportsPlus, 
      FileExchange, 
      LocalMarketSpecialty, 
      LocalMarketRegular, 
      LocalMarketPremium, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  VeROItemStatusCodeType = (Received, Submitted, Removed, SubmissionFailed, ClarificationRequired, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PayPalAccountStatusCodeType = (Active, Closed, HighRestricted, LowRestricted, Locked, CustomCode, WireOff, Unknown, Invalid);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UnpaidItemCaseStatusTypeCodeType = (Open, ClosedWithPayment, ClosedWithoutPayment, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UnpaidItemCaseOpenTypeCodeType = (Auto, Manual, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  URLTypeCodeType = (
      ViewItemURL, 
      ViewUserURL, 
      MyeBayURL, 
      MyeBayBiddingURL, 
      MyeBayNotWonURL, 
      MyeBayWonURL, 
      MyeBayWatchingURL, 
      eBayStoreURL, 
      SmallLogoURL, 
      MediumLogoURL, 
      LargeLogoURL, 
      CreateProductUrl, 
      AppealProductUrl, 
      ManageProductUrl, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UserIdentityCodeType = (eBayUser, eBayPartner, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PayPalAccountLevelCodeType = (Unverified, InternationalUnverified, Verified, InternationalVerified, Trusted, Unknown, Invalid, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PayPalAccountTypeCodeType = (Personal, Premier, Business, Unknown, Invalid, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BusinessRoleType = (Shopper, FullMarketPlaceParticipant);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UserStatusCodeType = (
      Unknown, 
      Suspended, 
      Confirmed, 
      Unconfirmed, 
      Ghost, 
      InMaintenance, 
      Deleted, 
      CreditCardVerify, 
      AccountOnHold, 
      Merged, 
      RegistrationCodeMailOut, 
      TermPending, 
      UnconfirmedHalfOptIn, 
      CreditCardVerifyHalfOptIn, 
      UnconfirmedPassport, 
      CreditCardVerifyPassport, 
      UnconfirmedExpress, 
      Guest, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  VATStatusCodeType = (NoVATTax, VATTax, VATExempt, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MismatchTypeCodeType = (OverPayment, UnderPayment, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerInventoryPropertyTypeCodeType = (ProductsOutOfStock, Active, InActive, LowStock, WithListings, WithoutListings, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerProductSortCodeType = (
      ActiveQuantity, 
      AvailableToList, 
      AveragePrice, 
      AverageUnitCost, 
      CustomLabel, 
      ProductName, 
      LastSubmittedDate, 
      ScheduledQuantity, 
      SoldQuantity, 
      SuccessPercent, 
      UnsoldQuantity, 
      FolderName, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  InventoryTrackingMethodCodeType = (ItemID, SKU, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CombinedPaymentPeriodCodeType = (Days_3, Days_5, Days_7, Days_14, Days_30, Ineligible, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TaskStatusCodeType = (Pending, InProgress, Complete, Failed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerSoldListingsPropertyTypeCodeType = (
      NotPaidNotShipped, 
      PaidNotShipped, 
      PrintShippingLabel, 
      PaidShipped, 
      PaidNoFeedback, 
      PaymentReminderSendError, 
      PaymentReceivedNotificationSendError, 
      RequestForShippingAddressSendError, 
      ShippingNotificationSendError, 
      PersonalizedEmailsSendError, 
      WinningBuyerNotificationSendError, 
      FeeCreditRequest, 
      PayPalPayment, 
      FeedbackMessageNotSent, 
      FeedbackReminderSendError, 
      NotShipped, 
      UnpaidItemReminder, 
      EscrowCancelled, 
      EscrowCompleted, 
      EscrowInitiated, 
      EscrowManageRefund, 
      EscrowReleasePayment, 
      EscrowShipToBuyer, 
      EscrowSoldAll, 
      ShippedAndAwaitingFeedback, 
      InternationalSale, 
      eBayGivingWorksDonationOwed, 
      PaymentOverDue, 
      PadiWithPaisaPayEscrow, 
      CustomEmailTemplate1SendError, 
      CustomEmailTemplate2SendError, 
      CustomEmailTemplate3SendError, 
      CustomEmailTemplate4SendError, 
      CustomEmailTemplate5SendError, 
      CustomEmailTemplate6SendError, 
      CustomEmailTemplate7SendError, 
      CustomEmailTemplate8SendError, 
      CustomEmailTemplate9SendError, 
      CustomEmailTemplate10SendError, 
      CustomEmailTemplate11SendError, 
      CustomEmailTemplate12SendError, 
      CustomEmailTemplate13SendError, 
      CustomEmailTemplate14SendError, 
      CustomEmailTemplate15SendError, 
      CustomEmailTemplate16SendError, 
      CustomEmailTemplate17SendError, 
      CustomEmailTemplate18SendError, 
      CustomEmailTemplate19SendError, 
      CustomEmailTemplate20SendError, 
      ResponseRequiredForReturnCase, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellingManagerSoldListingsSortTypeCodeType = (
      SalesRecordID, 
      BuyerEmail, 
      SaleFormat, 
      CustomLabel, 
      TotalPrice, 
      SaleDate, 
      PaidDate, 
      EmailsSent, 
      CheckoutState, 
      PaidState, 
      ShippedState, 
      FeedbackLeft, 
      FeedbackReceived, 
      ShippedDate, 
      BuyerPostalCode, 
      DaysSinceSale, 
      StartPrice, 
      ReservePrice, 
      SoldOn, 
      ShippingCost, 
      ListedOn, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  NotificationRoleCodeType = (Application_, User, UserData, Event, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TradingRoleCodeType = (Buyer, Seller, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionalSaleStatusCodeType = (Active, Scheduled, Processing, Inactive, Deleted, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  OrderStatusCodeType = (
      Active, 
      Inactive, 
      Completed, 
      Cancelled, 
      Shipped, 
      Default_, 
      Authenticated, 
      InProcess, 
      Invalid, 
      CustomCode, 
      All, 
      CancelPending
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SortOrderCodeType = (Ascending, Descending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DetailNameCodeType = (
      CountryDetails, 
      CurrencyDetails, 
      PaymentOptionDetails, 
      RegionDetails, 
      ShippingLocationDetails, 
      ShippingServiceDetails, 
      SiteDetails, 
      TaxJurisdiction, 
      URLDetails, 
      TimeZoneDetails, 
      RegionOfOriginDetails, 
      DispatchTimeMaxDetails, 
      ItemSpecificDetails, 
      UnitOfMeasurementDetails, 
      ShippingPackageDetails, 
      CustomCode, 
      ShippingCarrierDetails, 
      ListingStartPriceDetails, 
      ReturnPolicyDetails, 
      BuyerRequirementDetails, 
      ListingFeatureDetails, 
      VariationDetails, 
      ExcludeShippingLocationDetails, 
      RecoupmentPolicyDetails, 
      ShippingCategoryDetails, 
      ProductDetails
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeedbackResponseCodeType = (Reply, FollowUp, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BestOfferActionCodeType = (Accept, Decline, Counter, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemArrivedWithinEDDCodeType = (EddQuestionWasNotAsked, BuyerDidntProvideAnswer, BuyerIndicatedItemArrivedWithinEDDRange, BuyerIndicatedItemNotArrivedWithinEDDRange, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeFilterTypeCodeType = (AllInvolvedDisputes, DisputesAwaitingMyResponse, DisputesAwaitingOtherPartyResponse, AllInvolvedClosedDisputes, EligibleForCredit, UnpaidItemDisputes, ItemNotReceivedDisputes, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeSortTypeCodeType = (None, DisputeCreatedTimeAscending, DisputeCreatedTimeDescending, DisputeStatusAscending, DisputeStatusDescending, DisputeCreditEligibilityAscending, DisputeCreditEligibilityDescending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  VeROReportPacketStatusCodeType = (Received, InProcess, Processed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ListingTypeCodeType = (
      Unknown, 
      Chinese, 
      Dutch, 
      Live, 
      Auction, 
      AdType, 
      StoresFixedPrice, 
      PersonalOffer, 
      FixedPriceItem, 
      Half, 
      LeadGeneration, 
      Express, 
      Shopping, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RecipientRelationCodeType = (_1, _2, _3, _4, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  EndReasonCodeType = (LostOrBroken, NotAvailable, Incorrect, OtherListingError, CustomCode, SellToHighBidder, Sold, ProductDeleted);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DiscountReasonCodeType = (SpecialOffer, Promotion, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeReasonCodeType = (BuyerHasNotPaid, TransactionMutuallyCanceled, ItemNotReceived, SignificantlyNotAsDescribed, NoRefund, ReturnPolicyUnpaidItem, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeExplanationCodeType = (
      BuyerHasNotResponded, 
      BuyerRefusedToPay, 
      BuyerNotClearedToPay, 
      BuyerReturnedItemForRefund, 
      UnableToResolveTerms, 
      BuyerNoLongerWantsItem, 
      BuyerPurchasingMistake, 
      ShipCountryNotSupported, 
      ShippingAddressNotConfirmed, 
      PaymentMethodNotSupported, 
      BuyerNoLongerRegistered, 
      OtherExplanation, 
      Unspecified, 
      UPIAssistance, 
      BuyerPaymentNotReceivedOrCleared, 
      SellerDoesntShipToCountry, 
      BuyerNotPaid, 
      UPIAssistanceDisabled, 
      SellerRanOutOfStock, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeActivityCodeType = (SellerAddInformation, SellerCompletedTransaction, CameToAgreementNeedFVFCredit, SellerEndCommunication, MutualAgreementOrNoBuyerResponse, SellerOffersRefund, SellerShippedItem, SellerComment, SellerPaymentNotReceived, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SecondChanceOfferDurationCodeType = (Days_1, Days_3, Days_5, Days_7, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CommentTypeCodeType = (Positive, Neutral, Negative, Withdrawn, IndependentlyWithdrawn, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeedbackTypeCodeType = (FeedbackReceivedAsSeller, FeedbackReceivedAsBuyer, FeedbackReceived, FeedbackLeft, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CountryCodeType = (
      AF, 
      AL, 
      DZ, 
      AS_, 
      AD, 
      AO, 
      AI, 
      AQ, 
      AG, 
      AR, 
      AM, 
      AW, 
      AU, 
      AT, 
      AZ, 
      BS, 
      BH, 
      BD, 
      BB, 
      BY, 
      BE, 
      BZ, 
      BJ, 
      BM, 
      BT, 
      BO, 
      BA, 
      BW, 
      BV, 
      BR, 
      IO, 
      BN, 
      BG, 
      BF, 
      BI, 
      KH, 
      CM, 
      CA, 
      CV, 
      KY, 
      CF, 
      TD, 
      CL, 
      CN, 
      CX, 
      CC, 
      CO, 
      KM, 
      CG, 
      CD, 
      CK, 
      CR, 
      CI, 
      HR, 
      CU, 
      CY, 
      CZ, 
      DK, 
      DJ, 
      DM, 
      DO_, 
      TP, 
      EC, 
      EG, 
      SV, 
      GQ, 
      ER, 
      EE, 
      ET, 
      FK, 
      FO, 
      FJ, 
      FI, 
      FR, 
      GF, 
      PF, 
      TF, 
      GA, 
      GM, 
      GE, 
      DE, 
      GH, 
      GI, 
      GR, 
      GL, 
      GD, 
      GP, 
      GU, 
      GT, 
      GN, 
      GW, 
      GY, 
      HT, 
      HM, 
      VA, 
      HN, 
      HK, 
      HU, 
      IS_, 
      IN_, 
      ID, 
      IR, 
      IQ, 
      IE, 
      IL, 
      IT, 
      JM, 
      JP, 
      JO, 
      KZ, 
      KE, 
      KI, 
      KP, 
      KR, 
      KW, 
      KG, 
      LA, 
      LV, 
      LB, 
      LS, 
      LR, 
      LY, 
      LI, 
      LT, 
      LU, 
      MO, 
      MK, 
      MG, 
      MW, 
      MY, 
      MV, 
      ML, 
      MT, 
      MH, 
      MQ, 
      MR, 
      MU, 
      YT, 
      MX, 
      FM, 
      MD, 
      MC, 
      MN, 
      MS, 
      MA, 
      MZ, 
      MM, 
      NA, 
      NR, 
      NP, 
      NL, 
      AN, 
      NC, 
      NZ, 
      NI, 
      NE, 
      NG, 
      NU, 
      NF, 
      MP, 
      NO, 
      OM, 
      PK, 
      PW, 
      PS, 
      PA, 
      PG, 
      PY, 
      PE, 
      PH, 
      PN, 
      PL, 
      PT, 
      PR, 
      QA, 
      RE, 
      RO, 
      RU, 
      RW, 
      SH, 
      KN, 
      LC, 
      PM, 
      VC, 
      WS, 
      SM, 
      ST, 
      SA, 
      SN, 
      SC, 
      SL, 
      SG, 
      SK, 
      SI, 
      SB, 
      SO, 
      ZA, 
      GS, 
      ES, 
      LK, 
      SD, 
      SR, 
      SJ, 
      SZ, 
      SE, 
      CH, 
      SY, 
      TW, 
      TJ, 
      TZ, 
      TH, 
      TG, 
      TK, 
      TO_, 
      TT, 
      TN, 
      TR, 
      TM, 
      TC, 
      TV, 
      UG, 
      UA, 
      AE, 
      GB, 
      US, 
      UM, 
      UY, 
      UZ, 
      VU, 
      VE, 
      VN, 
      VG, 
      VI, 
      WF, 
      EH, 
      YE, 
      YU, 
      ZM, 
      ZW, 
      AA, 
      QM, 
      QN, 
      QO, 
      QP, 
      JE, 
      GG, 
      ZZ, 
      RS, 
      ME, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemSortTypeCodeType = (
      ItemID, 
      Price, 
      StartPrice, 
      Title, 
      BidCount, 
      Quantity, 
      StartTime, 
      EndTime, 
      SellerUserID, 
      TimeLeft, 
      ListingDuration, 
      ListingType, 
      CurrentPrice, 
      ReservePrice, 
      MaxBid, 
      BidderCount, 
      HighBidderUserID, 
      BuyerUserID, 
      BuyerPostalCode, 
      BuyerEmail, 
      SellerEmail, 
      TotalPrice, 
      WatchCount, 
      BestOfferCount, 
      QuestionCount, 
      ShippingServiceCost, 
      FeedbackReceived, 
      FeedbackLeft, 
      UserID, 
      QuantitySold, 
      BestOffer, 
      QuantityAvailable, 
      QuantityPurchased, 
      WonPlatform, 
      SoldPlatform, 
      ListingDurationDescending, 
      ListingTypeDescending, 
      CurrentPriceDescending, 
      ReservePriceDescending, 
      MaxBidDescending, 
      BidderCountDescending, 
      HighBidderUserIDDescending, 
      BuyerUserIDDescending, 
      BuyerPostalCodeDescending, 
      BuyerEmailDescending, 
      SellerEmailDescending, 
      TotalPriceDescending, 
      WatchCountDescending, 
      QuestionCountDescending, 
      ShippingServiceCostDescending, 
      FeedbackReceivedDescending, 
      FeedbackLeftDescending, 
      UserIDDescending, 
      QuantitySoldDescending, 
      BestOfferCountDescending, 
      QuantityAvailableDescending, 
      QuantityPurchasedDescending, 
      BestOfferDescending, 
      ItemIDDescending, 
      PriceDescending, 
      StartPriceDescending, 
      TitleDescending, 
      BidCountDescending, 
      QuantityDescending, 
      StartTimeDescending, 
      EndTimeDescending, 
      SellerUserIDDescending, 
      TimeLeftDescending, 
      WonPlatformDescending, 
      SoldPlatformDescending, 
      LeadCount, 
      NewLeadCount, 
      LeadCountDescending, 
      NewLeadCountDescending, 
      ClassifiedAdPayPerLeadFee, 
      ClassifiedAdPayPerLeadFeeDescending, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  TransactionPlatformCodeType = (eBay, Express, Half, Shopping, WorldOfGood, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MessageTypeCodeType = (
      AskSellerQuestion, 
      ResponseToASQQuestion, 
      ContactEbayMember, 
      ContactTransactionPartner, 
      ResponseToContacteBayMember, 
      ContacteBayMemberViaCommunityLink, 
      CustomCode, 
      All, 
      ContactMyBidder, 
      ContacteBayMemberViaAnonymousEmail, 
      ClassifiedsContactSeller, 
      ClassifiedsBestOffer
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ListingStatusCodeType = (Active, Ended, Completed, CustomCode, Custom);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GetAllBiddersModeCodeType = (ViewAll, EndedListing, SecondChanceEligibleEndedListing, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BestOfferStatusCodeType = (
      Pending, 
      Accepted, 
      Declined, 
      Expired, 
      Retracted, 
      AdminEnded, 
      Active, 
      Countered, 
      All, 
      PendingBuyerPayment, 
      PendingBuyerConfirmation, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CurrencyCodeType = (
      AFA, 
      ALL, 
      DZD, 
      ADP, 
      AOA, 
      ARS, 
      AMD, 
      AWG, 
      AZM, 
      BSD, 
      BHD, 
      BDT, 
      BBD, 
      BYR, 
      BZD, 
      BMD, 
      BTN, 
      INR, 
      BOV, 
      BOB, 
      BAM, 
      BWP, 
      BRL, 
      BND, 
      BGL, 
      BGN, 
      BIF, 
      KHR, 
      CAD, 
      CVE, 
      KYD, 
      XAF, 
      CLF, 
      CLP, 
      CNY, 
      COP, 
      KMF, 
      CDF, 
      CRC, 
      HRK, 
      CUP, 
      CYP, 
      CZK, 
      DKK, 
      DJF, 
      DOP, 
      TPE, 
      ECV, 
      ECS, 
      EGP, 
      SVC, 
      ERN, 
      EEK, 
      ETB, 
      FKP, 
      FJD, 
      GMD, 
      GEL, 
      GHC, 
      GIP, 
      GTQ, 
      GNF, 
      GWP, 
      GYD, 
      HTG, 
      HNL, 
      HKD, 
      HUF, 
      ISK, 
      IDR, 
      IRR, 
      IQD, 
      ILS, 
      JMD, 
      JPY, 
      JOD, 
      KZT, 
      KES, 
      AUD, 
      KPW, 
      KRW, 
      KWD, 
      KGS, 
      LAK, 
      LVL, 
      LBP, 
      LSL, 
      LRD, 
      LYD, 
      CHF, 
      LTL, 
      MOP, 
      MKD, 
      MGF, 
      MWK, 
      MYR, 
      MVR, 
      MTL, 
      EUR, 
      MRO, 
      MUR, 
      MXN, 
      MXV, 
      MDL, 
      MNT, 
      XCD, 
      MZM, 
      MMK, 
      ZAR, 
      NAD, 
      NPR, 
      ANG, 
      XPF, 
      NZD, 
      NIO, 
      NGN, 
      NOK, 
      OMR, 
      PKR, 
      PAB, 
      PGK, 
      PYG, 
      PEN, 
      PHP, 
      PLN, 
      USD, 
      QAR, 
      ROL, 
      RUB, 
      RUR, 
      RWF, 
      SHP, 
      WST, 
      STD, 
      SAR, 
      SCR, 
      SLL, 
      SGD, 
      SKK, 
      SIT, 
      SBD, 
      SOS, 
      LKR, 
      SDD, 
      SRG, 
      SZL, 
      SEK, 
      SYP, 
      TWD, 
      TJS, 
      TZS, 
      THB, 
      XOF, 
      TOP, 
      TTD, 
      TND, 
      TRL, 
      TMM, 
      UGX, 
      UAH, 
      AED, 
      GBP, 
      USS, 
      USN, 
      UYU, 
      UZS, 
      VUV, 
      VEB, 
      VND, 
      MAD, 
      YER, 
      YUM, 
      ZMK, 
      ZWD, 
      ATS, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccountHistorySelectionCodeType = (LastInvoice, SpecifiedInvoice, BetweenSpecifiedDates, OrderId, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccountEntrySortTypeCodeType = (None, AccountEntryCreatedTimeAscending, AccountEntryCreatedTimeDescending, AccountEntryItemNumberAscending, AccountEntryItemNumberDescending, AccountEntryFeeTypeAscending, AccountEntryFeeTypeDescending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MessageStatusTypeCodeType = (Answered, Unanswered, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StringMatchCodeType = (CustomCode, StartsWith, Contains_);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GranularityLevelCodeType = (Coarse, Fine, Medium, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeatureIDCodeType = (
      ListingDurations, 
      BestOfferEnabled, 
      DutchBINEnabled, 
      ShippingTermsRequired, 
      UserConsentRequired, 
      HomePageFeaturedEnabled, 
      AdFormatEnabled, 
      DigitalDeliveryEnabled, 
      BestOfferCounterEnabled, 
      BestOfferAutoDeclineEnabled, 
      ProPack, 
      BasicUpgradePack, 
      ValuePack, 
      ProPackPlus, 
      LocalMarketSpecialitySubscription, 
      LocalMarketRegularSubscription, 
      LocalMarketPremiumSubscription, 
      LocalMarketNonSubscription, 
      ExpressEnabled, 
      ExpressPicturesRequired, 
      ExpressConditionRequired, 
      SellerContactDetailsEnabled, 
      CustomCode, 
      MinimumReservePrice, 
      TransactionConfirmationRequestEnabled, 
      StoreInventoryEnabled, 
      LocalListingDistances, 
      SkypeMeTransactionalEnabled, 
      SkypeMeNonTransactionalEnabled, 
      ClassifiedAdPaymentMethodEnabled, 
      ClassifiedAdShippingMethodEnabled, 
      ClassifiedAdBestOfferEnabled, 
      ClassifiedAdCounterOfferEnabled, 
      ClassifiedAdAutoDeclineEnabled, 
      ClassifiedAdContactByEmailEnabled, 
      ClassifiedAdContactByPhoneEnabled, 
      SafePaymentRequired, 
      MaximumBestOffersAllowed, 
      ClassifiedAdMaximumBestOffersAllowed, 
      ClassifiedAdContactByEmailAvailable, 
      ClassifiedAdPayPerLeadEnabled, 
      ItemSpecificsEnabled, 
      PaisaPayFullEscrowEnabled, 
      ISBNIdentifierEnabled, 
      UPCIdentifierEnabled, 
      EANIdentifierEnabled, 
      BrandMPNIdentifierEnabled, 
      ClassifiedAdAutoAcceptEnabled, 
      BestOfferAutoAcceptEnabled, 
      CrossBorderTradeEnabled, 
      PayPalBuyerProtectionEnabled, 
      BuyerGuaranteeEnabled, 
      INEscrowWorkflowTimeline, 
      CombinedFixedPriceTreatment, 
      GalleryFeaturedDurations, 
      PayPalRequired, 
      eBayMotorsProAdFormatEnabled, 
      eBayMotorsProContactByPhoneEnabled, 
      eBayMotorsProContactByAddressEnabled, 
      eBayMotorsProCompanyNameEnabled, 
      eBayMotorsProContactByEmailEnabled, 
      eBayMotorsProBestOfferEnabled, 
      eBayMotorsProAutoAcceptEnabled, 
      eBayMotorsProAutoDeclineEnabled, 
      eBayMotorsProPaymentMethodCheckOutEnabled, 
      eBayMotorsProShippingMethodEnabled, 
      eBayMotorsProCounterOfferEnabled, 
      eBayMotorsProSellerContactDetailsEnabled, 
      LocalMarketAdFormatEnabled, 
      LocalMarketContactByPhoneEnabled, 
      LocalMarketContactByAddressEnabled, 
      LocalMarketCompanyNameEnabled, 
      LocalMarketContactByEmailEnabled, 
      LocalMarketBestOfferEnabled, 
      LocalMarketAutoAcceptEnabled, 
      LocalMarketAutoDeclineEnabled, 
      LocalMarketPaymentMethodCheckOutEnabled, 
      LocalMarketShippingMethodEnabled, 
      LocalMarketCounterOfferEnabled, 
      LocalMarketSellerContactDetailsEnabled, 
      ClassifiedAdContactByAddressEnabled, 
      ClassifiedAdCompanyNameEnabled, 
      SpecialitySubscription, 
      RegularSubscription, 
      PremiumSubscription, 
      NonSubscription, 
      IntangibleEnabled, 
      PayPalRequiredForStoreOwner, 
      ReviseQuantityAllowed, 
      RevisePriceAllowed, 
      StoreOwnerExtendedListingDurationsEnabled, 
      StoreOwnerExtendedListingDurations, 
      ReturnPolicyEnabled, 
      HandlingTimeEnabled, 
      PaymentMethods, 
      MaxFlatShippingCost, 
      MaxFlatShippingCostCBTExempt, 
      Group1MaxFlatShippingCost, 
      Group2MaxFlatShippingCost, 
      Group3MaxFlatShippingCost, 
      VariationsEnabled, 
      AttributeConversionEnabled, 
      FreeGalleryPlusEnabled, 
      FreePicturePackEnabled, 
      CompatibilityEnabled, 
      MinCompatibleApplications, 
      MaxCompatibleApplications, 
      ConditionEnabled, 
      ConditionValues, 
      ValueCategory, 
      ProductCreationEnabled, 
      EANEnabled, 
      ISBNEnabled, 
      UPCEnabled, 
      MaxGranularFitmentCount, 
      CompatibleVehicleType, 
      PaymentOptionsGroup, 
      ShippingProfileCategoryGroup, 
      PaymentProfileCategoryGroup, 
      ReturnPolicyProfileCategoryGroup, 
      VINSupported, 
      VRMSupported, 
      SellerProvidedTitleSupported, 
      DepositSupported, 
      GlobalShippingEnabled, 
      AdditionalCompatibilityEnabled, 
      PickupDropOffEnabled, 
      DigitalGoodDeliveryEnabled, 
      EpidSupported, 
      KTypeSupported, 
      ProductRequiredEnabled, 
      DomesticReturnsAcceptedValues, 
      InternationalReturnsAcceptedValues, 
      DomesticReturnsDurationValues, 
      InternationalReturnsDurationValues, 
      DomesticReturnsShipmentPayeeValues, 
      InternationalReturnsShipmentPayeeValues, 
      DomesticRefundMethodValues, 
      InternationalRefundMethodValues, 
      ReturnPolicyDescriptionEnabled
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionSchemeCodeType = (ItemToItem, ItemToStoreCat, StoreToStoreCat, ItemToDefaultRule, DefaultRule, CategoryProximity, RelatedCategoryRule, DefaultUpSellLogic, DefaultCrossSellLogic, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PromotionMethodCodeType = (CrossSell, UpSell, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GallerySortFilterCodeType = (ShowAnyItems, ShowItemsWithGalleryImagesFirst, ShowOnlyItemsWithGalleryImages, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemSortFilterCodeType = (EndingLast, EndingSoonest, HighestPrice, LowestPrice, NewlyListed, RandomlySelected, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DescriptionTemplateCodeType = (Layout, Theme, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CombinedPaymentOptionCodeType = (NoCombinedPayment, DiscountSpecified, SpecifyDiscountLater, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemFormatSortFilterCodeType = (ShowAnyItems, ShowItemsWithBINFirst, ShowOnlyItemsWithBIN, ShowOnlyStoreItems, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DaysCodeType = (None, EveryDay, Weekdays, Weekends, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  EndOfAuctionLogoTypeCodeType = (WinningBidderNotice, Store, Customized, CustomCode, None);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReturnsShipmentPayeeCodeType = (Buyer, Seller);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeRecordTypeCodeType = (UnpaidItem, ItemNotReceived, HalfDispute, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeStateCodeType = (
      Locked, 
      Closed, 
      BuyerFirstResponsePayOption, 
      BuyerFirstResponseNoPayOption, 
      BuyerFirstResponsePayOptionLateResponse, 
      BuyerFirstResponseNoPayOptionLateResponse, 
      MutualCommunicationPayOption, 
      MutualCommunicationNoPayOption, 
      PendingResolve, 
      MutualWithdrawalAgreement, 
      MutualWithdrawalAgreementLate, 
      NotReceivedNoSellerResponse, 
      NotAsDescribedNoSellerResponse, 
      NotReceivedMutualCommunication, 
      NotAsDescribedMutualCommunication, 
      MutualAgreementOrBuyerReturningItem, 
      ClaimOpened, 
      NoDocumentation, 
      ClaimClosed, 
      ClaimDenied, 
      ClaimPending, 
      ClaimPaymentPending, 
      ClaimPaid, 
      ClaimResolved, 
      ClaimSubmitted, 
      UnpaidItemOpen, 
      UPIAssistanceDisabledByeBay, 
      UPIAssistanceDisabledBySeller, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeStatusCodeType = (
      Closed, 
      WaitingForSellerResponse, 
      WaitingForBuyerResponse, 
      ClosedFVFCreditStrike, 
      ClosedNoFVFCreditStrike, 
      ClosedFVFCreditNoStrike, 
      ClosedNoFVFCreditNoStrike, 
      StrikeAppealedAfterClosing, 
      FVFCreditReversedAfterClosing, 
      StrikeAppealedAndFVFCreditReversed, 
      ClaimOpened, 
      NoDocumentation, 
      ClaimClosed, 
      ClaimDenied, 
      ClaimInProcess, 
      ClaimApproved, 
      ClaimPaid, 
      ClaimResolved, 
      ClaimSubmitted, 
      UnpaidItemOpened, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MinimumAdvertisedPriceExposureCodeType = (PreCheckout, DuringCheckout, None, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PricingTreatmentCodeType = (STP, MAP, None, MFO, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeCreditEligibilityCodeType = (InEligible, Eligible, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReturnsDurationCodeType = (Days_14, Days_30, Days_60);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReturnsRefundMethodCodeType = (MoneyBack, MoneyBackorReplacement);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ReturnsAcceptedCodeType = (ReturnsAccepted, ReturnsNotAccepted);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AttributeConversionEnabledCodeType = (NotApplicable, Enabled, Disabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemCompatibilityEnabledCodeType = (Disabled, ByApplication, BySpecification, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ConditionEnabledCodeType = (Disabled, Enabled, Required, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  GeographicExposureCodeType = (National, LocalOnly, LocalOptional, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  INEscrowWorkflowTimelineCodeType = (Default_, WorkflowA, WorkflowB, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProfileCategoryGroupCodeType = (Inherit, None, ALL, MOTORS_VEHICLE);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProductRequiredEnabledCodeType = (Disabled, Enabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProductCreationEnabledCodeType = (Disabled, Enabled, Required, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ProductIdentiferEnabledCodeType = (Disabled, Enabled, Required, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentOptionsGroupEnabledCodeType = (eBayPaymentProcessEnabled, NonStandardPaymentsEnabled, eBayPaymentProcessExcluded, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CharityAffiliationTypeCodeType = (Community, Direct, Remove, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CharityStatusCodeType = (Valid, NoLongerValid, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SocialAddressTypeCodeType = (Facebook, Twitter, Linkedin, GooglePlus, Myspace, Orkut, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BuyerPaymentInstrumentCodeType = (
      None, 
      CreditCard, 
      BankDirectDebit, 
      PayPal, 
      ELV, 
      LocalPaymentCreditCardOther, 
      LocalPaymentELV, 
      LocalPaymentMasterCard, 
      LocalPaymentAMEX, 
      LocalPaymentVISA, 
      LocalPaymentDiscover, 
      LocalPaymentDinersclub, 
      LocalPaymentJCB, 
      LocalPaymentSWITCH, 
      LocalPaymentSOLO, 
      GIROPAY, 
      BML, 
      PayUponInvoice, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentStatusCodeType = (NoPaymentFailure, BuyerECheckBounced, BuyerCreditCardFailed, BuyerFailedPaymentReportedBySeller, PayPalPaymentInProcess, PaymentInProcess, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentTransactionStatusCodeType = (Failed, Succeeded, Pending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeedbackRatingStarCodeType = (
      None, 
      Yellow, 
      Blue, 
      Turquoise, 
      Purple, 
      Red, 
      Green, 
      YellowShooting, 
      TurquoiseShooting, 
      PurpleShooting, 
      RedShooting, 
      GreenShooting, 
      SilverShooting, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  StoreCategoryUpdateActionCodeType = (Add, Delete, Move, Rename, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SetUserNotesActionCodeType = (AddOrUpdate, Delete, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AutomatedLeaveFeedbackEventCodeType = (PositiveFeedbackReceived, PaymentReceived, None, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DetailLevelCodeType = (ReturnAll, ItemReturnDescription, ItemReturnAttributes, ItemReturnCategories, ReturnSummary, ReturnHeaders, ReturnMessages);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PictureSetCodeType = (Standard, Supersize, Large, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PictureUploadPolicyCodeType = (Add, ClearAndAdd, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PictureWatermarkCodeType = (User, Icon, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MyMessagesFolderOperationCodeType = (Display, Rename, Remove, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CheckoutMethodCodeType = (Other, ThirdPartyCheckout, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  InsuranceSelectedCodeType = (NotOffered, OfferedNotSelected, OfferedSelected, Required, IncludedInShippingHandling, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BuyerPaymentMethodCodeType = (
      None, 
      MOCC, 
      AmEx, 
      PaymentSeeDescription, 
      CCAccepted, 
      PersonalCheck, 
      COD, 
      VisaMC, 
      PaisaPayAccepted, 
      Other, 
      PayPal, 
      Discover, 
      CashOnPickup, 
      MoneyXferAccepted, 
      MoneyXferAcceptedInCheckout, 
      OtherOnlinePayments, 
      Escrow, 
      PrePayDelivery, 
      CODPrePayDelivery, 
      PostalTransfer, 
      CustomCode, 
      LoanCheck, 
      CashInPerson, 
      ELV, 
      PaisaPayEscrow, 
      PaisaPayEscrowEMI, 
      IntegratedMerchantCreditCard, 
      Moneybookers, 
      Paymate, 
      ProPay, 
      PayOnPickup, 
      Diners, 
      StandardPayment, 
      DirectDebit, 
      CreditCard, 
      PayUponInvoice, 
      QIWI, 
      PayPalCredit
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CompleteStatusCodeType = (Incomplete, Complete, Pending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  RCSPaymentStatusCodeType = (Canceled, Paid, Pending, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  InsuranceOptionCodeType = (Optional, Required, NotOffered, IncludedInShippingHandling, NotOfferedOnSite, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ModifyActionCodeType = (Add, Delete, Update, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeResolutionReasonCodeType = (
      Unresolved, 
      ProofOfPayment, 
      ComputerTechnicalProblem, 
      NoContact, 
      FamilyEmergency, 
      ProofGivenInFeedback, 
      FirstInfraction, 
      CameToAgreement, 
      ItemReturned, 
      BuyerPaidAuctionFees, 
      SellerReceivedPayment, 
      OtherResolution, 
      ClaimPaid, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ErrorHandlingCodeType = (Legacy, BestEffort, AllOrNothing, FailOnError);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BidGroupItemStatusCodeType = (CurrentBid, Cancelled, Pending, Skipped, Ended, Won, GroupClosed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BidGroupStatusCodeType = (Open, Closed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  PaymentInstructionCodeType = (PaymentInstruction, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeedbackSummaryPeriodCodeType = (ThirtyDays, FiftyTwoWeeks, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BestOfferTypeCodeType = (BuyerBestOffer, BuyerCounterOffer, SellerCounterOffer, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CalculatedShippingRateOptionCodeType = (CombinedItemWeight, IndividualItemWeight, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  CalculatedShippingChargeOptionCodeType = (ChargeEachItem, ChargeEntireOrder, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ClassifiedAdBestOfferEnabledCodeType = (Disabled, Enabled, Required, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ItemSpecificsEnabledCodeType = (Disabled, Enabled, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AdFormatEnabledCodeType = (Disabled, Enabled, Only, ClassifiedAdEnabled, ClassifiedAdOnly, LocalMarketBestOfferOnly, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ClassifiedAdPaymentMethodEnabledCodeType = (EnabledWithCheckout, EnabledWithoutCheckout, NotSupported, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BuyerProtectionSourceCodeType = (eBay, PayPal, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BuyerProtectionCodeType = (ItemIneligible, ItemEligible, ItemMarkedIneligible, ItemMarkedEligible, NoCoverage, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  HandlingNameCodeType = (EachAdditionalAmount, EachAdditionalAmountOff, EachAdditionalPercentOff, IndividualHandlingFee, CombinedHandlingFee, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DiscountNameCodeType = (EachAdditionalAmount, EachAdditionalAmountOff, EachAdditionalPercentOff, IndividualItemWeight, CombinedItemWeight, WeightOff, ShippingCostXForAmountY, ShippingCostXForItemCountN, MaximumShippingCostPerOrder, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  BuyerSatisfactionStatusCodeType = (Excellent, Good, NeedsWork, Poor, VeryPoor, Unacceptable, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ErrorClassificationCodeType = (RequestError, SystemError, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  InvocationStatusType = (InProgress, Success, Failure, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SeverityCodeType = (Warning, Error, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MeasurementSystemCodeType = (English, Metric);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccountStateCodeType = (Active, Pending, Inactive, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SellerPaymentMethodCodeType = (NothingOnFile, CreditCard, PayPal, DirectDebit, DirectDebitPendingSignatureMandate, eBayDirectPay, CustomCode, DirectDebitPendingVerification);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccountDetailEntryCodeType = (
      Unknown, 
      FeeInsertion, 
      FeeBold, 
      FeeFeatured, 
      FeeCategoryFeatured, 
      FeeFinalValue, 
      PaymentCheck, 
      PaymentCC, 
      CreditCourtesy, 
      CreditNoSale, 
      CreditPartialSale, 
      RefundCC, 
      RefundCheck, 
      FinanceCharge, 
      AWDebit, 
      AWCredit, 
      AWMemo, 
      CreditDuplicateListing, 
      FeePartialSale, 
      PaymentElectronicTransferReversal, 
      PaymentCCOnce, 
      FeeReturnedCheck, 
      FeeRedepositCheck, 
      PaymentCash, 
      CreditInsertion, 
      CreditBold, 
      CreditFeatured, 
      CreditCategoryFeatured, 
      CreditFinalValue, 
      FeeNSFCheck, 
      FeeReturnCheckClose, 
      Memo, 
      PaymentMoneyOrder, 
      CreditCardOnFile, 
      CreditCardNotOnFile, 
      Invoiced, 
      InvoicedCreditCard, 
      CreditTransferFrom, 
      DebitTransferTo, 
      InvoiceCreditBalance, 
      eBayDebit, 
      eBayCredit, 
      PromotionalCredit, 
      CCNotOnFilePerCustReq, 
      CreditInsertionFee, 
      CCPaymentRejected, 
      FeeGiftIcon, 
      CreditGiftIcon, 
      FeeGallery, 
      FeeFeaturedGallery, 
      CreditGallery, 
      CreditFeaturedGallery, 
      ItemMoveFee, 
      OutageCredit, 
      CreditPSA, 
      CreditPCGS, 
      FeeReserve, 
      CreditReserve, 
      eBayVISACredit, 
      BBAdminCredit, 
      BBAdminDebit, 
      ReferrerCredit, 
      ReferrerDebit, 
      SwitchCurrency, 
      PaymentGiftCertificate, 
      PaymentWireTransfer, 
      PaymentHomeBanking, 
      PaymentElectronicTransfer, 
      PaymentAdjustmentCredit, 
      PaymentAdjustmentDebit, 
      Chargeoff, 
      ChargeoffRecovery, 
      ChargeoffBankruptcy, 
      ChargeoffSuspended, 
      ChargeoffDeceased, 
      ChargeoffOther, 
      ChargeoffWacko, 
      FinanceChargeReversal, 
      FVFCreditReversal, 
      ForeignFundsConvert, 
      ForeignFundsCheckReversal, 
      EOMRestriction, 
      AllFeesCredit, 
      SetOnHold, 
      RevertUserState, 
      DirectDebitOnFile, 
      DirectDebitNotOnFile, 
      PaymentDirectDebit, 
      DirectDebitReversal, 
      DirectDebitReturnedItem, 
      FeeHighlight, 
      CreditHighlight, 
      BulkUserSuspension, 
      FeeRealEstate30DaysListing, 
      CreditRealEstate30DaysListing, 
      TradingLimitOverrideOn, 
      TradingLimitOverrideOff, 
      EquifaxRealtimeFee, 
      CreditEquifaxRealtimeFee, 
      PaymentEquifaxDebit, 
      PaymentEquifaxCredit, 
      Merged, 
      AutoTraderOn, 
      AutoTraderOff, 
      PaperInvoiceOn, 
      PaperInvoiceOff, 
      AccountStateSwitch, 
      FVFCreditReversalAutomatic, 
      CreditSoftOutage, 
      LACatalogFee, 
      LAExtraItem, 
      LACatalogItemFeeRefund, 
      LACatalogInsertionRefund, 
      LAFinalValueFee, 
      LAFinalValueFeeRefund, 
      LABuyerPremiumPercentageFee, 
      LABuyerPremiumPercentageFeeRefund, 
      LAAudioVideoFee, 
      LAAudioVideoFeeRefund, 
      FeeIPIXPhoto, 
      FeeIPIXSlideShow, 
      CreditIPIXPhoto, 
      CreditIPIXSlideShow, 
      FeeTenDayAuction, 
      CreditTenDayAuction, 
      TemporaryCredit, 
      TemporaryCreditReversal, 
      SubscriptionAABasic, 
      SubscriptionAAPro, 
      CreditAABasic, 
      CreditAAPro, 
      FeeLargePicture, 
      CreditLargePicture, 
      FeePicturePack, 
      CreditPicturePackPartial, 
      CreditPicturePackFull, 
      SubscriptioneBayStores, 
      CrediteBayStores, 
      FeeInsertionFixedPrice, 
      CreditInsertionFixedPrice, 
      FeeFinalValueFixedPrice, 
      CreditFinalValueFixedPrice, 
      ElectronicInvoiceOn, 
      ElectronicInvoiceOff, 
      FlagDDDDPending, 
      FlagDDPaymentConfirmed, 
      FixedPriceDurationFee, 
      FixedPriceDurationCredit, 
      BuyItNowFee, 
      BuyItNowCredit, 
      FeeSchedule, 
      CreditSchedule, 
      SubscriptionSMBasic, 
      SubscriptionSMBasicPro, 
      CreditSMBasic, 
      CreditSMBasicPro, 
      StoresGTCFee, 
      StoresGTCCredit, 
      ListingDesignerFee, 
      ListingDesignerCredit, 
      ExtendedAuctionFee, 
      ExtendedAcutionCredit, 
      PayPalOTPSucc, 
      PayPalOTPPend, 
      PayPalFailed, 
      PayPalChargeBack, 
      ChargeBack, 
      ChargeBackReversal, 
      PayPalRefund, 
      BonusPointsAddition, 
      BonusPointsReduction, 
      BonusPointsPaymentAutomatic, 
      BonusPointsPaymentManual, 
      BonusPointsPaymentReversal, 
      BonusPointsCashPayout, 
      VATCredit, 
      VATDebit, 
      VATStatusChangePending, 
      VATStatusChangeApproved, 
      VATStatusChange_Denied, 
      VATStatusDeletedByCSR, 
      VATStatusDeletedByUser, 
      SMProListingDesignerFee, 
      SMProListingDesignerCredit, 
      StoresSuccessfulListingFee, 
      StoresSuccessfulListingFeeCredit, 
      StoresReferralFee, 
      StoresReferralCredit, 
      SubtitleFee, 
      SubtitleFeeCredit, 
      eBayStoreInventorySubscriptionCredit, 
      AutoPmntReqExempt, 
      AutoPmntReqRein, 
      PictureManagerSubscriptionFee, 
      PictureManagerSubscriptionFeeCredit, 
      SellerReportsBasicFee, 
      SellerReportsBasicCredit, 
      SellerReportsPlusFee, 
      SellerReportsPlusCredit, 
      PaypalOnFile, 
      PaypalOnFileByCSR, 
      PaypalOffFile, 
      BorderFee, 
      BorderFeeCredit, 
      FeeSearchableMobileDE, 
      SalesReportsPlusFee, 
      SalesReportsPlusCredit, 
      CreditSearchableMobileDE, 
      EmailMarketingFee, 
      EmailMarketingCredit, 
      FeePictureShow, 
      CreditPictureShow, 
      ProPackBundleFee, 
      ProPackBundleFeeCredit, 
      BasicUpgradePackBundleFee, 
      BasicUpgradePackBundleFeeCredit, 
      ValuePackBundleFee, 
      ValuePackBundleFeeCredit, 
      ProPackPlusBundleFee, 
      ProPackPlusBundleFeeCredit, 
      FinalEntry, 
      CustomCode, 
      ExtendedDurationFee, 
      ExtendedDurationFeeCredit, 
      InternationalListingFee, 
      InternationalListingCredit, 
      MarketplaceResearchExpiredSubscriptionFee, 
      MarketplaceResearchExpiredSubscriptionFeeCredit, 
      MarketplaceResearchBasicSubscriptionFee, 
      MarketplaceResearchBasicSubscriptionFeeCredit, 
      MarketplaceResearchProSubscriptionFee, 
      BasicBundleFee, 
      BasicBundleFeeCredit, 
      MarketplaceResearchProSubscriptionFeeCredit, 
      VehicleLocalSubscriptionFee, 
      VehicleLocalSubscriptionFeeCredit, 
      VehicleLocalInsertionFee, 
      VehicleLocalInsertionFeeCredit, 
      VehicleLocalFinalValueFee, 
      VehicleLocalFinalValueFeeCredit, 
      VehicleLocalGTCFee, 
      VehicleLocalGTCFeeCredit, 
      eBayMotorsProFee, 
      CrediteBayMotorsProFee, 
      eBayMotorsProFeatureFee, 
      CrediteBayMotorsProFeatureFee, 
      FeeGalleryPlus, 
      CreditGalleryPlus, 
      PrivateListing, 
      CreditPrivateListing, 
      ImmoProFee, 
      CreditImmoProFee, 
      ImmoProFeatureFee, 
      CreditImmoProFeatureFee, 
      RealEstateProFee, 
      CreditRealEstateProFee, 
      RealEstateProFeatureFee, 
      CreditRealEstateProFeatureFee, 
      Discount, 
      CreditFinalValueShipping, 
      FeeFinalValueShipping, 
      FeeReturnShipping, 
      CreditReturnShipping, 
      FeeGlobalShippingProgram, 
      CreditGlobalShippingProgram, 
      FeeAuctionEndEarly, 
      CreditAuctionEndEarly, 
      FeeFedExShippingLabel, 
      CreditFedExShippingLabel, 
      FeeReturnRefund, 
      CreditReturnRefund, 
      FeeStoresSubscriptionEarlyTermination, 
      CreditStoresSubscriptionEarlyTermination, 
      FeeVehicleSubscriptionEarlyTermination, 
      CreditVehicleSubscriptionEarlyTermination, 
      FeeVehicleSubscription, 
      CreditVehicleSubscription, 
      FeeAUPostShippingLabel, 
      CreditAUPostShippingLabel, 
      FeeAPACFedExShippingLabel, 
      CreditAPACFedExShippingLabel, 
      FeeAPACTNTShippingLabel, 
      CreditAPACTNTShippingLabel, 
      FeeEBPReimbursement, 
      CreditEBPReimbursement, 
      FeePromotedListingFeature, 
      CreditPromotedListingFeature, 
      FeeAd, 
      CreditAd, 
      FeeUBIShippingLabel, 
      CreditUBIShippingLabel, 
      FeeeBayPlusSubscription, 
      CrediteBayPlusSubscription, 
      PaymentIntermediationFee, 
      PaymentIntermediationFeeCredit, 
      FeePaymentIntermediationRVI, 
      FeePaymentIntermediationChargeback, 
      FeePaymentIntermediationChargebackRVI, 
      SnadOutlierFinalValueFee, 
      SnadOutlierFinalValueFeeOnShipping, 
      HighlineSearchFee, 
      HighlineSearchFeeCredit, 
      SnadOutlierFinalValueFeeCredit, 
      SnadOutlierFinalValueFeeOnShippingCredit, 
      AdFeePremium, 
      AdFeePremiumCredit, 
      PerListingPaymentsFee, 
      PerListingPaymentsFeeCredit, 
      VehiclesListingBasicPackageFee, 
      VehiclesListingBasicPackageCredit, 
      VehiclesListingPlusPackageFee, 
      VehiclesListingPlusPackageCredit, 
      VehiclesListingPremiumPackageFee, 
      VehiclesListingPremiumPackageCredit, 
      SendLabelFee, 
      SendLabelFeeCredit, 
      UpsLabelFee, 
      UpsLabelFeeCredit, 
      CanadaPostLabelFee, 
      CanadaPostLabelFeeCredit, 
      EbaySendLabelFee, 
      EbaySendLabelFeeCredit, 
      USInternetSalesTax, 
      USInternetSalesTaxCredit, 
      NewZealandGST, 
      NewZealandGSTCredit, 
      AustraliaGST, 
      AustraliaGSTCredit, 
      UspsLabelFee, 
      UspsLabelFeeCredit, 
      ShippingInsuranceFee, 
      ShippingInsuranceFeeCredit, 
      UspsShortpaidFee, 
      UspsShortpaidFeeCredit, 
      CoFundingCharge, 
      CoFundingChargeCredit
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AckCodeType = (Success, Failure, Warning, PartialFailure, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  WarningLevelCodeType = (Low_, High_);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeMessageSourceCodeType = (Buyer, Seller, eBay, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DisputeResolutionRecordTypeCodeType = (
      StrikeBuyer, 
      SuspendBuyer, 
      RestrictBuyer, 
      FVFCredit, 
      InsertionFeeCredit, 
      AppealBuyerStrike, 
      UnsuspendBuyer, 
      UnrestrictBuyer, 
      ReverseFVFCredit, 
      ReverseInsertionFeeCredit, 
      GenerateCSTicketForSuspend, 
      FVFCreditNotGranted, 
      ItemNotReceivedClaimFiled, 
      UnpaidItemRelisted, 
      UnpaidItemRevised, 
      FVFOnShippingCredit, 
      FVFOnShippingCreditNotGranted, 
      ReverseFVFOnShippingCredit, 
      FeatureFeeCredit, 
      FeatureFeeNotCredit, 
      ReverseFeatureFeeCredit, 
      CustomCode
  );

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  EnableCodeType = (Enable, Disable, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  NotificationPayloadTypeCodeType = (eBLSchemaSOAP, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  DeviceTypeCodeType = (Platform_, SMS, ClientAlerts, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  FeedbackRatingDetailCodeType = (ItemAsDescribed, Communication, ShippingTime, ShippingAndHandlingCharges, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressAttributeCodeType = (ReferenceNumber, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressOwnerCodeType = (PayPal, eBay, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressStatusCodeType = (None, Confirmed, Unconfirmed, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AdFormatLeadStatusCodeType = (New, Responded, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressRecordTypeCodeType = (Residential, Business, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AnnouncementMessageCodeType = (None, Deprecation, Mapping, DeprecationAndMapping, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccessRuleCurrentStatusCodeType = (NotSet, HourlyLimitExceeded, DailyLimitExceeded, PeriodicLimitExceeded, HourlySoftLimitExceeded, DailySoftLimitExceeded, PeriodicSoftLimitExceeded, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AccessRuleStatusCodeType = (RuleOff, RuleOn, ApplicationBlocked, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  AddressUsageCodeType = (DefaultShipping, Shipping, Invalid, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  ApplicationDeviceTypeCodeType = (Browser, Wireless, Desktop, SetTopTVBox, CustomCode);

  {$SCOPEDENUMS OFF}

  Array_Of_UnitOfMeasurementType = array of UnitOfMeasurementType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingServicePackageDetailsType = array of ShippingServicePackageDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AnnouncementMessageType = array of AnnouncementMessageType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ListingFeatureDetailsType = array of ListingFeatureDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SiteBuyerRequirementDetailsType = array of SiteBuyerRequirementDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ListingStartPriceDetailsType = array of ListingStartPriceDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingCarrierDetailsType = array of ShippingCarrierDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  SupportedSellerProfilesType = array of SupportedSellerProfileType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_ExcludeShippingLocationDetailsType = array of ExcludeShippingLocationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RecoupmentPolicyDetailsType = array of RecoupmentPolicyDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingCategoryDetailsType = array of ShippingCategoryDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingCostPaidByDetailsType = array of ShippingCostPaidByDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_InventoryFeesType = array of InventoryFeesType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_InventoryStatusType = array of InventoryStatusType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingPackageInfoType = array of ShippingPackageInfoType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RestockingFeeValueDetailsType = array of RestockingFeeValueDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_WarrantyOfferedDetailsType = array of WarrantyOfferedDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ReturnsAcceptedDetailsType = array of ReturnsAcceptedDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_WarrantyTypeDetailsType = array of WarrantyTypeDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_WarrantyDurationDetailsType = array of WarrantyDurationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ReturnsWithinDetailsType = array of ReturnsWithinDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RefundDetailsType = array of RefundDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  RefundFundingSourceArrayType = array of RefundFundingSourceType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : RefundFailureReasonType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundFailureReasonType = class(TRemotable)
  private
    FRefundFailureCode: RefundFailureCodeType;
    FRefundFailureCode_Specified: boolean;
    procedure SetRefundFailureCode(Index: Integer; const ARefundFailureCodeType: RefundFailureCodeType);
    function  RefundFailureCode_Specified(Index: Integer): boolean;
  published
    property RefundFailureCode: RefundFailureCodeType  Index (IS_OPTN) read FRefundFailureCode write SetRefundFailureCode stored RefundFailureCode_Specified;
  end;

  RefundTransactionArrayType = array of RefundTransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RefundLineArrayType = array of RefundLineType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : StoreSubscriptionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreSubscriptionType = class(TRemotable)
  private
    FLevel: StoreSubscriptionLevelCodeType;
    FLevel_Specified: boolean;
    FFee: AmountType;
    FFee_Specified: boolean;
    procedure SetLevel(Index: Integer; const AStoreSubscriptionLevelCodeType: StoreSubscriptionLevelCodeType);
    function  Level_Specified(Index: Integer): boolean;
    procedure SetFee(Index: Integer; const AAmountType: AmountType);
    function  Fee_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Level: StoreSubscriptionLevelCodeType  Index (IS_OPTN) read FLevel write SetLevel stored Level_Specified;
    property Fee:   AmountType                      Index (IS_OPTN) read FFee write SetFee stored Fee_Specified;
  end;

  Array_Of_SiteDetailsType = array of SiteDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  StoreColorSchemeArrayType = array of StoreColorSchemeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_URLDetailsType = array of URLDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_TimeZoneDetailsType = array of TimeZoneDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  TopRatedSellerDetailsType = array of TopRatedProgramCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_ShippingServiceDetailsType = array of ShippingServiceDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingLocationDetailsType = array of ShippingLocationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ItemSpecificDetailsType = array of ItemSpecificDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingPackageDetailsType = array of ShippingPackageDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RegionOfOriginDetailsType = array of RegionOfOriginDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingTypeCodeType = array of ShippingTypeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingCarrierCodeType = array of ShippingCarrierCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_UnitOfMeasurementDetailsType = array of UnitOfMeasurementDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  SuggestedBidValueType = array of AmountType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_ShippingPackageCodeType = array of ShippingPackageCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  ShipmentLineItemType = array of LineItemType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_VariationSpecificPictureSetType = array of VariationSpecificPictureSetType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  ModifyNameArrayType = array of ModifyNameType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MembershipDetailsType = array of MembershipDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : MultiLegShippingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MultiLegShippingDetailsType = class(TRemotable)
  private
    FSellerShipmentToLogisticsProvider: MultiLegShipmentType;
    FSellerShipmentToLogisticsProvider_Specified: boolean;
    FLogisticsProviderShipmentToBuyer: MultiLegShipmentType;
    FLogisticsProviderShipmentToBuyer_Specified: boolean;
    procedure SetSellerShipmentToLogisticsProvider(Index: Integer; const AMultiLegShipmentType: MultiLegShipmentType);
    function  SellerShipmentToLogisticsProvider_Specified(Index: Integer): boolean;
    procedure SetLogisticsProviderShipmentToBuyer(Index: Integer; const AMultiLegShipmentType: MultiLegShipmentType);
    function  LogisticsProviderShipmentToBuyer_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellerShipmentToLogisticsProvider: MultiLegShipmentType  Index (IS_OPTN) read FSellerShipmentToLogisticsProvider write SetSellerShipmentToLogisticsProvider stored SellerShipmentToLogisticsProvider_Specified;
    property LogisticsProviderShipmentToBuyer:  MultiLegShipmentType  Index (IS_OPTN) read FLogisticsProviderShipmentToBuyer write SetLogisticsProviderShipmentToBuyer stored LogisticsProviderShipmentToBuyer_Specified;
  end;

  Array_Of_SellerDiscountType = array of SellerDiscountType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  IntegratedMerchantCreditCardInfoType = array of SiteCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  RecoupmentPolicyConsentType = array of SiteCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : FlatRateInsuranceRangeCostType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatRateInsuranceRangeCostType = class(TRemotable)
  private
    FFlatRateInsuranceRange: FlatRateInsuranceRangeCodeType;
    FFlatRateInsuranceRange_Specified: boolean;
    FInsuranceCost: AmountType;
    FInsuranceCost_Specified: boolean;
    procedure SetFlatRateInsuranceRange(Index: Integer; const AFlatRateInsuranceRangeCodeType: FlatRateInsuranceRangeCodeType);
    function  FlatRateInsuranceRange_Specified(Index: Integer): boolean;
    procedure SetInsuranceCost(Index: Integer; const AAmountType: AmountType);
    function  InsuranceCost_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FlatRateInsuranceRange: FlatRateInsuranceRangeCodeType  Index (IS_OPTN) read FFlatRateInsuranceRange write SetFlatRateInsuranceRange stored FlatRateInsuranceRange_Specified;
    property InsuranceCost:          AmountType                      Index (IS_OPTN) read FInsuranceCost write SetInsuranceCost stored InsuranceCost_Specified;
  end;

  Array_Of_ReasonCodeDetailType = array of ReasonCodeDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DayOfWeekCodeType = array of DayOfWeekCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_UserAgreementInfoType = array of UserAgreementInfoType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_TaxDetailsType = array of TaxDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : TaxesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxesType = class(TRemotable)
  private
    FTotalTaxAmount: AmountType;
    FTotalTaxAmount_Specified: boolean;
    FTaxDetails: Array_Of_TaxDetailsType;
    FTaxDetails_Specified: boolean;
    procedure SetTotalTaxAmount(Index: Integer; const AAmountType: AmountType);
    function  TotalTaxAmount_Specified(Index: Integer): boolean;
    procedure SetTaxDetails(Index: Integer; const AArray_Of_TaxDetailsType: Array_Of_TaxDetailsType);
    function  TaxDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TotalTaxAmount: AmountType               Index (IS_OPTN) read FTotalTaxAmount write SetTotalTaxAmount stored TotalTaxAmount_Specified;
    property TaxDetails:     Array_Of_TaxDetailsType  Index (IS_OPTN or IS_UNBD) read FTaxDetails write SetTaxDetails stored TaxDetails_Specified;
  end;

  Array_Of_StoreCustomListingHeaderLinkType = array of StoreCustomListingHeaderLinkType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  ShippingServiceCostOverrideListType = array of ShippingServiceCostOverrideType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellerProfilesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerProfilesType = class(TRemotable)
  private
    FSellerShippingProfile: SellerShippingProfileType;
    FSellerShippingProfile_Specified: boolean;
    FSellerReturnProfile: SellerReturnProfileType;
    FSellerReturnProfile_Specified: boolean;
    FSellerPaymentProfile: SellerPaymentProfileType;
    FSellerPaymentProfile_Specified: boolean;
    procedure SetSellerShippingProfile(Index: Integer; const ASellerShippingProfileType: SellerShippingProfileType);
    function  SellerShippingProfile_Specified(Index: Integer): boolean;
    procedure SetSellerReturnProfile(Index: Integer; const ASellerReturnProfileType: SellerReturnProfileType);
    function  SellerReturnProfile_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentProfile(Index: Integer; const ASellerPaymentProfileType: SellerPaymentProfileType);
    function  SellerPaymentProfile_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellerShippingProfile: SellerShippingProfileType  Index (IS_OPTN) read FSellerShippingProfile write SetSellerShippingProfile stored SellerShippingProfile_Specified;
    property SellerReturnProfile:   SellerReturnProfileType    Index (IS_OPTN) read FSellerReturnProfile write SetSellerReturnProfile stored SellerReturnProfile_Specified;
    property SellerPaymentProfile:  SellerPaymentProfileType   Index (IS_OPTN) read FSellerPaymentProfile write SetSellerPaymentProfile stored SellerPaymentProfile_Specified;
  end;

  LookupAttributeArrayType = array of LookupAttributeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_ItemCompatibilityType = array of ItemCompatibilityType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ListingDurationDefinitionType = array of ListingDurationDefinitionType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_VariationType = array of VariationType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PicturesType = array of PicturesType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_MaximumUnpaidItemStrikesDurationDetailsType = array of MaximumUnpaidItemStrikesDurationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PolicyViolationDurationDetailsType = array of PolicyViolationDurationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  RequiredSellerActionArrayType = array of RequiredSellerActionCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  PaymentInformationType = array of PaymentTransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_MetadataType = array of MetadataType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  RefundInformationType = array of RefundTransactionInfoType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_PromotionDetailsType = array of PromotionDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ItemBidDetailsType = array of ItemBidDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_BidGroupItemType = array of BidGroupItemType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_TaxIdentifierAttributeType = array of TaxIdentifierAttributeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ExtendedProductFinderIDType = array of ExtendedProductFinderIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ValType = array of ValType;          { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ErrorParameterType = array of ErrorParameterType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PictureSetMemberType = array of PictureSetMemberType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PromotedItemType = array of PromotedItemType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CharacteristicsSetType = array of CharacteristicsSetType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ConditionType = array of ConditionType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CharacteristicType = array of CharacteristicType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_TransactionReferenceType = array of TransactionReferenceType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  RefundArrayType = array of RefundType;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : OrderTransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OrderTransactionType = class(TRemotable)
  private
    FOrder: OrderType;
    FOrder_Specified: boolean;
    FTransaction: TransactionType;
    FTransaction_Specified: boolean;
    procedure SetOrder(Index: Integer; const AOrderType: OrderType);
    function  Order_Specified(Index: Integer): boolean;
    procedure SetTransaction(Index: Integer; const ATransactionType: TransactionType);
    function  Transaction_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Order:       OrderType        Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
    property Transaction: TransactionType  Index (IS_OPTN) read FTransaction write SetTransaction stored Transaction_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaymentsInformationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentsInformationType = class(TRemotable)
  private
    FPayments: PaymentInformationType;
    FPayments_Specified: boolean;
    FRefunds: RefundInformationType;
    FRefunds_Specified: boolean;
    procedure SetPayments(Index: Integer; const APaymentInformationType: PaymentInformationType);
    function  Payments_Specified(Index: Integer): boolean;
    procedure SetRefunds(Index: Integer; const ARefundInformationType: RefundInformationType);
    function  Refunds_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Payments: PaymentInformationType  Index (IS_OPTN) read FPayments write SetPayments stored Payments_Specified;
    property Refunds:  RefundInformationType   Index (IS_OPTN) read FRefunds write SetRefunds stored Refunds_Specified;
  end;

  Array_Of_ValueRecommendationType = array of ValueRecommendationType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SearchFlagCodeType = array of SearchFlagCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  PickupDetailsType = array of PickupOptionsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_NameValueRelationshipType = array of NameValueRelationshipType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  OrderTransactionArrayType = array of OrderTransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : OfferDiscountsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OfferDiscountsType = class(TRemotable)
  private
    FSellerMarketing: AmountType;
    FSellerMarketing_Specified: boolean;
    procedure SetSellerMarketing(Index: Integer; const AAmountType: AmountType);
    function  SellerMarketing_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellerMarketing: AmountType  Index (IS_OPTN) read FSellerMarketing write SetSellerMarketing stored SellerMarketing_Specified;
  end;



  // ************************************************************************ //
  // XML       : SummaryEventScheduleType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SummaryEventScheduleType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FEventType_Specified: boolean;
    FSummaryPeriod: SummaryWindowPeriodCodeType;
    FSummaryPeriod_Specified: boolean;
    FFrequency: SummaryFrequencyCodeType;
    FFrequency_Specified: boolean;
    procedure SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
    function  EventType_Specified(Index: Integer): boolean;
    procedure SetSummaryPeriod(Index: Integer; const ASummaryWindowPeriodCodeType: SummaryWindowPeriodCodeType);
    function  SummaryPeriod_Specified(Index: Integer): boolean;
    procedure SetFrequency(Index: Integer; const ASummaryFrequencyCodeType: SummaryFrequencyCodeType);
    function  Frequency_Specified(Index: Integer): boolean;
  published
    property EventType:     NotificationEventTypeCodeType  Index (IS_OPTN) read FEventType write SetEventType stored EventType_Specified;
    property SummaryPeriod: SummaryWindowPeriodCodeType    Index (IS_OPTN) read FSummaryPeriod write SetSummaryPeriod stored SummaryPeriod_Specified;
    property Frequency:     SummaryFrequencyCodeType       Index (IS_OPTN) read FFrequency write SetFrequency stored Frequency_Specified;
  end;

  Array_Of_ErrorType = array of ErrorType;      { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ListingEnhancementsCodeType = array of ListingEnhancementsCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AdditionalAccountType = array of AdditionalAccountType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_EndItemResponseContainerType = array of EndItemResponseContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShipmentTrackingDetailsType = array of ShipmentTrackingDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_EndItemRequestContainerType = array of EndItemRequestContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AdFormatLeadType = array of AdFormatLeadType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CategoryFeatureType = array of CategoryFeatureType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ListingDurationReferenceType = array of ListingDurationReferenceType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ApiAccessRuleType = array of ApiAccessRuleType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingFeatureCodeType = array of ShippingFeatureCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AddItemResponseContainerType = array of AddItemResponseContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_MessageMediaType = array of MessageMediaType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AddItemRequestContainerType = array of AddItemRequestContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AddMemberMessagesAAQToBidderRequestContainerType = array of AddMemberMessagesAAQToBidderRequestContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_TaxIdentifierType = array of TaxIdentifierType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_VariationKeyType = array of VariationKeyType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CancelDetailType = array of CancelDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AddMemberMessagesAAQToBidderResponseContainerType = array of AddMemberMessagesAAQToBidderResponseContainerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ExternalTransactionType = array of ExternalTransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CharityInfoType = array of CharityInfoType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_NameRecommendationType = array of NameRecommendationType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : ProductIdentifiersType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductIdentifiersType = class(TRemotable)
  private
    FValidationRules: GroupValidationRulesType;
    FNameRecommendation: Array_Of_NameRecommendationType;
    FNameRecommendation_Specified: boolean;
    procedure SetNameRecommendation(Index: Integer; const AArray_Of_NameRecommendationType: Array_Of_NameRecommendationType);
    function  NameRecommendation_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ValidationRules:    GroupValidationRulesType         read FValidationRules write FValidationRules;
    property NameRecommendation: Array_Of_NameRecommendationType  Index (IS_OPTN or IS_UNBD) read FNameRecommendation write SetNameRecommendation stored NameRecommendation_Specified;
  end;

  Array_Of_NonProfitAddressType = array of NonProfitAddressType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ContextSearchAssetType = array of ContextSearchAssetType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_NonProfitSocialAddressType = array of NonProfitSocialAddressType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ProductIdentifiersType = array of ProductIdentifiersType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CategoryMappingType = array of CategoryMappingType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RecommendationsType = array of RecommendationsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CategoryItemSpecificsType = array of CategoryItemSpecificsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DescriptionTemplateType = array of DescriptionTemplateType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_UserDefinedListType = array of UserDefinedListType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_MyMessagesFolderSummaryType = array of MyMessagesFolderSummaryType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_MyeBayFavoriteSearchType = array of MyeBayFavoriteSearchType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_NotificationEventPropertyType = array of NotificationEventPropertyType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_MyeBayFavoriteSellerType = array of MyeBayFavoriteSellerType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_InternationalShippingServiceOptionsType = array of InternationalShippingServiceOptionsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DisputeResolutionType = array of DisputeResolutionType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ThemeGroupType = array of ThemeGroupType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DisputeMessageType = array of DisputeMessageType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingServiceOptionsType = array of ShippingServiceOptionsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DeliveryURLDetailType = array of DeliveryURLDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_ShippingRegionCodeType = array of ShippingRegionCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : VeROSiteDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROSiteDetailType = class(TRemotable)
  private
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FReasonCodeDetail: Array_Of_ReasonCodeDetailType;
    FReasonCodeDetail_Specified: boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetReasonCodeDetail(Index: Integer; const AArray_Of_ReasonCodeDetailType: Array_Of_ReasonCodeDetailType);
    function  ReasonCodeDetail_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Site:             SiteCodeType                   Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property ReasonCodeDetail: Array_Of_ReasonCodeDetailType  Index (IS_OPTN or IS_UNBD) read FReasonCodeDetail write SetReasonCodeDetail stored ReasonCodeDetail_Specified;
  end;

  Array_Of_EBaySubscriptionTypeCodeType = array of EBaySubscriptionTypeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DispatchTimeMaxDetailsType = array of DispatchTimeMaxDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CurrencyDetailsType = array of CurrencyDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PaymentOptionDetailsType = array of PaymentOptionDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_RegionDetailsType = array of RegionDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : UnpaidItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnpaidItemType = class(TRemotable)
  private
    FStatus: UnpaidItemCaseStatusTypeCodeType;
    FStatus_Specified: boolean;
    FType_: UnpaidItemCaseOpenTypeCodeType;
    FType__Specified: boolean;
    procedure SetStatus(Index: Integer; const AUnpaidItemCaseStatusTypeCodeType: UnpaidItemCaseStatusTypeCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const AUnpaidItemCaseOpenTypeCodeType: UnpaidItemCaseOpenTypeCodeType);
    function  Type__Specified(Index: Integer): boolean;
  published
    property Status: UnpaidItemCaseStatusTypeCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Type_:  UnpaidItemCaseOpenTypeCodeType    Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
  end;

  Array_Of_SellingManagerProductType = array of SellingManagerProductType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerFolderDetailsType = array of SellingManagerFolderDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_VATRateType = array of VATRateType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerSoldTransactionType = array of SellingManagerSoldTransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerEmailLogType = array of SellingManagerEmailLogType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SummaryEventScheduleType = array of SummaryEventScheduleType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PerformanceDashboardType = array of PerformanceDashboardType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerAlertType = array of SellingManagerAlertType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellerDashboardAlertType = array of SellerDashboardAlertType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_eBayPLUSPreferenceType = array of eBayPLUSPreferenceType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DisputeFilterCountType = array of DisputeFilterCountType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_CountryDetailsType = array of CountryDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_AddressAttributeType = array of AddressAttributeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerSoldOrderType = array of SellingManagerSoldOrderType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DiscountProfileType = array of DiscountProfileType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_StoreThemeType = array of StoreThemeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_FlatRateInsuranceRangeCostType = array of FlatRateInsuranceRangeCostType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerInventoryPropertyTypeCodeType = array of SellingManagerInventoryPropertyTypeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_SellingManagerSoldListingsPropertyTypeCodeType = array of SellingManagerSoldListingsPropertyTypeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  SellingManagerTemplateDetailsArrayType = array of SellingManagerTemplateDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellingManagerProductType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerProductType = class(TRemotable)
  private
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FSellingManagerTemplateDetailsArray: SellingManagerTemplateDetailsArrayType;
    FSellingManagerTemplateDetailsArray_Specified: boolean;
    FSellingManagerProductInventoryStatus: SellingManagerProductInventoryStatusType;
    FSellingManagerProductInventoryStatus_Specified: boolean;
    FSellingManagerProductSpecifics: SellingManagerProductSpecificsType;
    FSellingManagerProductSpecifics_Specified: boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetSellingManagerTemplateDetailsArray(Index: Integer; const ASellingManagerTemplateDetailsArrayType: SellingManagerTemplateDetailsArrayType);
    function  SellingManagerTemplateDetailsArray_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductInventoryStatus(Index: Integer; const ASellingManagerProductInventoryStatusType: SellingManagerProductInventoryStatusType);
    function  SellingManagerProductInventoryStatus_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
    function  SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellingManagerProductDetails:         SellingManagerProductDetailsType          Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property SellingManagerTemplateDetailsArray:   SellingManagerTemplateDetailsArrayType    Index (IS_OPTN) read FSellingManagerTemplateDetailsArray write SetSellingManagerTemplateDetailsArray stored SellingManagerTemplateDetailsArray_Specified;
    property SellingManagerProductInventoryStatus: SellingManagerProductInventoryStatusType  Index (IS_OPTN) read FSellingManagerProductInventoryStatus write SetSellingManagerProductInventoryStatus stored SellingManagerProductInventoryStatus_Specified;
    property SellingManagerProductSpecifics:       SellingManagerProductSpecificsType        Index (IS_OPTN) read FSellingManagerProductSpecifics write SetSellingManagerProductSpecifics stored SellingManagerProductSpecifics_Specified;
  end;

  NotificationEnableArrayType = array of NotificationEnableType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  NotificationDetailsArrayType = array of NotificationDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  MarkUpMarkDownHistoryType = array of MarkUpMarkDownEventType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BidGroupArrayType = array of BidGroupType;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : PaginatedOrderTransactionArrayType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedOrderTransactionArrayType = class(TRemotable)
  private
    FOrderTransactionArray: OrderTransactionArrayType;
    FOrderTransactionArray_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetOrderTransactionArray(Index: Integer; const AOrderTransactionArrayType: OrderTransactionArrayType);
    function  OrderTransactionArray_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OrderTransactionArray: OrderTransactionArrayType  Index (IS_OPTN) read FOrderTransactionArray write SetOrderTransactionArray stored OrderTransactionArray_Specified;
    property PaginationResult:      PaginationResultType       Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : SearchStandingDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchStandingDashboardType = class(TRemotable)
  private
    FStatus: SearchStandingStatusCodeType;
    FStatus_Specified: boolean;
    procedure SetStatus(Index: Integer; const ASearchStandingStatusCodeType: SearchStandingStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
  published
    property Status: SearchStandingStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
  end;



  // ************************************************************************ //
  // XML       : PowerSellerDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PowerSellerDashboardType = class(TRemotable)
  private
    FLevel: SellerLevelCodeType;
    FLevel_Specified: boolean;
    FAlert: Array_Of_SellerDashboardAlertType;
    FAlert_Specified: boolean;
    procedure SetLevel(Index: Integer; const ASellerLevelCodeType: SellerLevelCodeType);
    function  Level_Specified(Index: Integer): boolean;
    procedure SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Level: SellerLevelCodeType                Index (IS_OPTN) read FLevel write SetLevel stored Level_Specified;
    property Alert: Array_Of_SellerDashboardAlertType  Index (IS_OPTN or IS_UNBD) read FAlert write SetAlert stored Alert_Specified;
  end;

  PromotionalSaleArrayType = array of PromotionalSaleType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : PolicyComplianceDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PolicyComplianceDashboardType = class(TRemotable)
  private
    FStatus: PolicyComplianceStatusCodeType;
    FStatus_Specified: boolean;
    FAlert: Array_Of_SellerDashboardAlertType;
    FAlert_Specified: boolean;
    procedure SetStatus(Index: Integer; const APolicyComplianceStatusCodeType: PolicyComplianceStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Status: PolicyComplianceStatusCodeType     Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Alert:  Array_Of_SellerDashboardAlertType  Index (IS_OPTN or IS_UNBD) read FAlert write SetAlert stored Alert_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerAccountDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerAccountDashboardType = class(TRemotable)
  private
    FStatus: SellerAccountStatusCodeType;
    FStatus_Specified: boolean;
    FAlert: Array_Of_SellerDashboardAlertType;
    FAlert_Specified: boolean;
    procedure SetStatus(Index: Integer; const ASellerAccountStatusCodeType: SellerAccountStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Status: SellerAccountStatusCodeType        Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Alert:  Array_Of_SellerDashboardAlertType  Index (IS_OPTN or IS_UNBD) read FAlert write SetAlert stored Alert_Specified;
  end;



  // ************************************************************************ //
  // XML       : PerformanceDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PerformanceDashboardType = class(TRemotable)
  private
    FSite: IntegratedMerchantCreditCardInfoType;
    FSite_Specified: boolean;
    FStatus: PerformanceStatusCodeType;
    FStatus_Specified: boolean;
    FAlert: SellerDashboardAlertType;
    FAlert_Specified: boolean;
    procedure SetSite(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const APerformanceStatusCodeType: PerformanceStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetAlert(Index: Integer; const ASellerDashboardAlertType: SellerDashboardAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Site:   IntegratedMerchantCreditCardInfoType  Index (IS_OPTN or IS_UNBD) read FSite write SetSite stored Site_Specified;
    property Status: PerformanceStatusCodeType             Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Alert:  SellerDashboardAlertType              Index (IS_OPTN) read FAlert write SetAlert stored Alert_Specified;
  end;

  OrderArrayType = array of OrderType;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemTransactionIDArrayType = array of ItemTransactionIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_PromotionalSaleStatusCodeType = array of PromotionalSaleStatusCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_DetailNameCodeType = array of DetailNameCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  ItemRatingDetailArrayType = array of ItemRatingDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TaxTableType = array of TaxJurisdictionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : StoreThemeArrayType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreThemeArrayType = class(TRemotable)
  private
    FTheme: Array_Of_StoreThemeType;
    FTheme_Specified: boolean;
    FGenericColorSchemeArray: StoreColorSchemeArrayType;
    FGenericColorSchemeArray_Specified: boolean;
    procedure SetTheme(Index: Integer; const AArray_Of_StoreThemeType: Array_Of_StoreThemeType);
    function  Theme_Specified(Index: Integer): boolean;
    procedure SetGenericColorSchemeArray(Index: Integer; const AStoreColorSchemeArrayType: StoreColorSchemeArrayType);
    function  GenericColorSchemeArray_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Theme:                   Array_Of_StoreThemeType    Index (IS_OPTN or IS_UNBD) read FTheme write SetTheme stored Theme_Specified;
    property GenericColorSchemeArray: StoreColorSchemeArrayType  Index (IS_OPTN) read FGenericColorSchemeArray write SetGenericColorSchemeArray stored GenericColorSchemeArray_Specified;
  end;

  StoreLogoArrayType = array of StoreLogoType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreSubscriptionArrayType = array of StoreSubscriptionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  StoreCustomPageArrayType = array of StoreCustomPageType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  SuggestedCategoryArrayType = array of SuggestedCategoryType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : StorePreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StorePreferencesType = class(TRemotable)
  private
    FVacationPreferences: StoreVacationPreferencesType;
    FVacationPreferences_Specified: boolean;
    procedure SetVacationPreferences(Index: Integer; const AStoreVacationPreferencesType: StoreVacationPreferencesType);
    function  VacationPreferences_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property VacationPreferences: StoreVacationPreferencesType  Index (IS_OPTN) read FVacationPreferences write SetVacationPreferences stored VacationPreferences_Specified;
  end;

  VeROReportedItemDetailsType = array of VeROReportedItemType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  VeROReasonCodeDetailsType = array of VeROSiteDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DisputeArrayType = array of DisputeType;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ProStoresCheckoutPreferenceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProStoresCheckoutPreferenceType = class(TRemotable)
  private
    FCheckoutRedirectProStores: Boolean;
    FCheckoutRedirectProStores_Specified: boolean;
    FProStoresDetails: ProStoresDetailsType;
    FProStoresDetails_Specified: boolean;
    procedure SetCheckoutRedirectProStores(Index: Integer; const ABoolean: Boolean);
    function  CheckoutRedirectProStores_Specified(Index: Integer): boolean;
    procedure SetProStoresDetails(Index: Integer; const AProStoresDetailsType: ProStoresDetailsType);
    function  ProStoresDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CheckoutRedirectProStores: Boolean               Index (IS_OPTN) read FCheckoutRedirectProStores write SetCheckoutRedirectProStores stored CheckoutRedirectProStores_Specified;
    property ProStoresDetails:          ProStoresDetailsType  Index (IS_OPTN) read FProStoresDetails write SetProStoresDetails stored ProStoresDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : BidderNoticePreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidderNoticePreferencesType = class(TRemotable)
  private
    FUnsuccessfulBidderNoticeIncludeMyItems: Boolean;
    FUnsuccessfulBidderNoticeIncludeMyItems_Specified: boolean;
    procedure SetUnsuccessfulBidderNoticeIncludeMyItems(Index: Integer; const ABoolean: Boolean);
    function  UnsuccessfulBidderNoticeIncludeMyItems_Specified(Index: Integer): boolean;
  published
    property UnsuccessfulBidderNoticeIncludeMyItems: Boolean  Index (IS_OPTN) read FUnsuccessfulBidderNoticeIncludeMyItems write SetUnsuccessfulBidderNoticeIncludeMyItems stored UnsuccessfulBidderNoticeIncludeMyItems_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerReturnPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerReturnPreferencesType = class(TRemotable)
  private
    FOptedIn: Boolean;
    FOptedIn_Specified: boolean;
    procedure SetOptedIn(Index: Integer; const ABoolean: Boolean);
    function  OptedIn_Specified(Index: Integer): boolean;
  published
    property OptedIn: Boolean  Index (IS_OPTN) read FOptedIn write SetOptedIn stored OptedIn_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerProfilePreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerProfilePreferencesType = class(TRemotable)
  private
    FSellerProfileOptedIn: Boolean;
    FSellerProfileOptedIn_Specified: boolean;
    FSupportedSellerProfiles: SupportedSellerProfilesType;
    FSupportedSellerProfiles_Specified: boolean;
    procedure SetSellerProfileOptedIn(Index: Integer; const ABoolean: Boolean);
    function  SellerProfileOptedIn_Specified(Index: Integer): boolean;
    procedure SetSupportedSellerProfiles(Index: Integer; const ASupportedSellerProfilesType: SupportedSellerProfilesType);
    function  SupportedSellerProfiles_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellerProfileOptedIn:    Boolean                      Index (IS_OPTN) read FSellerProfileOptedIn write SetSellerProfileOptedIn stored SellerProfileOptedIn_Specified;
    property SupportedSellerProfiles: SupportedSellerProfilesType  Index (IS_OPTN) read FSupportedSellerProfiles write SetSupportedSellerProfiles stored SupportedSellerProfiles_Specified;
  end;



  // ************************************************************************ //
  // XML       : PurchaseReminderEmailPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PurchaseReminderEmailPreferencesType = class(TRemotable)
  private
    FPurchaseReminderEmailPreferences: Boolean;
    FPurchaseReminderEmailPreferences_Specified: boolean;
    procedure SetPurchaseReminderEmailPreferences(Index: Integer; const ABoolean: Boolean);
    function  PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
  published
    property PurchaseReminderEmailPreferences: Boolean  Index (IS_OPTN) read FPurchaseReminderEmailPreferences write SetPurchaseReminderEmailPreferences stored PurchaseReminderEmailPreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReviseStatusType = class(TRemotable)
  private
    FItemRevised: Boolean;
    FBuyItNowAdded: Boolean;
    FBuyItNowAdded_Specified: boolean;
    FBuyItNowLowered: Boolean;
    FBuyItNowLowered_Specified: boolean;
    FReserveLowered: Boolean;
    FReserveLowered_Specified: boolean;
    FReserveRemoved: Boolean;
    FReserveRemoved_Specified: boolean;
    procedure SetBuyItNowAdded(Index: Integer; const ABoolean: Boolean);
    function  BuyItNowAdded_Specified(Index: Integer): boolean;
    procedure SetBuyItNowLowered(Index: Integer; const ABoolean: Boolean);
    function  BuyItNowLowered_Specified(Index: Integer): boolean;
    procedure SetReserveLowered(Index: Integer; const ABoolean: Boolean);
    function  ReserveLowered_Specified(Index: Integer): boolean;
    procedure SetReserveRemoved(Index: Integer; const ABoolean: Boolean);
    function  ReserveRemoved_Specified(Index: Integer): boolean;
  published
    property ItemRevised:     Boolean  read FItemRevised write FItemRevised;
    property BuyItNowAdded:   Boolean  Index (IS_OPTN) read FBuyItNowAdded write SetBuyItNowAdded stored BuyItNowAdded_Specified;
    property BuyItNowLowered: Boolean  Index (IS_OPTN) read FBuyItNowLowered write SetBuyItNowLowered stored BuyItNowLowered_Specified;
    property ReserveLowered:  Boolean  Index (IS_OPTN) read FReserveLowered write SetReserveLowered stored ReserveLowered_Specified;
    property ReserveRemoved:  Boolean  Index (IS_OPTN) read FReserveRemoved write SetReserveRemoved stored ReserveRemoved_Specified;
  end;



  // ************************************************************************ //
  // XML       : SearchDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchDetailsType = class(TRemotable)
  private
    FBuyItNowEnabled: Boolean;
    FBuyItNowEnabled_Specified: boolean;
    FPicture: Boolean;
    FPicture_Specified: boolean;
    FRecentListing: Boolean;
    FRecentListing_Specified: boolean;
    procedure SetBuyItNowEnabled(Index: Integer; const ABoolean: Boolean);
    function  BuyItNowEnabled_Specified(Index: Integer): boolean;
    procedure SetPicture(Index: Integer; const ABoolean: Boolean);
    function  Picture_Specified(Index: Integer): boolean;
    procedure SetRecentListing(Index: Integer; const ABoolean: Boolean);
    function  RecentListing_Specified(Index: Integer): boolean;
  published
    property BuyItNowEnabled: Boolean  Index (IS_OPTN) read FBuyItNowEnabled write SetBuyItNowEnabled stored BuyItNowEnabled_Specified;
    property Picture:         Boolean  Index (IS_OPTN) read FPicture write SetPicture stored Picture_Specified;
    property RecentListing:   Boolean  Index (IS_OPTN) read FRecentListing write SetRecentListing stored RecentListing_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemCompatibilityListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemCompatibilityListType = class(TRemotable)
  private
    FCompatibility: Array_Of_ItemCompatibilityType;
    FCompatibility_Specified: boolean;
    FReplaceAll: Boolean;
    FReplaceAll_Specified: boolean;
    procedure SetCompatibility(Index: Integer; const AArray_Of_ItemCompatibilityType: Array_Of_ItemCompatibilityType);
    function  Compatibility_Specified(Index: Integer): boolean;
    procedure SetReplaceAll(Index: Integer; const ABoolean: Boolean);
    function  ReplaceAll_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Compatibility: Array_Of_ItemCompatibilityType  Index (IS_OPTN or IS_UNBD) read FCompatibility write SetCompatibility stored Compatibility_Specified;
    property ReplaceAll:    Boolean                         Index (IS_OPTN) read FReplaceAll write SetReplaceAll stored ReplaceAll_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingServicePackageDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServicePackageDetailsType = class(TRemotable)
  private
    FName_: ShippingPackageCodeType;
    FName__Specified: boolean;
    FDimensionsRequired: Boolean;
    FDimensionsRequired_Specified: boolean;
    procedure SetName_(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetDimensionsRequired(Index: Integer; const ABoolean: Boolean);
    function  DimensionsRequired_Specified(Index: Integer): boolean;
  published
    property Name_:              ShippingPackageCodeType  Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property DimensionsRequired: Boolean                  Index (IS_OPTN) read FDimensionsRequired write SetDimensionsRequired stored DimensionsRequired_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellereBayPaymentProcessConsentCodeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellereBayPaymentProcessConsentCodeType = class(TRemotable)
  private
    FPayoutMethodSet: Boolean;
    FPayoutMethodSet_Specified: boolean;
    FPayoutMethod: PayoutMethodType;
    FPayoutMethod_Specified: boolean;
    FUserAgreementInfo: Array_Of_UserAgreementInfoType;
    FUserAgreementInfo_Specified: boolean;
    procedure SetPayoutMethodSet(Index: Integer; const ABoolean: Boolean);
    function  PayoutMethodSet_Specified(Index: Integer): boolean;
    procedure SetPayoutMethod(Index: Integer; const APayoutMethodType: PayoutMethodType);
    function  PayoutMethod_Specified(Index: Integer): boolean;
    procedure SetUserAgreementInfo(Index: Integer; const AArray_Of_UserAgreementInfoType: Array_Of_UserAgreementInfoType);
    function  UserAgreementInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PayoutMethodSet:   Boolean                         Index (IS_OPTN) read FPayoutMethodSet write SetPayoutMethodSet stored PayoutMethodSet_Specified;
    property PayoutMethod:      PayoutMethodType                Index (IS_OPTN) read FPayoutMethod write SetPayoutMethod stored PayoutMethod_Specified;
    property UserAgreementInfo: Array_Of_UserAgreementInfoType  Index (IS_OPTN or IS_UNBD) read FUserAgreementInfo write SetUserAgreementInfo stored UserAgreementInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreCustomListingHeaderType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomListingHeaderType = class(TRemotable)
  private
    FDisplayType: StoreCustomListingHeaderDisplayCodeType;
    FDisplayType_Specified: boolean;
    FLogo: Boolean;
    FLogo_Specified: boolean;
    FSearchBox: Boolean;
    FSearchBox_Specified: boolean;
    FLinkToInclude: Array_Of_StoreCustomListingHeaderLinkType;
    FLinkToInclude_Specified: boolean;
    FAddToFavoriteStores: Boolean;
    FAddToFavoriteStores_Specified: boolean;
    FSignUpForStoreNewsletter: Boolean;
    FSignUpForStoreNewsletter_Specified: boolean;
    procedure SetDisplayType(Index: Integer; const AStoreCustomListingHeaderDisplayCodeType: StoreCustomListingHeaderDisplayCodeType);
    function  DisplayType_Specified(Index: Integer): boolean;
    procedure SetLogo(Index: Integer; const ABoolean: Boolean);
    function  Logo_Specified(Index: Integer): boolean;
    procedure SetSearchBox(Index: Integer; const ABoolean: Boolean);
    function  SearchBox_Specified(Index: Integer): boolean;
    procedure SetLinkToInclude(Index: Integer; const AArray_Of_StoreCustomListingHeaderLinkType: Array_Of_StoreCustomListingHeaderLinkType);
    function  LinkToInclude_Specified(Index: Integer): boolean;
    procedure SetAddToFavoriteStores(Index: Integer; const ABoolean: Boolean);
    function  AddToFavoriteStores_Specified(Index: Integer): boolean;
    procedure SetSignUpForStoreNewsletter(Index: Integer; const ABoolean: Boolean);
    function  SignUpForStoreNewsletter_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DisplayType:              StoreCustomListingHeaderDisplayCodeType    Index (IS_OPTN) read FDisplayType write SetDisplayType stored DisplayType_Specified;
    property Logo:                     Boolean                                    Index (IS_OPTN) read FLogo write SetLogo stored Logo_Specified;
    property SearchBox:                Boolean                                    Index (IS_OPTN) read FSearchBox write SetSearchBox stored SearchBox_Specified;
    property LinkToInclude:            Array_Of_StoreCustomListingHeaderLinkType  Index (IS_OPTN or IS_UNBD) read FLinkToInclude write SetLinkToInclude stored LinkToInclude_Specified;
    property AddToFavoriteStores:      Boolean                                    Index (IS_OPTN) read FAddToFavoriteStores write SetAddToFavoriteStores stored AddToFavoriteStores_Specified;
    property SignUpForStoreNewsletter: Boolean                                    Index (IS_OPTN) read FSignUpForStoreNewsletter write SetSignUpForStoreNewsletter stored SignUpForStoreNewsletter_Specified;
  end;



  // ************************************************************************ //
  // XML       : DisputeFilterCountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeFilterCountType = class(TRemotable)
  private
    FDisputeFilterType: DisputeFilterTypeCodeType;
    FDisputeFilterType_Specified: boolean;
    FTotalAvailable: Integer;
    FTotalAvailable_Specified: boolean;
    procedure SetDisputeFilterType(Index: Integer; const ADisputeFilterTypeCodeType: DisputeFilterTypeCodeType);
    function  DisputeFilterType_Specified(Index: Integer): boolean;
    procedure SetTotalAvailable(Index: Integer; const AInteger: Integer);
    function  TotalAvailable_Specified(Index: Integer): boolean;
  published
    property DisputeFilterType: DisputeFilterTypeCodeType  Index (IS_OPTN) read FDisputeFilterType write SetDisputeFilterType stored DisputeFilterType_Specified;
    property TotalAvailable:    Integer                    Index (IS_OPTN) read FTotalAvailable write SetTotalAvailable stored TotalAvailable_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationStatisticsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationStatisticsType = class(TRemotable)
  private
    FDeliveredCount: Integer;
    FDeliveredCount_Specified: boolean;
    FQueuedNewCount: Integer;
    FQueuedNewCount_Specified: boolean;
    FQueuedPendingCount: Integer;
    FQueuedPendingCount_Specified: boolean;
    FExpiredCount: Integer;
    FExpiredCount_Specified: boolean;
    FErrorCount: Integer;
    FErrorCount_Specified: boolean;
    procedure SetDeliveredCount(Index: Integer; const AInteger: Integer);
    function  DeliveredCount_Specified(Index: Integer): boolean;
    procedure SetQueuedNewCount(Index: Integer; const AInteger: Integer);
    function  QueuedNewCount_Specified(Index: Integer): boolean;
    procedure SetQueuedPendingCount(Index: Integer; const AInteger: Integer);
    function  QueuedPendingCount_Specified(Index: Integer): boolean;
    procedure SetExpiredCount(Index: Integer; const AInteger: Integer);
    function  ExpiredCount_Specified(Index: Integer): boolean;
    procedure SetErrorCount(Index: Integer; const AInteger: Integer);
    function  ErrorCount_Specified(Index: Integer): boolean;
  published
    property DeliveredCount:     Integer  Index (IS_OPTN) read FDeliveredCount write SetDeliveredCount stored DeliveredCount_Specified;
    property QueuedNewCount:     Integer  Index (IS_OPTN) read FQueuedNewCount write SetQueuedNewCount stored QueuedNewCount_Specified;
    property QueuedPendingCount: Integer  Index (IS_OPTN) read FQueuedPendingCount write SetQueuedPendingCount stored QueuedPendingCount_Specified;
    property ExpiredCount:       Integer  Index (IS_OPTN) read FExpiredCount write SetExpiredCount stored ExpiredCount_Specified;
    property ErrorCount:         Integer  Index (IS_OPTN) read FErrorCount write SetErrorCount stored ErrorCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReminderCustomizationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReminderCustomizationType = class(TRemotable)
  private
    FDurationInDays: Integer;
    FDurationInDays_Specified: boolean;
    FInclude: Boolean;
    FInclude_Specified: boolean;
    procedure SetDurationInDays(Index: Integer; const AInteger: Integer);
    function  DurationInDays_Specified(Index: Integer): boolean;
    procedure SetInclude(Index: Integer; const ABoolean: Boolean);
    function  Include_Specified(Index: Integer): boolean;
  published
    property DurationInDays: Integer  Index (IS_OPTN) read FDurationInDays write SetDurationInDays stored DurationInDays_Specified;
    property Include:        Boolean  Index (IS_OPTN) read FInclude write SetInclude stored Include_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemindersType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RemindersType = class(TRemotable)
  private
    FPaymentToSendCount: Integer;
    FPaymentToSendCount_Specified: boolean;
    FFeedbackToReceiveCount: Integer;
    FFeedbackToReceiveCount_Specified: boolean;
    FFeedbackToSendCount: Integer;
    FFeedbackToSendCount_Specified: boolean;
    FOutbidCount: Integer;
    FOutbidCount_Specified: boolean;
    FPaymentToReceiveCount: Integer;
    FPaymentToReceiveCount_Specified: boolean;
    FSecondChanceOfferCount: Integer;
    FSecondChanceOfferCount_Specified: boolean;
    FShippingNeededCount: Integer;
    FShippingNeededCount_Specified: boolean;
    FRelistingNeededCount: Integer;
    FRelistingNeededCount_Specified: boolean;
    FTotalNewLeadsCount: Integer;
    FTotalNewLeadsCount_Specified: boolean;
    FDocsForCCProcessingToSendCount: Integer;
    FDocsForCCProcessingToSendCount_Specified: boolean;
    FRTEToProcessCount: Integer;
    FRTEToProcessCount_Specified: boolean;
    FItemReceiptToConfirmCount: Integer;
    FItemReceiptToConfirmCount_Specified: boolean;
    FRefundOnHoldCount: Integer;
    FRefundOnHoldCount_Specified: boolean;
    FRefundCancelledCount: Integer;
    FRefundCancelledCount_Specified: boolean;
    FShippingDetailsToBeProvidedCount: Integer;
    FShippingDetailsToBeProvidedCount_Specified: boolean;
    FItemReceiptConfirmationToReceiveCount: Integer;
    FItemReceiptConfirmationToReceiveCount_Specified: boolean;
    FRefundInitiatedCount: Integer;
    FRefundInitiatedCount_Specified: boolean;
    FPendingRTERequestCount: Integer;
    FPendingRTERequestCount_Specified: boolean;
    FDeclinedRTERequestCount: Integer;
    FDeclinedRTERequestCount_Specified: boolean;
    procedure SetPaymentToSendCount(Index: Integer; const AInteger: Integer);
    function  PaymentToSendCount_Specified(Index: Integer): boolean;
    procedure SetFeedbackToReceiveCount(Index: Integer; const AInteger: Integer);
    function  FeedbackToReceiveCount_Specified(Index: Integer): boolean;
    procedure SetFeedbackToSendCount(Index: Integer; const AInteger: Integer);
    function  FeedbackToSendCount_Specified(Index: Integer): boolean;
    procedure SetOutbidCount(Index: Integer; const AInteger: Integer);
    function  OutbidCount_Specified(Index: Integer): boolean;
    procedure SetPaymentToReceiveCount(Index: Integer; const AInteger: Integer);
    function  PaymentToReceiveCount_Specified(Index: Integer): boolean;
    procedure SetSecondChanceOfferCount(Index: Integer; const AInteger: Integer);
    function  SecondChanceOfferCount_Specified(Index: Integer): boolean;
    procedure SetShippingNeededCount(Index: Integer; const AInteger: Integer);
    function  ShippingNeededCount_Specified(Index: Integer): boolean;
    procedure SetRelistingNeededCount(Index: Integer; const AInteger: Integer);
    function  RelistingNeededCount_Specified(Index: Integer): boolean;
    procedure SetTotalNewLeadsCount(Index: Integer; const AInteger: Integer);
    function  TotalNewLeadsCount_Specified(Index: Integer): boolean;
    procedure SetDocsForCCProcessingToSendCount(Index: Integer; const AInteger: Integer);
    function  DocsForCCProcessingToSendCount_Specified(Index: Integer): boolean;
    procedure SetRTEToProcessCount(Index: Integer; const AInteger: Integer);
    function  RTEToProcessCount_Specified(Index: Integer): boolean;
    procedure SetItemReceiptToConfirmCount(Index: Integer; const AInteger: Integer);
    function  ItemReceiptToConfirmCount_Specified(Index: Integer): boolean;
    procedure SetRefundOnHoldCount(Index: Integer; const AInteger: Integer);
    function  RefundOnHoldCount_Specified(Index: Integer): boolean;
    procedure SetRefundCancelledCount(Index: Integer; const AInteger: Integer);
    function  RefundCancelledCount_Specified(Index: Integer): boolean;
    procedure SetShippingDetailsToBeProvidedCount(Index: Integer; const AInteger: Integer);
    function  ShippingDetailsToBeProvidedCount_Specified(Index: Integer): boolean;
    procedure SetItemReceiptConfirmationToReceiveCount(Index: Integer; const AInteger: Integer);
    function  ItemReceiptConfirmationToReceiveCount_Specified(Index: Integer): boolean;
    procedure SetRefundInitiatedCount(Index: Integer; const AInteger: Integer);
    function  RefundInitiatedCount_Specified(Index: Integer): boolean;
    procedure SetPendingRTERequestCount(Index: Integer; const AInteger: Integer);
    function  PendingRTERequestCount_Specified(Index: Integer): boolean;
    procedure SetDeclinedRTERequestCount(Index: Integer; const AInteger: Integer);
    function  DeclinedRTERequestCount_Specified(Index: Integer): boolean;
  published
    property PaymentToSendCount:                    Integer  Index (IS_OPTN) read FPaymentToSendCount write SetPaymentToSendCount stored PaymentToSendCount_Specified;
    property FeedbackToReceiveCount:                Integer  Index (IS_OPTN) read FFeedbackToReceiveCount write SetFeedbackToReceiveCount stored FeedbackToReceiveCount_Specified;
    property FeedbackToSendCount:                   Integer  Index (IS_OPTN) read FFeedbackToSendCount write SetFeedbackToSendCount stored FeedbackToSendCount_Specified;
    property OutbidCount:                           Integer  Index (IS_OPTN) read FOutbidCount write SetOutbidCount stored OutbidCount_Specified;
    property PaymentToReceiveCount:                 Integer  Index (IS_OPTN) read FPaymentToReceiveCount write SetPaymentToReceiveCount stored PaymentToReceiveCount_Specified;
    property SecondChanceOfferCount:                Integer  Index (IS_OPTN) read FSecondChanceOfferCount write SetSecondChanceOfferCount stored SecondChanceOfferCount_Specified;
    property ShippingNeededCount:                   Integer  Index (IS_OPTN) read FShippingNeededCount write SetShippingNeededCount stored ShippingNeededCount_Specified;
    property RelistingNeededCount:                  Integer  Index (IS_OPTN) read FRelistingNeededCount write SetRelistingNeededCount stored RelistingNeededCount_Specified;
    property TotalNewLeadsCount:                    Integer  Index (IS_OPTN) read FTotalNewLeadsCount write SetTotalNewLeadsCount stored TotalNewLeadsCount_Specified;
    property DocsForCCProcessingToSendCount:        Integer  Index (IS_OPTN) read FDocsForCCProcessingToSendCount write SetDocsForCCProcessingToSendCount stored DocsForCCProcessingToSendCount_Specified;
    property RTEToProcessCount:                     Integer  Index (IS_OPTN) read FRTEToProcessCount write SetRTEToProcessCount stored RTEToProcessCount_Specified;
    property ItemReceiptToConfirmCount:             Integer  Index (IS_OPTN) read FItemReceiptToConfirmCount write SetItemReceiptToConfirmCount stored ItemReceiptToConfirmCount_Specified;
    property RefundOnHoldCount:                     Integer  Index (IS_OPTN) read FRefundOnHoldCount write SetRefundOnHoldCount stored RefundOnHoldCount_Specified;
    property RefundCancelledCount:                  Integer  Index (IS_OPTN) read FRefundCancelledCount write SetRefundCancelledCount stored RefundCancelledCount_Specified;
    property ShippingDetailsToBeProvidedCount:      Integer  Index (IS_OPTN) read FShippingDetailsToBeProvidedCount write SetShippingDetailsToBeProvidedCount stored ShippingDetailsToBeProvidedCount_Specified;
    property ItemReceiptConfirmationToReceiveCount: Integer  Index (IS_OPTN) read FItemReceiptConfirmationToReceiveCount write SetItemReceiptConfirmationToReceiveCount stored ItemReceiptConfirmationToReceiveCount_Specified;
    property RefundInitiatedCount:                  Integer  Index (IS_OPTN) read FRefundInitiatedCount write SetRefundInitiatedCount stored RefundInitiatedCount_Specified;
    property PendingRTERequestCount:                Integer  Index (IS_OPTN) read FPendingRTERequestCount write SetPendingRTERequestCount stored PendingRTERequestCount_Specified;
    property DeclinedRTERequestCount:               Integer  Index (IS_OPTN) read FDeclinedRTERequestCount write SetDeclinedRTERequestCount stored DeclinedRTERequestCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyingSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyingSummaryType = class(TRemotable)
  private
    FBiddingCount: Integer;
    FBiddingCount_Specified: boolean;
    FWinningCount: Integer;
    FWinningCount_Specified: boolean;
    FTotalWinningCost: AmountType;
    FTotalWinningCost_Specified: boolean;
    FWonCount: Integer;
    FWonCount_Specified: boolean;
    FTotalWonCost: AmountType;
    FTotalWonCost_Specified: boolean;
    FWonDurationInDays: Integer;
    FWonDurationInDays_Specified: boolean;
    FBestOfferCount: Integer;
    FBestOfferCount_Specified: boolean;
    procedure SetBiddingCount(Index: Integer; const AInteger: Integer);
    function  BiddingCount_Specified(Index: Integer): boolean;
    procedure SetWinningCount(Index: Integer; const AInteger: Integer);
    function  WinningCount_Specified(Index: Integer): boolean;
    procedure SetTotalWinningCost(Index: Integer; const AAmountType: AmountType);
    function  TotalWinningCost_Specified(Index: Integer): boolean;
    procedure SetWonCount(Index: Integer; const AInteger: Integer);
    function  WonCount_Specified(Index: Integer): boolean;
    procedure SetTotalWonCost(Index: Integer; const AAmountType: AmountType);
    function  TotalWonCost_Specified(Index: Integer): boolean;
    procedure SetWonDurationInDays(Index: Integer; const AInteger: Integer);
    function  WonDurationInDays_Specified(Index: Integer): boolean;
    procedure SetBestOfferCount(Index: Integer; const AInteger: Integer);
    function  BestOfferCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BiddingCount:      Integer     Index (IS_OPTN) read FBiddingCount write SetBiddingCount stored BiddingCount_Specified;
    property WinningCount:      Integer     Index (IS_OPTN) read FWinningCount write SetWinningCount stored WinningCount_Specified;
    property TotalWinningCost:  AmountType  Index (IS_OPTN) read FTotalWinningCost write SetTotalWinningCost stored TotalWinningCost_Specified;
    property WonCount:          Integer     Index (IS_OPTN) read FWonCount write SetWonCount stored WonCount_Specified;
    property TotalWonCost:      AmountType  Index (IS_OPTN) read FTotalWonCost write SetTotalWonCost stored TotalWonCost_Specified;
    property WonDurationInDays: Integer     Index (IS_OPTN) read FWonDurationInDays write SetWonDurationInDays stored WonDurationInDays_Specified;
    property BestOfferCount:    Integer     Index (IS_OPTN) read FBestOfferCount write SetBestOfferCount stored BestOfferCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyeBayFavoriteSellerListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSellerListType = class(TRemotable)
  private
    FTotalAvailable: Integer;
    FTotalAvailable_Specified: boolean;
    FFavoriteSeller: Array_Of_MyeBayFavoriteSellerType;
    FFavoriteSeller_Specified: boolean;
    procedure SetTotalAvailable(Index: Integer; const AInteger: Integer);
    function  TotalAvailable_Specified(Index: Integer): boolean;
    procedure SetFavoriteSeller(Index: Integer; const AArray_Of_MyeBayFavoriteSellerType: Array_Of_MyeBayFavoriteSellerType);
    function  FavoriteSeller_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TotalAvailable: Integer                            Index (IS_OPTN) read FTotalAvailable write SetTotalAvailable stored TotalAvailable_Specified;
    property FavoriteSeller: Array_Of_MyeBayFavoriteSellerType  Index (IS_OPTN or IS_UNBD) read FFavoriteSeller write SetFavoriteSeller stored FavoriteSeller_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyeBayFavoriteSearchListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSearchListType = class(TRemotable)
  private
    FTotalAvailable: Integer;
    FTotalAvailable_Specified: boolean;
    FFavoriteSearch: Array_Of_MyeBayFavoriteSearchType;
    FFavoriteSearch_Specified: boolean;
    procedure SetTotalAvailable(Index: Integer; const AInteger: Integer);
    function  TotalAvailable_Specified(Index: Integer): boolean;
    procedure SetFavoriteSearch(Index: Integer; const AArray_Of_MyeBayFavoriteSearchType: Array_Of_MyeBayFavoriteSearchType);
    function  FavoriteSearch_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TotalAvailable: Integer                            Index (IS_OPTN) read FTotalAvailable write SetTotalAvailable stored TotalAvailable_Specified;
    property FavoriteSearch: Array_Of_MyeBayFavoriteSearchType  Index (IS_OPTN or IS_UNBD) read FFavoriteSearch write SetFavoriteSearch stored FavoriteSearch_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingSummaryType = class(TRemotable)
  private
    FActiveAuctionCount: Integer;
    FActiveAuctionCount_Specified: boolean;
    FAuctionSellingCount: Integer;
    FAuctionSellingCount_Specified: boolean;
    FAuctionBidCount: Integer;
    FAuctionBidCount_Specified: boolean;
    FTotalAuctionSellingValue: AmountType;
    FTotalAuctionSellingValue_Specified: boolean;
    FTotalSoldCount: Integer;
    FTotalSoldCount_Specified: boolean;
    FTotalSoldValue: AmountType;
    FTotalSoldValue_Specified: boolean;
    FSoldDurationInDays: Integer;
    FSoldDurationInDays_Specified: boolean;
    procedure SetActiveAuctionCount(Index: Integer; const AInteger: Integer);
    function  ActiveAuctionCount_Specified(Index: Integer): boolean;
    procedure SetAuctionSellingCount(Index: Integer; const AInteger: Integer);
    function  AuctionSellingCount_Specified(Index: Integer): boolean;
    procedure SetAuctionBidCount(Index: Integer; const AInteger: Integer);
    function  AuctionBidCount_Specified(Index: Integer): boolean;
    procedure SetTotalAuctionSellingValue(Index: Integer; const AAmountType: AmountType);
    function  TotalAuctionSellingValue_Specified(Index: Integer): boolean;
    procedure SetTotalSoldCount(Index: Integer; const AInteger: Integer);
    function  TotalSoldCount_Specified(Index: Integer): boolean;
    procedure SetTotalSoldValue(Index: Integer; const AAmountType: AmountType);
    function  TotalSoldValue_Specified(Index: Integer): boolean;
    procedure SetSoldDurationInDays(Index: Integer; const AInteger: Integer);
    function  SoldDurationInDays_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ActiveAuctionCount:       Integer     Index (IS_OPTN) read FActiveAuctionCount write SetActiveAuctionCount stored ActiveAuctionCount_Specified;
    property AuctionSellingCount:      Integer     Index (IS_OPTN) read FAuctionSellingCount write SetAuctionSellingCount stored AuctionSellingCount_Specified;
    property AuctionBidCount:          Integer     Index (IS_OPTN) read FAuctionBidCount write SetAuctionBidCount stored AuctionBidCount_Specified;
    property TotalAuctionSellingValue: AmountType  Index (IS_OPTN) read FTotalAuctionSellingValue write SetTotalAuctionSellingValue stored TotalAuctionSellingValue_Specified;
    property TotalSoldCount:           Integer     Index (IS_OPTN) read FTotalSoldCount write SetTotalSoldCount stored TotalSoldCount_Specified;
    property TotalSoldValue:           AmountType  Index (IS_OPTN) read FTotalSoldValue write SetTotalSoldValue stored TotalSoldValue_Specified;
    property SoldDurationInDays:       Integer     Index (IS_OPTN) read FSoldDurationInDays write SetSoldDurationInDays stored SoldDurationInDays_Specified;
  end;



  // ************************************************************************ //
  // XML       : RecommendationValidationRulesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RecommendationValidationRulesType = class(TRemotable)
  private
    FValueType: ValueTypeCodeType;
    FValueType_Specified: boolean;
    FMinValues: Integer;
    FMinValues_Specified: boolean;
    FMaxValues: Integer;
    FMaxValues_Specified: boolean;
    FSelectionMode: SelectionModeCodeType;
    FSelectionMode_Specified: boolean;
    FAspectUsage: AspectUsageCodeType;
    FAspectUsage_Specified: boolean;
    FMaxValueLength: Integer;
    FMaxValueLength_Specified: boolean;
    FProductRequired: ProductRequiredCodeType;
    FProductRequired_Specified: boolean;
    FUsageConstraint: UsageConstraintCodeType;
    FUsageConstraint_Specified: boolean;
    FConfidence: Integer;
    FConfidence_Specified: boolean;
    FRelationship: Array_Of_NameValueRelationshipType;
    FRelationship_Specified: boolean;
    FVariationPicture: VariationPictureRuleCodeType;
    FVariationPicture_Specified: boolean;
    FVariationSpecifics: VariationSpecificsRuleCodeType;
    FVariationSpecifics_Specified: boolean;
    FValueFormat: ValueFormatCodeType;
    FValueFormat_Specified: boolean;
    procedure SetValueType(Index: Integer; const AValueTypeCodeType: ValueTypeCodeType);
    function  ValueType_Specified(Index: Integer): boolean;
    procedure SetMinValues(Index: Integer; const AInteger: Integer);
    function  MinValues_Specified(Index: Integer): boolean;
    procedure SetMaxValues(Index: Integer; const AInteger: Integer);
    function  MaxValues_Specified(Index: Integer): boolean;
    procedure SetSelectionMode(Index: Integer; const ASelectionModeCodeType: SelectionModeCodeType);
    function  SelectionMode_Specified(Index: Integer): boolean;
    procedure SetAspectUsage(Index: Integer; const AAspectUsageCodeType: AspectUsageCodeType);
    function  AspectUsage_Specified(Index: Integer): boolean;
    procedure SetMaxValueLength(Index: Integer; const AInteger: Integer);
    function  MaxValueLength_Specified(Index: Integer): boolean;
    procedure SetProductRequired(Index: Integer; const AProductRequiredCodeType: ProductRequiredCodeType);
    function  ProductRequired_Specified(Index: Integer): boolean;
    procedure SetUsageConstraint(Index: Integer; const AUsageConstraintCodeType: UsageConstraintCodeType);
    function  UsageConstraint_Specified(Index: Integer): boolean;
    procedure SetConfidence(Index: Integer; const AInteger: Integer);
    function  Confidence_Specified(Index: Integer): boolean;
    procedure SetRelationship(Index: Integer; const AArray_Of_NameValueRelationshipType: Array_Of_NameValueRelationshipType);
    function  Relationship_Specified(Index: Integer): boolean;
    procedure SetVariationPicture(Index: Integer; const AVariationPictureRuleCodeType: VariationPictureRuleCodeType);
    function  VariationPicture_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const AVariationSpecificsRuleCodeType: VariationSpecificsRuleCodeType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
    procedure SetValueFormat(Index: Integer; const AValueFormatCodeType: ValueFormatCodeType);
    function  ValueFormat_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ValueType:          ValueTypeCodeType                   Index (IS_OPTN) read FValueType write SetValueType stored ValueType_Specified;
    property MinValues:          Integer                             Index (IS_OPTN) read FMinValues write SetMinValues stored MinValues_Specified;
    property MaxValues:          Integer                             Index (IS_OPTN) read FMaxValues write SetMaxValues stored MaxValues_Specified;
    property SelectionMode:      SelectionModeCodeType               Index (IS_OPTN) read FSelectionMode write SetSelectionMode stored SelectionMode_Specified;
    property AspectUsage:        AspectUsageCodeType                 Index (IS_OPTN) read FAspectUsage write SetAspectUsage stored AspectUsage_Specified;
    property MaxValueLength:     Integer                             Index (IS_OPTN) read FMaxValueLength write SetMaxValueLength stored MaxValueLength_Specified;
    property ProductRequired:    ProductRequiredCodeType             Index (IS_OPTN) read FProductRequired write SetProductRequired stored ProductRequired_Specified;
    property UsageConstraint:    UsageConstraintCodeType             Index (IS_OPTN) read FUsageConstraint write SetUsageConstraint stored UsageConstraint_Specified;
    property Confidence:         Integer                             Index (IS_OPTN) read FConfidence write SetConfidence stored Confidence_Specified;
    property Relationship:       Array_Of_NameValueRelationshipType  Index (IS_OPTN or IS_UNBD) read FRelationship write SetRelationship stored Relationship_Specified;
    property VariationPicture:   VariationPictureRuleCodeType        Index (IS_OPTN) read FVariationPicture write SetVariationPicture stored VariationPicture_Specified;
    property VariationSpecifics: VariationSpecificsRuleCodeType      Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
    property ValueFormat:        ValueFormatCodeType                 Index (IS_OPTN) read FValueFormat write SetValueFormat stored ValueFormat_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingDesignerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDesignerType = class(TRemotable)
  private
    FLayoutID: Integer;
    FLayoutID_Specified: boolean;
    FOptimalPictureSize: Boolean;
    FOptimalPictureSize_Specified: boolean;
    FThemeID: Integer;
    FThemeID_Specified: boolean;
    procedure SetLayoutID(Index: Integer; const AInteger: Integer);
    function  LayoutID_Specified(Index: Integer): boolean;
    procedure SetOptimalPictureSize(Index: Integer; const ABoolean: Boolean);
    function  OptimalPictureSize_Specified(Index: Integer): boolean;
    procedure SetThemeID(Index: Integer; const AInteger: Integer);
    function  ThemeID_Specified(Index: Integer): boolean;
  published
    property LayoutID:           Integer  Index (IS_OPTN) read FLayoutID write SetLayoutID stored LayoutID_Specified;
    property OptimalPictureSize: Boolean  Index (IS_OPTN) read FOptimalPictureSize write SetOptimalPictureSize stored OptimalPictureSize_Specified;
    property ThemeID:            Integer  Index (IS_OPTN) read FThemeID write SetThemeID stored ThemeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaymentDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentDetailsType = class(TRemotable)
  private
    FHoursToDeposit: Integer;
    FHoursToDeposit_Specified: boolean;
    FDaysToFullPayment: Integer;
    FDaysToFullPayment_Specified: boolean;
    FDepositAmount: AmountType;
    FDepositAmount_Specified: boolean;
    FDepositType: DepositTypeCodeType;
    FDepositType_Specified: boolean;
    procedure SetHoursToDeposit(Index: Integer; const AInteger: Integer);
    function  HoursToDeposit_Specified(Index: Integer): boolean;
    procedure SetDaysToFullPayment(Index: Integer; const AInteger: Integer);
    function  DaysToFullPayment_Specified(Index: Integer): boolean;
    procedure SetDepositAmount(Index: Integer; const AAmountType: AmountType);
    function  DepositAmount_Specified(Index: Integer): boolean;
    procedure SetDepositType(Index: Integer; const ADepositTypeCodeType: DepositTypeCodeType);
    function  DepositType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property HoursToDeposit:    Integer              Index (IS_OPTN) read FHoursToDeposit write SetHoursToDeposit stored HoursToDeposit_Specified;
    property DaysToFullPayment: Integer              Index (IS_OPTN) read FDaysToFullPayment write SetDaysToFullPayment stored DaysToFullPayment_Specified;
    property DepositAmount:     AmountType           Index (IS_OPTN) read FDepositAmount write SetDepositAmount stored DepositAmount_Specified;
    property DepositType:       DepositTypeCodeType  Index (IS_OPTN) read FDepositType write SetDepositType stored DepositType_Specified;
  end;



  // ************************************************************************ //
  // XML       : QuantityInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  QuantityInfoType = class(TRemotable)
  private
    FMinimumRemnantSet: Integer;
    FMinimumRemnantSet_Specified: boolean;
    procedure SetMinimumRemnantSet(Index: Integer; const AInteger: Integer);
    function  MinimumRemnantSet_Specified(Index: Integer): boolean;
  published
    property MinimumRemnantSet: Integer  Index (IS_OPTN) read FMinimumRemnantSet write SetMinimumRemnantSet stored MinimumRemnantSet_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingOverrideType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingOverrideType = class(TRemotable)
  private
    FShippingServiceCostOverrideList: ShippingServiceCostOverrideListType;
    FShippingServiceCostOverrideList_Specified: boolean;
    FDispatchTimeMaxOverride: Integer;
    FDispatchTimeMaxOverride_Specified: boolean;
    procedure SetShippingServiceCostOverrideList(Index: Integer; const AShippingServiceCostOverrideListType: ShippingServiceCostOverrideListType);
    function  ShippingServiceCostOverrideList_Specified(Index: Integer): boolean;
    procedure SetDispatchTimeMaxOverride(Index: Integer; const AInteger: Integer);
    function  DispatchTimeMaxOverride_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingServiceCostOverrideList: ShippingServiceCostOverrideListType  Index (IS_OPTN) read FShippingServiceCostOverrideList write SetShippingServiceCostOverrideList stored ShippingServiceCostOverrideList_Specified;
    property DispatchTimeMaxOverride:         Integer                              Index (IS_OPTN) read FDispatchTimeMaxOverride write SetDispatchTimeMaxOverride stored DispatchTimeMaxOverride_Specified;
  end;



  // ************************************************************************ //
  // XML       : GroupValidationRulesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GroupValidationRulesType = class(TRemotable)
  private
    FMinRequired: Integer;
  published
    property MinRequired: Integer  read FMinRequired write FMinRequired;
  end;

  MaximumUnpaidItemStrikesCountDetailsType = array of Integer;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : MaximumUnpaidItemStrikesInfoDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumUnpaidItemStrikesInfoDetailsType = class(TRemotable)
  private
    FMaximumUnpaidItemStrikesCount: MaximumUnpaidItemStrikesCountDetailsType;
    FMaximumUnpaidItemStrikesCount_Specified: boolean;
    FMaximumUnpaidItemStrikesDuration: Array_Of_MaximumUnpaidItemStrikesDurationDetailsType;
    FMaximumUnpaidItemStrikesDuration_Specified: boolean;
    procedure SetMaximumUnpaidItemStrikesCount(Index: Integer; const AMaximumUnpaidItemStrikesCountDetailsType: MaximumUnpaidItemStrikesCountDetailsType);
    function  MaximumUnpaidItemStrikesCount_Specified(Index: Integer): boolean;
    procedure SetMaximumUnpaidItemStrikesDuration(Index: Integer; const AArray_Of_MaximumUnpaidItemStrikesDurationDetailsType: Array_Of_MaximumUnpaidItemStrikesDurationDetailsType);
    function  MaximumUnpaidItemStrikesDuration_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MaximumUnpaidItemStrikesCount:    MaximumUnpaidItemStrikesCountDetailsType              Index (IS_OPTN) read FMaximumUnpaidItemStrikesCount write SetMaximumUnpaidItemStrikesCount stored MaximumUnpaidItemStrikesCount_Specified;
    property MaximumUnpaidItemStrikesDuration: Array_Of_MaximumUnpaidItemStrikesDurationDetailsType  Index (IS_OPTN or IS_UNBD) read FMaximumUnpaidItemStrikesDuration write SetMaximumUnpaidItemStrikesDuration stored MaximumUnpaidItemStrikesDuration_Specified;
  end;

  NumberOfPolicyViolationsDetailsType = array of Integer;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : VerifiedUserRequirementsDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VerifiedUserRequirementsDetailsType = class(TRemotable)
  private
    FVerifiedUser: Boolean;
    FVerifiedUser_Specified: boolean;
    FFeedbackScore: NumberOfPolicyViolationsDetailsType;
    FFeedbackScore_Specified: boolean;
    procedure SetVerifiedUser(Index: Integer; const ABoolean: Boolean);
    function  VerifiedUser_Specified(Index: Integer): boolean;
    procedure SetFeedbackScore(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  FeedbackScore_Specified(Index: Integer): boolean;
  published
    property VerifiedUser:  Boolean                              Index (IS_OPTN) read FVerifiedUser write SetVerifiedUser stored VerifiedUser_Specified;
    property FeedbackScore: NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FFeedbackScore write SetFeedbackScore stored FeedbackScore_Specified;
  end;



  // ************************************************************************ //
  // XML       : MaximumBuyerPolicyViolationsDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumBuyerPolicyViolationsDetailsType = class(TRemotable)
  private
    FNumberOfPolicyViolations: NumberOfPolicyViolationsDetailsType;
    FNumberOfPolicyViolations_Specified: boolean;
    FPolicyViolationDuration: Array_Of_PolicyViolationDurationDetailsType;
    FPolicyViolationDuration_Specified: boolean;
    procedure SetNumberOfPolicyViolations(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  NumberOfPolicyViolations_Specified(Index: Integer): boolean;
    procedure SetPolicyViolationDuration(Index: Integer; const AArray_Of_PolicyViolationDurationDetailsType: Array_Of_PolicyViolationDurationDetailsType);
    function  PolicyViolationDuration_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property NumberOfPolicyViolations: NumberOfPolicyViolationsDetailsType          Index (IS_OPTN) read FNumberOfPolicyViolations write SetNumberOfPolicyViolations stored NumberOfPolicyViolations_Specified;
    property PolicyViolationDuration:  Array_Of_PolicyViolationDurationDetailsType  Index (IS_OPTN or IS_UNBD) read FPolicyViolationDuration write SetPolicyViolationDuration stored PolicyViolationDuration_Specified;
  end;



  // ************************************************************************ //
  // XML       : MaximumItemRequirementsDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumItemRequirementsDetailsType = class(TRemotable)
  private
    FMaximumItemCount: NumberOfPolicyViolationsDetailsType;
    FMaximumItemCount_Specified: boolean;
    FMinimumFeedbackScore: NumberOfPolicyViolationsDetailsType;
    FMinimumFeedbackScore_Specified: boolean;
    procedure SetMaximumItemCount(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  MaximumItemCount_Specified(Index: Integer): boolean;
    procedure SetMinimumFeedbackScore(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  MinimumFeedbackScore_Specified(Index: Integer): boolean;
  published
    property MaximumItemCount:     NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FMaximumItemCount write SetMaximumItemCount stored MaximumItemCount_Specified;
    property MinimumFeedbackScore: NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FMinimumFeedbackScore write SetMinimumFeedbackScore stored MinimumFeedbackScore_Specified;
  end;



  // ************************************************************************ //
  // XML       : MultiLegShipmentType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MultiLegShipmentType = class(TRemotable)
  private
    FShippingServiceDetails: MultiLegShippingServiceType;
    FShippingServiceDetails_Specified: boolean;
    FShipToAddress: AddressType;
    FShipToAddress_Specified: boolean;
    FShippingTimeMin: Integer;
    FShippingTimeMin_Specified: boolean;
    FShippingTimeMax: Integer;
    FShippingTimeMax_Specified: boolean;
    procedure SetShippingServiceDetails(Index: Integer; const AMultiLegShippingServiceType: MultiLegShippingServiceType);
    function  ShippingServiceDetails_Specified(Index: Integer): boolean;
    procedure SetShipToAddress(Index: Integer; const AAddressType: AddressType);
    function  ShipToAddress_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMin(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMin_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMax(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMax_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingServiceDetails: MultiLegShippingServiceType  Index (IS_OPTN) read FShippingServiceDetails write SetShippingServiceDetails stored ShippingServiceDetails_Specified;
    property ShipToAddress:          AddressType                  Index (IS_OPTN) read FShipToAddress write SetShipToAddress stored ShipToAddress_Specified;
    property ShippingTimeMin:        Integer                      Index (IS_OPTN) read FShippingTimeMin write SetShippingTimeMin stored ShippingTimeMin_Specified;
    property ShippingTimeMax:        Integer                      Index (IS_OPTN) read FShippingTimeMax write SetShippingTimeMax stored ShippingTimeMax_Specified;
  end;

  MinimumFeedbackScoreDetailsType = array of Integer;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : QuantityRestrictionPerBuyerInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  QuantityRestrictionPerBuyerInfoType = class(TRemotable)
  private
    FMaximumQuantity: Integer;
    FMaximumQuantity_Specified: boolean;
    procedure SetMaximumQuantity(Index: Integer; const AInteger: Integer);
    function  MaximumQuantity_Specified(Index: Integer): boolean;
  published
    property MaximumQuantity: Integer  Index (IS_OPTN) read FMaximumQuantity write SetMaximumQuantity stored MaximumQuantity_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingServiceCostOverrideType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServiceCostOverrideType = class(TRemotable)
  private
    FShippingServicePriority: Integer;
    FShippingServicePriority_Specified: boolean;
    FShippingServiceType: ShippingServiceType;
    FShippingServiceType_Specified: boolean;
    FShippingServiceCost: AmountType;
    FShippingServiceCost_Specified: boolean;
    FShippingServiceAdditionalCost: AmountType;
    FShippingServiceAdditionalCost_Specified: boolean;
    FShippingSurcharge: AmountType;
    FShippingSurcharge_Specified: boolean;
    procedure SetShippingServicePriority(Index: Integer; const AInteger: Integer);
    function  ShippingServicePriority_Specified(Index: Integer): boolean;
    procedure SetShippingServiceType(Index: Integer; const AShippingServiceType: ShippingServiceType);
    function  ShippingServiceType_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceCost_Specified(Index: Integer): boolean;
    procedure SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
    procedure SetShippingSurcharge(Index: Integer; const AAmountType: AmountType);
    function  ShippingSurcharge_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingServicePriority:       Integer              Index (IS_OPTN) read FShippingServicePriority write SetShippingServicePriority stored ShippingServicePriority_Specified;
    property ShippingServiceType:           ShippingServiceType  Index (IS_OPTN) read FShippingServiceType write SetShippingServiceType stored ShippingServiceType_Specified;
    property ShippingServiceCost:           AmountType           Index (IS_OPTN) read FShippingServiceCost write SetShippingServiceCost stored ShippingServiceCost_Specified;
    property ShippingServiceAdditionalCost: AmountType           Index (IS_OPTN) read FShippingServiceAdditionalCost write SetShippingServiceAdditionalCost stored ShippingServiceAdditionalCost_Specified;
    property ShippingSurcharge:             AmountType           Index (IS_OPTN) read FShippingSurcharge write SetShippingSurcharge stored ShippingSurcharge_Specified;
  end;



  // ************************************************************************ //
  // XML       : SuggestedCategoryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SuggestedCategoryType = class(TRemotable)
  private
    FCategory: CategoryType;
    FCategory_Specified: boolean;
    FPercentItemFound: Integer;
    procedure SetCategory(Index: Integer; const ACategoryType: CategoryType);
    function  Category_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Category:         CategoryType  Index (IS_OPTN) read FCategory write SetCategory stored Category_Specified;
    property PercentItemFound: Integer       read FPercentItemFound write FPercentItemFound;
  end;



  // ************************************************************************ //
  // XML       : StoreCustomListingHeaderLinkType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomListingHeaderLinkType = class(TRemotable)
  private
    FLinkID: Integer;
    FOrder: Integer;
    FLinkType: StoreCustomListingHeaderLinkCodeType;
    FLinkType_Specified: boolean;
    procedure SetLinkType(Index: Integer; const AStoreCustomListingHeaderLinkCodeType: StoreCustomListingHeaderLinkCodeType);
    function  LinkType_Specified(Index: Integer): boolean;
  published
    property LinkID:   Integer                               read FLinkID write FLinkID;
    property Order:    Integer                               read FOrder write FOrder;
    property LinkType: StoreCustomListingHeaderLinkCodeType  Index (IS_OPTN) read FLinkType write SetLinkType stored LinkType_Specified;
  end;



  // ************************************************************************ //
  // XML       : PromotionDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionDetailsType = class(TRemotable)
  private
    FPromotionPrice: AmountType;
    FPromotionPrice_Specified: boolean;
    FPromotionPriceType: PromotionItemPriceTypeCodeType;
    FPromotionPriceType_Specified: boolean;
    FBidCount: Integer;
    FBidCount_Specified: boolean;
    FConvertedPromotionPrice: AmountType;
    FConvertedPromotionPrice_Specified: boolean;
    procedure SetPromotionPrice(Index: Integer; const AAmountType: AmountType);
    function  PromotionPrice_Specified(Index: Integer): boolean;
    procedure SetPromotionPriceType(Index: Integer; const APromotionItemPriceTypeCodeType: PromotionItemPriceTypeCodeType);
    function  PromotionPriceType_Specified(Index: Integer): boolean;
    procedure SetBidCount(Index: Integer; const AInteger: Integer);
    function  BidCount_Specified(Index: Integer): boolean;
    procedure SetConvertedPromotionPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedPromotionPrice_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PromotionPrice:          AmountType                      Index (IS_OPTN) read FPromotionPrice write SetPromotionPrice stored PromotionPrice_Specified;
    property PromotionPriceType:      PromotionItemPriceTypeCodeType  Index (IS_OPTN) read FPromotionPriceType write SetPromotionPriceType stored PromotionPriceType_Specified;
    property BidCount:                Integer                         Index (IS_OPTN) read FBidCount write SetBidCount stored BidCount_Specified;
    property ConvertedPromotionPrice: AmountType                      Index (IS_OPTN) read FConvertedPromotionPrice write SetConvertedPromotionPrice stored ConvertedPromotionPrice_Specified;
  end;



  // ************************************************************************ //
  // XML       : SchedulingInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SchedulingInfoType = class(TRemotable)
  private
    FMaxScheduledMinutes: Integer;
    FMaxScheduledMinutes_Specified: boolean;
    FMinScheduledMinutes: Integer;
    FMinScheduledMinutes_Specified: boolean;
    FMaxScheduledItems: Integer;
    FMaxScheduledItems_Specified: boolean;
    procedure SetMaxScheduledMinutes(Index: Integer; const AInteger: Integer);
    function  MaxScheduledMinutes_Specified(Index: Integer): boolean;
    procedure SetMinScheduledMinutes(Index: Integer; const AInteger: Integer);
    function  MinScheduledMinutes_Specified(Index: Integer): boolean;
    procedure SetMaxScheduledItems(Index: Integer; const AInteger: Integer);
    function  MaxScheduledItems_Specified(Index: Integer): boolean;
  published
    property MaxScheduledMinutes: Integer  Index (IS_OPTN) read FMaxScheduledMinutes write SetMaxScheduledMinutes stored MaxScheduledMinutes_Specified;
    property MinScheduledMinutes: Integer  Index (IS_OPTN) read FMinScheduledMinutes write SetMinScheduledMinutes stored MinScheduledMinutes_Specified;
    property MaxScheduledItems:   Integer  Index (IS_OPTN) read FMaxScheduledItems write SetMaxScheduledItems stored MaxScheduledItems_Specified;
  end;

  Array_Of_anyURI = array of string;            { "http://www.w3.org/2001/XMLSchema"[GblUbnd] }


  // ************************************************************************ //
  // XML       : PictureSetMemberType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureSetMemberType = class(TRemotable)
  private
    FMemberURL: string;
    FMemberURL_Specified: boolean;
    FPictureHeight: Integer;
    FPictureHeight_Specified: boolean;
    FPictureWidth: Integer;
    FPictureWidth_Specified: boolean;
    procedure SetMemberURL(Index: Integer; const Astring: string);
    function  MemberURL_Specified(Index: Integer): boolean;
    procedure SetPictureHeight(Index: Integer; const AInteger: Integer);
    function  PictureHeight_Specified(Index: Integer): boolean;
    procedure SetPictureWidth(Index: Integer; const AInteger: Integer);
    function  PictureWidth_Specified(Index: Integer): boolean;
  published
    property MemberURL:     string   Index (IS_OPTN) read FMemberURL write SetMemberURL stored MemberURL_Specified;
    property PictureHeight: Integer  Index (IS_OPTN) read FPictureHeight write SetPictureHeight stored PictureHeight_Specified;
    property PictureWidth:  Integer  Index (IS_OPTN) read FPictureWidth write SetPictureWidth stored PictureWidth_Specified;
  end;

  FeesType   = array of FeeType;                { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_DiscountReasonCodeType = array of DiscountReasonCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  ProductSuggestionsType = array of ProductSuggestionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellingManagerAutoListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAutoListType = class(TRemotable)
  private
    FSourceSaleTemplateID: Int64;
    FSourceSaleTemplateID_Specified: boolean;
    FKeepMinActive: SellingManagerAutoListMinActiveItemsType;
    FKeepMinActive_Specified: boolean;
    FListAccordingToSchedule: SellingManagerAutoListAccordingToScheduleType;
    FListAccordingToSchedule_Specified: boolean;
    procedure SetSourceSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SourceSaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetKeepMinActive(Index: Integer; const ASellingManagerAutoListMinActiveItemsType: SellingManagerAutoListMinActiveItemsType);
    function  KeepMinActive_Specified(Index: Integer): boolean;
    procedure SetListAccordingToSchedule(Index: Integer; const ASellingManagerAutoListAccordingToScheduleType: SellingManagerAutoListAccordingToScheduleType);
    function  ListAccordingToSchedule_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SourceSaleTemplateID:    Int64                                          Index (IS_OPTN) read FSourceSaleTemplateID write SetSourceSaleTemplateID stored SourceSaleTemplateID_Specified;
    property KeepMinActive:           SellingManagerAutoListMinActiveItemsType       Index (IS_OPTN) read FKeepMinActive write SetKeepMinActive stored KeepMinActive_Specified;
    property ListAccordingToSchedule: SellingManagerAutoListAccordingToScheduleType  Index (IS_OPTN) read FListAccordingToSchedule write SetListAccordingToSchedule stored ListAccordingToSchedule_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyeBaySellingSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBaySellingSummaryType = class(TRemotable)
  private
    FActiveAuctionCount: Integer;
    FActiveAuctionCount_Specified: boolean;
    FAuctionSellingCount: Integer;
    FAuctionSellingCount_Specified: boolean;
    FAuctionBidCount: Integer;
    FAuctionBidCount_Specified: boolean;
    FTotalAuctionSellingValue: AmountType;
    FTotalAuctionSellingValue_Specified: boolean;
    FTotalSoldCount: Integer;
    FTotalSoldCount_Specified: boolean;
    FTotalSoldValue: AmountType;
    FTotalSoldValue_Specified: boolean;
    FSoldDurationInDays: Integer;
    FSoldDurationInDays_Specified: boolean;
    FClassifiedAdCount: Integer;
    FClassifiedAdCount_Specified: boolean;
    FTotalLeadCount: Integer;
    FTotalLeadCount_Specified: boolean;
    FClassifiedAdOfferCount: Integer;
    FClassifiedAdOfferCount_Specified: boolean;
    FTotalListingsWithLeads: Integer;
    FTotalListingsWithLeads_Specified: boolean;
    FQuantityLimitRemaining: Int64;
    FQuantityLimitRemaining_Specified: boolean;
    FAmountLimitRemaining: AmountType;
    FAmountLimitRemaining_Specified: boolean;
    procedure SetActiveAuctionCount(Index: Integer; const AInteger: Integer);
    function  ActiveAuctionCount_Specified(Index: Integer): boolean;
    procedure SetAuctionSellingCount(Index: Integer; const AInteger: Integer);
    function  AuctionSellingCount_Specified(Index: Integer): boolean;
    procedure SetAuctionBidCount(Index: Integer; const AInteger: Integer);
    function  AuctionBidCount_Specified(Index: Integer): boolean;
    procedure SetTotalAuctionSellingValue(Index: Integer; const AAmountType: AmountType);
    function  TotalAuctionSellingValue_Specified(Index: Integer): boolean;
    procedure SetTotalSoldCount(Index: Integer; const AInteger: Integer);
    function  TotalSoldCount_Specified(Index: Integer): boolean;
    procedure SetTotalSoldValue(Index: Integer; const AAmountType: AmountType);
    function  TotalSoldValue_Specified(Index: Integer): boolean;
    procedure SetSoldDurationInDays(Index: Integer; const AInteger: Integer);
    function  SoldDurationInDays_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdCount_Specified(Index: Integer): boolean;
    procedure SetTotalLeadCount(Index: Integer; const AInteger: Integer);
    function  TotalLeadCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdOfferCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdOfferCount_Specified(Index: Integer): boolean;
    procedure SetTotalListingsWithLeads(Index: Integer; const AInteger: Integer);
    function  TotalListingsWithLeads_Specified(Index: Integer): boolean;
    procedure SetQuantityLimitRemaining(Index: Integer; const AInt64: Int64);
    function  QuantityLimitRemaining_Specified(Index: Integer): boolean;
    procedure SetAmountLimitRemaining(Index: Integer; const AAmountType: AmountType);
    function  AmountLimitRemaining_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ActiveAuctionCount:       Integer     Index (IS_OPTN) read FActiveAuctionCount write SetActiveAuctionCount stored ActiveAuctionCount_Specified;
    property AuctionSellingCount:      Integer     Index (IS_OPTN) read FAuctionSellingCount write SetAuctionSellingCount stored AuctionSellingCount_Specified;
    property AuctionBidCount:          Integer     Index (IS_OPTN) read FAuctionBidCount write SetAuctionBidCount stored AuctionBidCount_Specified;
    property TotalAuctionSellingValue: AmountType  Index (IS_OPTN) read FTotalAuctionSellingValue write SetTotalAuctionSellingValue stored TotalAuctionSellingValue_Specified;
    property TotalSoldCount:           Integer     Index (IS_OPTN) read FTotalSoldCount write SetTotalSoldCount stored TotalSoldCount_Specified;
    property TotalSoldValue:           AmountType  Index (IS_OPTN) read FTotalSoldValue write SetTotalSoldValue stored TotalSoldValue_Specified;
    property SoldDurationInDays:       Integer     Index (IS_OPTN) read FSoldDurationInDays write SetSoldDurationInDays stored SoldDurationInDays_Specified;
    property ClassifiedAdCount:        Integer     Index (IS_OPTN) read FClassifiedAdCount write SetClassifiedAdCount stored ClassifiedAdCount_Specified;
    property TotalLeadCount:           Integer     Index (IS_OPTN) read FTotalLeadCount write SetTotalLeadCount stored TotalLeadCount_Specified;
    property ClassifiedAdOfferCount:   Integer     Index (IS_OPTN) read FClassifiedAdOfferCount write SetClassifiedAdOfferCount stored ClassifiedAdOfferCount_Specified;
    property TotalListingsWithLeads:   Integer     Index (IS_OPTN) read FTotalListingsWithLeads write SetTotalListingsWithLeads stored TotalListingsWithLeads_Specified;
    property QuantityLimitRemaining:   Int64       Index (IS_OPTN) read FQuantityLimitRemaining write SetQuantityLimitRemaining stored QuantityLimitRemaining_Specified;
    property AmountLimitRemaining:     AmountType  Index (IS_OPTN) read FAmountLimitRemaining write SetAmountLimitRemaining stored AmountLimitRemaining_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerAlertType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAlertType = class(TRemotable)
  private
    FAlertType: SellingManagerAlertTypeCodeType;
    FAlertType_Specified: boolean;
    FSoldAlert: SellingManagerSoldListingsPropertyTypeCodeType;
    FSoldAlert_Specified: boolean;
    FInventoryAlert: SellingManagerInventoryPropertyTypeCodeType;
    FInventoryAlert_Specified: boolean;
    FAutomationAlert: SellingManagerAutomationPropertyTypeCodeType;
    FAutomationAlert_Specified: boolean;
    FPaisaPayAlert: SellingManagerPaisaPayPropertyTypeCodeType;
    FPaisaPayAlert_Specified: boolean;
    FGeneralAlert: SellingManagerGeneralPropertyTypeCodeType;
    FGeneralAlert_Specified: boolean;
    FDurationInDays: Integer;
    FDurationInDays_Specified: boolean;
    FCount: Int64;
    FCount_Specified: boolean;
    procedure SetAlertType(Index: Integer; const ASellingManagerAlertTypeCodeType: SellingManagerAlertTypeCodeType);
    function  AlertType_Specified(Index: Integer): boolean;
    procedure SetSoldAlert(Index: Integer; const ASellingManagerSoldListingsPropertyTypeCodeType: SellingManagerSoldListingsPropertyTypeCodeType);
    function  SoldAlert_Specified(Index: Integer): boolean;
    procedure SetInventoryAlert(Index: Integer; const ASellingManagerInventoryPropertyTypeCodeType: SellingManagerInventoryPropertyTypeCodeType);
    function  InventoryAlert_Specified(Index: Integer): boolean;
    procedure SetAutomationAlert(Index: Integer; const ASellingManagerAutomationPropertyTypeCodeType: SellingManagerAutomationPropertyTypeCodeType);
    function  AutomationAlert_Specified(Index: Integer): boolean;
    procedure SetPaisaPayAlert(Index: Integer; const ASellingManagerPaisaPayPropertyTypeCodeType: SellingManagerPaisaPayPropertyTypeCodeType);
    function  PaisaPayAlert_Specified(Index: Integer): boolean;
    procedure SetGeneralAlert(Index: Integer; const ASellingManagerGeneralPropertyTypeCodeType: SellingManagerGeneralPropertyTypeCodeType);
    function  GeneralAlert_Specified(Index: Integer): boolean;
    procedure SetDurationInDays(Index: Integer; const AInteger: Integer);
    function  DurationInDays_Specified(Index: Integer): boolean;
    procedure SetCount(Index: Integer; const AInt64: Int64);
    function  Count_Specified(Index: Integer): boolean;
  published
    property AlertType:       SellingManagerAlertTypeCodeType                 Index (IS_OPTN) read FAlertType write SetAlertType stored AlertType_Specified;
    property SoldAlert:       SellingManagerSoldListingsPropertyTypeCodeType  Index (IS_OPTN) read FSoldAlert write SetSoldAlert stored SoldAlert_Specified;
    property InventoryAlert:  SellingManagerInventoryPropertyTypeCodeType     Index (IS_OPTN) read FInventoryAlert write SetInventoryAlert stored InventoryAlert_Specified;
    property AutomationAlert: SellingManagerAutomationPropertyTypeCodeType    Index (IS_OPTN) read FAutomationAlert write SetAutomationAlert stored AutomationAlert_Specified;
    property PaisaPayAlert:   SellingManagerPaisaPayPropertyTypeCodeType      Index (IS_OPTN) read FPaisaPayAlert write SetPaisaPayAlert stored PaisaPayAlert_Specified;
    property GeneralAlert:    SellingManagerGeneralPropertyTypeCodeType       Index (IS_OPTN) read FGeneralAlert write SetGeneralAlert stored GeneralAlert_Specified;
    property DurationInDays:  Integer                                         Index (IS_OPTN) read FDurationInDays write SetDurationInDays stored DurationInDays_Specified;
    property Count:           Int64                                           Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
  end;

  Array_Of_long = array of Int64;               { "http://www.w3.org/2001/XMLSchema"[GblUbnd] }
  ListingRecommendationsType = array of ListingRecommendationType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  ItemIDType      =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SKUType         =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  SKUArrayType = array of SKUType;              { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : EndItemRequestContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EndItemRequestContainerType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FEndingReason: EndReasonCodeType;
    FEndingReason_Specified: boolean;
    FMessageID: string;
    FMessageID_Specified: boolean;
    FSellerInventoryID: string;
    FSellerInventoryID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
    function  EndingReason_Specified(Index: Integer): boolean;
    procedure SetMessageID(Index: Integer; const Astring: string);
    function  MessageID_Specified(Index: Integer): boolean;
    procedure SetSellerInventoryID(Index: Integer; const Astring: string);
    function  SellerInventoryID_Specified(Index: Integer): boolean;
  published
    property ItemID:            ItemIDType         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property EndingReason:      EndReasonCodeType  Index (IS_OPTN) read FEndingReason write SetEndingReason stored EndingReason_Specified;
    property MessageID:         string             Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
    property SellerInventoryID: string             Index (IS_OPTN) read FSellerInventoryID write SetSellerInventoryID stored SellerInventoryID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerPaymentPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerPaymentPreferencesType = class(TRemotable)
  private
    FAlwaysUseThisPaymentAddress: Boolean;
    FAlwaysUseThisPaymentAddress_Specified: boolean;
    FDisplayPayNowButton: DisplayPayNowButtonCodeType;
    FDisplayPayNowButton_Specified: boolean;
    FPayPalPreferred: Boolean;
    FPayPalPreferred_Specified: boolean;
    FDefaultPayPalEmailAddress: string;
    FDefaultPayPalEmailAddress_Specified: boolean;
    FPayPalAlwaysOn: Boolean;
    FPayPalAlwaysOn_Specified: boolean;
    FSellerPaymentAddress: AddressType;
    FSellerPaymentAddress_Specified: boolean;
    FUPSRateOption: UPSRateOptionCodeType;
    FUPSRateOption_Specified: boolean;
    FFedExRateOption: FedExRateOptionCodeType;
    FFedExRateOption_Specified: boolean;
    FUSPSRateOption: USPSRateOptionCodeType;
    FUSPSRateOption_Specified: boolean;
    procedure SetAlwaysUseThisPaymentAddress(Index: Integer; const ABoolean: Boolean);
    function  AlwaysUseThisPaymentAddress_Specified(Index: Integer): boolean;
    procedure SetDisplayPayNowButton(Index: Integer; const ADisplayPayNowButtonCodeType: DisplayPayNowButtonCodeType);
    function  DisplayPayNowButton_Specified(Index: Integer): boolean;
    procedure SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
    function  PayPalPreferred_Specified(Index: Integer): boolean;
    procedure SetDefaultPayPalEmailAddress(Index: Integer; const Astring: string);
    function  DefaultPayPalEmailAddress_Specified(Index: Integer): boolean;
    procedure SetPayPalAlwaysOn(Index: Integer; const ABoolean: Boolean);
    function  PayPalAlwaysOn_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentAddress(Index: Integer; const AAddressType: AddressType);
    function  SellerPaymentAddress_Specified(Index: Integer): boolean;
    procedure SetUPSRateOption(Index: Integer; const AUPSRateOptionCodeType: UPSRateOptionCodeType);
    function  UPSRateOption_Specified(Index: Integer): boolean;
    procedure SetFedExRateOption(Index: Integer; const AFedExRateOptionCodeType: FedExRateOptionCodeType);
    function  FedExRateOption_Specified(Index: Integer): boolean;
    procedure SetUSPSRateOption(Index: Integer; const AUSPSRateOptionCodeType: USPSRateOptionCodeType);
    function  USPSRateOption_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AlwaysUseThisPaymentAddress: Boolean                      Index (IS_OPTN) read FAlwaysUseThisPaymentAddress write SetAlwaysUseThisPaymentAddress stored AlwaysUseThisPaymentAddress_Specified;
    property DisplayPayNowButton:         DisplayPayNowButtonCodeType  Index (IS_OPTN) read FDisplayPayNowButton write SetDisplayPayNowButton stored DisplayPayNowButton_Specified;
    property PayPalPreferred:             Boolean                      Index (IS_OPTN) read FPayPalPreferred write SetPayPalPreferred stored PayPalPreferred_Specified;
    property DefaultPayPalEmailAddress:   string                       Index (IS_OPTN) read FDefaultPayPalEmailAddress write SetDefaultPayPalEmailAddress stored DefaultPayPalEmailAddress_Specified;
    property PayPalAlwaysOn:              Boolean                      Index (IS_OPTN) read FPayPalAlwaysOn write SetPayPalAlwaysOn stored PayPalAlwaysOn_Specified;
    property SellerPaymentAddress:        AddressType                  Index (IS_OPTN) read FSellerPaymentAddress write SetSellerPaymentAddress stored SellerPaymentAddress_Specified;
    property UPSRateOption:               UPSRateOptionCodeType        Index (IS_OPTN) read FUPSRateOption write SetUPSRateOption stored UPSRateOption_Specified;
    property FedExRateOption:             FedExRateOptionCodeType      Index (IS_OPTN) read FFedExRateOption write SetFedExRateOption stored FedExRateOption_Specified;
    property USPSRateOption:              USPSRateOptionCodeType       Index (IS_OPTN) read FUSPSRateOption write SetUSPSRateOption stored USPSRateOption_Specified;
  end;

  SellerExcludeShipToLocationPreferencesType = array of string;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : UnpaidItemAssistancePreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnpaidItemAssistancePreferencesType = class(TRemotable)
  private
    FDelayBeforeOpeningDispute: Integer;
    FDelayBeforeOpeningDispute_Specified: boolean;
    FOptInStatus: Boolean;
    FOptInStatus_Specified: boolean;
    FAutoRelist: Boolean;
    FAutoRelist_Specified: boolean;
    FRemoveAllExcludedUsers: Boolean;
    FRemoveAllExcludedUsers_Specified: boolean;
    FExcludedUser: SellerExcludeShipToLocationPreferencesType;
    FExcludedUser_Specified: boolean;
    FAutoOptDonationRefund: Boolean;
    FAutoOptDonationRefund_Specified: boolean;
    procedure SetDelayBeforeOpeningDispute(Index: Integer; const AInteger: Integer);
    function  DelayBeforeOpeningDispute_Specified(Index: Integer): boolean;
    procedure SetOptInStatus(Index: Integer; const ABoolean: Boolean);
    function  OptInStatus_Specified(Index: Integer): boolean;
    procedure SetAutoRelist(Index: Integer; const ABoolean: Boolean);
    function  AutoRelist_Specified(Index: Integer): boolean;
    procedure SetRemoveAllExcludedUsers(Index: Integer; const ABoolean: Boolean);
    function  RemoveAllExcludedUsers_Specified(Index: Integer): boolean;
    procedure SetExcludedUser(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  ExcludedUser_Specified(Index: Integer): boolean;
    procedure SetAutoOptDonationRefund(Index: Integer; const ABoolean: Boolean);
    function  AutoOptDonationRefund_Specified(Index: Integer): boolean;
  published
    property DelayBeforeOpeningDispute: Integer                                     Index (IS_OPTN) read FDelayBeforeOpeningDispute write SetDelayBeforeOpeningDispute stored DelayBeforeOpeningDispute_Specified;
    property OptInStatus:               Boolean                                     Index (IS_OPTN) read FOptInStatus write SetOptInStatus stored OptInStatus_Specified;
    property AutoRelist:                Boolean                                     Index (IS_OPTN) read FAutoRelist write SetAutoRelist stored AutoRelist_Specified;
    property RemoveAllExcludedUsers:    Boolean                                     Index (IS_OPTN) read FRemoveAllExcludedUsers write SetRemoveAllExcludedUsers stored RemoveAllExcludedUsers_Specified;
    property ExcludedUser:              SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FExcludedUser write SetExcludedUser stored ExcludedUser_Specified;
    property AutoOptDonationRefund:     Boolean                                     Index (IS_OPTN) read FAutoOptDonationRefund write SetAutoOptDonationRefund stored AutoOptDonationRefund_Specified;
  end;



  // ************************************************************************ //
  // XML       : ProductDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductDetailsType = class(TRemotable)
  private
    FProductIdentifierUnavailableText: string;
    FProductIdentifierUnavailableText_Specified: boolean;
    procedure SetProductIdentifierUnavailableText(Index: Integer; const Astring: string);
    function  ProductIdentifierUnavailableText_Specified(Index: Integer): boolean;
  published
    property ProductIdentifierUnavailableText: string  Index (IS_OPTN) read FProductIdentifierUnavailableText write SetProductIdentifierUnavailableText stored ProductIdentifierUnavailableText_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationEventPropertyType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationEventPropertyType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FEventType_Specified: boolean;
    FName_: NotificationEventPropertyNameCodeType;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
    function  EventType_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const ANotificationEventPropertyNameCodeType: NotificationEventPropertyNameCodeType);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property EventType: NotificationEventTypeCodeType          Index (IS_OPTN) read FEventType write SetEventType stored EventType_Specified;
    property Name_:     NotificationEventPropertyNameCodeType  Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Value:     string                                 Index (IS_OPTN) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationUserDataType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationUserDataType = class(TRemotable)
  private
    FSMSSubscription: SMSSubscriptionType;
    FSMSSubscription_Specified: boolean;
    FSummarySchedule: Array_Of_SummaryEventScheduleType;
    FSummarySchedule_Specified: boolean;
    FExternalUserData: string;
    FExternalUserData_Specified: boolean;
    procedure SetSMSSubscription(Index: Integer; const ASMSSubscriptionType: SMSSubscriptionType);
    function  SMSSubscription_Specified(Index: Integer): boolean;
    procedure SetSummarySchedule(Index: Integer; const AArray_Of_SummaryEventScheduleType: Array_Of_SummaryEventScheduleType);
    function  SummarySchedule_Specified(Index: Integer): boolean;
    procedure SetExternalUserData(Index: Integer; const Astring: string);
    function  ExternalUserData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SMSSubscription:  SMSSubscriptionType                Index (IS_OPTN) read FSMSSubscription write SetSMSSubscription stored SMSSubscription_Specified;
    property SummarySchedule:  Array_Of_SummaryEventScheduleType  Index (IS_OPTN or IS_UNBD) read FSummarySchedule write SetSummarySchedule stored SummarySchedule_Specified;
    property ExternalUserData: string                             Index (IS_OPTN) read FExternalUserData write SetExternalUserData stored ExternalUserData_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerSearchType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerSearchType = class(TRemotable)
  private
    FSearchType: SellingManagerSearchTypeCodeType;
    FSearchType_Specified: boolean;
    FSearchValue: string;
    FSearchValue_Specified: boolean;
    procedure SetSearchType(Index: Integer; const ASellingManagerSearchTypeCodeType: SellingManagerSearchTypeCodeType);
    function  SearchType_Specified(Index: Integer): boolean;
    procedure SetSearchValue(Index: Integer; const Astring: string);
    function  SearchValue_Specified(Index: Integer): boolean;
  published
    property SearchType:  SellingManagerSearchTypeCodeType  Index (IS_OPTN) read FSearchType write SetSearchType stored SearchType_Specified;
    property SearchValue: string                            Index (IS_OPTN) read FSearchValue write SetSearchValue stored SearchValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : UnitOfMeasurementType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnitOfMeasurementType = class(TRemotable)
  private
    FAlternateText: SellerExcludeShipToLocationPreferencesType;
    FAlternateText_Specified: boolean;
    FSuggestedText: string;
    FSuggestedText_Specified: boolean;
    procedure SetAlternateText(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  AlternateText_Specified(Index: Integer): boolean;
    procedure SetSuggestedText(Index: Integer; const Astring: string);
    function  SuggestedText_Specified(Index: Integer): boolean;
  published
    property AlternateText: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FAlternateText write SetAlternateText stored AlternateText_Specified;
    property SuggestedText: string                                      Index (IS_OPTN) read FSuggestedText write SetSuggestedText stored SuggestedText_Specified;
  end;



  // ************************************************************************ //
  // XML       : VeROReportedItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROReportedItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FItemStatus: VeROItemStatusCodeType;
    FItemStatus_Specified: boolean;
    FItemReasonForFailure: string;
    FItemReasonForFailure_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetItemStatus(Index: Integer; const AVeROItemStatusCodeType: VeROItemStatusCodeType);
    function  ItemStatus_Specified(Index: Integer): boolean;
    procedure SetItemReasonForFailure(Index: Integer; const Astring: string);
    function  ItemReasonForFailure_Specified(Index: Integer): boolean;
  published
    property ItemID:               ItemIDType              Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ItemStatus:           VeROItemStatusCodeType  Index (IS_OPTN) read FItemStatus write SetItemStatus stored ItemStatus_Specified;
    property ItemReasonForFailure: string                  Index (IS_OPTN) read FItemReasonForFailure write SetItemReasonForFailure stored ItemReasonForFailure_Specified;
  end;



  // ************************************************************************ //
  // XML       : SMSSubscriptionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SMSSubscriptionType = class(TRemotable)
  private
    FSMSPhone: string;
    FSMSPhone_Specified: boolean;
    FUserStatus: SMSSubscriptionUserStatusCodeType;
    FUserStatus_Specified: boolean;
    FCarrierID: WirelessCarrierIDCodeType;
    FCarrierID_Specified: boolean;
    FErrorCode: SMSSubscriptionErrorCodeCodeType;
    FErrorCode_Specified: boolean;
    FItemToUnsubscribe: ItemIDType;
    FItemToUnsubscribe_Specified: boolean;
    procedure SetSMSPhone(Index: Integer; const Astring: string);
    function  SMSPhone_Specified(Index: Integer): boolean;
    procedure SetUserStatus(Index: Integer; const ASMSSubscriptionUserStatusCodeType: SMSSubscriptionUserStatusCodeType);
    function  UserStatus_Specified(Index: Integer): boolean;
    procedure SetCarrierID(Index: Integer; const AWirelessCarrierIDCodeType: WirelessCarrierIDCodeType);
    function  CarrierID_Specified(Index: Integer): boolean;
    procedure SetErrorCode(Index: Integer; const ASMSSubscriptionErrorCodeCodeType: SMSSubscriptionErrorCodeCodeType);
    function  ErrorCode_Specified(Index: Integer): boolean;
    procedure SetItemToUnsubscribe(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemToUnsubscribe_Specified(Index: Integer): boolean;
  published
    property SMSPhone:          string                             Index (IS_OPTN) read FSMSPhone write SetSMSPhone stored SMSPhone_Specified;
    property UserStatus:        SMSSubscriptionUserStatusCodeType  Index (IS_OPTN) read FUserStatus write SetUserStatus stored UserStatus_Specified;
    property CarrierID:         WirelessCarrierIDCodeType          Index (IS_OPTN) read FCarrierID write SetCarrierID stored CarrierID_Specified;
    property ErrorCode:         SMSSubscriptionErrorCodeCodeType   Index (IS_OPTN) read FErrorCode write SetErrorCode stored ErrorCode_Specified;
    property ItemToUnsubscribe: ItemIDType                         Index (IS_OPTN) read FItemToUnsubscribe write SetItemToUnsubscribe stored ItemToUnsubscribe_Specified;
  end;

  MyMessagesMessageIDType =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MyMessagesMessageIDArrayType = array of MyMessagesMessageIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : MyMessagesFolderType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesFolderType = class(TRemotable)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FFolderName: string;
    FFolderName_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetFolderName(Index: Integer; const Astring: string);
    function  FolderName_Specified(Index: Integer): boolean;
  published
    property FolderID:   Int64   Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property FolderName: string  Index (IS_OPTN) read FFolderName write SetFolderName stored FolderName_Specified;
  end;

  MyMessagesExternalMessageIDType =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }


  // ************************************************************************ //
  // XML       : MyMessagesFolderSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesFolderSummaryType = class(TRemotable)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FFolderName: string;
    FFolderName_Specified: boolean;
    FNewAlertCount: Integer;
    FNewAlertCount_Specified: boolean;
    FNewMessageCount: Integer;
    FNewMessageCount_Specified: boolean;
    FTotalAlertCount: Integer;
    FTotalAlertCount_Specified: boolean;
    FTotalMessageCount: Integer;
    FTotalMessageCount_Specified: boolean;
    FNewHighPriorityCount: Integer;
    FNewHighPriorityCount_Specified: boolean;
    FTotalHighPriorityCount: Integer;
    FTotalHighPriorityCount_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetFolderName(Index: Integer; const Astring: string);
    function  FolderName_Specified(Index: Integer): boolean;
    procedure SetNewAlertCount(Index: Integer; const AInteger: Integer);
    function  NewAlertCount_Specified(Index: Integer): boolean;
    procedure SetNewMessageCount(Index: Integer; const AInteger: Integer);
    function  NewMessageCount_Specified(Index: Integer): boolean;
    procedure SetTotalAlertCount(Index: Integer; const AInteger: Integer);
    function  TotalAlertCount_Specified(Index: Integer): boolean;
    procedure SetTotalMessageCount(Index: Integer; const AInteger: Integer);
    function  TotalMessageCount_Specified(Index: Integer): boolean;
    procedure SetNewHighPriorityCount(Index: Integer; const AInteger: Integer);
    function  NewHighPriorityCount_Specified(Index: Integer): boolean;
    procedure SetTotalHighPriorityCount(Index: Integer; const AInteger: Integer);
    function  TotalHighPriorityCount_Specified(Index: Integer): boolean;
  published
    property FolderID:               Int64    Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property FolderName:             string   Index (IS_OPTN) read FFolderName write SetFolderName stored FolderName_Specified;
    property NewAlertCount:          Integer  Index (IS_OPTN) read FNewAlertCount write SetNewAlertCount stored NewAlertCount_Specified;
    property NewMessageCount:        Integer  Index (IS_OPTN) read FNewMessageCount write SetNewMessageCount stored NewMessageCount_Specified;
    property TotalAlertCount:        Integer  Index (IS_OPTN) read FTotalAlertCount write SetTotalAlertCount stored TotalAlertCount_Specified;
    property TotalMessageCount:      Integer  Index (IS_OPTN) read FTotalMessageCount write SetTotalMessageCount stored TotalMessageCount_Specified;
    property NewHighPriorityCount:   Integer  Index (IS_OPTN) read FNewHighPriorityCount write SetNewHighPriorityCount stored NewHighPriorityCount_Specified;
    property TotalHighPriorityCount: Integer  Index (IS_OPTN) read FTotalHighPriorityCount write SetTotalHighPriorityCount stored TotalHighPriorityCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ValueRecommendationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValueRecommendationType = class(TRemotable)
  private
    FValue: string;
    FValue_Specified: boolean;
    FValidationRules: RecommendationValidationRulesType;
    FValidationRules_Specified: boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
    procedure SetValidationRules(Index: Integer; const ARecommendationValidationRulesType: RecommendationValidationRulesType);
    function  ValidationRules_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Value:           string                             Index (IS_OPTN) read FValue write SetValue stored Value_Specified;
    property ValidationRules: RecommendationValidationRulesType  Index (IS_OPTN) read FValidationRules write SetValidationRules stored ValidationRules_Specified;
  end;



  // ************************************************************************ //
  // XML       : NameValueRelationshipType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NameValueRelationshipType = class(TRemotable)
  private
    FParentName: string;
    FParentName_Specified: boolean;
    FParentValue: string;
    FParentValue_Specified: boolean;
    procedure SetParentName(Index: Integer; const Astring: string);
    function  ParentName_Specified(Index: Integer): boolean;
    procedure SetParentValue(Index: Integer; const Astring: string);
    function  ParentValue_Specified(Index: Integer): boolean;
  published
    property ParentName:  string  Index (IS_OPTN) read FParentName write SetParentName stored ParentName_Specified;
    property ParentValue: string  Index (IS_OPTN) read FParentValue write SetParentValue stored ParentValue_Specified;
  end;



  // ************************************************************************ //
  // XML       : NameRecommendationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NameRecommendationType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValidationRules: RecommendationValidationRulesType;
    FValidationRules_Specified: boolean;
    FValueRecommendation: Array_Of_ValueRecommendationType;
    FValueRecommendation_Specified: boolean;
    FHelpURL: string;
    FHelpURL_Specified: boolean;
    FSource: ItemSpecificSourceCodeType;
    FSource_Specified: boolean;
    FHelpText: string;
    FHelpText_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValidationRules(Index: Integer; const ARecommendationValidationRulesType: RecommendationValidationRulesType);
    function  ValidationRules_Specified(Index: Integer): boolean;
    procedure SetValueRecommendation(Index: Integer; const AArray_Of_ValueRecommendationType: Array_Of_ValueRecommendationType);
    function  ValueRecommendation_Specified(Index: Integer): boolean;
    procedure SetHelpURL(Index: Integer; const Astring: string);
    function  HelpURL_Specified(Index: Integer): boolean;
    procedure SetSource(Index: Integer; const AItemSpecificSourceCodeType: ItemSpecificSourceCodeType);
    function  Source_Specified(Index: Integer): boolean;
    procedure SetHelpText(Index: Integer; const Astring: string);
    function  HelpText_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:               string                             Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property ValidationRules:     RecommendationValidationRulesType  Index (IS_OPTN) read FValidationRules write SetValidationRules stored ValidationRules_Specified;
    property ValueRecommendation: Array_Of_ValueRecommendationType   Index (IS_OPTN or IS_UNBD) read FValueRecommendation write SetValueRecommendation stored ValueRecommendation_Specified;
    property HelpURL:             string                             Index (IS_OPTN) read FHelpURL write SetHelpURL stored HelpURL_Specified;
    property Source:              ItemSpecificSourceCodeType         Index (IS_OPTN) read FSource write SetSource stored Source_Specified;
    property HelpText:            string                             Index (IS_OPTN) read FHelpText write SetHelpText stored HelpText_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyeBayFavoriteSellerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSellerType = class(TRemotable)
  private
    FUserID: string;
    FUserID_Specified: boolean;
    FStoreName: string;
    FStoreName_Specified: boolean;
    procedure SetUserID(Index: Integer; const Astring: string);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetStoreName(Index: Integer; const Astring: string);
    function  StoreName_Specified(Index: Integer): boolean;
  published
    property UserID:    string  Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property StoreName: string  Index (IS_OPTN) read FStoreName write SetStoreName stored StoreName_Specified;
  end;



  // ************************************************************************ //
  // XML       : PicturesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PicturesType = class(TRemotable)
  private
    FVariationSpecificName: string;
    FVariationSpecificName_Specified: boolean;
    FVariationSpecificPictureSet: Array_Of_VariationSpecificPictureSetType;
    FVariationSpecificPictureSet_Specified: boolean;
    procedure SetVariationSpecificName(Index: Integer; const Astring: string);
    function  VariationSpecificName_Specified(Index: Integer): boolean;
    procedure SetVariationSpecificPictureSet(Index: Integer; const AArray_Of_VariationSpecificPictureSetType: Array_Of_VariationSpecificPictureSetType);
    function  VariationSpecificPictureSet_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property VariationSpecificName:       string                                    Index (IS_OPTN) read FVariationSpecificName write SetVariationSpecificName stored VariationSpecificName_Specified;
    property VariationSpecificPictureSet: Array_Of_VariationSpecificPictureSetType  Index (IS_OPTN or IS_UNBD) read FVariationSpecificPictureSet write SetVariationSpecificPictureSet stored VariationSpecificPictureSet_Specified;
  end;



  // ************************************************************************ //
  // XML       : ProductSuggestionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductSuggestionType = class(TRemotable)
  private
    FTitle: string;
    FTitle_Specified: boolean;
    FEPID: string;
    FEPID_Specified: boolean;
    FStockPhoto: string;
    FStockPhoto_Specified: boolean;
    FRecommended: Boolean;
    FRecommended_Specified: boolean;
    procedure SetTitle(Index: Integer; const Astring: string);
    function  Title_Specified(Index: Integer): boolean;
    procedure SetEPID(Index: Integer; const Astring: string);
    function  EPID_Specified(Index: Integer): boolean;
    procedure SetStockPhoto(Index: Integer; const Astring: string);
    function  StockPhoto_Specified(Index: Integer): boolean;
    procedure SetRecommended(Index: Integer; const ABoolean: Boolean);
    function  Recommended_Specified(Index: Integer): boolean;
  published
    property Title:       string   Index (IS_OPTN) read FTitle write SetTitle stored Title_Specified;
    property EPID:        string   Index (IS_OPTN) read FEPID write SetEPID stored EPID_Specified;
    property StockPhoto:  string   Index (IS_OPTN) read FStockPhoto write SetStockPhoto stored StockPhoto_Specified;
    property Recommended: Boolean  Index (IS_OPTN) read FRecommended write SetRecommended stored Recommended_Specified;
  end;



  // ************************************************************************ //
  // XML       : TicketListingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TicketListingDetailsType = class(TRemotable)
  private
    FEventTitle: string;
    FEventTitle_Specified: boolean;
    FVenue: string;
    FVenue_Specified: boolean;
    FPrintedDate: string;
    FPrintedDate_Specified: boolean;
    FPrintedTime: string;
    FPrintedTime_Specified: boolean;
    procedure SetEventTitle(Index: Integer; const Astring: string);
    function  EventTitle_Specified(Index: Integer): boolean;
    procedure SetVenue(Index: Integer; const Astring: string);
    function  Venue_Specified(Index: Integer): boolean;
    procedure SetPrintedDate(Index: Integer; const Astring: string);
    function  PrintedDate_Specified(Index: Integer): boolean;
    procedure SetPrintedTime(Index: Integer; const Astring: string);
    function  PrintedTime_Specified(Index: Integer): boolean;
  published
    property EventTitle:  string  Index (IS_OPTN) read FEventTitle write SetEventTitle stored EventTitle_Specified;
    property Venue:       string  Index (IS_OPTN) read FVenue write SetVenue stored Venue_Specified;
    property PrintedDate: string  Index (IS_OPTN) read FPrintedDate write SetPrintedDate stored PrintedDate_Specified;
    property PrintedTime: string  Index (IS_OPTN) read FPrintedTime write SetPrintedTime stored PrintedTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserIdentityType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserIdentityType = class(TRemotable)
  private
    FText: string;
    Ftype_: UserIdentityCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const AUserIdentityCodeType: UserIdentityCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property Text:  string                Index (IS_TEXT) read FText write FText;
    property type_: UserIdentityCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;



  // ************************************************************************ //
  // XML       : TransactionReferenceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TransactionReferenceType = class(TRemotable)
  private
    FText: string;
    Ftype_: TransactionReferenceCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const ATransactionReferenceCodeType: TransactionReferenceCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property Text:  string                        Index (IS_TEXT) read FText write FText;
    property type_: TransactionReferenceCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;



  // ************************************************************************ //
  // XML       : StorefrontType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StorefrontType = class(TRemotable)
  private
    FStoreCategoryID: Int64;
    FStoreCategory2ID: Int64;
    FStoreCategoryName: string;
    FStoreCategoryName_Specified: boolean;
    FStoreCategory2Name: string;
    FStoreCategory2Name_Specified: boolean;
    FStoreURL: string;
    FStoreURL_Specified: boolean;
    FStoreName: string;
    FStoreName_Specified: boolean;
    procedure SetStoreCategoryName(Index: Integer; const Astring: string);
    function  StoreCategoryName_Specified(Index: Integer): boolean;
    procedure SetStoreCategory2Name(Index: Integer; const Astring: string);
    function  StoreCategory2Name_Specified(Index: Integer): boolean;
    procedure SetStoreURL(Index: Integer; const Astring: string);
    function  StoreURL_Specified(Index: Integer): boolean;
    procedure SetStoreName(Index: Integer; const Astring: string);
    function  StoreName_Specified(Index: Integer): boolean;
  published
    property StoreCategoryID:    Int64   read FStoreCategoryID write FStoreCategoryID;
    property StoreCategory2ID:   Int64   read FStoreCategory2ID write FStoreCategory2ID;
    property StoreCategoryName:  string  Index (IS_OPTN) read FStoreCategoryName write SetStoreCategoryName stored StoreCategoryName_Specified;
    property StoreCategory2Name: string  Index (IS_OPTN) read FStoreCategory2Name write SetStoreCategory2Name stored StoreCategory2Name_Specified;
    property StoreURL:           string  Index (IS_OPTN) read FStoreURL write SetStoreURL stored StoreURL_Specified;
    property StoreName:          string  Index (IS_OPTN) read FStoreName write SetStoreName stored StoreName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemTransactionIDType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemTransactionIDType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  published
    property ItemID:          ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property SKU:             SKUType     Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property OrderLineItemID: string      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemPolicyViolationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemPolicyViolationType = class(TRemotable)
  private
    FPolicyID: Int64;
    FPolicyID_Specified: boolean;
    FPolicyText: string;
    FPolicyText_Specified: boolean;
    procedure SetPolicyID(Index: Integer; const AInt64: Int64);
    function  PolicyID_Specified(Index: Integer): boolean;
    procedure SetPolicyText(Index: Integer; const Astring: string);
    function  PolicyText_Specified(Index: Integer): boolean;
  published
    property PolicyID:   Int64   Index (IS_OPTN) read FPolicyID write SetPolicyID stored PolicyID_Specified;
    property PolicyText: string  Index (IS_OPTN) read FPolicyText write SetPolicyText stored PolicyText_Specified;
  end;



  // ************************************************************************ //
  // XML       : NameValueListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NameValueListType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: SellerExcludeShipToLocationPreferencesType;
    FValue_Specified: boolean;
    FSource: ItemSpecificSourceCodeType;
    FSource_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Value_Specified(Index: Integer): boolean;
    procedure SetSource(Index: Integer; const AItemSpecificSourceCodeType: ItemSpecificSourceCodeType);
    function  Source_Specified(Index: Integer): boolean;
  published
    property Name_:  string                                      Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Value:  SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FValue write SetValue stored Value_Specified;
    property Source: ItemSpecificSourceCodeType                  Index (IS_OPTN) read FSource write SetSource stored Source_Specified;
  end;



  // ************************************************************************ //
  // XML       : GiftSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GiftSummaryType = class(TRemotable)
  private
    FMessage_: string;
    FMessage__Specified: boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
  published
    property Message_: string  Index (IS_OPTN) read FMessage_ write SetMessage_ stored Message__Specified;
  end;



  // ************************************************************************ //
  // XML       : MaximumUnpaidItemStrikesDurationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumUnpaidItemStrikesDurationDetailsType = class(TRemotable)
  private
    FPeriod: PeriodCodeType;
    FPeriod_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
    function  Period_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property Period:      PeriodCodeType  Index (IS_OPTN) read FPeriod write SetPeriod stored Period_Specified;
    property Description: string          Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : MessageMediaType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MessageMediaType = class(TRemotable)
  private
    FMediaURL: string;
    FMediaURL_Specified: boolean;
    FMediaName: string;
    FMediaName_Specified: boolean;
    procedure SetMediaURL(Index: Integer; const Astring: string);
    function  MediaURL_Specified(Index: Integer): boolean;
    procedure SetMediaName(Index: Integer; const Astring: string);
    function  MediaName_Specified(Index: Integer): boolean;
  published
    property MediaURL:  string  Index (IS_OPTN) read FMediaURL write SetMediaURL stored MediaURL_Specified;
    property MediaName: string  Index (IS_OPTN) read FMediaName write SetMediaName stored MediaName_Specified;
  end;



  // ************************************************************************ //
  // XML       : PolicyViolationDurationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PolicyViolationDurationDetailsType = class(TRemotable)
  private
    FPeriod: PeriodCodeType;
    FPeriod_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
    function  Period_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property Period:      PeriodCodeType  Index (IS_OPTN) read FPeriod write SetPeriod stored Period_Specified;
    property Description: string          Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;

  MyMessagesAlertIDType =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  MyMessagesAlertIDArrayType = array of MyMessagesAlertIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ModifyNameType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ModifyNameType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FNewName: string;
    FNewName_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetNewName(Index: Integer; const Astring: string);
    function  NewName_Specified(Index: Integer): boolean;
  published
    property Name_:   string  Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property NewName: string  Index (IS_OPTN) read FNewName write SetNewName stored NewName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingCheckoutRedirectPreferenceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingCheckoutRedirectPreferenceType = class(TRemotable)
  private
    FProStoresStoreName: string;
    FProStoresStoreName_Specified: boolean;
    FSellerThirdPartyUsername: string;
    FSellerThirdPartyUsername_Specified: boolean;
    procedure SetProStoresStoreName(Index: Integer; const Astring: string);
    function  ProStoresStoreName_Specified(Index: Integer): boolean;
    procedure SetSellerThirdPartyUsername(Index: Integer; const Astring: string);
    function  SellerThirdPartyUsername_Specified(Index: Integer): boolean;
  published
    property ProStoresStoreName:       string  Index (IS_OPTN) read FProStoresStoreName write SetProStoresStoreName stored ProStoresStoreName_Specified;
    property SellerThirdPartyUsername: string  Index (IS_OPTN) read FSellerThirdPartyUsername write SetSellerThirdPartyUsername stored SellerThirdPartyUsername_Specified;
  end;



  // ************************************************************************ //
  // XML       : LineItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LineItemType = class(TRemotable)
  private
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FCountryOfOrigin: string;
    FCountryOfOrigin_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FItemID: ItemIDType;
    FTransactionID: string;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetCountryOfOrigin(Index: Integer; const Astring: string);
    function  CountryOfOrigin_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property Quantity:        Integer     Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property CountryOfOrigin: string      Index (IS_OPTN) read FCountryOfOrigin write SetCountryOfOrigin stored CountryOfOrigin_Specified;
    property Description:     string      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ItemID:          ItemIDType  read FItemID write FItemID;
    property TransactionID:   string      read FTransactionID write FTransactionID;
  end;



  // ************************************************************************ //
  // XML       : MetadataType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MetadataType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: SellerExcludeShipToLocationPreferencesType;
    FValue_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Name_: string                                      Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Value: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingRecommendationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingRecommendationType = class(TRemotable)
  private
    FType_: string;
    FType__Specified: boolean;
    FGroup: string;
    FGroup_Specified: boolean;
    FFieldName: string;
    FFieldName_Specified: boolean;
    FCode: string;
    FCode_Specified: boolean;
    FValue: SellerExcludeShipToLocationPreferencesType;
    FValue_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FMetadata: Array_Of_MetadataType;
    FMetadata_Specified: boolean;
    procedure SetType_(Index: Integer; const Astring: string);
    function  Type__Specified(Index: Integer): boolean;
    procedure SetGroup(Index: Integer; const Astring: string);
    function  Group_Specified(Index: Integer): boolean;
    procedure SetFieldName(Index: Integer; const Astring: string);
    function  FieldName_Specified(Index: Integer): boolean;
    procedure SetCode(Index: Integer; const Astring: string);
    function  Code_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Value_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetMetadata(Index: Integer; const AArray_Of_MetadataType: Array_Of_MetadataType);
    function  Metadata_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Type_:     string                                      Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
    property Group:     string                                      Index (IS_OPTN) read FGroup write SetGroup stored Group_Specified;
    property FieldName: string                                      Index (IS_OPTN) read FFieldName write SetFieldName stored FieldName_Specified;
    property Code:      string                                      Index (IS_OPTN) read FCode write SetCode stored Code_Specified;
    property Value:     SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FValue write SetValue stored Value_Specified;
    property Message_:  string                                      Index (IS_OPTN) read FMessage_ write SetMessage_ stored Message__Specified;
    property Metadata:  Array_Of_MetadataType                       Index (IS_OPTN or IS_UNBD) read FMetadata write SetMetadata stored Metadata_Specified;
  end;



  // ************************************************************************ //
  // XML       : LookupAttributeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LookupAttributeType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Value: string  Index (IS_OPTN) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShipmentTrackingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShipmentTrackingDetailsType = class(TRemotable)
  private
    FShippingCarrierUsed: string;
    FShippingCarrierUsed_Specified: boolean;
    FShipmentTrackingNumber: string;
    FShipmentTrackingNumber_Specified: boolean;
    FShipmentLineItem: ShipmentLineItemType;
    FShipmentLineItem_Specified: boolean;
    procedure SetShippingCarrierUsed(Index: Integer; const Astring: string);
    function  ShippingCarrierUsed_Specified(Index: Integer): boolean;
    procedure SetShipmentTrackingNumber(Index: Integer; const Astring: string);
    function  ShipmentTrackingNumber_Specified(Index: Integer): boolean;
    procedure SetShipmentLineItem(Index: Integer; const AShipmentLineItemType: ShipmentLineItemType);
    function  ShipmentLineItem_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingCarrierUsed:    string                Index (IS_OPTN) read FShippingCarrierUsed write SetShippingCarrierUsed stored ShippingCarrierUsed_Specified;
    property ShipmentTrackingNumber: string                Index (IS_OPTN) read FShipmentTrackingNumber write SetShipmentTrackingNumber stored ShipmentTrackingNumber_Specified;
    property ShipmentLineItem:       ShipmentLineItemType  Index (IS_OPTN) read FShipmentLineItem write SetShipmentLineItem stored ShipmentLineItem_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerVendorDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerVendorDetailsType = class(TRemotable)
  private
    FVendorName: string;
    FVendorName_Specified: boolean;
    FVendorContactInfo: string;
    FVendorContactInfo_Specified: boolean;
    procedure SetVendorName(Index: Integer; const Astring: string);
    function  VendorName_Specified(Index: Integer): boolean;
    procedure SetVendorContactInfo(Index: Integer; const Astring: string);
    function  VendorContactInfo_Specified(Index: Integer): boolean;
  published
    property VendorName:        string  Index (IS_OPTN) read FVendorName write SetVendorName stored VendorName_Specified;
    property VendorContactInfo: string  Index (IS_OPTN) read FVendorContactInfo write SetVendorContactInfo stored VendorContactInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : SupportedSellerProfileType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SupportedSellerProfileType = class(TRemotable)
  private
    FProfileID: Int64;
    FProfileID_Specified: boolean;
    FProfileType: string;
    FProfileType_Specified: boolean;
    FProfileName: string;
    FProfileName_Specified: boolean;
    FShortSummary: string;
    FShortSummary_Specified: boolean;
    FCategoryGroup: CategoryGroupType;
    FCategoryGroup_Specified: boolean;
    procedure SetProfileID(Index: Integer; const AInt64: Int64);
    function  ProfileID_Specified(Index: Integer): boolean;
    procedure SetProfileType(Index: Integer; const Astring: string);
    function  ProfileType_Specified(Index: Integer): boolean;
    procedure SetProfileName(Index: Integer; const Astring: string);
    function  ProfileName_Specified(Index: Integer): boolean;
    procedure SetShortSummary(Index: Integer; const Astring: string);
    function  ShortSummary_Specified(Index: Integer): boolean;
    procedure SetCategoryGroup(Index: Integer; const ACategoryGroupType: CategoryGroupType);
    function  CategoryGroup_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ProfileID:     Int64              Index (IS_OPTN) read FProfileID write SetProfileID stored ProfileID_Specified;
    property ProfileType:   string             Index (IS_OPTN) read FProfileType write SetProfileType stored ProfileType_Specified;
    property ProfileName:   string             Index (IS_OPTN) read FProfileName write SetProfileName stored ProfileName_Specified;
    property ShortSummary:  string             Index (IS_OPTN) read FShortSummary write SetShortSummary stored ShortSummary_Specified;
    property CategoryGroup: CategoryGroupType  Index (IS_OPTN) read FCategoryGroup write SetCategoryGroup stored CategoryGroup_Specified;
  end;



  // ************************************************************************ //
  // XML       : TaxDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxDetailsType = class(TRemotable)
  private
    FImposition: TaxTypeCodeType;
    FImposition_Specified: boolean;
    FTaxDescription: TaxDescriptionCodeType;
    FTaxDescription_Specified: boolean;
    FTaxAmount: AmountType;
    FTaxAmount_Specified: boolean;
    FTaxOnSubtotalAmount: AmountType;
    FTaxOnSubtotalAmount_Specified: boolean;
    FTaxOnShippingAmount: AmountType;
    FTaxOnShippingAmount_Specified: boolean;
    FTaxOnHandlingAmount: AmountType;
    FTaxOnHandlingAmount_Specified: boolean;
    FTaxCode: string;
    FTaxCode_Specified: boolean;
    FCollectionMethod: CollectionMethodCodeType;
    FCollectionMethod_Specified: boolean;
    procedure SetImposition(Index: Integer; const ATaxTypeCodeType: TaxTypeCodeType);
    function  Imposition_Specified(Index: Integer): boolean;
    procedure SetTaxDescription(Index: Integer; const ATaxDescriptionCodeType: TaxDescriptionCodeType);
    function  TaxDescription_Specified(Index: Integer): boolean;
    procedure SetTaxAmount(Index: Integer; const AAmountType: AmountType);
    function  TaxAmount_Specified(Index: Integer): boolean;
    procedure SetTaxOnSubtotalAmount(Index: Integer; const AAmountType: AmountType);
    function  TaxOnSubtotalAmount_Specified(Index: Integer): boolean;
    procedure SetTaxOnShippingAmount(Index: Integer; const AAmountType: AmountType);
    function  TaxOnShippingAmount_Specified(Index: Integer): boolean;
    procedure SetTaxOnHandlingAmount(Index: Integer; const AAmountType: AmountType);
    function  TaxOnHandlingAmount_Specified(Index: Integer): boolean;
    procedure SetTaxCode(Index: Integer; const Astring: string);
    function  TaxCode_Specified(Index: Integer): boolean;
    procedure SetCollectionMethod(Index: Integer; const ACollectionMethodCodeType: CollectionMethodCodeType);
    function  CollectionMethod_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Imposition:          TaxTypeCodeType           Index (IS_OPTN) read FImposition write SetImposition stored Imposition_Specified;
    property TaxDescription:      TaxDescriptionCodeType    Index (IS_OPTN) read FTaxDescription write SetTaxDescription stored TaxDescription_Specified;
    property TaxAmount:           AmountType                Index (IS_OPTN) read FTaxAmount write SetTaxAmount stored TaxAmount_Specified;
    property TaxOnSubtotalAmount: AmountType                Index (IS_OPTN) read FTaxOnSubtotalAmount write SetTaxOnSubtotalAmount stored TaxOnSubtotalAmount_Specified;
    property TaxOnShippingAmount: AmountType                Index (IS_OPTN) read FTaxOnShippingAmount write SetTaxOnShippingAmount stored TaxOnShippingAmount_Specified;
    property TaxOnHandlingAmount: AmountType                Index (IS_OPTN) read FTaxOnHandlingAmount write SetTaxOnHandlingAmount stored TaxOnHandlingAmount_Specified;
    property TaxCode:             string                    Index (IS_OPTN) read FTaxCode write SetTaxCode stored TaxCode_Specified;
    property CollectionMethod:    CollectionMethodCodeType  Index (IS_OPTN) read FCollectionMethod write SetCollectionMethod stored CollectionMethod_Specified;
  end;



  // ************************************************************************ //
  // XML       : TaxIdentifierAttributeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxIdentifierAttributeType = class(TRemotable)
  private
    FText: string;
    Fname_: TaxIdentifierAttributeCodeType;
    Fname__Specified: boolean;
    procedure Setname_(Index: Integer; const ATaxIdentifierAttributeCodeType: TaxIdentifierAttributeCodeType);
    function  name__Specified(Index: Integer): boolean;
  published
    property Text:  string                          Index (IS_TEXT) read FText write FText;
    property name_: TaxIdentifierAttributeCodeType  Index (IS_ATTR or IS_OPTN) read Fname_ write Setname_ stored name__Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreFontType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreFontType = class(TRemotable)
  private
    FNameFace: StoreFontFaceCodeType;
    FNameFace_Specified: boolean;
    FNameSize: StoreFontSizeCodeType;
    FNameSize_Specified: boolean;
    FNameColor: string;
    FNameColor_Specified: boolean;
    FTitleFace: StoreFontFaceCodeType;
    FTitleFace_Specified: boolean;
    FTitleSize: StoreFontSizeCodeType;
    FTitleSize_Specified: boolean;
    FTitleColor: string;
    FTitleColor_Specified: boolean;
    FDescFace: StoreFontFaceCodeType;
    FDescFace_Specified: boolean;
    FDescSize: StoreFontSizeCodeType;
    FDescSize_Specified: boolean;
    FDescColor: string;
    FDescColor_Specified: boolean;
    procedure SetNameFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
    function  NameFace_Specified(Index: Integer): boolean;
    procedure SetNameSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
    function  NameSize_Specified(Index: Integer): boolean;
    procedure SetNameColor(Index: Integer; const Astring: string);
    function  NameColor_Specified(Index: Integer): boolean;
    procedure SetTitleFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
    function  TitleFace_Specified(Index: Integer): boolean;
    procedure SetTitleSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
    function  TitleSize_Specified(Index: Integer): boolean;
    procedure SetTitleColor(Index: Integer; const Astring: string);
    function  TitleColor_Specified(Index: Integer): boolean;
    procedure SetDescFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
    function  DescFace_Specified(Index: Integer): boolean;
    procedure SetDescSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
    function  DescSize_Specified(Index: Integer): boolean;
    procedure SetDescColor(Index: Integer; const Astring: string);
    function  DescColor_Specified(Index: Integer): boolean;
  published
    property NameFace:   StoreFontFaceCodeType  Index (IS_OPTN) read FNameFace write SetNameFace stored NameFace_Specified;
    property NameSize:   StoreFontSizeCodeType  Index (IS_OPTN) read FNameSize write SetNameSize stored NameSize_Specified;
    property NameColor:  string                 Index (IS_OPTN) read FNameColor write SetNameColor stored NameColor_Specified;
    property TitleFace:  StoreFontFaceCodeType  Index (IS_OPTN) read FTitleFace write SetTitleFace stored TitleFace_Specified;
    property TitleSize:  StoreFontSizeCodeType  Index (IS_OPTN) read FTitleSize write SetTitleSize stored TitleSize_Specified;
    property TitleColor: string                 Index (IS_OPTN) read FTitleColor write SetTitleColor stored TitleColor_Specified;
    property DescFace:   StoreFontFaceCodeType  Index (IS_OPTN) read FDescFace write SetDescFace stored DescFace_Specified;
    property DescSize:   StoreFontSizeCodeType  Index (IS_OPTN) read FDescSize write SetDescSize stored DescSize_Specified;
    property DescColor:  string                 Index (IS_OPTN) read FDescColor write SetDescColor stored DescColor_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreColorType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreColorType = class(TRemotable)
  private
    FPrimary: string;
    FPrimary_Specified: boolean;
    FSecondary: string;
    FSecondary_Specified: boolean;
    FAccent: string;
    FAccent_Specified: boolean;
    procedure SetPrimary(Index: Integer; const Astring: string);
    function  Primary_Specified(Index: Integer): boolean;
    procedure SetSecondary(Index: Integer; const Astring: string);
    function  Secondary_Specified(Index: Integer): boolean;
    procedure SetAccent(Index: Integer; const Astring: string);
    function  Accent_Specified(Index: Integer): boolean;
  published
    property Primary:   string  Index (IS_OPTN) read FPrimary write SetPrimary stored Primary_Specified;
    property Secondary: string  Index (IS_OPTN) read FSecondary write SetSecondary stored Secondary_Specified;
    property Accent:    string  Index (IS_OPTN) read FAccent write SetAccent stored Accent_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreColorSchemeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreColorSchemeType = class(TRemotable)
  private
    FColorSchemeID: Integer;
    FColorSchemeID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FColor: StoreColorType;
    FColor_Specified: boolean;
    FFont: StoreFontType;
    FFont_Specified: boolean;
    procedure SetColorSchemeID(Index: Integer; const AInteger: Integer);
    function  ColorSchemeID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetColor(Index: Integer; const AStoreColorType: StoreColorType);
    function  Color_Specified(Index: Integer): boolean;
    procedure SetFont(Index: Integer; const AStoreFontType: StoreFontType);
    function  Font_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ColorSchemeID: Integer         Index (IS_OPTN) read FColorSchemeID write SetColorSchemeID stored ColorSchemeID_Specified;
    property Name_:         string          Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Color:         StoreColorType  Index (IS_OPTN) read FColor write SetColor stored Color_Specified;
    property Font:          StoreFontType   Index (IS_OPTN) read FFont write SetFont stored Font_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreThemeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreThemeType = class(TRemotable)
  private
    FThemeID: Integer;
    FThemeID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FColorScheme: StoreColorSchemeType;
    FColorScheme_Specified: boolean;
    procedure SetThemeID(Index: Integer; const AInteger: Integer);
    function  ThemeID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetColorScheme(Index: Integer; const AStoreColorSchemeType: StoreColorSchemeType);
    function  ColorScheme_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ThemeID:     Integer               Index (IS_OPTN) read FThemeID write SetThemeID stored ThemeID_Specified;
    property Name_:       string                Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property ColorScheme: StoreColorSchemeType  Index (IS_OPTN) read FColorScheme write SetColorScheme stored ColorScheme_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreLogoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreLogoType = class(TRemotable)
  private
    FLogoID: Integer;
    FLogoID_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FURL: string;
    FURL_Specified: boolean;
    procedure SetLogoID(Index: Integer; const AInteger: Integer);
    function  LogoID_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetURL(Index: Integer; const Astring: string);
    function  URL_Specified(Index: Integer): boolean;
  published
    property LogoID: Integer  Index (IS_OPTN) read FLogoID write SetLogoID stored LogoID_Specified;
    property Name_:  string   Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property URL:    string   Index (IS_OPTN) read FURL write SetURL stored URL_Specified;
  end;



  // ************************************************************************ //
  // XML       : RefundTransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundTransactionType = class(TRemotable)
  private
    FOrderID: string;
    FOrderID_Specified: boolean;
    FItemID: string;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FRefundLineArray: RefundLineArrayType;
    FRefundLineArray_Specified: boolean;
    procedure SetOrderID(Index: Integer; const Astring: string);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const Astring: string);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetRefundLineArray(Index: Integer; const ARefundLineArrayType: RefundLineArrayType);
    function  RefundLineArray_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OrderID:         string               Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property ItemID:          string               Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string               Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property RefundLineArray: RefundLineArrayType  Index (IS_OPTN) read FRefundLineArray write SetRefundLineArray stored RefundLineArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : RefundFundingSourceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundFundingSourceType = class(TRemotable)
  private
    FRefundingSourceType: RefundingSourceTypeCodeType;
    FRefundingSourceType_Specified: boolean;
    FAccountNumber: string;
    FAccountNumber_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FSellerExternalTransactionID: string;
    FSellerExternalTransactionID_Specified: boolean;
    FBuyerExternalTransactionID: string;
    FBuyerExternalTransactionID_Specified: boolean;
    procedure SetRefundingSourceType(Index: Integer; const ARefundingSourceTypeCodeType: RefundingSourceTypeCodeType);
    function  RefundingSourceType_Specified(Index: Integer): boolean;
    procedure SetAccountNumber(Index: Integer; const Astring: string);
    function  AccountNumber_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetSellerExternalTransactionID(Index: Integer; const Astring: string);
    function  SellerExternalTransactionID_Specified(Index: Integer): boolean;
    procedure SetBuyerExternalTransactionID(Index: Integer; const Astring: string);
    function  BuyerExternalTransactionID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RefundingSourceType:         RefundingSourceTypeCodeType  Index (IS_OPTN) read FRefundingSourceType write SetRefundingSourceType stored RefundingSourceType_Specified;
    property AccountNumber:               string                       Index (IS_OPTN) read FAccountNumber write SetAccountNumber stored AccountNumber_Specified;
    property RefundAmount:                AmountType                   Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property SellerExternalTransactionID: string                       Index (IS_OPTN) read FSellerExternalTransactionID write SetSellerExternalTransactionID stored SellerExternalTransactionID_Specified;
    property BuyerExternalTransactionID:  string                       Index (IS_OPTN) read FBuyerExternalTransactionID write SetBuyerExternalTransactionID stored BuyerExternalTransactionID_Specified;
  end;



  // ************************************************************************ //
  // XML       : RateTableDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RateTableDetailsType = class(TRemotable)
  private
    FDomesticRateTable: string;
    FDomesticRateTable_Specified: boolean;
    FInternationalRateTable: string;
    FInternationalRateTable_Specified: boolean;
    FDomesticRateTableId: string;
    FDomesticRateTableId_Specified: boolean;
    FInternationalRateTableId: string;
    FInternationalRateTableId_Specified: boolean;
    procedure SetDomesticRateTable(Index: Integer; const Astring: string);
    function  DomesticRateTable_Specified(Index: Integer): boolean;
    procedure SetInternationalRateTable(Index: Integer; const Astring: string);
    function  InternationalRateTable_Specified(Index: Integer): boolean;
    procedure SetDomesticRateTableId(Index: Integer; const Astring: string);
    function  DomesticRateTableId_Specified(Index: Integer): boolean;
    procedure SetInternationalRateTableId(Index: Integer; const Astring: string);
    function  InternationalRateTableId_Specified(Index: Integer): boolean;
  published
    property DomesticRateTable:        string  Index (IS_OPTN) read FDomesticRateTable write SetDomesticRateTable stored DomesticRateTable_Specified;
    property InternationalRateTable:   string  Index (IS_OPTN) read FInternationalRateTable write SetInternationalRateTable stored InternationalRateTable_Specified;
    property DomesticRateTableId:      string  Index (IS_OPTN) read FDomesticRateTableId write SetDomesticRateTableId stored DomesticRateTableId_Specified;
    property InternationalRateTableId: string  Index (IS_OPTN) read FInternationalRateTableId write SetInternationalRateTableId stored InternationalRateTableId_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReasonCodeDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReasonCodeDetailType = class(TRemotable)
  private
    FcodeID: Int64;
    FcodeID_Specified: boolean;
    FBriefText: string;
    FBriefText_Specified: boolean;
    FDetailedText: string;
    FDetailedText_Specified: boolean;
    procedure SetcodeID(Index: Integer; const AInt64: Int64);
    function  codeID_Specified(Index: Integer): boolean;
    procedure SetBriefText(Index: Integer; const Astring: string);
    function  BriefText_Specified(Index: Integer): boolean;
    procedure SetDetailedText(Index: Integer; const Astring: string);
    function  DetailedText_Specified(Index: Integer): boolean;
  published
    property codeID:       Int64   Index (IS_ATTR or IS_OPTN) read FcodeID write SetcodeID stored codeID_Specified;
    property BriefText:    string  Index (IS_OPTN) read FBriefText write SetBriefText stored BriefText_Specified;
    property DetailedText: string  Index (IS_OPTN) read FDetailedText write SetDetailedText stored DetailedText_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerPaymentProfileType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerPaymentProfileType = class(TRemotable)
  private
    FPaymentProfileID: Int64;
    FPaymentProfileID_Specified: boolean;
    FPaymentProfileName: string;
    FPaymentProfileName_Specified: boolean;
    procedure SetPaymentProfileID(Index: Integer; const AInt64: Int64);
    function  PaymentProfileID_Specified(Index: Integer): boolean;
    procedure SetPaymentProfileName(Index: Integer; const Astring: string);
    function  PaymentProfileName_Specified(Index: Integer): boolean;
  published
    property PaymentProfileID:   Int64   Index (IS_OPTN) read FPaymentProfileID write SetPaymentProfileID stored PaymentProfileID_Specified;
    property PaymentProfileName: string  Index (IS_OPTN) read FPaymentProfileName write SetPaymentProfileName stored PaymentProfileName_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerDiscountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerDiscountType = class(TRemotable)
  private
    FCampaignID: Int64;
    FCampaignID_Specified: boolean;
    FCampaignDisplayName: string;
    FCampaignDisplayName_Specified: boolean;
    FItemDiscountAmount: AmountType;
    FItemDiscountAmount_Specified: boolean;
    FShippingDiscountAmount: AmountType;
    FShippingDiscountAmount_Specified: boolean;
    procedure SetCampaignID(Index: Integer; const AInt64: Int64);
    function  CampaignID_Specified(Index: Integer): boolean;
    procedure SetCampaignDisplayName(Index: Integer; const Astring: string);
    function  CampaignDisplayName_Specified(Index: Integer): boolean;
    procedure SetItemDiscountAmount(Index: Integer; const AAmountType: AmountType);
    function  ItemDiscountAmount_Specified(Index: Integer): boolean;
    procedure SetShippingDiscountAmount(Index: Integer; const AAmountType: AmountType);
    function  ShippingDiscountAmount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CampaignID:             Int64       Index (IS_OPTN) read FCampaignID write SetCampaignID stored CampaignID_Specified;
    property CampaignDisplayName:    string      Index (IS_OPTN) read FCampaignDisplayName write SetCampaignDisplayName stored CampaignDisplayName_Specified;
    property ItemDiscountAmount:     AmountType  Index (IS_OPTN) read FItemDiscountAmount write SetItemDiscountAmount stored ItemDiscountAmount_Specified;
    property ShippingDiscountAmount: AmountType  Index (IS_OPTN) read FShippingDiscountAmount write SetShippingDiscountAmount stored ShippingDiscountAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerShippingProfileType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerShippingProfileType = class(TRemotable)
  private
    FShippingProfileID: Int64;
    FShippingProfileID_Specified: boolean;
    FShippingProfileName: string;
    FShippingProfileName_Specified: boolean;
    procedure SetShippingProfileID(Index: Integer; const AInt64: Int64);
    function  ShippingProfileID_Specified(Index: Integer): boolean;
    procedure SetShippingProfileName(Index: Integer; const Astring: string);
    function  ShippingProfileName_Specified(Index: Integer): boolean;
  published
    property ShippingProfileID:   Int64   Index (IS_OPTN) read FShippingProfileID write SetShippingProfileID stored ShippingProfileID_Specified;
    property ShippingProfileName: string  Index (IS_OPTN) read FShippingProfileName write SetShippingProfileName stored ShippingProfileName_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerReturnProfileType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerReturnProfileType = class(TRemotable)
  private
    FReturnProfileID: Int64;
    FReturnProfileID_Specified: boolean;
    FReturnProfileName: string;
    FReturnProfileName_Specified: boolean;
    procedure SetReturnProfileID(Index: Integer; const AInt64: Int64);
    function  ReturnProfileID_Specified(Index: Integer): boolean;
    procedure SetReturnProfileName(Index: Integer; const Astring: string);
    function  ReturnProfileName_Specified(Index: Integer): boolean;
  published
    property ReturnProfileID:   Int64   Index (IS_OPTN) read FReturnProfileID write SetReturnProfileID stored ReturnProfileID_Specified;
    property ReturnProfileName: string  Index (IS_OPTN) read FReturnProfileName write SetReturnProfileName stored ReturnProfileName_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndItemResponseContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EndItemResponseContainerType = class(TRemotable)
  private
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FCorrelationID: string;
    FCorrelationID_Specified: boolean;
    FErrors: Array_Of_ErrorType;
    FErrors_Specified: boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetCorrelationID(Index: Integer; const Astring: string);
    function  CorrelationID_Specified(Index: Integer): boolean;
    procedure SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
    function  Errors_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EndTime:       TXSDateTime         Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property CorrelationID: string              Index (IS_OPTN) read FCorrelationID write SetCorrelationID stored CorrelationID_Specified;
    property Errors:        Array_Of_ErrorType  Index (IS_OPTN or IS_UNBD) read FErrors write SetErrors stored Errors_Specified;
  end;



  // ************************************************************************ //
  // XML       : TokenStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TokenStatusType = class(TRemotable)
  private
    FStatus: TokenStatusCodeType;
    FStatus_Specified: boolean;
    FEIASToken: string;
    FEIASToken_Specified: boolean;
    FExpirationTime: TXSDateTime;
    FExpirationTime_Specified: boolean;
    FRevocationTime: TXSDateTime;
    FRevocationTime_Specified: boolean;
    procedure SetStatus(Index: Integer; const ATokenStatusCodeType: TokenStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetEIASToken(Index: Integer; const Astring: string);
    function  EIASToken_Specified(Index: Integer): boolean;
    procedure SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpirationTime_Specified(Index: Integer): boolean;
    procedure SetRevocationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RevocationTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Status:         TokenStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property EIASToken:      string               Index (IS_OPTN) read FEIASToken write SetEIASToken stored EIASToken_Specified;
    property ExpirationTime: TXSDateTime          Index (IS_OPTN) read FExpirationTime write SetExpirationTime stored ExpirationTime_Specified;
    property RevocationTime: TXSDateTime          Index (IS_OPTN) read FRevocationTime write SetRevocationTime stored RevocationTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : SiteDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteDetailsType = class(TRemotable)
  private
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FSiteID: Integer;
    FSiteID_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetSiteID(Index: Integer; const AInteger: Integer);
    function  SiteID_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Site:          SiteCodeType  Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property SiteID:        Integer       Index (IS_OPTN) read FSiteID write SetSiteID stored SiteID_Specified;
    property DetailVersion: string        Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime   Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingLocationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingLocationDetailsType = class(TRemotable)
  private
    FShippingLocation: string;
    FShippingLocation_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetShippingLocation(Index: Integer; const Astring: string);
    function  ShippingLocation_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingLocation: string       Index (IS_OPTN) read FShippingLocation write SetShippingLocation stored ShippingLocation_Specified;
    property Description:      string       Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion:    string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:       TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : TimeZoneDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TimeZoneDetailsType = class(TRemotable)
  private
    FTimeZoneID: string;
    FTimeZoneID_Specified: boolean;
    FStandardLabel: string;
    FStandardLabel_Specified: boolean;
    FStandardOffset: string;
    FStandardOffset_Specified: boolean;
    FDaylightSavingsLabel: string;
    FDaylightSavingsLabel_Specified: boolean;
    FDaylightSavingsOffset: string;
    FDaylightSavingsOffset_Specified: boolean;
    FDaylightSavingsInEffect: Boolean;
    FDaylightSavingsInEffect_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetTimeZoneID(Index: Integer; const Astring: string);
    function  TimeZoneID_Specified(Index: Integer): boolean;
    procedure SetStandardLabel(Index: Integer; const Astring: string);
    function  StandardLabel_Specified(Index: Integer): boolean;
    procedure SetStandardOffset(Index: Integer; const Astring: string);
    function  StandardOffset_Specified(Index: Integer): boolean;
    procedure SetDaylightSavingsLabel(Index: Integer; const Astring: string);
    function  DaylightSavingsLabel_Specified(Index: Integer): boolean;
    procedure SetDaylightSavingsOffset(Index: Integer; const Astring: string);
    function  DaylightSavingsOffset_Specified(Index: Integer): boolean;
    procedure SetDaylightSavingsInEffect(Index: Integer; const ABoolean: Boolean);
    function  DaylightSavingsInEffect_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TimeZoneID:              string       Index (IS_OPTN) read FTimeZoneID write SetTimeZoneID stored TimeZoneID_Specified;
    property StandardLabel:           string       Index (IS_OPTN) read FStandardLabel write SetStandardLabel stored StandardLabel_Specified;
    property StandardOffset:          string       Index (IS_OPTN) read FStandardOffset write SetStandardOffset stored StandardOffset_Specified;
    property DaylightSavingsLabel:    string       Index (IS_OPTN) read FDaylightSavingsLabel write SetDaylightSavingsLabel stored DaylightSavingsLabel_Specified;
    property DaylightSavingsOffset:   string       Index (IS_OPTN) read FDaylightSavingsOffset write SetDaylightSavingsOffset stored DaylightSavingsOffset_Specified;
    property DaylightSavingsInEffect: Boolean      Index (IS_OPTN) read FDaylightSavingsInEffect write SetDaylightSavingsInEffect stored DaylightSavingsInEffect_Specified;
    property DetailVersion:           string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:              TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : URLDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  URLDetailsType = class(TRemotable)
  private
    FURLType: URLTypeCodeType;
    FURLType_Specified: boolean;
    FURL: string;
    FURL_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetURLType(Index: Integer; const AURLTypeCodeType: URLTypeCodeType);
    function  URLType_Specified(Index: Integer): boolean;
    procedure SetURL(Index: Integer; const Astring: string);
    function  URL_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property URLType:       URLTypeCodeType  Index (IS_OPTN) read FURLType write SetURLType stored URLType_Specified;
    property URL:           string           Index (IS_OPTN) read FURL write SetURL stored URL_Specified;
    property DetailVersion: string           Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime      Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : RegionDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RegionDetailsType = class(TRemotable)
  private
    FRegionID: string;
    FRegionID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetRegionID(Index: Integer; const Astring: string);
    function  RegionID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RegionID:      string       Index (IS_OPTN) read FRegionID write SetRegionID stored RegionID_Specified;
    property Description:   string       Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion: string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : DispatchTimeMaxDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DispatchTimeMaxDetailsType = class(TRemotable)
  private
    FDispatchTimeMax: Integer;
    FDispatchTimeMax_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FExtendedHandling: Boolean;
    FExtendedHandling_Specified: boolean;
    procedure SetDispatchTimeMax(Index: Integer; const AInteger: Integer);
    function  DispatchTimeMax_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetExtendedHandling(Index: Integer; const ABoolean: Boolean);
    function  ExtendedHandling_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DispatchTimeMax:  Integer      Index (IS_OPTN) read FDispatchTimeMax write SetDispatchTimeMax stored DispatchTimeMax_Specified;
    property Description:      string       Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion:    string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:       TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property ExtendedHandling: Boolean      Index (IS_OPTN) read FExtendedHandling write SetExtendedHandling stored ExtendedHandling_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationDetailsType = class(TRemotable)
  private
    FMaxVariationsPerItem: Integer;
    FMaxVariationsPerItem_Specified: boolean;
    FMaxNamesPerVariationSpecificsSet: Integer;
    FMaxNamesPerVariationSpecificsSet_Specified: boolean;
    FMaxValuesPerVariationSpecificsSetName: Integer;
    FMaxValuesPerVariationSpecificsSetName_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetMaxVariationsPerItem(Index: Integer; const AInteger: Integer);
    function  MaxVariationsPerItem_Specified(Index: Integer): boolean;
    procedure SetMaxNamesPerVariationSpecificsSet(Index: Integer; const AInteger: Integer);
    function  MaxNamesPerVariationSpecificsSet_Specified(Index: Integer): boolean;
    procedure SetMaxValuesPerVariationSpecificsSetName(Index: Integer; const AInteger: Integer);
    function  MaxValuesPerVariationSpecificsSetName_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MaxVariationsPerItem:                  Integer      Index (IS_OPTN) read FMaxVariationsPerItem write SetMaxVariationsPerItem stored MaxVariationsPerItem_Specified;
    property MaxNamesPerVariationSpecificsSet:      Integer      Index (IS_OPTN) read FMaxNamesPerVariationSpecificsSet write SetMaxNamesPerVariationSpecificsSet stored MaxNamesPerVariationSpecificsSet_Specified;
    property MaxValuesPerVariationSpecificsSetName: Integer      Index (IS_OPTN) read FMaxValuesPerVariationSpecificsSetName write SetMaxValuesPerVariationSpecificsSetName stored MaxValuesPerVariationSpecificsSetName_Specified;
    property DetailVersion:                         string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:                            TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingFeatureDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingFeatureDetailsType = class(TRemotable)
  private
    FBoldTitle: BoldTitleCodeType;
    FBoldTitle_Specified: boolean;
    FBorder: BorderCodeType;
    FBorder_Specified: boolean;
    FHighlight: HighlightCodeType;
    FHighlight_Specified: boolean;
    FGiftIcon: GiftIconCodeType;
    FGiftIcon_Specified: boolean;
    FHomePageFeatured: HomePageFeaturedCodeType;
    FHomePageFeatured_Specified: boolean;
    FFeaturedFirst: FeaturedFirstCodeType;
    FFeaturedFirst_Specified: boolean;
    FFeaturedPlus: FeaturedPlusCodeType;
    FFeaturedPlus_Specified: boolean;
    FProPack: ProPackCodeType;
    FProPack_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetBoldTitle(Index: Integer; const ABoldTitleCodeType: BoldTitleCodeType);
    function  BoldTitle_Specified(Index: Integer): boolean;
    procedure SetBorder(Index: Integer; const ABorderCodeType: BorderCodeType);
    function  Border_Specified(Index: Integer): boolean;
    procedure SetHighlight(Index: Integer; const AHighlightCodeType: HighlightCodeType);
    function  Highlight_Specified(Index: Integer): boolean;
    procedure SetGiftIcon(Index: Integer; const AGiftIconCodeType: GiftIconCodeType);
    function  GiftIcon_Specified(Index: Integer): boolean;
    procedure SetHomePageFeatured(Index: Integer; const AHomePageFeaturedCodeType: HomePageFeaturedCodeType);
    function  HomePageFeatured_Specified(Index: Integer): boolean;
    procedure SetFeaturedFirst(Index: Integer; const AFeaturedFirstCodeType: FeaturedFirstCodeType);
    function  FeaturedFirst_Specified(Index: Integer): boolean;
    procedure SetFeaturedPlus(Index: Integer; const AFeaturedPlusCodeType: FeaturedPlusCodeType);
    function  FeaturedPlus_Specified(Index: Integer): boolean;
    procedure SetProPack(Index: Integer; const AProPackCodeType: ProPackCodeType);
    function  ProPack_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BoldTitle:        BoldTitleCodeType         Index (IS_OPTN) read FBoldTitle write SetBoldTitle stored BoldTitle_Specified;
    property Border:           BorderCodeType            Index (IS_OPTN) read FBorder write SetBorder stored Border_Specified;
    property Highlight:        HighlightCodeType         Index (IS_OPTN) read FHighlight write SetHighlight stored Highlight_Specified;
    property GiftIcon:         GiftIconCodeType          Index (IS_OPTN) read FGiftIcon write SetGiftIcon stored GiftIcon_Specified;
    property HomePageFeatured: HomePageFeaturedCodeType  Index (IS_OPTN) read FHomePageFeatured write SetHomePageFeatured stored HomePageFeatured_Specified;
    property FeaturedFirst:    FeaturedFirstCodeType     Index (IS_OPTN) read FFeaturedFirst write SetFeaturedFirst stored FeaturedFirst_Specified;
    property FeaturedPlus:     FeaturedPlusCodeType      Index (IS_OPTN) read FFeaturedPlus write SetFeaturedPlus stored FeaturedPlus_Specified;
    property ProPack:          ProPackCodeType           Index (IS_OPTN) read FProPack write SetProPack stored ProPack_Specified;
    property DetailVersion:    string                    Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:       TXSDateTime               Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : SiteBuyerRequirementDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteBuyerRequirementDetailsType = class(TRemotable)
  private
    FLinkedPayPalAccount: Boolean;
    FLinkedPayPalAccount_Specified: boolean;
    FMaximumBuyerPolicyViolations: MaximumBuyerPolicyViolationsDetailsType;
    FMaximumBuyerPolicyViolations_Specified: boolean;
    FMaximumItemRequirements: MaximumItemRequirementsDetailsType;
    FMaximumItemRequirements_Specified: boolean;
    FMaximumUnpaidItemStrikesInfo: MaximumUnpaidItemStrikesInfoDetailsType;
    FMaximumUnpaidItemStrikesInfo_Specified: boolean;
    FMinimumFeedbackScore: MinimumFeedbackScoreDetailsType;
    FMinimumFeedbackScore_Specified: boolean;
    FShipToRegistrationCountry: Boolean;
    FShipToRegistrationCountry_Specified: boolean;
    FVerifiedUserRequirements: VerifiedUserRequirementsDetailsType;
    FVerifiedUserRequirements_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetLinkedPayPalAccount(Index: Integer; const ABoolean: Boolean);
    function  LinkedPayPalAccount_Specified(Index: Integer): boolean;
    procedure SetMaximumBuyerPolicyViolations(Index: Integer; const AMaximumBuyerPolicyViolationsDetailsType: MaximumBuyerPolicyViolationsDetailsType);
    function  MaximumBuyerPolicyViolations_Specified(Index: Integer): boolean;
    procedure SetMaximumItemRequirements(Index: Integer; const AMaximumItemRequirementsDetailsType: MaximumItemRequirementsDetailsType);
    function  MaximumItemRequirements_Specified(Index: Integer): boolean;
    procedure SetMaximumUnpaidItemStrikesInfo(Index: Integer; const AMaximumUnpaidItemStrikesInfoDetailsType: MaximumUnpaidItemStrikesInfoDetailsType);
    function  MaximumUnpaidItemStrikesInfo_Specified(Index: Integer): boolean;
    procedure SetMinimumFeedbackScore(Index: Integer; const AMinimumFeedbackScoreDetailsType: MinimumFeedbackScoreDetailsType);
    function  MinimumFeedbackScore_Specified(Index: Integer): boolean;
    procedure SetShipToRegistrationCountry(Index: Integer; const ABoolean: Boolean);
    function  ShipToRegistrationCountry_Specified(Index: Integer): boolean;
    procedure SetVerifiedUserRequirements(Index: Integer; const AVerifiedUserRequirementsDetailsType: VerifiedUserRequirementsDetailsType);
    function  VerifiedUserRequirements_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property LinkedPayPalAccount:          Boolean                                  Index (IS_OPTN) read FLinkedPayPalAccount write SetLinkedPayPalAccount stored LinkedPayPalAccount_Specified;
    property MaximumBuyerPolicyViolations: MaximumBuyerPolicyViolationsDetailsType  Index (IS_OPTN) read FMaximumBuyerPolicyViolations write SetMaximumBuyerPolicyViolations stored MaximumBuyerPolicyViolations_Specified;
    property MaximumItemRequirements:      MaximumItemRequirementsDetailsType       Index (IS_OPTN) read FMaximumItemRequirements write SetMaximumItemRequirements stored MaximumItemRequirements_Specified;
    property MaximumUnpaidItemStrikesInfo: MaximumUnpaidItemStrikesInfoDetailsType  Index (IS_OPTN) read FMaximumUnpaidItemStrikesInfo write SetMaximumUnpaidItemStrikesInfo stored MaximumUnpaidItemStrikesInfo_Specified;
    property MinimumFeedbackScore:         MinimumFeedbackScoreDetailsType          Index (IS_OPTN) read FMinimumFeedbackScore write SetMinimumFeedbackScore stored MinimumFeedbackScore_Specified;
    property ShipToRegistrationCountry:    Boolean                                  Index (IS_OPTN) read FShipToRegistrationCountry write SetShipToRegistrationCountry stored ShipToRegistrationCountry_Specified;
    property VerifiedUserRequirements:     VerifiedUserRequirementsDetailsType      Index (IS_OPTN) read FVerifiedUserRequirements write SetVerifiedUserRequirements stored VerifiedUserRequirements_Specified;
    property DetailVersion:                string                                   Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:                   TXSDateTime                              Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : RecoupmentPolicyDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RecoupmentPolicyDetailsType = class(TRemotable)
  private
    FEnforcedOnListingSite: Boolean;
    FEnforcedOnListingSite_Specified: boolean;
    FEnforcedOnRegistrationSite: Boolean;
    FEnforcedOnRegistrationSite_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetEnforcedOnListingSite(Index: Integer; const ABoolean: Boolean);
    function  EnforcedOnListingSite_Specified(Index: Integer): boolean;
    procedure SetEnforcedOnRegistrationSite(Index: Integer; const ABoolean: Boolean);
    function  EnforcedOnRegistrationSite_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EnforcedOnListingSite:      Boolean      Index (IS_OPTN) read FEnforcedOnListingSite write SetEnforcedOnListingSite stored EnforcedOnListingSite_Specified;
    property EnforcedOnRegistrationSite: Boolean      Index (IS_OPTN) read FEnforcedOnRegistrationSite write SetEnforcedOnRegistrationSite stored EnforcedOnRegistrationSite_Specified;
    property DetailVersion:              string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:                 TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExcludeShippingLocationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExcludeShippingLocationDetailsType = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FLocation: string;
    FLocation_Specified: boolean;
    FRegion: string;
    FRegion_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetLocation(Index: Integer; const Astring: string);
    function  Location_Specified(Index: Integer): boolean;
    procedure SetRegion(Index: Integer; const Astring: string);
    function  Region_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Description:   string       Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property Location:      string       Index (IS_OPTN) read FLocation write SetLocation stored Location_Specified;
    property Region:        string       Index (IS_OPTN) read FRegion write SetRegion stored Region_Specified;
    property DetailVersion: string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : RegionOfOriginDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RegionOfOriginDetailsType = class(TRemotable)
  private
    FRegionOfOrigin: string;
    FRegionOfOrigin_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FStatus: StatusCodeType;
    FStatus_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetRegionOfOrigin(Index: Integer; const Astring: string);
    function  RegionOfOrigin_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AStatusCodeType: StatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RegionOfOrigin: string          Index (IS_OPTN) read FRegionOfOrigin write SetRegionOfOrigin stored RegionOfOrigin_Specified;
    property Description:    string          Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property Status:         StatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property DetailVersion:  string          Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:     TXSDateTime     Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : UnitOfMeasurementDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnitOfMeasurementDetailsType = class(TRemotable)
  private
    FUnitOfMeasurement: Array_Of_UnitOfMeasurementType;
    FUnitOfMeasurement_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetUnitOfMeasurement(Index: Integer; const AArray_Of_UnitOfMeasurementType: Array_Of_UnitOfMeasurementType);
    function  UnitOfMeasurement_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property UnitOfMeasurement: Array_Of_UnitOfMeasurementType  Index (IS_OPTN or IS_UNBD) read FUnitOfMeasurement write SetUnitOfMeasurement stored UnitOfMeasurement_Specified;
    property DetailVersion:     string                          Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:        TXSDateTime                     Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemSpecificDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemSpecificDetailsType = class(TRemotable)
  private
    FMaxItemSpecificsPerItem: Integer;
    FMaxItemSpecificsPerItem_Specified: boolean;
    FMaxValuesPerName: Integer;
    FMaxValuesPerName_Specified: boolean;
    FMaxCharactersPerValue: Integer;
    FMaxCharactersPerValue_Specified: boolean;
    FMaxCharactersPerName: Integer;
    FMaxCharactersPerName_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetMaxItemSpecificsPerItem(Index: Integer; const AInteger: Integer);
    function  MaxItemSpecificsPerItem_Specified(Index: Integer): boolean;
    procedure SetMaxValuesPerName(Index: Integer; const AInteger: Integer);
    function  MaxValuesPerName_Specified(Index: Integer): boolean;
    procedure SetMaxCharactersPerValue(Index: Integer; const AInteger: Integer);
    function  MaxCharactersPerValue_Specified(Index: Integer): boolean;
    procedure SetMaxCharactersPerName(Index: Integer; const AInteger: Integer);
    function  MaxCharactersPerName_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MaxItemSpecificsPerItem: Integer      Index (IS_OPTN) read FMaxItemSpecificsPerItem write SetMaxItemSpecificsPerItem stored MaxItemSpecificsPerItem_Specified;
    property MaxValuesPerName:        Integer      Index (IS_OPTN) read FMaxValuesPerName write SetMaxValuesPerName stored MaxValuesPerName_Specified;
    property MaxCharactersPerValue:   Integer      Index (IS_OPTN) read FMaxCharactersPerValue write SetMaxCharactersPerValue stored MaxCharactersPerValue_Specified;
    property MaxCharactersPerName:    Integer      Index (IS_OPTN) read FMaxCharactersPerName write SetMaxCharactersPerName stored MaxCharactersPerName_Specified;
    property DetailVersion:           string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:              TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReturnPolicyDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnPolicyDetailsType = class(TRemotable)
  private
    FRefund: Array_Of_RefundDetailsType;
    FRefund_Specified: boolean;
    FReturnsWithin: Array_Of_ReturnsWithinDetailsType;
    FReturnsWithin_Specified: boolean;
    FReturnsAccepted: Array_Of_ReturnsAcceptedDetailsType;
    FReturnsAccepted_Specified: boolean;
    FDescription: Boolean;
    FDescription_Specified: boolean;
    FWarrantyOffered: Array_Of_WarrantyOfferedDetailsType;
    FWarrantyOffered_Specified: boolean;
    FWarrantyType: Array_Of_WarrantyTypeDetailsType;
    FWarrantyType_Specified: boolean;
    FWarrantyDuration: Array_Of_WarrantyDurationDetailsType;
    FWarrantyDuration_Specified: boolean;
    FEAN: Boolean;
    FEAN_Specified: boolean;
    FShippingCostPaidBy: Array_Of_ShippingCostPaidByDetailsType;
    FShippingCostPaidBy_Specified: boolean;
    FRestockingFeeValue: Array_Of_RestockingFeeValueDetailsType;
    FRestockingFeeValue_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetRefund(Index: Integer; const AArray_Of_RefundDetailsType: Array_Of_RefundDetailsType);
    function  Refund_Specified(Index: Integer): boolean;
    procedure SetReturnsWithin(Index: Integer; const AArray_Of_ReturnsWithinDetailsType: Array_Of_ReturnsWithinDetailsType);
    function  ReturnsWithin_Specified(Index: Integer): boolean;
    procedure SetReturnsAccepted(Index: Integer; const AArray_Of_ReturnsAcceptedDetailsType: Array_Of_ReturnsAcceptedDetailsType);
    function  ReturnsAccepted_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const ABoolean: Boolean);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetWarrantyOffered(Index: Integer; const AArray_Of_WarrantyOfferedDetailsType: Array_Of_WarrantyOfferedDetailsType);
    function  WarrantyOffered_Specified(Index: Integer): boolean;
    procedure SetWarrantyType(Index: Integer; const AArray_Of_WarrantyTypeDetailsType: Array_Of_WarrantyTypeDetailsType);
    function  WarrantyType_Specified(Index: Integer): boolean;
    procedure SetWarrantyDuration(Index: Integer; const AArray_Of_WarrantyDurationDetailsType: Array_Of_WarrantyDurationDetailsType);
    function  WarrantyDuration_Specified(Index: Integer): boolean;
    procedure SetEAN(Index: Integer; const ABoolean: Boolean);
    function  EAN_Specified(Index: Integer): boolean;
    procedure SetShippingCostPaidBy(Index: Integer; const AArray_Of_ShippingCostPaidByDetailsType: Array_Of_ShippingCostPaidByDetailsType);
    function  ShippingCostPaidBy_Specified(Index: Integer): boolean;
    procedure SetRestockingFeeValue(Index: Integer; const AArray_Of_RestockingFeeValueDetailsType: Array_Of_RestockingFeeValueDetailsType);
    function  RestockingFeeValue_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Refund:             Array_Of_RefundDetailsType              Index (IS_OPTN or IS_UNBD) read FRefund write SetRefund stored Refund_Specified;
    property ReturnsWithin:      Array_Of_ReturnsWithinDetailsType       Index (IS_OPTN or IS_UNBD) read FReturnsWithin write SetReturnsWithin stored ReturnsWithin_Specified;
    property ReturnsAccepted:    Array_Of_ReturnsAcceptedDetailsType     Index (IS_OPTN or IS_UNBD) read FReturnsAccepted write SetReturnsAccepted stored ReturnsAccepted_Specified;
    property Description:        Boolean                                 Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property WarrantyOffered:    Array_Of_WarrantyOfferedDetailsType     Index (IS_OPTN or IS_UNBD) read FWarrantyOffered write SetWarrantyOffered stored WarrantyOffered_Specified;
    property WarrantyType:       Array_Of_WarrantyTypeDetailsType        Index (IS_OPTN or IS_UNBD) read FWarrantyType write SetWarrantyType stored WarrantyType_Specified;
    property WarrantyDuration:   Array_Of_WarrantyDurationDetailsType    Index (IS_OPTN or IS_UNBD) read FWarrantyDuration write SetWarrantyDuration stored WarrantyDuration_Specified;
    property EAN:                Boolean                                 Index (IS_OPTN) read FEAN write SetEAN stored EAN_Specified;
    property ShippingCostPaidBy: Array_Of_ShippingCostPaidByDetailsType  Index (IS_OPTN or IS_UNBD) read FShippingCostPaidBy write SetShippingCostPaidBy stored ShippingCostPaidBy_Specified;
    property RestockingFeeValue: Array_Of_RestockingFeeValueDetailsType  Index (IS_OPTN or IS_UNBD) read FRestockingFeeValue write SetRestockingFeeValue stored RestockingFeeValue_Specified;
    property DetailVersion:      string                                  Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:         TXSDateTime                             Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingCarrierDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingCarrierDetailsType = class(TRemotable)
  private
    FShippingCarrierID: Integer;
    FShippingCarrierID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FShippingCarrier: ShippingCarrierCodeType;
    FShippingCarrier_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetShippingCarrierID(Index: Integer; const AInteger: Integer);
    function  ShippingCarrierID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetShippingCarrier(Index: Integer; const AShippingCarrierCodeType: ShippingCarrierCodeType);
    function  ShippingCarrier_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingCarrierID: Integer                  Index (IS_OPTN) read FShippingCarrierID write SetShippingCarrierID stored ShippingCarrierID_Specified;
    property Description:       string                   Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ShippingCarrier:   ShippingCarrierCodeType  Index (IS_OPTN) read FShippingCarrier write SetShippingCarrier stored ShippingCarrier_Specified;
    property DetailVersion:     string                   Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:        TXSDateTime              Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingPackageDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingPackageDetailsType = class(TRemotable)
  private
    FPackageID: Integer;
    FPackageID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FShippingPackage: ShippingPackageCodeType;
    FShippingPackage_Specified: boolean;
    FDefaultValue: Boolean;
    FDefaultValue_Specified: boolean;
    FDimensionsSupported: Boolean;
    FDimensionsSupported_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetPackageID(Index: Integer; const AInteger: Integer);
    function  PackageID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
    function  ShippingPackage_Specified(Index: Integer): boolean;
    procedure SetDefaultValue(Index: Integer; const ABoolean: Boolean);
    function  DefaultValue_Specified(Index: Integer): boolean;
    procedure SetDimensionsSupported(Index: Integer; const ABoolean: Boolean);
    function  DimensionsSupported_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PackageID:           Integer                  Index (IS_OPTN) read FPackageID write SetPackageID stored PackageID_Specified;
    property Description:         string                   Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ShippingPackage:     ShippingPackageCodeType  Index (IS_OPTN) read FShippingPackage write SetShippingPackage stored ShippingPackage_Specified;
    property DefaultValue:        Boolean                  Index (IS_OPTN) read FDefaultValue write SetDefaultValue stored DefaultValue_Specified;
    property DimensionsSupported: Boolean                  Index (IS_OPTN) read FDimensionsSupported write SetDimensionsSupported stored DimensionsSupported_Specified;
    property DetailVersion:       string                   Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:          TXSDateTime              Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerSoldOrderType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerSoldOrderType = class(TRemotable)
  private
    FSellingManagerSoldTransaction: Array_Of_SellingManagerSoldTransactionType;
    FSellingManagerSoldTransaction_Specified: boolean;
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FShippingDetails: ShippingDetailsType;
    FShippingDetails_Specified: boolean;
    FCashOnDeliveryCost: AmountType;
    FCashOnDeliveryCost_Specified: boolean;
    FTotalAmount: AmountType;
    FTotalAmount_Specified: boolean;
    FTotalQuantity: Integer;
    FTotalQuantity_Specified: boolean;
    FItemCost: AmountType;
    FItemCost_Specified: boolean;
    FVATRate: Array_Of_VATRateType;
    FVATRate_Specified: boolean;
    FNetInsuranceFee: AmountType;
    FNetInsuranceFee_Specified: boolean;
    FVATInsuranceFee: AmountType;
    FVATInsuranceFee_Specified: boolean;
    FVATShippingFee: AmountType;
    FVATShippingFee_Specified: boolean;
    FNetShippingFee: AmountType;
    FNetShippingFee_Specified: boolean;
    FNetTotalAmount: AmountType;
    FNetTotalAmount_Specified: boolean;
    FVATTotalAmount: AmountType;
    FVATTotalAmount_Specified: boolean;
    FActualShippingCost: AmountType;
    FActualShippingCost_Specified: boolean;
    FAdjustmentAmount: AmountType;
    FAdjustmentAmount_Specified: boolean;
    FNotesToBuyer: string;
    FNotesToBuyer_Specified: boolean;
    FNotesFromBuyer: string;
    FNotesFromBuyer_Specified: boolean;
    FNotesToSeller: string;
    FNotesToSeller_Specified: boolean;
    FOrderStatus: SellingManagerOrderStatusType;
    FOrderStatus_Specified: boolean;
    FUnpaidItemStatus: UnpaidItemStatusTypeCodeType;
    FUnpaidItemStatus_Specified: boolean;
    FSalePrice: AmountType;
    FSalePrice_Specified: boolean;
    FEmailsSent: Integer;
    FEmailsSent_Specified: boolean;
    FDaysSinceSale: Integer;
    FDaysSinceSale_Specified: boolean;
    FBuyerID: string;
    FBuyerID_Specified: boolean;
    FBuyerEmail: string;
    FBuyerEmail_Specified: boolean;
    FSaleRecordID: Int64;
    FSaleRecordID_Specified: boolean;
    FCreationTime: TXSDateTime;
    FCreationTime_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FRefundStatus: string;
    FRefundStatus_Specified: boolean;
    procedure SetSellingManagerSoldTransaction(Index: Integer; const AArray_Of_SellingManagerSoldTransactionType: Array_Of_SellingManagerSoldTransactionType);
    function  SellingManagerSoldTransaction_Specified(Index: Integer): boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
    function  ShippingDetails_Specified(Index: Integer): boolean;
    procedure SetCashOnDeliveryCost(Index: Integer; const AAmountType: AmountType);
    function  CashOnDeliveryCost_Specified(Index: Integer): boolean;
    procedure SetTotalAmount(Index: Integer; const AAmountType: AmountType);
    function  TotalAmount_Specified(Index: Integer): boolean;
    procedure SetTotalQuantity(Index: Integer; const AInteger: Integer);
    function  TotalQuantity_Specified(Index: Integer): boolean;
    procedure SetItemCost(Index: Integer; const AAmountType: AmountType);
    function  ItemCost_Specified(Index: Integer): boolean;
    procedure SetVATRate(Index: Integer; const AArray_Of_VATRateType: Array_Of_VATRateType);
    function  VATRate_Specified(Index: Integer): boolean;
    procedure SetNetInsuranceFee(Index: Integer; const AAmountType: AmountType);
    function  NetInsuranceFee_Specified(Index: Integer): boolean;
    procedure SetVATInsuranceFee(Index: Integer; const AAmountType: AmountType);
    function  VATInsuranceFee_Specified(Index: Integer): boolean;
    procedure SetVATShippingFee(Index: Integer; const AAmountType: AmountType);
    function  VATShippingFee_Specified(Index: Integer): boolean;
    procedure SetNetShippingFee(Index: Integer; const AAmountType: AmountType);
    function  NetShippingFee_Specified(Index: Integer): boolean;
    procedure SetNetTotalAmount(Index: Integer; const AAmountType: AmountType);
    function  NetTotalAmount_Specified(Index: Integer): boolean;
    procedure SetVATTotalAmount(Index: Integer; const AAmountType: AmountType);
    function  VATTotalAmount_Specified(Index: Integer): boolean;
    procedure SetActualShippingCost(Index: Integer; const AAmountType: AmountType);
    function  ActualShippingCost_Specified(Index: Integer): boolean;
    procedure SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  AdjustmentAmount_Specified(Index: Integer): boolean;
    procedure SetNotesToBuyer(Index: Integer; const Astring: string);
    function  NotesToBuyer_Specified(Index: Integer): boolean;
    procedure SetNotesFromBuyer(Index: Integer; const Astring: string);
    function  NotesFromBuyer_Specified(Index: Integer): boolean;
    procedure SetNotesToSeller(Index: Integer; const Astring: string);
    function  NotesToSeller_Specified(Index: Integer): boolean;
    procedure SetOrderStatus(Index: Integer; const ASellingManagerOrderStatusType: SellingManagerOrderStatusType);
    function  OrderStatus_Specified(Index: Integer): boolean;
    procedure SetUnpaidItemStatus(Index: Integer; const AUnpaidItemStatusTypeCodeType: UnpaidItemStatusTypeCodeType);
    function  UnpaidItemStatus_Specified(Index: Integer): boolean;
    procedure SetSalePrice(Index: Integer; const AAmountType: AmountType);
    function  SalePrice_Specified(Index: Integer): boolean;
    procedure SetEmailsSent(Index: Integer; const AInteger: Integer);
    function  EmailsSent_Specified(Index: Integer): boolean;
    procedure SetDaysSinceSale(Index: Integer; const AInteger: Integer);
    function  DaysSinceSale_Specified(Index: Integer): boolean;
    procedure SetBuyerID(Index: Integer; const Astring: string);
    function  BuyerID_Specified(Index: Integer): boolean;
    procedure SetBuyerEmail(Index: Integer; const Astring: string);
    function  BuyerEmail_Specified(Index: Integer): boolean;
    procedure SetSaleRecordID(Index: Integer; const AInt64: Int64);
    function  SaleRecordID_Specified(Index: Integer): boolean;
    procedure SetCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationTime_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetRefundStatus(Index: Integer; const Astring: string);
    function  RefundStatus_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SellingManagerSoldTransaction: Array_Of_SellingManagerSoldTransactionType  Index (IS_OPTN or IS_UNBD) read FSellingManagerSoldTransaction write SetSellingManagerSoldTransaction stored SellingManagerSoldTransaction_Specified;
    property ShippingAddress:               AddressType                                 Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property ShippingDetails:               ShippingDetailsType                         Index (IS_OPTN) read FShippingDetails write SetShippingDetails stored ShippingDetails_Specified;
    property CashOnDeliveryCost:            AmountType                                  Index (IS_OPTN) read FCashOnDeliveryCost write SetCashOnDeliveryCost stored CashOnDeliveryCost_Specified;
    property TotalAmount:                   AmountType                                  Index (IS_OPTN) read FTotalAmount write SetTotalAmount stored TotalAmount_Specified;
    property TotalQuantity:                 Integer                                     Index (IS_OPTN) read FTotalQuantity write SetTotalQuantity stored TotalQuantity_Specified;
    property ItemCost:                      AmountType                                  Index (IS_OPTN) read FItemCost write SetItemCost stored ItemCost_Specified;
    property VATRate:                       Array_Of_VATRateType                        Index (IS_OPTN or IS_UNBD) read FVATRate write SetVATRate stored VATRate_Specified;
    property NetInsuranceFee:               AmountType                                  Index (IS_OPTN) read FNetInsuranceFee write SetNetInsuranceFee stored NetInsuranceFee_Specified;
    property VATInsuranceFee:               AmountType                                  Index (IS_OPTN) read FVATInsuranceFee write SetVATInsuranceFee stored VATInsuranceFee_Specified;
    property VATShippingFee:                AmountType                                  Index (IS_OPTN) read FVATShippingFee write SetVATShippingFee stored VATShippingFee_Specified;
    property NetShippingFee:                AmountType                                  Index (IS_OPTN) read FNetShippingFee write SetNetShippingFee stored NetShippingFee_Specified;
    property NetTotalAmount:                AmountType                                  Index (IS_OPTN) read FNetTotalAmount write SetNetTotalAmount stored NetTotalAmount_Specified;
    property VATTotalAmount:                AmountType                                  Index (IS_OPTN) read FVATTotalAmount write SetVATTotalAmount stored VATTotalAmount_Specified;
    property ActualShippingCost:            AmountType                                  Index (IS_OPTN) read FActualShippingCost write SetActualShippingCost stored ActualShippingCost_Specified;
    property AdjustmentAmount:              AmountType                                  Index (IS_OPTN) read FAdjustmentAmount write SetAdjustmentAmount stored AdjustmentAmount_Specified;
    property NotesToBuyer:                  string                                      Index (IS_OPTN) read FNotesToBuyer write SetNotesToBuyer stored NotesToBuyer_Specified;
    property NotesFromBuyer:                string                                      Index (IS_OPTN) read FNotesFromBuyer write SetNotesFromBuyer stored NotesFromBuyer_Specified;
    property NotesToSeller:                 string                                      Index (IS_OPTN) read FNotesToSeller write SetNotesToSeller stored NotesToSeller_Specified;
    property OrderStatus:                   SellingManagerOrderStatusType               Index (IS_OPTN) read FOrderStatus write SetOrderStatus stored OrderStatus_Specified;
    property UnpaidItemStatus:              UnpaidItemStatusTypeCodeType                Index (IS_OPTN) read FUnpaidItemStatus write SetUnpaidItemStatus stored UnpaidItemStatus_Specified;
    property SalePrice:                     AmountType                                  Index (IS_OPTN) read FSalePrice write SetSalePrice stored SalePrice_Specified;
    property EmailsSent:                    Integer                                     Index (IS_OPTN) read FEmailsSent write SetEmailsSent stored EmailsSent_Specified;
    property DaysSinceSale:                 Integer                                     Index (IS_OPTN) read FDaysSinceSale write SetDaysSinceSale stored DaysSinceSale_Specified;
    property BuyerID:                       string                                      Index (IS_OPTN) read FBuyerID write SetBuyerID stored BuyerID_Specified;
    property BuyerEmail:                    string                                      Index (IS_OPTN) read FBuyerEmail write SetBuyerEmail stored BuyerEmail_Specified;
    property SaleRecordID:                  Int64                                       Index (IS_OPTN) read FSaleRecordID write SetSaleRecordID stored SaleRecordID_Specified;
    property CreationTime:                  TXSDateTime                                 Index (IS_OPTN) read FCreationTime write SetCreationTime stored CreationTime_Specified;
    property RefundAmount:                  AmountType                                  Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property RefundStatus:                  string                                      Index (IS_OPTN) read FRefundStatus write SetRefundStatus stored RefundStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerEmailLogType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerEmailLogType = class(TRemotable)
  private
    FEmailType: SellingManagerEmailTypeCodeType;
    FEmailType_Specified: boolean;
    FCustomEmailName: string;
    FCustomEmailName_Specified: boolean;
    FEmailState: SellingManagerEmailSentStatusCodeType;
    FEmailState_Specified: boolean;
    FEventTime: TXSDateTime;
    FEventTime_Specified: boolean;
    procedure SetEmailType(Index: Integer; const ASellingManagerEmailTypeCodeType: SellingManagerEmailTypeCodeType);
    function  EmailType_Specified(Index: Integer): boolean;
    procedure SetCustomEmailName(Index: Integer; const Astring: string);
    function  CustomEmailName_Specified(Index: Integer): boolean;
    procedure SetEmailState(Index: Integer; const ASellingManagerEmailSentStatusCodeType: SellingManagerEmailSentStatusCodeType);
    function  EmailState_Specified(Index: Integer): boolean;
    procedure SetEventTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EventTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EmailType:       SellingManagerEmailTypeCodeType        Index (IS_OPTN) read FEmailType write SetEmailType stored EmailType_Specified;
    property CustomEmailName: string                                 Index (IS_OPTN) read FCustomEmailName write SetCustomEmailName stored CustomEmailName_Specified;
    property EmailState:      SellingManagerEmailSentStatusCodeType  Index (IS_OPTN) read FEmailState write SetEmailState stored EmailState_Specified;
    property EventTime:       TXSDateTime                            Index (IS_OPTN) read FEventTime write SetEventTime stored EventTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : TimeRangeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TimeRangeType = class(TRemotable)
  private
    FTimeFrom: TXSDateTime;
    FTimeFrom_Specified: boolean;
    FTimeTo: TXSDateTime;
    FTimeTo_Specified: boolean;
    procedure SetTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeFrom_Specified(Index: Integer): boolean;
    procedure SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeTo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TimeFrom: TXSDateTime  Index (IS_OPTN) read FTimeFrom write SetTimeFrom stored TimeFrom_Specified;
    property TimeTo:   TXSDateTime  Index (IS_OPTN) read FTimeTo write SetTimeTo stored TimeTo_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerFolderDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerFolderDetailsType = class(TRemotable)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FParentFolderID: Int64;
    FParentFolderID_Specified: boolean;
    FFolderLevel: Int64;
    FFolderLevel_Specified: boolean;
    FFolderName: string;
    FFolderName_Specified: boolean;
    FFolderComment: string;
    FFolderComment_Specified: boolean;
    FChildFolder: Array_Of_SellingManagerFolderDetailsType;
    FChildFolder_Specified: boolean;
    FCreationTime: TXSDateTime;
    FCreationTime_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetParentFolderID(Index: Integer; const AInt64: Int64);
    function  ParentFolderID_Specified(Index: Integer): boolean;
    procedure SetFolderLevel(Index: Integer; const AInt64: Int64);
    function  FolderLevel_Specified(Index: Integer): boolean;
    procedure SetFolderName(Index: Integer; const Astring: string);
    function  FolderName_Specified(Index: Integer): boolean;
    procedure SetFolderComment(Index: Integer; const Astring: string);
    function  FolderComment_Specified(Index: Integer): boolean;
    procedure SetChildFolder(Index: Integer; const AArray_Of_SellingManagerFolderDetailsType: Array_Of_SellingManagerFolderDetailsType);
    function  ChildFolder_Specified(Index: Integer): boolean;
    procedure SetCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FolderID:       Int64                                     Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property ParentFolderID: Int64                                     Index (IS_OPTN) read FParentFolderID write SetParentFolderID stored ParentFolderID_Specified;
    property FolderLevel:    Int64                                     Index (IS_OPTN) read FFolderLevel write SetFolderLevel stored FolderLevel_Specified;
    property FolderName:     string                                    Index (IS_OPTN) read FFolderName write SetFolderName stored FolderName_Specified;
    property FolderComment:  string                                    Index (IS_OPTN) read FFolderComment write SetFolderComment stored FolderComment_Specified;
    property ChildFolder:    Array_Of_SellingManagerFolderDetailsType  Index (IS_OPTN or IS_UNBD) read FChildFolder write SetChildFolder stored ChildFolder_Specified;
    property CreationTime:   TXSDateTime                               Index (IS_OPTN) read FCreationTime write SetCreationTime stored CreationTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaymentHoldDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentHoldDetailType = class(TRemotable)
  private
    FExpectedReleaseDate: TXSDateTime;
    FExpectedReleaseDate_Specified: boolean;
    FRequiredSellerActionArray: RequiredSellerActionArrayType;
    FRequiredSellerActionArray_Specified: boolean;
    FNumOfReqSellerActions: Integer;
    FNumOfReqSellerActions_Specified: boolean;
    FPaymentHoldReason: PaymentHoldReasonCodeType;
    FPaymentHoldReason_Specified: boolean;
    procedure SetExpectedReleaseDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpectedReleaseDate_Specified(Index: Integer): boolean;
    procedure SetRequiredSellerActionArray(Index: Integer; const ARequiredSellerActionArrayType: RequiredSellerActionArrayType);
    function  RequiredSellerActionArray_Specified(Index: Integer): boolean;
    procedure SetNumOfReqSellerActions(Index: Integer; const AInteger: Integer);
    function  NumOfReqSellerActions_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldReason(Index: Integer; const APaymentHoldReasonCodeType: PaymentHoldReasonCodeType);
    function  PaymentHoldReason_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ExpectedReleaseDate:       TXSDateTime                    Index (IS_OPTN) read FExpectedReleaseDate write SetExpectedReleaseDate stored ExpectedReleaseDate_Specified;
    property RequiredSellerActionArray: RequiredSellerActionArrayType  Index (IS_OPTN) read FRequiredSellerActionArray write SetRequiredSellerActionArray stored RequiredSellerActionArray_Specified;
    property NumOfReqSellerActions:     Integer                        Index (IS_OPTN) read FNumOfReqSellerActions write SetNumOfReqSellerActions stored NumOfReqSellerActions_Specified;
    property PaymentHoldReason:         PaymentHoldReasonCodeType      Index (IS_OPTN) read FPaymentHoldReason write SetPaymentHoldReason stored PaymentHoldReason_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationDetailsType = class(TRemotable)
  private
    FDeliveryURL: string;
    FDeliveryURL_Specified: boolean;
    FReferenceID: string;
    FReferenceID_Specified: boolean;
    FExpirationTime: TXSDateTime;
    FExpirationTime_Specified: boolean;
    FType_: NotificationEventTypeCodeType;
    FType__Specified: boolean;
    FRetries: Integer;
    FRetries_Specified: boolean;
    FDeliveryStatus: NotificationEventStateCodeType;
    FDeliveryStatus_Specified: boolean;
    FNextRetryTime: TXSDateTime;
    FNextRetryTime_Specified: boolean;
    FDeliveryTime: TXSDateTime;
    FDeliveryTime_Specified: boolean;
    FErrorMessage: string;
    FErrorMessage_Specified: boolean;
    FDeliveryURLName: string;
    FDeliveryURLName_Specified: boolean;
    procedure SetDeliveryURL(Index: Integer; const Astring: string);
    function  DeliveryURL_Specified(Index: Integer): boolean;
    procedure SetReferenceID(Index: Integer; const Astring: string);
    function  ReferenceID_Specified(Index: Integer): boolean;
    procedure SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpirationTime_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
    function  Type__Specified(Index: Integer): boolean;
    procedure SetRetries(Index: Integer; const AInteger: Integer);
    function  Retries_Specified(Index: Integer): boolean;
    procedure SetDeliveryStatus(Index: Integer; const ANotificationEventStateCodeType: NotificationEventStateCodeType);
    function  DeliveryStatus_Specified(Index: Integer): boolean;
    procedure SetNextRetryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  NextRetryTime_Specified(Index: Integer): boolean;
    procedure SetDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DeliveryTime_Specified(Index: Integer): boolean;
    procedure SetErrorMessage(Index: Integer; const Astring: string);
    function  ErrorMessage_Specified(Index: Integer): boolean;
    procedure SetDeliveryURLName(Index: Integer; const Astring: string);
    function  DeliveryURLName_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DeliveryURL:     string                          Index (IS_OPTN) read FDeliveryURL write SetDeliveryURL stored DeliveryURL_Specified;
    property ReferenceID:     string                          Index (IS_OPTN) read FReferenceID write SetReferenceID stored ReferenceID_Specified;
    property ExpirationTime:  TXSDateTime                     Index (IS_OPTN) read FExpirationTime write SetExpirationTime stored ExpirationTime_Specified;
    property Type_:           NotificationEventTypeCodeType   Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
    property Retries:         Integer                         Index (IS_OPTN) read FRetries write SetRetries stored Retries_Specified;
    property DeliveryStatus:  NotificationEventStateCodeType  Index (IS_OPTN) read FDeliveryStatus write SetDeliveryStatus stored DeliveryStatus_Specified;
    property NextRetryTime:   TXSDateTime                     Index (IS_OPTN) read FNextRetryTime write SetNextRetryTime stored NextRetryTime_Specified;
    property DeliveryTime:    TXSDateTime                     Index (IS_OPTN) read FDeliveryTime write SetDeliveryTime stored DeliveryTime_Specified;
    property ErrorMessage:    string                          Index (IS_OPTN) read FErrorMessage write SetErrorMessage stored ErrorMessage_Specified;
    property DeliveryURLName: string                          Index (IS_OPTN) read FDeliveryURLName write SetDeliveryURLName stored DeliveryURLName_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyMessagesForwardDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesForwardDetailsType = class(TRemotable)
  private
    FUserForwardDate: TXSDateTime;
    FUserForwardDate_Specified: boolean;
    FForwardMessageEncoding: string;
    FForwardMessageEncoding_Specified: boolean;
    procedure SetUserForwardDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UserForwardDate_Specified(Index: Integer): boolean;
    procedure SetForwardMessageEncoding(Index: Integer; const Astring: string);
    function  ForwardMessageEncoding_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property UserForwardDate:        TXSDateTime  Index (IS_OPTN) read FUserForwardDate write SetUserForwardDate stored UserForwardDate_Specified;
    property ForwardMessageEncoding: string       Index (IS_OPTN) read FForwardMessageEncoding write SetForwardMessageEncoding stored ForwardMessageEncoding_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyMessagesResponseDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesResponseDetailsType = class(TRemotable)
  private
    FResponseEnabled: Boolean;
    FResponseEnabled_Specified: boolean;
    FResponseURL: string;
    FResponseURL_Specified: boolean;
    FUserResponseDate: TXSDateTime;
    FUserResponseDate_Specified: boolean;
    procedure SetResponseEnabled(Index: Integer; const ABoolean: Boolean);
    function  ResponseEnabled_Specified(Index: Integer): boolean;
    procedure SetResponseURL(Index: Integer; const Astring: string);
    function  ResponseURL_Specified(Index: Integer): boolean;
    procedure SetUserResponseDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UserResponseDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ResponseEnabled:  Boolean      Index (IS_OPTN) read FResponseEnabled write SetResponseEnabled stored ResponseEnabled_Specified;
    property ResponseURL:      string       Index (IS_OPTN) read FResponseURL write SetResponseURL stored ResponseURL_Specified;
    property UserResponseDate: TXSDateTime  Index (IS_OPTN) read FUserResponseDate write SetUserResponseDate stored UserResponseDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDetailsType = class(TRemotable)
  private
    FAdult: Boolean;
    FAdult_Specified: boolean;
    FBindingAuction: Boolean;
    FBindingAuction_Specified: boolean;
    FCheckoutEnabled: Boolean;
    FCheckoutEnabled_Specified: boolean;
    FConvertedBuyItNowPrice: AmountType;
    FConvertedBuyItNowPrice_Specified: boolean;
    FConvertedStartPrice: AmountType;
    FConvertedStartPrice_Specified: boolean;
    FConvertedReservePrice: AmountType;
    FConvertedReservePrice_Specified: boolean;
    FHasReservePrice: Boolean;
    FHasReservePrice_Specified: boolean;
    FRelistedItemID: ItemIDType;
    FRelistedItemID_Specified: boolean;
    FSecondChanceOriginalItemID: ItemIDType;
    FSecondChanceOriginalItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FViewItemURL: string;
    FViewItemURL_Specified: boolean;
    FHasUnansweredQuestions: Boolean;
    FHasUnansweredQuestions_Specified: boolean;
    FHasPublicMessages: Boolean;
    FHasPublicMessages_Specified: boolean;
    FBuyItNowAvailable: Boolean;
    FBuyItNowAvailable_Specified: boolean;
    FSellerBusinessType: SellerBusinessCodeType;
    FSellerBusinessType_Specified: boolean;
    FMinimumBestOfferPrice: AmountType;
    FMinimumBestOfferPrice_Specified: boolean;
    FMinimumBestOfferMessage: string;
    FMinimumBestOfferMessage_Specified: boolean;
    FLocalListingDistance: string;
    FLocalListingDistance_Specified: boolean;
    FTCROriginalItemID: ItemIDType;
    FTCROriginalItemID_Specified: boolean;
    FViewItemURLForNaturalSearch: string;
    FViewItemURLForNaturalSearch_Specified: boolean;
    FPayPerLeadEnabled: Boolean;
    FPayPerLeadEnabled_Specified: boolean;
    FBestOfferAutoAcceptPrice: AmountType;
    FBestOfferAutoAcceptPrice_Specified: boolean;
    FEndingReason: EndReasonCodeType;
    FEndingReason_Specified: boolean;
    procedure SetAdult(Index: Integer; const ABoolean: Boolean);
    function  Adult_Specified(Index: Integer): boolean;
    procedure SetBindingAuction(Index: Integer; const ABoolean: Boolean);
    function  BindingAuction_Specified(Index: Integer): boolean;
    procedure SetCheckoutEnabled(Index: Integer; const ABoolean: Boolean);
    function  CheckoutEnabled_Specified(Index: Integer): boolean;
    procedure SetConvertedBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedBuyItNowPrice_Specified(Index: Integer): boolean;
    procedure SetConvertedStartPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedStartPrice_Specified(Index: Integer): boolean;
    procedure SetConvertedReservePrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedReservePrice_Specified(Index: Integer): boolean;
    procedure SetHasReservePrice(Index: Integer; const ABoolean: Boolean);
    function  HasReservePrice_Specified(Index: Integer): boolean;
    procedure SetRelistedItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  RelistedItemID_Specified(Index: Integer): boolean;
    procedure SetSecondChanceOriginalItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  SecondChanceOriginalItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetViewItemURL(Index: Integer; const Astring: string);
    function  ViewItemURL_Specified(Index: Integer): boolean;
    procedure SetHasUnansweredQuestions(Index: Integer; const ABoolean: Boolean);
    function  HasUnansweredQuestions_Specified(Index: Integer): boolean;
    procedure SetHasPublicMessages(Index: Integer; const ABoolean: Boolean);
    function  HasPublicMessages_Specified(Index: Integer): boolean;
    procedure SetBuyItNowAvailable(Index: Integer; const ABoolean: Boolean);
    function  BuyItNowAvailable_Specified(Index: Integer): boolean;
    procedure SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
    function  SellerBusinessType_Specified(Index: Integer): boolean;
    procedure SetMinimumBestOfferPrice(Index: Integer; const AAmountType: AmountType);
    function  MinimumBestOfferPrice_Specified(Index: Integer): boolean;
    procedure SetMinimumBestOfferMessage(Index: Integer; const Astring: string);
    function  MinimumBestOfferMessage_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistance(Index: Integer; const Astring: string);
    function  LocalListingDistance_Specified(Index: Integer): boolean;
    procedure SetTCROriginalItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  TCROriginalItemID_Specified(Index: Integer): boolean;
    procedure SetViewItemURLForNaturalSearch(Index: Integer; const Astring: string);
    function  ViewItemURLForNaturalSearch_Specified(Index: Integer): boolean;
    procedure SetPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
    function  PayPerLeadEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoAcceptPrice(Index: Integer; const AAmountType: AmountType);
    function  BestOfferAutoAcceptPrice_Specified(Index: Integer): boolean;
    procedure SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
    function  EndingReason_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Adult:                       Boolean                 Index (IS_OPTN) read FAdult write SetAdult stored Adult_Specified;
    property BindingAuction:              Boolean                 Index (IS_OPTN) read FBindingAuction write SetBindingAuction stored BindingAuction_Specified;
    property CheckoutEnabled:             Boolean                 Index (IS_OPTN) read FCheckoutEnabled write SetCheckoutEnabled stored CheckoutEnabled_Specified;
    property ConvertedBuyItNowPrice:      AmountType              Index (IS_OPTN) read FConvertedBuyItNowPrice write SetConvertedBuyItNowPrice stored ConvertedBuyItNowPrice_Specified;
    property ConvertedStartPrice:         AmountType              Index (IS_OPTN) read FConvertedStartPrice write SetConvertedStartPrice stored ConvertedStartPrice_Specified;
    property ConvertedReservePrice:       AmountType              Index (IS_OPTN) read FConvertedReservePrice write SetConvertedReservePrice stored ConvertedReservePrice_Specified;
    property HasReservePrice:             Boolean                 Index (IS_OPTN) read FHasReservePrice write SetHasReservePrice stored HasReservePrice_Specified;
    property RelistedItemID:              ItemIDType              Index (IS_OPTN) read FRelistedItemID write SetRelistedItemID stored RelistedItemID_Specified;
    property SecondChanceOriginalItemID:  ItemIDType              Index (IS_OPTN) read FSecondChanceOriginalItemID write SetSecondChanceOriginalItemID stored SecondChanceOriginalItemID_Specified;
    property StartTime:                   TXSDateTime             Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                     TXSDateTime             Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property ViewItemURL:                 string                  Index (IS_OPTN) read FViewItemURL write SetViewItemURL stored ViewItemURL_Specified;
    property HasUnansweredQuestions:      Boolean                 Index (IS_OPTN) read FHasUnansweredQuestions write SetHasUnansweredQuestions stored HasUnansweredQuestions_Specified;
    property HasPublicMessages:           Boolean                 Index (IS_OPTN) read FHasPublicMessages write SetHasPublicMessages stored HasPublicMessages_Specified;
    property BuyItNowAvailable:           Boolean                 Index (IS_OPTN) read FBuyItNowAvailable write SetBuyItNowAvailable stored BuyItNowAvailable_Specified;
    property SellerBusinessType:          SellerBusinessCodeType  Index (IS_OPTN) read FSellerBusinessType write SetSellerBusinessType stored SellerBusinessType_Specified;
    property MinimumBestOfferPrice:       AmountType              Index (IS_OPTN) read FMinimumBestOfferPrice write SetMinimumBestOfferPrice stored MinimumBestOfferPrice_Specified;
    property MinimumBestOfferMessage:     string                  Index (IS_OPTN) read FMinimumBestOfferMessage write SetMinimumBestOfferMessage stored MinimumBestOfferMessage_Specified;
    property LocalListingDistance:        string                  Index (IS_OPTN) read FLocalListingDistance write SetLocalListingDistance stored LocalListingDistance_Specified;
    property TCROriginalItemID:           ItemIDType              Index (IS_OPTN) read FTCROriginalItemID write SetTCROriginalItemID stored TCROriginalItemID_Specified;
    property ViewItemURLForNaturalSearch: string                  Index (IS_OPTN) read FViewItemURLForNaturalSearch write SetViewItemURLForNaturalSearch stored ViewItemURLForNaturalSearch_Specified;
    property PayPerLeadEnabled:           Boolean                 Index (IS_OPTN) read FPayPerLeadEnabled write SetPayPerLeadEnabled stored PayPerLeadEnabled_Specified;
    property BestOfferAutoAcceptPrice:    AmountType              Index (IS_OPTN) read FBestOfferAutoAcceptPrice write SetBestOfferAutoAcceptPrice stored BestOfferAutoAcceptPrice_Specified;
    property EndingReason:                EndReasonCodeType       Index (IS_OPTN) read FEndingReason write SetEndingReason stored EndingReason_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyMessagesAlertType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesAlertType = class(TRemotable)
  private
    FSender: string;
    FSender_Specified: boolean;
    FRecipientUserID: string;
    FRecipientUserID_Specified: boolean;
    FSubject: string;
    FSubject_Specified: boolean;
    FPriority: string;
    FPriority_Specified: boolean;
    FAlertID: MyMessagesAlertIDType;
    FAlertID_Specified: boolean;
    FExternalAlertID: string;
    FExternalAlertID_Specified: boolean;
    FContentType: string;
    FContentType_Specified: boolean;
    FText: string;
    FText_Specified: boolean;
    FResolutionStatus: MyMessagesAlertResolutionStatusCode;
    FResolutionStatus_Specified: boolean;
    FRead_: Boolean;
    FRead__Specified: boolean;
    FCreationDate: TXSDateTime;
    FCreationDate_Specified: boolean;
    FReceiveDate: TXSDateTime;
    FReceiveDate_Specified: boolean;
    FExpirationDate: TXSDateTime;
    FExpirationDate_Specified: boolean;
    FResolutionDate: TXSDateTime;
    FResolutionDate_Specified: boolean;
    FLastReadDate: TXSDateTime;
    FLastReadDate_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FIsTimedResolution: Boolean;
    FIsTimedResolution_Specified: boolean;
    FActionURL: string;
    FActionURL_Specified: boolean;
    FResponseDetails: MyMessagesResponseDetailsType;
    FResponseDetails_Specified: boolean;
    FForwardDetails: MyMessagesForwardDetailsType;
    FForwardDetails_Specified: boolean;
    FFolder: MyMessagesFolderType;
    FFolder_Specified: boolean;
    procedure SetSender(Index: Integer; const Astring: string);
    function  Sender_Specified(Index: Integer): boolean;
    procedure SetRecipientUserID(Index: Integer; const Astring: string);
    function  RecipientUserID_Specified(Index: Integer): boolean;
    procedure SetSubject(Index: Integer; const Astring: string);
    function  Subject_Specified(Index: Integer): boolean;
    procedure SetPriority(Index: Integer; const Astring: string);
    function  Priority_Specified(Index: Integer): boolean;
    procedure SetAlertID(Index: Integer; const AMyMessagesAlertIDType: MyMessagesAlertIDType);
    function  AlertID_Specified(Index: Integer): boolean;
    procedure SetExternalAlertID(Index: Integer; const Astring: string);
    function  ExternalAlertID_Specified(Index: Integer): boolean;
    procedure SetContentType(Index: Integer; const Astring: string);
    function  ContentType_Specified(Index: Integer): boolean;
    procedure SetText(Index: Integer; const Astring: string);
    function  Text_Specified(Index: Integer): boolean;
    procedure SetResolutionStatus(Index: Integer; const AMyMessagesAlertResolutionStatusCode: MyMessagesAlertResolutionStatusCode);
    function  ResolutionStatus_Specified(Index: Integer): boolean;
    procedure SetRead_(Index: Integer; const ABoolean: Boolean);
    function  Read__Specified(Index: Integer): boolean;
    procedure SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDate_Specified(Index: Integer): boolean;
    procedure SetReceiveDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ReceiveDate_Specified(Index: Integer): boolean;
    procedure SetExpirationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpirationDate_Specified(Index: Integer): boolean;
    procedure SetResolutionDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ResolutionDate_Specified(Index: Integer): boolean;
    procedure SetLastReadDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastReadDate_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetIsTimedResolution(Index: Integer; const ABoolean: Boolean);
    function  IsTimedResolution_Specified(Index: Integer): boolean;
    procedure SetActionURL(Index: Integer; const Astring: string);
    function  ActionURL_Specified(Index: Integer): boolean;
    procedure SetResponseDetails(Index: Integer; const AMyMessagesResponseDetailsType: MyMessagesResponseDetailsType);
    function  ResponseDetails_Specified(Index: Integer): boolean;
    procedure SetForwardDetails(Index: Integer; const AMyMessagesForwardDetailsType: MyMessagesForwardDetailsType);
    function  ForwardDetails_Specified(Index: Integer): boolean;
    procedure SetFolder(Index: Integer; const AMyMessagesFolderType: MyMessagesFolderType);
    function  Folder_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Sender:            string                               Index (IS_OPTN) read FSender write SetSender stored Sender_Specified;
    property RecipientUserID:   string                               Index (IS_OPTN) read FRecipientUserID write SetRecipientUserID stored RecipientUserID_Specified;
    property Subject:           string                               Index (IS_OPTN) read FSubject write SetSubject stored Subject_Specified;
    property Priority:          string                               Index (IS_OPTN) read FPriority write SetPriority stored Priority_Specified;
    property AlertID:           MyMessagesAlertIDType                Index (IS_OPTN) read FAlertID write SetAlertID stored AlertID_Specified;
    property ExternalAlertID:   string                               Index (IS_OPTN) read FExternalAlertID write SetExternalAlertID stored ExternalAlertID_Specified;
    property ContentType:       string                               Index (IS_OPTN) read FContentType write SetContentType stored ContentType_Specified;
    property Text:              string                               Index (IS_OPTN) read FText write SetText stored Text_Specified;
    property ResolutionStatus:  MyMessagesAlertResolutionStatusCode  Index (IS_OPTN) read FResolutionStatus write SetResolutionStatus stored ResolutionStatus_Specified;
    property Read_:             Boolean                              Index (IS_OPTN) read FRead_ write SetRead_ stored Read__Specified;
    property CreationDate:      TXSDateTime                          Index (IS_OPTN) read FCreationDate write SetCreationDate stored CreationDate_Specified;
    property ReceiveDate:       TXSDateTime                          Index (IS_OPTN) read FReceiveDate write SetReceiveDate stored ReceiveDate_Specified;
    property ExpirationDate:    TXSDateTime                          Index (IS_OPTN) read FExpirationDate write SetExpirationDate stored ExpirationDate_Specified;
    property ResolutionDate:    TXSDateTime                          Index (IS_OPTN) read FResolutionDate write SetResolutionDate stored ResolutionDate_Specified;
    property LastReadDate:      TXSDateTime                          Index (IS_OPTN) read FLastReadDate write SetLastReadDate stored LastReadDate_Specified;
    property ItemID:            ItemIDType                           Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property IsTimedResolution: Boolean                              Index (IS_OPTN) read FIsTimedResolution write SetIsTimedResolution stored IsTimedResolution_Specified;
    property ActionURL:         string                               Index (IS_OPTN) read FActionURL write SetActionURL stored ActionURL_Specified;
    property ResponseDetails:   MyMessagesResponseDetailsType        Index (IS_OPTN) read FResponseDetails write SetResponseDetails stored ResponseDetails_Specified;
    property ForwardDetails:    MyMessagesForwardDetailsType         Index (IS_OPTN) read FForwardDetails write SetForwardDetails stored ForwardDetails_Specified;
    property Folder:            MyMessagesFolderType                 Index (IS_OPTN) read FFolder write SetFolder stored Folder_Specified;
  end;



  // ************************************************************************ //
  // XML       : MembershipDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MembershipDetailType = class(TRemotable)
  private
    FProgramName: string;
    FProgramName_Specified: boolean;
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FExpiryDate: TXSDateTime;
    FExpiryDate_Specified: boolean;
    procedure SetProgramName(Index: Integer; const Astring: string);
    function  ProgramName_Specified(Index: Integer): boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetExpiryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpiryDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ProgramName: string        Index (IS_OPTN) read FProgramName write SetProgramName stored ProgramName_Specified;
    property Site:        SiteCodeType  Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property ExpiryDate:  TXSDateTime   Index (IS_OPTN) read FExpiryDate write SetExpiryDate stored ExpiryDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : MarkUpMarkDownEventType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MarkUpMarkDownEventType = class(TRemotable)
  private
    FType_: MarkUpMarkDownEventTypeCodeType;
    FType__Specified: boolean;
    FTime: TXSDateTime;
    FTime_Specified: boolean;
    FReason: string;
    FReason_Specified: boolean;
    procedure SetType_(Index: Integer; const AMarkUpMarkDownEventTypeCodeType: MarkUpMarkDownEventTypeCodeType);
    function  Type__Specified(Index: Integer): boolean;
    procedure SetTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Time_Specified(Index: Integer): boolean;
    procedure SetReason(Index: Integer; const Astring: string);
    function  Reason_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Type_:  MarkUpMarkDownEventTypeCodeType  Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
    property Time:   TXSDateTime                      Index (IS_OPTN) read FTime write SetTime stored Time_Specified;
    property Reason: string                           Index (IS_OPTN) read FReason write SetReason stored Reason_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserAgreementInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserAgreementInfoType = class(TRemotable)
  private
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FSellereBayPaymentProcessStatus: SellereBayPaymentProcessStatusCodeType;
    FSellereBayPaymentProcessStatus_Specified: boolean;
    FAcceptedTime: TXSDateTime;
    FAcceptedTime_Specified: boolean;
    FSellereBayPaymentProcessEnableTime: TXSDateTime;
    FSellereBayPaymentProcessEnableTime_Specified: boolean;
    FUserAgreementURL: string;
    FUserAgreementURL_Specified: boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetSellereBayPaymentProcessStatus(Index: Integer; const ASellereBayPaymentProcessStatusCodeType: SellereBayPaymentProcessStatusCodeType);
    function  SellereBayPaymentProcessStatus_Specified(Index: Integer): boolean;
    procedure SetAcceptedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  AcceptedTime_Specified(Index: Integer): boolean;
    procedure SetSellereBayPaymentProcessEnableTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  SellereBayPaymentProcessEnableTime_Specified(Index: Integer): boolean;
    procedure SetUserAgreementURL(Index: Integer; const Astring: string);
    function  UserAgreementURL_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Site:                               SiteCodeType                            Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property SellereBayPaymentProcessStatus:     SellereBayPaymentProcessStatusCodeType  Index (IS_OPTN) read FSellereBayPaymentProcessStatus write SetSellereBayPaymentProcessStatus stored SellereBayPaymentProcessStatus_Specified;
    property AcceptedTime:                       TXSDateTime                             Index (IS_OPTN) read FAcceptedTime write SetAcceptedTime stored AcceptedTime_Specified;
    property SellereBayPaymentProcessEnableTime: TXSDateTime                             Index (IS_OPTN) read FSellereBayPaymentProcessEnableTime write SetSellereBayPaymentProcessEnableTime stored SellereBayPaymentProcessEnableTime_Specified;
    property UserAgreementURL:                   string                                  Index (IS_OPTN) read FUserAgreementURL write SetUserAgreementURL stored UserAgreementURL_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreVacationPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreVacationPreferencesType = class(TRemotable)
  private
    FOnVacation: Boolean;
    FOnVacation_Specified: boolean;
    FReturnDate: TXSDateTime;
    FReturnDate_Specified: boolean;
    FHideFixedPriceStoreItems: Boolean;
    FHideFixedPriceStoreItems_Specified: boolean;
    FMessageItem: Boolean;
    FMessageItem_Specified: boolean;
    FMessageStore: Boolean;
    FMessageStore_Specified: boolean;
    FDisplayMessageStoreCustomText: Boolean;
    FDisplayMessageStoreCustomText_Specified: boolean;
    FMessageStoreCustomText: string;
    FMessageStoreCustomText_Specified: boolean;
    procedure SetOnVacation(Index: Integer; const ABoolean: Boolean);
    function  OnVacation_Specified(Index: Integer): boolean;
    procedure SetReturnDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ReturnDate_Specified(Index: Integer): boolean;
    procedure SetHideFixedPriceStoreItems(Index: Integer; const ABoolean: Boolean);
    function  HideFixedPriceStoreItems_Specified(Index: Integer): boolean;
    procedure SetMessageItem(Index: Integer; const ABoolean: Boolean);
    function  MessageItem_Specified(Index: Integer): boolean;
    procedure SetMessageStore(Index: Integer; const ABoolean: Boolean);
    function  MessageStore_Specified(Index: Integer): boolean;
    procedure SetDisplayMessageStoreCustomText(Index: Integer; const ABoolean: Boolean);
    function  DisplayMessageStoreCustomText_Specified(Index: Integer): boolean;
    procedure SetMessageStoreCustomText(Index: Integer; const Astring: string);
    function  MessageStoreCustomText_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OnVacation:                    Boolean      Index (IS_OPTN) read FOnVacation write SetOnVacation stored OnVacation_Specified;
    property ReturnDate:                    TXSDateTime  Index (IS_OPTN) read FReturnDate write SetReturnDate stored ReturnDate_Specified;
    property HideFixedPriceStoreItems:      Boolean      Index (IS_OPTN) read FHideFixedPriceStoreItems write SetHideFixedPriceStoreItems stored HideFixedPriceStoreItems_Specified;
    property MessageItem:                   Boolean      Index (IS_OPTN) read FMessageItem write SetMessageItem stored MessageItem_Specified;
    property MessageStore:                  Boolean      Index (IS_OPTN) read FMessageStore write SetMessageStore stored MessageStore_Specified;
    property DisplayMessageStoreCustomText: Boolean      Index (IS_OPTN) read FDisplayMessageStoreCustomText write SetDisplayMessageStoreCustomText stored DisplayMessageStoreCustomText_Specified;
    property MessageStoreCustomText:        string       Index (IS_OPTN) read FMessageStoreCustomText write SetMessageStoreCustomText stored MessageStoreCustomText_Specified;
  end;



  // ************************************************************************ //
  // XML       : PromotionalSaleDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalSaleDetailsType = class(TRemotable)
  private
    FOriginalPrice: AmountType;
    FOriginalPrice_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    procedure SetOriginalPrice(Index: Integer; const AAmountType: AmountType);
    function  OriginalPrice_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OriginalPrice: AmountType   Index (IS_OPTN) read FOriginalPrice write SetOriginalPrice stored OriginalPrice_Specified;
    property StartTime:     TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:       TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : RefundType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundType = class(TRemotable)
  private
    FRefundFromSeller: AmountType;
    FRefundFromSeller_Specified: boolean;
    FTotalRefundToBuyer: AmountType;
    FTotalRefundToBuyer_Specified: boolean;
    FRefundTime: TXSDateTime;
    FRefundTime_Specified: boolean;
    FRefundID: string;
    FRefundID_Specified: boolean;
    FRefundTransactionArray: RefundTransactionArrayType;
    FRefundTransactionArray_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FRefundStatus: RefundStatusCodeType;
    FRefundStatus_Specified: boolean;
    FRefundFailureReason: RefundFailureReasonType;
    FRefundFailureReason_Specified: boolean;
    FRefundFundingSourceArray: RefundFundingSourceArrayType;
    FRefundFundingSourceArray_Specified: boolean;
    FExternalReferenceID: string;
    FExternalReferenceID_Specified: boolean;
    FRefundRequestedTime: TXSDateTime;
    FRefundRequestedTime_Specified: boolean;
    FRefundCompletionTime: TXSDateTime;
    FRefundCompletionTime_Specified: boolean;
    FEstimatedRefundCompletionTime: TXSDateTime;
    FEstimatedRefundCompletionTime_Specified: boolean;
    FSellerNoteToBuyer: string;
    FSellerNoteToBuyer_Specified: boolean;
    procedure SetRefundFromSeller(Index: Integer; const AAmountType: AmountType);
    function  RefundFromSeller_Specified(Index: Integer): boolean;
    procedure SetTotalRefundToBuyer(Index: Integer; const AAmountType: AmountType);
    function  TotalRefundToBuyer_Specified(Index: Integer): boolean;
    procedure SetRefundTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundTime_Specified(Index: Integer): boolean;
    procedure SetRefundID(Index: Integer; const Astring: string);
    function  RefundID_Specified(Index: Integer): boolean;
    procedure SetRefundTransactionArray(Index: Integer; const ARefundTransactionArrayType: RefundTransactionArrayType);
    function  RefundTransactionArray_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetRefundStatus(Index: Integer; const ARefundStatusCodeType: RefundStatusCodeType);
    function  RefundStatus_Specified(Index: Integer): boolean;
    procedure SetRefundFailureReason(Index: Integer; const ARefundFailureReasonType: RefundFailureReasonType);
    function  RefundFailureReason_Specified(Index: Integer): boolean;
    procedure SetRefundFundingSourceArray(Index: Integer; const ARefundFundingSourceArrayType: RefundFundingSourceArrayType);
    function  RefundFundingSourceArray_Specified(Index: Integer): boolean;
    procedure SetExternalReferenceID(Index: Integer; const Astring: string);
    function  ExternalReferenceID_Specified(Index: Integer): boolean;
    procedure SetRefundRequestedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundRequestedTime_Specified(Index: Integer): boolean;
    procedure SetRefundCompletionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundCompletionTime_Specified(Index: Integer): boolean;
    procedure SetEstimatedRefundCompletionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EstimatedRefundCompletionTime_Specified(Index: Integer): boolean;
    procedure SetSellerNoteToBuyer(Index: Integer; const Astring: string);
    function  SellerNoteToBuyer_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RefundFromSeller:              AmountType                    Index (IS_OPTN) read FRefundFromSeller write SetRefundFromSeller stored RefundFromSeller_Specified;
    property TotalRefundToBuyer:            AmountType                    Index (IS_OPTN) read FTotalRefundToBuyer write SetTotalRefundToBuyer stored TotalRefundToBuyer_Specified;
    property RefundTime:                    TXSDateTime                   Index (IS_OPTN) read FRefundTime write SetRefundTime stored RefundTime_Specified;
    property RefundID:                      string                        Index (IS_OPTN) read FRefundID write SetRefundID stored RefundID_Specified;
    property RefundTransactionArray:        RefundTransactionArrayType    Index (IS_OPTN) read FRefundTransactionArray write SetRefundTransactionArray stored RefundTransactionArray_Specified;
    property RefundAmount:                  AmountType                    Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property RefundStatus:                  RefundStatusCodeType          Index (IS_OPTN) read FRefundStatus write SetRefundStatus stored RefundStatus_Specified;
    property RefundFailureReason:           RefundFailureReasonType       Index (IS_OPTN) read FRefundFailureReason write SetRefundFailureReason stored RefundFailureReason_Specified;
    property RefundFundingSourceArray:      RefundFundingSourceArrayType  Index (IS_OPTN) read FRefundFundingSourceArray write SetRefundFundingSourceArray stored RefundFundingSourceArray_Specified;
    property ExternalReferenceID:           string                        Index (IS_OPTN) read FExternalReferenceID write SetExternalReferenceID stored ExternalReferenceID_Specified;
    property RefundRequestedTime:           TXSDateTime                   Index (IS_OPTN) read FRefundRequestedTime write SetRefundRequestedTime stored RefundRequestedTime_Specified;
    property RefundCompletionTime:          TXSDateTime                   Index (IS_OPTN) read FRefundCompletionTime write SetRefundCompletionTime stored RefundCompletionTime_Specified;
    property EstimatedRefundCompletionTime: TXSDateTime                   Index (IS_OPTN) read FEstimatedRefundCompletionTime write SetEstimatedRefundCompletionTime stored EstimatedRefundCompletionTime_Specified;
    property SellerNoteToBuyer:             string                        Index (IS_OPTN) read FSellerNoteToBuyer write SetSellerNoteToBuyer stored SellerNoteToBuyer_Specified;
  end;

  DisputeIDType   =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UserIDType      =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  UserIDArrayType = array of UserIDType;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  OrderIDType     =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  OrderIDArrayType = array of OrderIDType;      { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellingManagerProductDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerProductDetailsType = class(TRemotable)
  private
    FProductName: string;
    FProductName_Specified: boolean;
    FProductID: Int64;
    FProductID_Specified: boolean;
    FCustomLabel: string;
    FCustomLabel_Specified: boolean;
    FQuantityAvailable: Integer;
    FQuantityAvailable_Specified: boolean;
    FUnitCost: AmountType;
    FUnitCost_Specified: boolean;
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FRestockAlert: Boolean;
    FRestockAlert_Specified: boolean;
    FRestockThreshold: Integer;
    FRestockThreshold_Specified: boolean;
    FVendorInfo: SellingManagerVendorDetailsType;
    FVendorInfo_Specified: boolean;
    FNote: string;
    FNote_Specified: boolean;
    procedure SetProductName(Index: Integer; const Astring: string);
    function  ProductName_Specified(Index: Integer): boolean;
    procedure SetProductID(Index: Integer; const AInt64: Int64);
    function  ProductID_Specified(Index: Integer): boolean;
    procedure SetCustomLabel(Index: Integer; const Astring: string);
    function  CustomLabel_Specified(Index: Integer): boolean;
    procedure SetQuantityAvailable(Index: Integer; const AInteger: Integer);
    function  QuantityAvailable_Specified(Index: Integer): boolean;
    procedure SetUnitCost(Index: Integer; const AAmountType: AmountType);
    function  UnitCost_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetRestockAlert(Index: Integer; const ABoolean: Boolean);
    function  RestockAlert_Specified(Index: Integer): boolean;
    procedure SetRestockThreshold(Index: Integer; const AInteger: Integer);
    function  RestockThreshold_Specified(Index: Integer): boolean;
    procedure SetVendorInfo(Index: Integer; const ASellingManagerVendorDetailsType: SellingManagerVendorDetailsType);
    function  VendorInfo_Specified(Index: Integer): boolean;
    procedure SetNote(Index: Integer; const Astring: string);
    function  Note_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ProductName:       string                           Index (IS_OPTN) read FProductName write SetProductName stored ProductName_Specified;
    property ProductID:         Int64                            Index (IS_OPTN) read FProductID write SetProductID stored ProductID_Specified;
    property CustomLabel:       string                           Index (IS_OPTN) read FCustomLabel write SetCustomLabel stored CustomLabel_Specified;
    property QuantityAvailable: Integer                          Index (IS_OPTN) read FQuantityAvailable write SetQuantityAvailable stored QuantityAvailable_Specified;
    property UnitCost:          AmountType                       Index (IS_OPTN) read FUnitCost write SetUnitCost stored UnitCost_Specified;
    property FolderID:          Int64                            Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property RestockAlert:      Boolean                          Index (IS_OPTN) read FRestockAlert write SetRestockAlert stored RestockAlert_Specified;
    property RestockThreshold:  Integer                          Index (IS_OPTN) read FRestockThreshold write SetRestockThreshold stored RestockThreshold_Specified;
    property VendorInfo:        SellingManagerVendorDetailsType  Index (IS_OPTN) read FVendorInfo write SetVendorInfo stored VendorInfo_Specified;
    property Note:              string                           Index (IS_OPTN) read FNote write SetNote stored Note_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemRequestContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddItemRequestContainerType = class(TRemotable)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FMessageID: string;
    FMessageID_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetMessageID(Index: Integer; const Astring: string);
    function  MessageID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Item:      ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property MessageID: string    Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemResponseContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddItemResponseContainerType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FCorrelationID: string;
    FCorrelationID_Specified: boolean;
    FErrors: Array_Of_ErrorType;
    FErrors_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetCorrelationID(Index: Integer; const Astring: string);
    function  CorrelationID_Specified(Index: Integer): boolean;
    procedure SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
    function  Errors_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property CorrelationID:          string                           Index (IS_OPTN) read FCorrelationID write SetCorrelationID stored CorrelationID_Specified;
    property Errors:                 Array_Of_ErrorType               Index (IS_OPTN or IS_UNBD) read FErrors write SetErrors stored Errors_Specified;
    property Message_:               string                           Index (IS_OPTN) read FMessage_ write SetMessage_ stored Message__Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderRequestContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderRequestContainerType = class(TRemotable)
  private
    FCorrelationID: string;
    FCorrelationID_Specified: boolean;
    FItemID: string;
    FItemID_Specified: boolean;
    FMemberMessage: MemberMessageType;
    FMemberMessage_Specified: boolean;
    procedure SetCorrelationID(Index: Integer; const Astring: string);
    function  CorrelationID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const Astring: string);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
    function  MemberMessage_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CorrelationID: string             Index (IS_OPTN) read FCorrelationID write SetCorrelationID stored CorrelationID_Specified;
    property ItemID:        string             Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property MemberMessage: MemberMessageType  Index (IS_OPTN) read FMemberMessage write SetMemberMessage stored MemberMessage_Specified;
  end;

  FeedbackDetailArrayType = array of FeedbackDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : FeedbackInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackInfoType = class(TRemotable)
  private
    FCommentText: string;
    FCommentText_Specified: boolean;
    FCommentType: CommentTypeCodeType;
    FCommentType_Specified: boolean;
    FTargetUser: UserIDType;
    FTargetUser_Specified: boolean;
    procedure SetCommentText(Index: Integer; const Astring: string);
    function  CommentText_Specified(Index: Integer): boolean;
    procedure SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
    function  CommentType_Specified(Index: Integer): boolean;
    procedure SetTargetUser(Index: Integer; const AUserIDType: UserIDType);
    function  TargetUser_Specified(Index: Integer): boolean;
  published
    property CommentText: string               Index (IS_OPTN) read FCommentText write SetCommentText stored CommentText_Specified;
    property CommentType: CommentTypeCodeType  Index (IS_OPTN) read FCommentType write SetCommentType stored CommentType_Specified;
    property TargetUser:  UserIDType           Index (IS_OPTN) read FTargetUser write SetTargetUser stored TargetUser_Specified;
  end;

  Array_Of_CommentTypeCodeType = array of CommentTypeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : eBayPLUSPreferenceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayPLUSPreferenceType = class(TRemotable)
  private
    FCountry: CountryCodeType;
    FCountry_Specified: boolean;
    FOptInStatus: Boolean;
    FOptInStatus_Specified: boolean;
    FListingPreference: Boolean;
    FListingPreference_Specified: boolean;
    procedure SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  Country_Specified(Index: Integer): boolean;
    procedure SetOptInStatus(Index: Integer; const ABoolean: Boolean);
    function  OptInStatus_Specified(Index: Integer): boolean;
    procedure SetListingPreference(Index: Integer; const ABoolean: Boolean);
    function  ListingPreference_Specified(Index: Integer): boolean;
  published
    property Country:           CountryCodeType  Index (IS_OPTN) read FCountry write SetCountry stored Country_Specified;
    property OptInStatus:       Boolean          Index (IS_OPTN) read FOptInStatus write SetOptInStatus stored OptInStatus_Specified;
    property ListingPreference: Boolean          Index (IS_OPTN) read FListingPreference write SetListingPreference stored ListingPreference_Specified;
  end;



  // ************************************************************************ //
  // XML       : CountryDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CountryDetailsType = class(TRemotable)
  private
    FCountry: CountryCodeType;
    FCountry_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  Country_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Country:       CountryCodeType  Index (IS_OPTN) read FCountry write SetCountry stored Country_Specified;
    property Description:   string           Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion: string           Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime      Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;

  Array_Of_CountryCodeType = array of CountryCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : VeROReportItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROReportItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FVeROReasonCodeID: Int64;
    FVeROReasonCodeID_Specified: boolean;
    FMessageToSeller: string;
    FMessageToSeller_Specified: boolean;
    FCopyEmailToRightsOwner: Boolean;
    FCopyEmailToRightsOwner_Specified: boolean;
    FRegion: Array_Of_ShippingRegionCodeType;
    FRegion_Specified: boolean;
    FCountry: Array_Of_CountryCodeType;
    FCountry_Specified: boolean;
    FPatent: string;
    FPatent_Specified: boolean;
    FDetailedMessage: string;
    FDetailedMessage_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetVeROReasonCodeID(Index: Integer; const AInt64: Int64);
    function  VeROReasonCodeID_Specified(Index: Integer): boolean;
    procedure SetMessageToSeller(Index: Integer; const Astring: string);
    function  MessageToSeller_Specified(Index: Integer): boolean;
    procedure SetCopyEmailToRightsOwner(Index: Integer; const ABoolean: Boolean);
    function  CopyEmailToRightsOwner_Specified(Index: Integer): boolean;
    procedure SetRegion(Index: Integer; const AArray_Of_ShippingRegionCodeType: Array_Of_ShippingRegionCodeType);
    function  Region_Specified(Index: Integer): boolean;
    procedure SetCountry(Index: Integer; const AArray_Of_CountryCodeType: Array_Of_CountryCodeType);
    function  Country_Specified(Index: Integer): boolean;
    procedure SetPatent(Index: Integer; const Astring: string);
    function  Patent_Specified(Index: Integer): boolean;
    procedure SetDetailedMessage(Index: Integer; const Astring: string);
    function  DetailedMessage_Specified(Index: Integer): boolean;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property VeROReasonCodeID:       Int64                            Index (IS_OPTN) read FVeROReasonCodeID write SetVeROReasonCodeID stored VeROReasonCodeID_Specified;
    property MessageToSeller:        string                           Index (IS_OPTN) read FMessageToSeller write SetMessageToSeller stored MessageToSeller_Specified;
    property CopyEmailToRightsOwner: Boolean                          Index (IS_OPTN) read FCopyEmailToRightsOwner write SetCopyEmailToRightsOwner stored CopyEmailToRightsOwner_Specified;
    property Region:                 Array_Of_ShippingRegionCodeType  Index (IS_OPTN or IS_UNBD) read FRegion write SetRegion stored Region_Specified;
    property Country:                Array_Of_CountryCodeType         Index (IS_OPTN or IS_UNBD) read FCountry write SetCountry stored Country_Specified;
    property Patent:                 string                           Index (IS_OPTN) read FPatent write SetPatent stored Patent_Specified;
    property DetailedMessage:        string                           Index (IS_OPTN) read FDetailedMessage write SetDetailedMessage stored DetailedMessage_Specified;
  end;

  NameValueListArrayType = array of NameValueListType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellingManagerProductSpecificsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerProductSpecificsType = class(TRemotable)
  private
    FPrimaryCategoryID: string;
    FPrimaryCategoryID_Specified: boolean;
    FVariations: VariationsType;
    FVariations_Specified: boolean;
    FItemSpecifics: NameValueListArrayType;
    FItemSpecifics_Specified: boolean;
    procedure SetPrimaryCategoryID(Index: Integer; const Astring: string);
    function  PrimaryCategoryID_Specified(Index: Integer): boolean;
    procedure SetVariations(Index: Integer; const AVariationsType: VariationsType);
    function  Variations_Specified(Index: Integer): boolean;
    procedure SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  ItemSpecifics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PrimaryCategoryID: string                  Index (IS_OPTN) read FPrimaryCategoryID write SetPrimaryCategoryID stored PrimaryCategoryID_Specified;
    property Variations:        VariationsType          Index (IS_OPTN) read FVariations write SetVariations stored Variations_Specified;
    property ItemSpecifics:     NameValueListArrayType  Index (IS_OPTN) read FItemSpecifics write SetItemSpecifics stored ItemSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariationKeyType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationKeyType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FVariationSpecifics: NameValueListArrayType;
    FVariationSpecifics_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID:             ItemIDType              Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property VariationSpecifics: NameValueListArrayType  Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariationProductListingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationProductListingDetailsType = class(TRemotable)
  private
    FISBN: string;
    FISBN_Specified: boolean;
    FUPC: string;
    FUPC_Specified: boolean;
    FEAN: string;
    FEAN_Specified: boolean;
    FProductReferenceID: string;
    FProductReferenceID_Specified: boolean;
    FNameValueList: NameValueListArrayType;
    FNameValueList_Specified: boolean;
    procedure SetISBN(Index: Integer; const Astring: string);
    function  ISBN_Specified(Index: Integer): boolean;
    procedure SetUPC(Index: Integer; const Astring: string);
    function  UPC_Specified(Index: Integer): boolean;
    procedure SetEAN(Index: Integer; const Astring: string);
    function  EAN_Specified(Index: Integer): boolean;
    procedure SetProductReferenceID(Index: Integer; const Astring: string);
    function  ProductReferenceID_Specified(Index: Integer): boolean;
    procedure SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  NameValueList_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ISBN:               string                  Index (IS_OPTN) read FISBN write SetISBN stored ISBN_Specified;
    property UPC:                string                  Index (IS_OPTN) read FUPC write SetUPC stored UPC_Specified;
    property EAN:                string                  Index (IS_OPTN) read FEAN write SetEAN stored EAN_Specified;
    property ProductReferenceID: string                  Index (IS_OPTN) read FProductReferenceID write SetProductReferenceID stored ProductReferenceID_Specified;
    property NameValueList:      NameValueListArrayType  Index (IS_OPTN or IS_UNBD) read FNameValueList write SetNameValueList stored NameValueList_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariationsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationsType = class(TRemotable)
  private
    FVariation: Array_Of_VariationType;
    FVariation_Specified: boolean;
    FPictures: Array_Of_PicturesType;
    FPictures_Specified: boolean;
    FVariationSpecificsSet: NameValueListArrayType;
    FVariationSpecificsSet_Specified: boolean;
    FModifyNameList: ModifyNameArrayType;
    FModifyNameList_Specified: boolean;
    procedure SetVariation(Index: Integer; const AArray_Of_VariationType: Array_Of_VariationType);
    function  Variation_Specified(Index: Integer): boolean;
    procedure SetPictures(Index: Integer; const AArray_Of_PicturesType: Array_Of_PicturesType);
    function  Pictures_Specified(Index: Integer): boolean;
    procedure SetVariationSpecificsSet(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecificsSet_Specified(Index: Integer): boolean;
    procedure SetModifyNameList(Index: Integer; const AModifyNameArrayType: ModifyNameArrayType);
    function  ModifyNameList_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Variation:             Array_Of_VariationType  Index (IS_OPTN or IS_UNBD) read FVariation write SetVariation stored Variation_Specified;
    property Pictures:              Array_Of_PicturesType   Index (IS_OPTN or IS_UNBD) read FPictures write SetPictures stored Pictures_Specified;
    property VariationSpecificsSet: NameValueListArrayType  Index (IS_OPTN) read FVariationSpecificsSet write SetVariationSpecificsSet stored VariationSpecificsSet_Specified;
    property ModifyNameList:        ModifyNameArrayType     Index (IS_OPTN) read FModifyNameList write SetModifyNameList stored ModifyNameList_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemCompatibilityType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemCompatibilityType = class(TRemotable)
  private
    FDelete: Boolean;
    FDelete_Specified: boolean;
    FNameValueList: NameValueListArrayType;
    FNameValueList_Specified: boolean;
    FCompatibilityNotes: string;
    FCompatibilityNotes_Specified: boolean;
    procedure SetDelete(Index: Integer; const ABoolean: Boolean);
    function  Delete_Specified(Index: Integer): boolean;
    procedure SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  NameValueList_Specified(Index: Integer): boolean;
    procedure SetCompatibilityNotes(Index: Integer; const Astring: string);
    function  CompatibilityNotes_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Delete:             Boolean                 Index (IS_OPTN) read FDelete write SetDelete stored Delete_Specified;
    property NameValueList:      NameValueListArrayType  Index (IS_OPTN or IS_UNBD) read FNameValueList write SetNameValueList stored NameValueList_Specified;
    property CompatibilityNotes: string                  Index (IS_OPTN) read FCompatibilityNotes write SetCompatibilityNotes stored CompatibilityNotes_Specified;
  end;



  // ************************************************************************ //
  // XML       : ProductListingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductListingDetailsType = class(TRemotable)
  private
    FIncludeStockPhotoURL: Boolean;
    FIncludeStockPhotoURL_Specified: boolean;
    FUseStockPhotoURLAsGallery: Boolean;
    FUseStockPhotoURLAsGallery_Specified: boolean;
    FStockPhotoURL: string;
    FStockPhotoURL_Specified: boolean;
    FCopyright: SellerExcludeShipToLocationPreferencesType;
    FCopyright_Specified: boolean;
    FProductReferenceID: string;
    FProductReferenceID_Specified: boolean;
    FDetailsURL: string;
    FDetailsURL_Specified: boolean;
    FProductDetailsURL: string;
    FProductDetailsURL_Specified: boolean;
    FReturnSearchResultOnDuplicates: Boolean;
    FReturnSearchResultOnDuplicates_Specified: boolean;
    FISBN: string;
    FISBN_Specified: boolean;
    FUPC: string;
    FUPC_Specified: boolean;
    FEAN: string;
    FEAN_Specified: boolean;
    FBrandMPN: BrandMPNType;
    FBrandMPN_Specified: boolean;
    FTicketListingDetails: TicketListingDetailsType;
    FTicketListingDetails_Specified: boolean;
    FUseFirstProduct: Boolean;
    FUseFirstProduct_Specified: boolean;
    FIncludeeBayProductDetails: Boolean;
    FIncludeeBayProductDetails_Specified: boolean;
    FNameValueList: NameValueListArrayType;
    FNameValueList_Specified: boolean;
    procedure SetIncludeStockPhotoURL(Index: Integer; const ABoolean: Boolean);
    function  IncludeStockPhotoURL_Specified(Index: Integer): boolean;
    procedure SetUseStockPhotoURLAsGallery(Index: Integer; const ABoolean: Boolean);
    function  UseStockPhotoURLAsGallery_Specified(Index: Integer): boolean;
    procedure SetStockPhotoURL(Index: Integer; const Astring: string);
    function  StockPhotoURL_Specified(Index: Integer): boolean;
    procedure SetCopyright(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Copyright_Specified(Index: Integer): boolean;
    procedure SetProductReferenceID(Index: Integer; const Astring: string);
    function  ProductReferenceID_Specified(Index: Integer): boolean;
    procedure SetDetailsURL(Index: Integer; const Astring: string);
    function  DetailsURL_Specified(Index: Integer): boolean;
    procedure SetProductDetailsURL(Index: Integer; const Astring: string);
    function  ProductDetailsURL_Specified(Index: Integer): boolean;
    procedure SetReturnSearchResultOnDuplicates(Index: Integer; const ABoolean: Boolean);
    function  ReturnSearchResultOnDuplicates_Specified(Index: Integer): boolean;
    procedure SetISBN(Index: Integer; const Astring: string);
    function  ISBN_Specified(Index: Integer): boolean;
    procedure SetUPC(Index: Integer; const Astring: string);
    function  UPC_Specified(Index: Integer): boolean;
    procedure SetEAN(Index: Integer; const Astring: string);
    function  EAN_Specified(Index: Integer): boolean;
    procedure SetBrandMPN(Index: Integer; const ABrandMPNType: BrandMPNType);
    function  BrandMPN_Specified(Index: Integer): boolean;
    procedure SetTicketListingDetails(Index: Integer; const ATicketListingDetailsType: TicketListingDetailsType);
    function  TicketListingDetails_Specified(Index: Integer): boolean;
    procedure SetUseFirstProduct(Index: Integer; const ABoolean: Boolean);
    function  UseFirstProduct_Specified(Index: Integer): boolean;
    procedure SetIncludeeBayProductDetails(Index: Integer; const ABoolean: Boolean);
    function  IncludeeBayProductDetails_Specified(Index: Integer): boolean;
    procedure SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  NameValueList_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property IncludeStockPhotoURL:           Boolean                                     Index (IS_OPTN) read FIncludeStockPhotoURL write SetIncludeStockPhotoURL stored IncludeStockPhotoURL_Specified;
    property UseStockPhotoURLAsGallery:      Boolean                                     Index (IS_OPTN) read FUseStockPhotoURLAsGallery write SetUseStockPhotoURLAsGallery stored UseStockPhotoURLAsGallery_Specified;
    property StockPhotoURL:                  string                                      Index (IS_OPTN) read FStockPhotoURL write SetStockPhotoURL stored StockPhotoURL_Specified;
    property Copyright:                      SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCopyright write SetCopyright stored Copyright_Specified;
    property ProductReferenceID:             string                                      Index (IS_OPTN) read FProductReferenceID write SetProductReferenceID stored ProductReferenceID_Specified;
    property DetailsURL:                     string                                      Index (IS_OPTN) read FDetailsURL write SetDetailsURL stored DetailsURL_Specified;
    property ProductDetailsURL:              string                                      Index (IS_OPTN) read FProductDetailsURL write SetProductDetailsURL stored ProductDetailsURL_Specified;
    property ReturnSearchResultOnDuplicates: Boolean                                     Index (IS_OPTN) read FReturnSearchResultOnDuplicates write SetReturnSearchResultOnDuplicates stored ReturnSearchResultOnDuplicates_Specified;
    property ISBN:                           string                                      Index (IS_OPTN) read FISBN write SetISBN stored ISBN_Specified;
    property UPC:                            string                                      Index (IS_OPTN) read FUPC write SetUPC stored UPC_Specified;
    property EAN:                            string                                      Index (IS_OPTN) read FEAN write SetEAN stored EAN_Specified;
    property BrandMPN:                       BrandMPNType                                Index (IS_OPTN) read FBrandMPN write SetBrandMPN stored BrandMPN_Specified;
    property TicketListingDetails:           TicketListingDetailsType                    Index (IS_OPTN) read FTicketListingDetails write SetTicketListingDetails stored TicketListingDetails_Specified;
    property UseFirstProduct:                Boolean                                     Index (IS_OPTN) read FUseFirstProduct write SetUseFirstProduct stored UseFirstProduct_Specified;
    property IncludeeBayProductDetails:      Boolean                                     Index (IS_OPTN) read FIncludeeBayProductDetails write SetIncludeeBayProductDetails stored IncludeeBayProductDetails_Specified;
    property NameValueList:                  NameValueListArrayType                      Index (IS_OPTN or IS_UNBD) read FNameValueList write SetNameValueList stored NameValueList_Specified;
  end;



  // ************************************************************************ //
  // XML       : VariationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationType = class(TRemotable)
  private
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FStartPrice: AmountType;
    FStartPrice_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FVariationSpecifics: NameValueListArrayType;
    FVariationSpecifics_Specified: boolean;
    FUnitsAvailable: Integer;
    FUnitsAvailable_Specified: boolean;
    FUnitCost: AmountType;
    FUnitCost_Specified: boolean;
    FSellingStatus: SellingStatusType;
    FSellingStatus_Specified: boolean;
    FVariationTitle: string;
    FVariationTitle_Specified: boolean;
    FVariationViewItemURL: string;
    FVariationViewItemURL_Specified: boolean;
    FDelete: Boolean;
    FDelete_Specified: boolean;
    FSellingManagerProductInventoryStatus: SellingManagerProductInventoryStatusType;
    FSellingManagerProductInventoryStatus_Specified: boolean;
    FWatchCount: Int64;
    FWatchCount_Specified: boolean;
    FPrivateNotes: string;
    FPrivateNotes_Specified: boolean;
    FDiscountPriceInfo: DiscountPriceInfoType;
    FDiscountPriceInfo_Specified: boolean;
    FVariationProductListingDetails: VariationProductListingDetailsType;
    FVariationProductListingDetails_Specified: boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetStartPrice(Index: Integer; const AAmountType: AmountType);
    function  StartPrice_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
    procedure SetUnitsAvailable(Index: Integer; const AInteger: Integer);
    function  UnitsAvailable_Specified(Index: Integer): boolean;
    procedure SetUnitCost(Index: Integer; const AAmountType: AmountType);
    function  UnitCost_Specified(Index: Integer): boolean;
    procedure SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
    function  SellingStatus_Specified(Index: Integer): boolean;
    procedure SetVariationTitle(Index: Integer; const Astring: string);
    function  VariationTitle_Specified(Index: Integer): boolean;
    procedure SetVariationViewItemURL(Index: Integer; const Astring: string);
    function  VariationViewItemURL_Specified(Index: Integer): boolean;
    procedure SetDelete(Index: Integer; const ABoolean: Boolean);
    function  Delete_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductInventoryStatus(Index: Integer; const ASellingManagerProductInventoryStatusType: SellingManagerProductInventoryStatusType);
    function  SellingManagerProductInventoryStatus_Specified(Index: Integer): boolean;
    procedure SetWatchCount(Index: Integer; const AInt64: Int64);
    function  WatchCount_Specified(Index: Integer): boolean;
    procedure SetPrivateNotes(Index: Integer; const Astring: string);
    function  PrivateNotes_Specified(Index: Integer): boolean;
    procedure SetDiscountPriceInfo(Index: Integer; const ADiscountPriceInfoType: DiscountPriceInfoType);
    function  DiscountPriceInfo_Specified(Index: Integer): boolean;
    procedure SetVariationProductListingDetails(Index: Integer; const AVariationProductListingDetailsType: VariationProductListingDetailsType);
    function  VariationProductListingDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SKU:                                  SKUType                                   Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property StartPrice:                           AmountType                                Index (IS_OPTN) read FStartPrice write SetStartPrice stored StartPrice_Specified;
    property Quantity:                             Integer                                   Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property VariationSpecifics:                   NameValueListArrayType                    Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
    property UnitsAvailable:                       Integer                                   Index (IS_OPTN) read FUnitsAvailable write SetUnitsAvailable stored UnitsAvailable_Specified;
    property UnitCost:                             AmountType                                Index (IS_OPTN) read FUnitCost write SetUnitCost stored UnitCost_Specified;
    property SellingStatus:                        SellingStatusType                         Index (IS_OPTN) read FSellingStatus write SetSellingStatus stored SellingStatus_Specified;
    property VariationTitle:                       string                                    Index (IS_OPTN) read FVariationTitle write SetVariationTitle stored VariationTitle_Specified;
    property VariationViewItemURL:                 string                                    Index (IS_OPTN) read FVariationViewItemURL write SetVariationViewItemURL stored VariationViewItemURL_Specified;
    property Delete:                               Boolean                                   Index (IS_OPTN) read FDelete write SetDelete stored Delete_Specified;
    property SellingManagerProductInventoryStatus: SellingManagerProductInventoryStatusType  Index (IS_OPTN) read FSellingManagerProductInventoryStatus write SetSellingManagerProductInventoryStatus stored SellingManagerProductInventoryStatus_Specified;
    property WatchCount:                           Int64                                     Index (IS_OPTN) read FWatchCount write SetWatchCount stored WatchCount_Specified;
    property PrivateNotes:                         string                                    Index (IS_OPTN) read FPrivateNotes write SetPrivateNotes stored PrivateNotes_Specified;
    property DiscountPriceInfo:                    DiscountPriceInfoType                     Index (IS_OPTN) read FDiscountPriceInfo write SetDiscountPriceInfo stored DiscountPriceInfo_Specified;
    property VariationProductListingDetails:       VariationProductListingDetailsType        Index (IS_OPTN) read FVariationProductListingDetails write SetVariationProductListingDetails stored VariationProductListingDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ContextSearchAssetType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ContextSearchAssetType = class(TRemotable)
  private
    FKeyword: string;
    FKeyword_Specified: boolean;
    FCategory: CategoryType;
    FCategory_Specified: boolean;
    FRanking: Integer;
    FRanking_Specified: boolean;
    procedure SetKeyword(Index: Integer; const Astring: string);
    function  Keyword_Specified(Index: Integer): boolean;
    procedure SetCategory(Index: Integer; const ACategoryType: CategoryType);
    function  Category_Specified(Index: Integer): boolean;
    procedure SetRanking(Index: Integer; const AInteger: Integer);
    function  Ranking_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Keyword:  string        Index (IS_OPTN) read FKeyword write SetKeyword stored Keyword_Specified;
    property Category: CategoryType  Index (IS_OPTN) read FCategory write SetCategory stored Category_Specified;
    property Ranking:  Integer       Index (IS_OPTN) read FRanking write SetRanking stored Ranking_Specified;
  end;



  // ************************************************************************ //
  // XML       : ThemeGroupType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ThemeGroupType = class(TRemotable)
  private
    FGroupID: Integer;
    FGroupID_Specified: boolean;
    FGroupName: string;
    FGroupName_Specified: boolean;
    FThemeID: NumberOfPolicyViolationsDetailsType;
    FThemeID_Specified: boolean;
    FThemeTotal: Integer;
    FThemeTotal_Specified: boolean;
    procedure SetGroupID(Index: Integer; const AInteger: Integer);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetGroupName(Index: Integer; const Astring: string);
    function  GroupName_Specified(Index: Integer): boolean;
    procedure SetThemeID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  ThemeID_Specified(Index: Integer): boolean;
    procedure SetThemeTotal(Index: Integer; const AInteger: Integer);
    function  ThemeTotal_Specified(Index: Integer): boolean;
  published
    property GroupID:    Integer                              Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property GroupName:  string                               Index (IS_OPTN) read FGroupName write SetGroupName stored GroupName_Specified;
    property ThemeID:    NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FThemeID write SetThemeID stored ThemeID_Specified;
    property ThemeTotal: Integer                              Index (IS_OPTN) read FThemeTotal write SetThemeTotal stored ThemeTotal_Specified;
  end;



  // ************************************************************************ //
  // XML       : PickupInStoreDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PickupInStoreDetailsType = class(TRemotable)
  private
    FEligibleForPickupInStore: Boolean;
    FEligibleForPickupInStore_Specified: boolean;
    FEligibleForPickupDropOff: Boolean;
    FEligibleForPickupDropOff_Specified: boolean;
    procedure SetEligibleForPickupInStore(Index: Integer; const ABoolean: Boolean);
    function  EligibleForPickupInStore_Specified(Index: Integer): boolean;
    procedure SetEligibleForPickupDropOff(Index: Integer; const ABoolean: Boolean);
    function  EligibleForPickupDropOff_Specified(Index: Integer): boolean;
  published
    property EligibleForPickupInStore: Boolean  Index (IS_OPTN) read FEligibleForPickupInStore write SetEligibleForPickupInStore stored EligibleForPickupInStore_Specified;
    property EligibleForPickupDropOff: Boolean  Index (IS_OPTN) read FEligibleForPickupDropOff write SetEligibleForPickupDropOff stored EligibleForPickupDropOff_Specified;
  end;

  MyMessagesExternalMessageIDArrayType = array of MyMessagesExternalMessageIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : MyMessagesSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesSummaryType = class(TRemotable)
  private
    FFolderSummary: Array_Of_MyMessagesFolderSummaryType;
    FFolderSummary_Specified: boolean;
    FNewAlertCount: Integer;
    FNewAlertCount_Specified: boolean;
    FNewMessageCount: Integer;
    FNewMessageCount_Specified: boolean;
    FUnresolvedAlertCount: Integer;
    FUnresolvedAlertCount_Specified: boolean;
    FFlaggedMessageCount: Integer;
    FFlaggedMessageCount_Specified: boolean;
    FTotalAlertCount: Integer;
    FTotalAlertCount_Specified: boolean;
    FTotalMessageCount: Integer;
    FTotalMessageCount_Specified: boolean;
    FNewHighPriorityCount: Integer;
    FNewHighPriorityCount_Specified: boolean;
    FTotalHighPriorityCount: Integer;
    FTotalHighPriorityCount_Specified: boolean;
    procedure SetFolderSummary(Index: Integer; const AArray_Of_MyMessagesFolderSummaryType: Array_Of_MyMessagesFolderSummaryType);
    function  FolderSummary_Specified(Index: Integer): boolean;
    procedure SetNewAlertCount(Index: Integer; const AInteger: Integer);
    function  NewAlertCount_Specified(Index: Integer): boolean;
    procedure SetNewMessageCount(Index: Integer; const AInteger: Integer);
    function  NewMessageCount_Specified(Index: Integer): boolean;
    procedure SetUnresolvedAlertCount(Index: Integer; const AInteger: Integer);
    function  UnresolvedAlertCount_Specified(Index: Integer): boolean;
    procedure SetFlaggedMessageCount(Index: Integer; const AInteger: Integer);
    function  FlaggedMessageCount_Specified(Index: Integer): boolean;
    procedure SetTotalAlertCount(Index: Integer; const AInteger: Integer);
    function  TotalAlertCount_Specified(Index: Integer): boolean;
    procedure SetTotalMessageCount(Index: Integer; const AInteger: Integer);
    function  TotalMessageCount_Specified(Index: Integer): boolean;
    procedure SetNewHighPriorityCount(Index: Integer; const AInteger: Integer);
    function  NewHighPriorityCount_Specified(Index: Integer): boolean;
    procedure SetTotalHighPriorityCount(Index: Integer; const AInteger: Integer);
    function  TotalHighPriorityCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FolderSummary:          Array_Of_MyMessagesFolderSummaryType  Index (IS_OPTN or IS_UNBD) read FFolderSummary write SetFolderSummary stored FolderSummary_Specified;
    property NewAlertCount:          Integer                               Index (IS_OPTN) read FNewAlertCount write SetNewAlertCount stored NewAlertCount_Specified;
    property NewMessageCount:        Integer                               Index (IS_OPTN) read FNewMessageCount write SetNewMessageCount stored NewMessageCount_Specified;
    property UnresolvedAlertCount:   Integer                               Index (IS_OPTN) read FUnresolvedAlertCount write SetUnresolvedAlertCount stored UnresolvedAlertCount_Specified;
    property FlaggedMessageCount:    Integer                               Index (IS_OPTN) read FFlaggedMessageCount write SetFlaggedMessageCount stored FlaggedMessageCount_Specified;
    property TotalAlertCount:        Integer                               Index (IS_OPTN) read FTotalAlertCount write SetTotalAlertCount stored TotalAlertCount_Specified;
    property TotalMessageCount:      Integer                               Index (IS_OPTN) read FTotalMessageCount write SetTotalMessageCount stored TotalMessageCount_Specified;
    property NewHighPriorityCount:   Integer                               Index (IS_OPTN) read FNewHighPriorityCount write SetNewHighPriorityCount stored NewHighPriorityCount_Specified;
    property TotalHighPriorityCount: Integer                               Index (IS_OPTN) read FTotalHighPriorityCount write SetTotalHighPriorityCount stored TotalHighPriorityCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ASQPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ASQPreferencesType = class(TRemotable)
  private
    FResetDefaultSubjects: Boolean;
    FResetDefaultSubjects_Specified: boolean;
    FSubject: SellerExcludeShipToLocationPreferencesType;
    FSubject_Specified: boolean;
    procedure SetResetDefaultSubjects(Index: Integer; const ABoolean: Boolean);
    function  ResetDefaultSubjects_Specified(Index: Integer): boolean;
    procedure SetSubject(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Subject_Specified(Index: Integer): boolean;
  published
    property ResetDefaultSubjects: Boolean                                     Index (IS_OPTN) read FResetDefaultSubjects write SetResetDefaultSubjects stored ResetDefaultSubjects_Specified;
    property Subject:              SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FSubject write SetSubject stored Subject_Specified;
  end;

  MyMessagesAlertArrayType = array of MyMessagesAlertType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : MyeBaySelectionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBaySelectionType = class(TRemotable)
  private
    FInclude: Boolean;
    FInclude_Specified: boolean;
    FIncludeItemCount: Boolean;
    FIncludeItemCount_Specified: boolean;
    FIncludeFavoriteSearcheCount: Boolean;
    FIncludeFavoriteSearcheCount_Specified: boolean;
    FIncludeFavoriteSellerCount: Boolean;
    FIncludeFavoriteSellerCount_Specified: boolean;
    FSort: SortOrderCodeType;
    FSort_Specified: boolean;
    FMaxResults: Integer;
    FMaxResults_Specified: boolean;
    FUserDefinedListName: string;
    FUserDefinedListName_Specified: boolean;
    FIncludeListContents: Boolean;
    FIncludeListContents_Specified: boolean;
    procedure SetInclude(Index: Integer; const ABoolean: Boolean);
    function  Include_Specified(Index: Integer): boolean;
    procedure SetIncludeItemCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeItemCount_Specified(Index: Integer): boolean;
    procedure SetIncludeFavoriteSearcheCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeFavoriteSearcheCount_Specified(Index: Integer): boolean;
    procedure SetIncludeFavoriteSellerCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeFavoriteSellerCount_Specified(Index: Integer): boolean;
    procedure SetSort(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetMaxResults(Index: Integer; const AInteger: Integer);
    function  MaxResults_Specified(Index: Integer): boolean;
    procedure SetUserDefinedListName(Index: Integer; const Astring: string);
    function  UserDefinedListName_Specified(Index: Integer): boolean;
    procedure SetIncludeListContents(Index: Integer; const ABoolean: Boolean);
    function  IncludeListContents_Specified(Index: Integer): boolean;
  published
    property Include:                     Boolean            Index (IS_OPTN) read FInclude write SetInclude stored Include_Specified;
    property IncludeItemCount:            Boolean            Index (IS_OPTN) read FIncludeItemCount write SetIncludeItemCount stored IncludeItemCount_Specified;
    property IncludeFavoriteSearcheCount: Boolean            Index (IS_OPTN) read FIncludeFavoriteSearcheCount write SetIncludeFavoriteSearcheCount stored IncludeFavoriteSearcheCount_Specified;
    property IncludeFavoriteSellerCount:  Boolean            Index (IS_OPTN) read FIncludeFavoriteSellerCount write SetIncludeFavoriteSellerCount stored IncludeFavoriteSellerCount_Specified;
    property Sort:                        SortOrderCodeType  Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property MaxResults:                  Integer            Index (IS_OPTN) read FMaxResults write SetMaxResults stored MaxResults_Specified;
    property UserDefinedListName:         string             Index (IS_OPTN) read FUserDefinedListName write SetUserDefinedListName stored UserDefinedListName_Specified;
    property IncludeListContents:         Boolean            Index (IS_OPTN) read FIncludeListContents write SetIncludeListContents stored IncludeListContents_Specified;
  end;



  // ************************************************************************ //
  // XML       : BidAssistantListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidAssistantListType = class(TRemotable)
  private
    FBidGroupID: Int64;
    FBidGroupID_Specified: boolean;
    FIncludeNotes: Boolean;
    FIncludeNotes_Specified: boolean;
    procedure SetBidGroupID(Index: Integer; const AInt64: Int64);
    function  BidGroupID_Specified(Index: Integer): boolean;
    procedure SetIncludeNotes(Index: Integer; const ABoolean: Boolean);
    function  IncludeNotes_Specified(Index: Integer): boolean;
  published
    property BidGroupID:   Int64    Index (IS_OPTN) read FBidGroupID write SetBidGroupID stored BidGroupID_Specified;
    property IncludeNotes: Boolean  Index (IS_OPTN) read FIncludeNotes write SetIncludeNotes stored IncludeNotes_Specified;
  end;

  MyMessagesMessageArrayType = array of MyMessagesMessageType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  TransactionArrayType = array of TransactionType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ItemListCustomizationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemListCustomizationType = class(TRemotable)
  private
    FInclude: Boolean;
    FInclude_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FSort: ItemSortTypeCodeType;
    FSort_Specified: boolean;
    FDurationInDays: Integer;
    FDurationInDays_Specified: boolean;
    FIncludeNotes: Boolean;
    FIncludeNotes_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FOrderStatusFilter: OrderStatusFilterCodeType;
    FOrderStatusFilter_Specified: boolean;
    procedure SetInclude(Index: Integer; const ABoolean: Boolean);
    function  Include_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetSort(Index: Integer; const AItemSortTypeCodeType: ItemSortTypeCodeType);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetDurationInDays(Index: Integer; const AInteger: Integer);
    function  DurationInDays_Specified(Index: Integer): boolean;
    procedure SetIncludeNotes(Index: Integer; const ABoolean: Boolean);
    function  IncludeNotes_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetOrderStatusFilter(Index: Integer; const AOrderStatusFilterCodeType: OrderStatusFilterCodeType);
    function  OrderStatusFilter_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Include:           Boolean                    Index (IS_OPTN) read FInclude write SetInclude stored Include_Specified;
    property ListingType:       ListingTypeCodeType        Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property Sort:              ItemSortTypeCodeType       Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property DurationInDays:    Integer                    Index (IS_OPTN) read FDurationInDays write SetDurationInDays stored DurationInDays_Specified;
    property IncludeNotes:      Boolean                    Index (IS_OPTN) read FIncludeNotes write SetIncludeNotes stored IncludeNotes_Specified;
    property Pagination:        PaginationType             Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property OrderStatusFilter: OrderStatusFilterCodeType  Index (IS_OPTN) read FOrderStatusFilter write SetOrderStatusFilter stored OrderStatusFilter_Specified;
  end;

  Array_Of_TransactionPlatformCodeType = array of TransactionPlatformCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : SellingManagerSoldTransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerSoldTransactionType = class(TRemotable)
  private
    FInvoiceNumber: string;
    FInvoiceNumber_Specified: boolean;
    FTransactionID: Int64;
    FTransactionID_Specified: boolean;
    FSaleRecordID: Int64;
    FSaleRecordID_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FQuantitySold: Integer;
    FQuantitySold_Specified: boolean;
    FItemPrice: AmountType;
    FItemPrice_Specified: boolean;
    FSubtotalAmount: AmountType;
    FSubtotalAmount_Specified: boolean;
    FItemTitle: string;
    FItemTitle_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FRelisted: Boolean;
    FRelisted_Specified: boolean;
    FWatchCount: Integer;
    FWatchCount_Specified: boolean;
    FStartPrice: AmountType;
    FStartPrice_Specified: boolean;
    FReservePrice: AmountType;
    FReservePrice_Specified: boolean;
    FSecondChanceOfferSent: Boolean;
    FSecondChanceOfferSent_Specified: boolean;
    FCustomLabel: string;
    FCustomLabel_Specified: boolean;
    FSoldOn: TransactionPlatformCodeType;
    FSoldOn_Specified: boolean;
    FListedOn: Array_Of_TransactionPlatformCodeType;
    FListedOn_Specified: boolean;
    FShipment: ShipmentType;
    FShipment_Specified: boolean;
    FCharityListing: Boolean;
    FCharityListing_Specified: boolean;
    FVariation: VariationType;
    FVariation_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetInvoiceNumber(Index: Integer; const Astring: string);
    function  InvoiceNumber_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const AInt64: Int64);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetSaleRecordID(Index: Integer; const AInt64: Int64);
    function  SaleRecordID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetQuantitySold(Index: Integer; const AInteger: Integer);
    function  QuantitySold_Specified(Index: Integer): boolean;
    procedure SetItemPrice(Index: Integer; const AAmountType: AmountType);
    function  ItemPrice_Specified(Index: Integer): boolean;
    procedure SetSubtotalAmount(Index: Integer; const AAmountType: AmountType);
    function  SubtotalAmount_Specified(Index: Integer): boolean;
    procedure SetItemTitle(Index: Integer; const Astring: string);
    function  ItemTitle_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetRelisted(Index: Integer; const ABoolean: Boolean);
    function  Relisted_Specified(Index: Integer): boolean;
    procedure SetWatchCount(Index: Integer; const AInteger: Integer);
    function  WatchCount_Specified(Index: Integer): boolean;
    procedure SetStartPrice(Index: Integer; const AAmountType: AmountType);
    function  StartPrice_Specified(Index: Integer): boolean;
    procedure SetReservePrice(Index: Integer; const AAmountType: AmountType);
    function  ReservePrice_Specified(Index: Integer): boolean;
    procedure SetSecondChanceOfferSent(Index: Integer; const ABoolean: Boolean);
    function  SecondChanceOfferSent_Specified(Index: Integer): boolean;
    procedure SetCustomLabel(Index: Integer; const Astring: string);
    function  CustomLabel_Specified(Index: Integer): boolean;
    procedure SetSoldOn(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
    function  SoldOn_Specified(Index: Integer): boolean;
    procedure SetListedOn(Index: Integer; const AArray_Of_TransactionPlatformCodeType: Array_Of_TransactionPlatformCodeType);
    function  ListedOn_Specified(Index: Integer): boolean;
    procedure SetShipment(Index: Integer; const AShipmentType: ShipmentType);
    function  Shipment_Specified(Index: Integer): boolean;
    procedure SetCharityListing(Index: Integer; const ABoolean: Boolean);
    function  CharityListing_Specified(Index: Integer): boolean;
    procedure SetVariation(Index: Integer; const AVariationType: VariationType);
    function  Variation_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property InvoiceNumber:         string                                Index (IS_OPTN) read FInvoiceNumber write SetInvoiceNumber stored InvoiceNumber_Specified;
    property TransactionID:         Int64                                 Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property SaleRecordID:          Int64                                 Index (IS_OPTN) read FSaleRecordID write SetSaleRecordID stored SaleRecordID_Specified;
    property ItemID:                ItemIDType                            Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property QuantitySold:          Integer                               Index (IS_OPTN) read FQuantitySold write SetQuantitySold stored QuantitySold_Specified;
    property ItemPrice:             AmountType                            Index (IS_OPTN) read FItemPrice write SetItemPrice stored ItemPrice_Specified;
    property SubtotalAmount:        AmountType                            Index (IS_OPTN) read FSubtotalAmount write SetSubtotalAmount stored SubtotalAmount_Specified;
    property ItemTitle:             string                                Index (IS_OPTN) read FItemTitle write SetItemTitle stored ItemTitle_Specified;
    property ListingType:           ListingTypeCodeType                   Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property Relisted:              Boolean                               Index (IS_OPTN) read FRelisted write SetRelisted stored Relisted_Specified;
    property WatchCount:            Integer                               Index (IS_OPTN) read FWatchCount write SetWatchCount stored WatchCount_Specified;
    property StartPrice:            AmountType                            Index (IS_OPTN) read FStartPrice write SetStartPrice stored StartPrice_Specified;
    property ReservePrice:          AmountType                            Index (IS_OPTN) read FReservePrice write SetReservePrice stored ReservePrice_Specified;
    property SecondChanceOfferSent: Boolean                               Index (IS_OPTN) read FSecondChanceOfferSent write SetSecondChanceOfferSent stored SecondChanceOfferSent_Specified;
    property CustomLabel:           string                                Index (IS_OPTN) read FCustomLabel write SetCustomLabel stored CustomLabel_Specified;
    property SoldOn:                TransactionPlatformCodeType           Index (IS_OPTN) read FSoldOn write SetSoldOn stored SoldOn_Specified;
    property ListedOn:              Array_Of_TransactionPlatformCodeType  Index (IS_OPTN or IS_UNBD) read FListedOn write SetListedOn stored ListedOn_Specified;
    property Shipment:              ShipmentType                          Index (IS_OPTN) read FShipment write SetShipment stored Shipment_Specified;
    property CharityListing:        Boolean                               Index (IS_OPTN) read FCharityListing write SetCharityListing stored CharityListing_Specified;
    property Variation:             VariationType                         Index (IS_OPTN) read FVariation write SetVariation stored Variation_Specified;
    property OrderLineItemID:       string                                Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;

  MemberMessageExchangeArrayType = array of MemberMessageExchangeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : PaginatedTransactionArrayType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedTransactionArrayType = class(TRemotable)
  private
    FTransactionArray: TransactionArrayType;
    FTransactionArray_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
    function  TransactionArray_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TransactionArray: TransactionArrayType  Index (IS_OPTN) read FTransactionArray write SetTransactionArray stored TransactionArray_Specified;
    property PaginationResult: PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : MemberMessageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MemberMessageType = class(TRemotable)
  private
    FMessageType: MessageTypeCodeType;
    FMessageType_Specified: boolean;
    FQuestionType: QuestionTypeCodeType;
    FQuestionType_Specified: boolean;
    FEmailCopyToSender: Boolean;
    FEmailCopyToSender_Specified: boolean;
    FHideSendersEmailAddress: Boolean;
    FHideSendersEmailAddress_Specified: boolean;
    FDisplayToPublic: Boolean;
    FDisplayToPublic_Specified: boolean;
    FSenderID: string;
    FSenderID_Specified: boolean;
    FSenderEmail: string;
    FSenderEmail_Specified: boolean;
    FRecipientID: SellerExcludeShipToLocationPreferencesType;
    FRecipientID_Specified: boolean;
    FSubject: string;
    FSubject_Specified: boolean;
    FBody: string;
    FBody_Specified: boolean;
    FMessageID: string;
    FMessageID_Specified: boolean;
    FParentMessageID: string;
    FParentMessageID_Specified: boolean;
    FMessageMedia: Array_Of_MessageMediaType;
    FMessageMedia_Specified: boolean;
    procedure SetMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
    function  MessageType_Specified(Index: Integer): boolean;
    procedure SetQuestionType(Index: Integer; const AQuestionTypeCodeType: QuestionTypeCodeType);
    function  QuestionType_Specified(Index: Integer): boolean;
    procedure SetEmailCopyToSender(Index: Integer; const ABoolean: Boolean);
    function  EmailCopyToSender_Specified(Index: Integer): boolean;
    procedure SetHideSendersEmailAddress(Index: Integer; const ABoolean: Boolean);
    function  HideSendersEmailAddress_Specified(Index: Integer): boolean;
    procedure SetDisplayToPublic(Index: Integer; const ABoolean: Boolean);
    function  DisplayToPublic_Specified(Index: Integer): boolean;
    procedure SetSenderID(Index: Integer; const Astring: string);
    function  SenderID_Specified(Index: Integer): boolean;
    procedure SetSenderEmail(Index: Integer; const Astring: string);
    function  SenderEmail_Specified(Index: Integer): boolean;
    procedure SetRecipientID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  RecipientID_Specified(Index: Integer): boolean;
    procedure SetSubject(Index: Integer; const Astring: string);
    function  Subject_Specified(Index: Integer): boolean;
    procedure SetBody(Index: Integer; const Astring: string);
    function  Body_Specified(Index: Integer): boolean;
    procedure SetMessageID(Index: Integer; const Astring: string);
    function  MessageID_Specified(Index: Integer): boolean;
    procedure SetParentMessageID(Index: Integer; const Astring: string);
    function  ParentMessageID_Specified(Index: Integer): boolean;
    procedure SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
    function  MessageMedia_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MessageType:             MessageTypeCodeType                         Index (IS_OPTN) read FMessageType write SetMessageType stored MessageType_Specified;
    property QuestionType:            QuestionTypeCodeType                        Index (IS_OPTN) read FQuestionType write SetQuestionType stored QuestionType_Specified;
    property EmailCopyToSender:       Boolean                                     Index (IS_OPTN) read FEmailCopyToSender write SetEmailCopyToSender stored EmailCopyToSender_Specified;
    property HideSendersEmailAddress: Boolean                                     Index (IS_OPTN) read FHideSendersEmailAddress write SetHideSendersEmailAddress stored HideSendersEmailAddress_Specified;
    property DisplayToPublic:         Boolean                                     Index (IS_OPTN) read FDisplayToPublic write SetDisplayToPublic stored DisplayToPublic_Specified;
    property SenderID:                string                                      Index (IS_OPTN) read FSenderID write SetSenderID stored SenderID_Specified;
    property SenderEmail:             string                                      Index (IS_OPTN) read FSenderEmail write SetSenderEmail stored SenderEmail_Specified;
    property RecipientID:             SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FRecipientID write SetRecipientID stored RecipientID_Specified;
    property Subject:                 string                                      Index (IS_OPTN) read FSubject write SetSubject stored Subject_Specified;
    property Body:                    string                                      Index (IS_OPTN) read FBody write SetBody stored Body_Specified;
    property MessageID:               string                                      Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
    property ParentMessageID:         string                                      Index (IS_OPTN) read FParentMessageID write SetParentMessageID stored ParentMessageID_Specified;
    property MessageMedia:            Array_Of_MessageMediaType                   Index (IS_OPTN or IS_UNBD) read FMessageMedia write SetMessageMedia stored MessageMedia_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingStatusType = class(TRemotable)
  private
    FBidCount: Integer;
    FBidCount_Specified: boolean;
    FBidIncrement: AmountType;
    FBidIncrement_Specified: boolean;
    FConvertedCurrentPrice: AmountType;
    FConvertedCurrentPrice_Specified: boolean;
    FCurrentPrice: AmountType;
    FCurrentPrice_Specified: boolean;
    FHighBidder: UserType;
    FHighBidder_Specified: boolean;
    FLeadCount: Integer;
    FLeadCount_Specified: boolean;
    FMinimumToBid: AmountType;
    FMinimumToBid_Specified: boolean;
    FQuantitySold: Integer;
    FQuantitySold_Specified: boolean;
    FReserveMet: Boolean;
    FReserveMet_Specified: boolean;
    FSecondChanceEligible: Boolean;
    FSecondChanceEligible_Specified: boolean;
    FBidderCount: Int64;
    FBidderCount_Specified: boolean;
    FListingStatus: ListingStatusCodeType;
    FListingStatus_Specified: boolean;
    FFinalValueFee: AmountType;
    FFinalValueFee_Specified: boolean;
    FPromotionalSaleDetails: PromotionalSaleDetailsType;
    FPromotionalSaleDetails_Specified: boolean;
    FAdminEnded: Boolean;
    FAdminEnded_Specified: boolean;
    FSoldAsBin: Boolean;
    FSoldAsBin_Specified: boolean;
    FQuantitySoldByPickupInStore: Integer;
    FQuantitySoldByPickupInStore_Specified: boolean;
    FSuggestedBidValues: SuggestedBidValueType;
    FSuggestedBidValues_Specified: boolean;
    procedure SetBidCount(Index: Integer; const AInteger: Integer);
    function  BidCount_Specified(Index: Integer): boolean;
    procedure SetBidIncrement(Index: Integer; const AAmountType: AmountType);
    function  BidIncrement_Specified(Index: Integer): boolean;
    procedure SetConvertedCurrentPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedCurrentPrice_Specified(Index: Integer): boolean;
    procedure SetCurrentPrice(Index: Integer; const AAmountType: AmountType);
    function  CurrentPrice_Specified(Index: Integer): boolean;
    procedure SetHighBidder(Index: Integer; const AUserType: UserType);
    function  HighBidder_Specified(Index: Integer): boolean;
    procedure SetLeadCount(Index: Integer; const AInteger: Integer);
    function  LeadCount_Specified(Index: Integer): boolean;
    procedure SetMinimumToBid(Index: Integer; const AAmountType: AmountType);
    function  MinimumToBid_Specified(Index: Integer): boolean;
    procedure SetQuantitySold(Index: Integer; const AInteger: Integer);
    function  QuantitySold_Specified(Index: Integer): boolean;
    procedure SetReserveMet(Index: Integer; const ABoolean: Boolean);
    function  ReserveMet_Specified(Index: Integer): boolean;
    procedure SetSecondChanceEligible(Index: Integer; const ABoolean: Boolean);
    function  SecondChanceEligible_Specified(Index: Integer): boolean;
    procedure SetBidderCount(Index: Integer; const AInt64: Int64);
    function  BidderCount_Specified(Index: Integer): boolean;
    procedure SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
    function  ListingStatus_Specified(Index: Integer): boolean;
    procedure SetFinalValueFee(Index: Integer; const AAmountType: AmountType);
    function  FinalValueFee_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleDetailsType: PromotionalSaleDetailsType);
    function  PromotionalSaleDetails_Specified(Index: Integer): boolean;
    procedure SetAdminEnded(Index: Integer; const ABoolean: Boolean);
    function  AdminEnded_Specified(Index: Integer): boolean;
    procedure SetSoldAsBin(Index: Integer; const ABoolean: Boolean);
    function  SoldAsBin_Specified(Index: Integer): boolean;
    procedure SetQuantitySoldByPickupInStore(Index: Integer; const AInteger: Integer);
    function  QuantitySoldByPickupInStore_Specified(Index: Integer): boolean;
    procedure SetSuggestedBidValues(Index: Integer; const ASuggestedBidValueType: SuggestedBidValueType);
    function  SuggestedBidValues_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BidCount:                    Integer                     Index (IS_OPTN) read FBidCount write SetBidCount stored BidCount_Specified;
    property BidIncrement:                AmountType                  Index (IS_OPTN) read FBidIncrement write SetBidIncrement stored BidIncrement_Specified;
    property ConvertedCurrentPrice:       AmountType                  Index (IS_OPTN) read FConvertedCurrentPrice write SetConvertedCurrentPrice stored ConvertedCurrentPrice_Specified;
    property CurrentPrice:                AmountType                  Index (IS_OPTN) read FCurrentPrice write SetCurrentPrice stored CurrentPrice_Specified;
    property HighBidder:                  UserType                    Index (IS_OPTN) read FHighBidder write SetHighBidder stored HighBidder_Specified;
    property LeadCount:                   Integer                     Index (IS_OPTN) read FLeadCount write SetLeadCount stored LeadCount_Specified;
    property MinimumToBid:                AmountType                  Index (IS_OPTN) read FMinimumToBid write SetMinimumToBid stored MinimumToBid_Specified;
    property QuantitySold:                Integer                     Index (IS_OPTN) read FQuantitySold write SetQuantitySold stored QuantitySold_Specified;
    property ReserveMet:                  Boolean                     Index (IS_OPTN) read FReserveMet write SetReserveMet stored ReserveMet_Specified;
    property SecondChanceEligible:        Boolean                     Index (IS_OPTN) read FSecondChanceEligible write SetSecondChanceEligible stored SecondChanceEligible_Specified;
    property BidderCount:                 Int64                       Index (IS_OPTN) read FBidderCount write SetBidderCount stored BidderCount_Specified;
    property ListingStatus:               ListingStatusCodeType       Index (IS_OPTN) read FListingStatus write SetListingStatus stored ListingStatus_Specified;
    property FinalValueFee:               AmountType                  Index (IS_OPTN) read FFinalValueFee write SetFinalValueFee stored FinalValueFee_Specified;
    property PromotionalSaleDetails:      PromotionalSaleDetailsType  Index (IS_OPTN) read FPromotionalSaleDetails write SetPromotionalSaleDetails stored PromotionalSaleDetails_Specified;
    property AdminEnded:                  Boolean                     Index (IS_OPTN) read FAdminEnded write SetAdminEnded stored AdminEnded_Specified;
    property SoldAsBin:                   Boolean                     Index (IS_OPTN) read FSoldAsBin write SetSoldAsBin stored SoldAsBin_Specified;
    property QuantitySoldByPickupInStore: Integer                     Index (IS_OPTN) read FQuantitySoldByPickupInStore write SetQuantitySoldByPickupInStore stored QuantitySoldByPickupInStore_Specified;
    property SuggestedBidValues:          SuggestedBidValueType       Index (IS_OPTN) read FSuggestedBidValues write SetSuggestedBidValues stored SuggestedBidValues_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyMessagesMessageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesMessageType = class(TRemotable)
  private
    FSender: string;
    FSender_Specified: boolean;
    FRecipientUserID: string;
    FRecipientUserID_Specified: boolean;
    FSendToName: string;
    FSendToName_Specified: boolean;
    FSubject: string;
    FSubject_Specified: boolean;
    FMessageID: MyMessagesMessageIDType;
    FMessageID_Specified: boolean;
    FExternalMessageID: string;
    FExternalMessageID_Specified: boolean;
    FContentType: string;
    FContentType_Specified: boolean;
    FText: string;
    FText_Specified: boolean;
    FFlagged: Boolean;
    FFlagged_Specified: boolean;
    FRead_: Boolean;
    FRead__Specified: boolean;
    FCreationDate: TXSDateTime;
    FCreationDate_Specified: boolean;
    FReceiveDate: TXSDateTime;
    FReceiveDate_Specified: boolean;
    FExpirationDate: TXSDateTime;
    FExpirationDate_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FResponseDetails: MyMessagesResponseDetailsType;
    FResponseDetails_Specified: boolean;
    FForwardDetails: MyMessagesForwardDetailsType;
    FForwardDetails_Specified: boolean;
    FFolder: MyMessagesFolderType;
    FFolder_Specified: boolean;
    FContent: string;
    FContent_Specified: boolean;
    FMessageType: MessageTypeCodeType;
    FMessageType_Specified: boolean;
    FListingStatus: ListingStatusCodeType;
    FListingStatus_Specified: boolean;
    FQuestionType: QuestionTypeCodeType;
    FQuestionType_Specified: boolean;
    FReplied: Boolean;
    FReplied_Specified: boolean;
    FHighPriority: Boolean;
    FHighPriority_Specified: boolean;
    FItemEndTime: TXSDateTime;
    FItemEndTime_Specified: boolean;
    FItemTitle: string;
    FItemTitle_Specified: boolean;
    FMessageMedia: Array_Of_MessageMediaType;
    FMessageMedia_Specified: boolean;
    procedure SetSender(Index: Integer; const Astring: string);
    function  Sender_Specified(Index: Integer): boolean;
    procedure SetRecipientUserID(Index: Integer; const Astring: string);
    function  RecipientUserID_Specified(Index: Integer): boolean;
    procedure SetSendToName(Index: Integer; const Astring: string);
    function  SendToName_Specified(Index: Integer): boolean;
    procedure SetSubject(Index: Integer; const Astring: string);
    function  Subject_Specified(Index: Integer): boolean;
    procedure SetMessageID(Index: Integer; const AMyMessagesMessageIDType: MyMessagesMessageIDType);
    function  MessageID_Specified(Index: Integer): boolean;
    procedure SetExternalMessageID(Index: Integer; const Astring: string);
    function  ExternalMessageID_Specified(Index: Integer): boolean;
    procedure SetContentType(Index: Integer; const Astring: string);
    function  ContentType_Specified(Index: Integer): boolean;
    procedure SetText(Index: Integer; const Astring: string);
    function  Text_Specified(Index: Integer): boolean;
    procedure SetFlagged(Index: Integer; const ABoolean: Boolean);
    function  Flagged_Specified(Index: Integer): boolean;
    procedure SetRead_(Index: Integer; const ABoolean: Boolean);
    function  Read__Specified(Index: Integer): boolean;
    procedure SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDate_Specified(Index: Integer): boolean;
    procedure SetReceiveDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ReceiveDate_Specified(Index: Integer): boolean;
    procedure SetExpirationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpirationDate_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetResponseDetails(Index: Integer; const AMyMessagesResponseDetailsType: MyMessagesResponseDetailsType);
    function  ResponseDetails_Specified(Index: Integer): boolean;
    procedure SetForwardDetails(Index: Integer; const AMyMessagesForwardDetailsType: MyMessagesForwardDetailsType);
    function  ForwardDetails_Specified(Index: Integer): boolean;
    procedure SetFolder(Index: Integer; const AMyMessagesFolderType: MyMessagesFolderType);
    function  Folder_Specified(Index: Integer): boolean;
    procedure SetContent(Index: Integer; const Astring: string);
    function  Content_Specified(Index: Integer): boolean;
    procedure SetMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
    function  MessageType_Specified(Index: Integer): boolean;
    procedure SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
    function  ListingStatus_Specified(Index: Integer): boolean;
    procedure SetQuestionType(Index: Integer; const AQuestionTypeCodeType: QuestionTypeCodeType);
    function  QuestionType_Specified(Index: Integer): boolean;
    procedure SetReplied(Index: Integer; const ABoolean: Boolean);
    function  Replied_Specified(Index: Integer): boolean;
    procedure SetHighPriority(Index: Integer; const ABoolean: Boolean);
    function  HighPriority_Specified(Index: Integer): boolean;
    procedure SetItemEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ItemEndTime_Specified(Index: Integer): boolean;
    procedure SetItemTitle(Index: Integer; const Astring: string);
    function  ItemTitle_Specified(Index: Integer): boolean;
    procedure SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
    function  MessageMedia_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Sender:            string                         Index (IS_OPTN) read FSender write SetSender stored Sender_Specified;
    property RecipientUserID:   string                         Index (IS_OPTN) read FRecipientUserID write SetRecipientUserID stored RecipientUserID_Specified;
    property SendToName:        string                         Index (IS_OPTN) read FSendToName write SetSendToName stored SendToName_Specified;
    property Subject:           string                         Index (IS_OPTN) read FSubject write SetSubject stored Subject_Specified;
    property MessageID:         MyMessagesMessageIDType        Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
    property ExternalMessageID: string                         Index (IS_OPTN) read FExternalMessageID write SetExternalMessageID stored ExternalMessageID_Specified;
    property ContentType:       string                         Index (IS_OPTN) read FContentType write SetContentType stored ContentType_Specified;
    property Text:              string                         Index (IS_OPTN) read FText write SetText stored Text_Specified;
    property Flagged:           Boolean                        Index (IS_OPTN) read FFlagged write SetFlagged stored Flagged_Specified;
    property Read_:             Boolean                        Index (IS_OPTN) read FRead_ write SetRead_ stored Read__Specified;
    property CreationDate:      TXSDateTime                    Index (IS_OPTN) read FCreationDate write SetCreationDate stored CreationDate_Specified;
    property ReceiveDate:       TXSDateTime                    Index (IS_OPTN) read FReceiveDate write SetReceiveDate stored ReceiveDate_Specified;
    property ExpirationDate:    TXSDateTime                    Index (IS_OPTN) read FExpirationDate write SetExpirationDate stored ExpirationDate_Specified;
    property ItemID:            ItemIDType                     Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ResponseDetails:   MyMessagesResponseDetailsType  Index (IS_OPTN) read FResponseDetails write SetResponseDetails stored ResponseDetails_Specified;
    property ForwardDetails:    MyMessagesForwardDetailsType   Index (IS_OPTN) read FForwardDetails write SetForwardDetails stored ForwardDetails_Specified;
    property Folder:            MyMessagesFolderType           Index (IS_OPTN) read FFolder write SetFolder stored Folder_Specified;
    property Content:           string                         Index (IS_OPTN) read FContent write SetContent stored Content_Specified;
    property MessageType:       MessageTypeCodeType            Index (IS_OPTN) read FMessageType write SetMessageType stored MessageType_Specified;
    property ListingStatus:     ListingStatusCodeType          Index (IS_OPTN) read FListingStatus write SetListingStatus stored ListingStatus_Specified;
    property QuestionType:      QuestionTypeCodeType           Index (IS_OPTN) read FQuestionType write SetQuestionType stored QuestionType_Specified;
    property Replied:           Boolean                        Index (IS_OPTN) read FReplied write SetReplied stored Replied_Specified;
    property HighPriority:      Boolean                        Index (IS_OPTN) read FHighPriority write SetHighPriority stored HighPriority_Specified;
    property ItemEndTime:       TXSDateTime                    Index (IS_OPTN) read FItemEndTime write SetItemEndTime stored ItemEndTime_Specified;
    property ItemTitle:         string                         Index (IS_OPTN) read FItemTitle write SetItemTitle stored ItemTitle_Specified;
    property MessageMedia:      Array_Of_MessageMediaType      Index (IS_OPTN or IS_UNBD) read FMessageMedia write SetMessageMedia stored MessageMedia_Specified;
  end;

  OfferArrayType = array of OfferType;          { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferArrayType = array of BestOfferType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ItemBestOffersType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemBestOffersType = class(TRemotable)
  private
    FRole: TradingRoleCodeType;
    FRole_Specified: boolean;
    FBestOfferArray: BestOfferArrayType;
    FBestOfferArray_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  Role_Specified(Index: Integer): boolean;
    procedure SetBestOfferArray(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
    function  BestOfferArray_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Role:           TradingRoleCodeType  Index (IS_OPTN) read FRole write SetRole stored Role_Specified;
    property BestOfferArray: BestOfferArrayType   Index (IS_OPTN) read FBestOfferArray write SetBestOfferArray stored BestOfferArray_Specified;
    property Item:           ItemType             Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;

  ItemBestOffersArrayType = array of ItemBestOffersType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  BestOfferIDType =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }
  Array_Of_BestOfferIDType = array of BestOfferIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : OfferType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OfferType = class(TRemotable)
  private
    FAction: BidActionCodeType;
    FAction_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FMaxBid: AmountType;
    FMaxBid_Specified: boolean;
    FDiscounts: OfferDiscountsType;
    FDiscounts_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FSecondChanceEnabled: Boolean;
    FSecondChanceEnabled_Specified: boolean;
    FSiteCurrency: CurrencyCodeType;
    FSiteCurrency_Specified: boolean;
    FTimeBid: TXSDateTime;
    FTimeBid_Specified: boolean;
    FHighestBid: AmountType;
    FHighestBid_Specified: boolean;
    FConvertedPrice: AmountType;
    FConvertedPrice_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FUser: UserType;
    FUser_Specified: boolean;
    FUserConsent: Boolean;
    FUserConsent_Specified: boolean;
    FBidCount: Integer;
    FBidCount_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FBestOfferID: BestOfferIDType;
    FBestOfferID_Specified: boolean;
    FMyMaxBid: AmountType;
    FMyMaxBid_Specified: boolean;
    procedure SetAction(Index: Integer; const ABidActionCodeType: BidActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMaxBid(Index: Integer; const AAmountType: AmountType);
    function  MaxBid_Specified(Index: Integer): boolean;
    procedure SetDiscounts(Index: Integer; const AOfferDiscountsType: OfferDiscountsType);
    function  Discounts_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetSecondChanceEnabled(Index: Integer; const ABoolean: Boolean);
    function  SecondChanceEnabled_Specified(Index: Integer): boolean;
    procedure SetSiteCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  SiteCurrency_Specified(Index: Integer): boolean;
    procedure SetTimeBid(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeBid_Specified(Index: Integer): boolean;
    procedure SetHighestBid(Index: Integer; const AAmountType: AmountType);
    function  HighestBid_Specified(Index: Integer): boolean;
    procedure SetConvertedPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedPrice_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetUser(Index: Integer; const AUserType: UserType);
    function  User_Specified(Index: Integer): boolean;
    procedure SetUserConsent(Index: Integer; const ABoolean: Boolean);
    function  UserConsent_Specified(Index: Integer): boolean;
    procedure SetBidCount(Index: Integer; const AInteger: Integer);
    function  BidCount_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
    function  BestOfferID_Specified(Index: Integer): boolean;
    procedure SetMyMaxBid(Index: Integer; const AAmountType: AmountType);
    function  MyMaxBid_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Action:              BidActionCodeType   Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property Currency:            CurrencyCodeType    Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property ItemID:              ItemIDType          Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property MaxBid:              AmountType          Index (IS_OPTN) read FMaxBid write SetMaxBid stored MaxBid_Specified;
    property Discounts:           OfferDiscountsType  Index (IS_OPTN) read FDiscounts write SetDiscounts stored Discounts_Specified;
    property Quantity:            Integer             Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property SecondChanceEnabled: Boolean             Index (IS_OPTN) read FSecondChanceEnabled write SetSecondChanceEnabled stored SecondChanceEnabled_Specified;
    property SiteCurrency:        CurrencyCodeType    Index (IS_OPTN) read FSiteCurrency write SetSiteCurrency stored SiteCurrency_Specified;
    property TimeBid:             TXSDateTime         Index (IS_OPTN) read FTimeBid write SetTimeBid stored TimeBid_Specified;
    property HighestBid:          AmountType          Index (IS_OPTN) read FHighestBid write SetHighestBid stored HighestBid_Specified;
    property ConvertedPrice:      AmountType          Index (IS_OPTN) read FConvertedPrice write SetConvertedPrice stored ConvertedPrice_Specified;
    property TransactionID:       string              Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property User:                UserType            Index (IS_OPTN) read FUser write SetUser stored User_Specified;
    property UserConsent:         Boolean             Index (IS_OPTN) read FUserConsent write SetUserConsent stored UserConsent_Specified;
    property BidCount:            Integer             Index (IS_OPTN) read FBidCount write SetBidCount stored BidCount_Specified;
    property Message_:            string              Index (IS_OPTN) read FMessage_ write SetMessage_ stored Message__Specified;
    property BestOfferID:         BestOfferIDType     Index (IS_OPTN) read FBestOfferID write SetBestOfferID stored BestOfferID_Specified;
    property MyMaxBid:            AmountType          Index (IS_OPTN) read FMyMaxBid write SetMyMaxBid stored MyMaxBid_Specified;
  end;



  // ************************************************************************ //
  // XML       : CurrencyDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CurrencyDetailsType = class(TRemotable)
  private
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Currency:      CurrencyCodeType  Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property Description:   string            Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion: string            Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime       Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : MyeBayFavoriteSearchType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSearchType = class(TRemotable)
  private
    FSearchName: string;
    FSearchName_Specified: boolean;
    FSearchQuery: string;
    FSearchQuery_Specified: boolean;
    FQueryKeywords: string;
    FQueryKeywords_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FItemSort: SimpleItemSortCodeType;
    FItemSort_Specified: boolean;
    FSortOrder: SortOrderCodeType;
    FSortOrder_Specified: boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeFrom_Specified: boolean;
    FEndTimeTo: TXSDateTime;
    FEndTimeTo_Specified: boolean;
    FMaxDistance: Integer;
    FMaxDistance_Specified: boolean;
    FPostalCode: string;
    FPostalCode_Specified: boolean;
    FItemType: ItemTypeCodeType;
    FItemType_Specified: boolean;
    FPriceMax: AmountType;
    FPriceMax_Specified: boolean;
    FPriceMin: AmountType;
    FPriceMin_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FBidCountMax: Integer;
    FBidCountMax_Specified: boolean;
    FBidCountMin: Integer;
    FBidCountMin_Specified: boolean;
    FSearchFlag: Array_Of_SearchFlagCodeType;
    FSearchFlag_Specified: boolean;
    FPaymentMethod: PaymentMethodSearchCodeType;
    FPaymentMethod_Specified: boolean;
    FPreferredLocation: PreferredLocationCodeType;
    FPreferredLocation_Specified: boolean;
    FSellerID: SellerExcludeShipToLocationPreferencesType;
    FSellerID_Specified: boolean;
    FSellerIDExclude: SellerExcludeShipToLocationPreferencesType;
    FSellerIDExclude_Specified: boolean;
    FItemsAvailableTo: CountryCodeType;
    FItemsAvailableTo_Specified: boolean;
    FItemsLocatedIn: CountryCodeType;
    FItemsLocatedIn_Specified: boolean;
    FSellerBusinessType: SellerBusinessCodeType;
    FSellerBusinessType_Specified: boolean;
    FCondition: ItemConditionCodeType;
    FCondition_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FQuantityOperator: QuantityOperatorCodeType;
    FQuantityOperator_Specified: boolean;
    procedure SetSearchName(Index: Integer; const Astring: string);
    function  SearchName_Specified(Index: Integer): boolean;
    procedure SetSearchQuery(Index: Integer; const Astring: string);
    function  SearchQuery_Specified(Index: Integer): boolean;
    procedure SetQueryKeywords(Index: Integer; const Astring: string);
    function  QueryKeywords_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetItemSort(Index: Integer; const ASimpleItemSortCodeType: SimpleItemSortCodeType);
    function  ItemSort_Specified(Index: Integer): boolean;
    procedure SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  SortOrder_Specified(Index: Integer): boolean;
    procedure SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeFrom_Specified(Index: Integer): boolean;
    procedure SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeTo_Specified(Index: Integer): boolean;
    procedure SetMaxDistance(Index: Integer; const AInteger: Integer);
    function  MaxDistance_Specified(Index: Integer): boolean;
    procedure SetPostalCode(Index: Integer; const Astring: string);
    function  PostalCode_Specified(Index: Integer): boolean;
    procedure SetItemType(Index: Integer; const AItemTypeCodeType: ItemTypeCodeType);
    function  ItemType_Specified(Index: Integer): boolean;
    procedure SetPriceMax(Index: Integer; const AAmountType: AmountType);
    function  PriceMax_Specified(Index: Integer): boolean;
    procedure SetPriceMin(Index: Integer; const AAmountType: AmountType);
    function  PriceMin_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetBidCountMax(Index: Integer; const AInteger: Integer);
    function  BidCountMax_Specified(Index: Integer): boolean;
    procedure SetBidCountMin(Index: Integer; const AInteger: Integer);
    function  BidCountMin_Specified(Index: Integer): boolean;
    procedure SetSearchFlag(Index: Integer; const AArray_Of_SearchFlagCodeType: Array_Of_SearchFlagCodeType);
    function  SearchFlag_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const APaymentMethodSearchCodeType: PaymentMethodSearchCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetPreferredLocation(Index: Integer; const APreferredLocationCodeType: PreferredLocationCodeType);
    function  PreferredLocation_Specified(Index: Integer): boolean;
    procedure SetSellerID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  SellerID_Specified(Index: Integer): boolean;
    procedure SetSellerIDExclude(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  SellerIDExclude_Specified(Index: Integer): boolean;
    procedure SetItemsAvailableTo(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  ItemsAvailableTo_Specified(Index: Integer): boolean;
    procedure SetItemsLocatedIn(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  ItemsLocatedIn_Specified(Index: Integer): boolean;
    procedure SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
    function  SellerBusinessType_Specified(Index: Integer): boolean;
    procedure SetCondition(Index: Integer; const AItemConditionCodeType: ItemConditionCodeType);
    function  Condition_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetQuantityOperator(Index: Integer; const AQuantityOperatorCodeType: QuantityOperatorCodeType);
    function  QuantityOperator_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SearchName:         string                                      Index (IS_OPTN) read FSearchName write SetSearchName stored SearchName_Specified;
    property SearchQuery:        string                                      Index (IS_OPTN) read FSearchQuery write SetSearchQuery stored SearchQuery_Specified;
    property QueryKeywords:      string                                      Index (IS_OPTN) read FQueryKeywords write SetQueryKeywords stored QueryKeywords_Specified;
    property CategoryID:         string                                      Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property ItemSort:           SimpleItemSortCodeType                      Index (IS_OPTN) read FItemSort write SetItemSort stored ItemSort_Specified;
    property SortOrder:          SortOrderCodeType                           Index (IS_OPTN) read FSortOrder write SetSortOrder stored SortOrder_Specified;
    property EndTimeFrom:        TXSDateTime                                 Index (IS_OPTN) read FEndTimeFrom write SetEndTimeFrom stored EndTimeFrom_Specified;
    property EndTimeTo:          TXSDateTime                                 Index (IS_OPTN) read FEndTimeTo write SetEndTimeTo stored EndTimeTo_Specified;
    property MaxDistance:        Integer                                     Index (IS_OPTN) read FMaxDistance write SetMaxDistance stored MaxDistance_Specified;
    property PostalCode:         string                                      Index (IS_OPTN) read FPostalCode write SetPostalCode stored PostalCode_Specified;
    property ItemType:           ItemTypeCodeType                            Index (IS_OPTN) read FItemType write SetItemType stored ItemType_Specified;
    property PriceMax:           AmountType                                  Index (IS_OPTN) read FPriceMax write SetPriceMax stored PriceMax_Specified;
    property PriceMin:           AmountType                                  Index (IS_OPTN) read FPriceMin write SetPriceMin stored PriceMin_Specified;
    property Currency:           CurrencyCodeType                            Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property BidCountMax:        Integer                                     Index (IS_OPTN) read FBidCountMax write SetBidCountMax stored BidCountMax_Specified;
    property BidCountMin:        Integer                                     Index (IS_OPTN) read FBidCountMin write SetBidCountMin stored BidCountMin_Specified;
    property SearchFlag:         Array_Of_SearchFlagCodeType                 Index (IS_OPTN or IS_UNBD) read FSearchFlag write SetSearchFlag stored SearchFlag_Specified;
    property PaymentMethod:      PaymentMethodSearchCodeType                 Index (IS_OPTN) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property PreferredLocation:  PreferredLocationCodeType                   Index (IS_OPTN) read FPreferredLocation write SetPreferredLocation stored PreferredLocation_Specified;
    property SellerID:           SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FSellerID write SetSellerID stored SellerID_Specified;
    property SellerIDExclude:    SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FSellerIDExclude write SetSellerIDExclude stored SellerIDExclude_Specified;
    property ItemsAvailableTo:   CountryCodeType                             Index (IS_OPTN) read FItemsAvailableTo write SetItemsAvailableTo stored ItemsAvailableTo_Specified;
    property ItemsLocatedIn:     CountryCodeType                             Index (IS_OPTN) read FItemsLocatedIn write SetItemsLocatedIn stored ItemsLocatedIn_Specified;
    property SellerBusinessType: SellerBusinessCodeType                      Index (IS_OPTN) read FSellerBusinessType write SetSellerBusinessType stored SellerBusinessType_Specified;
    property Condition:          ItemConditionCodeType                       Index (IS_OPTN) read FCondition write SetCondition stored Condition_Specified;
    property Quantity:           Integer                                     Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property QuantityOperator:   QuantityOperatorCodeType                    Index (IS_OPTN) read FQuantityOperator write SetQuantityOperator stored QuantityOperator_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaginationType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginationType = class(TRemotable)
  private
    FEntriesPerPage: Integer;
    FEntriesPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    procedure SetEntriesPerPage(Index: Integer; const AInteger: Integer);
    function  EntriesPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
  published
    property EntriesPerPage: Integer  Index (IS_OPTN) read FEntriesPerPage write SetEntriesPerPage stored EntriesPerPage_Specified;
    property PageNumber:     Integer  Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
  end;

  AccountEntriesType = array of AccountEntryType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : PaginationResultType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginationResultType = class(TRemotable)
  private
    FTotalNumberOfPages: Integer;
    FTotalNumberOfPages_Specified: boolean;
    FTotalNumberOfEntries: Integer;
    FTotalNumberOfEntries_Specified: boolean;
    procedure SetTotalNumberOfPages(Index: Integer; const AInteger: Integer);
    function  TotalNumberOfPages_Specified(Index: Integer): boolean;
    procedure SetTotalNumberOfEntries(Index: Integer; const AInteger: Integer);
    function  TotalNumberOfEntries_Specified(Index: Integer): boolean;
  published
    property TotalNumberOfPages:   Integer  Index (IS_OPTN) read FTotalNumberOfPages write SetTotalNumberOfPages stored TotalNumberOfPages_Specified;
    property TotalNumberOfEntries: Integer  Index (IS_OPTN) read FTotalNumberOfEntries write SetTotalNumberOfEntries stored TotalNumberOfEntries_Specified;
  end;



  // ************************************************************************ //
  // XML       : MemberMessageExchangeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MemberMessageExchangeType = class(TRemotable)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FQuestion: MemberMessageType;
    FQuestion_Specified: boolean;
    FResponse: SellerExcludeShipToLocationPreferencesType;
    FResponse_Specified: boolean;
    FMessageStatus: MessageStatusTypeCodeType;
    FMessageStatus_Specified: boolean;
    FCreationDate: TXSDateTime;
    FCreationDate_Specified: boolean;
    FLastModifiedDate: TXSDateTime;
    FLastModifiedDate_Specified: boolean;
    FMessageMedia: Array_Of_MessageMediaType;
    FMessageMedia_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetQuestion(Index: Integer; const AMemberMessageType: MemberMessageType);
    function  Question_Specified(Index: Integer): boolean;
    procedure SetResponse(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  Response_Specified(Index: Integer): boolean;
    procedure SetMessageStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
    function  MessageStatus_Specified(Index: Integer): boolean;
    procedure SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreationDate_Specified(Index: Integer): boolean;
    procedure SetLastModifiedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastModifiedDate_Specified(Index: Integer): boolean;
    procedure SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
    function  MessageMedia_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Item:             ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property Question:         MemberMessageType                           Index (IS_OPTN) read FQuestion write SetQuestion stored Question_Specified;
    property Response:         SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FResponse write SetResponse stored Response_Specified;
    property MessageStatus:    MessageStatusTypeCodeType                   Index (IS_OPTN) read FMessageStatus write SetMessageStatus stored MessageStatus_Specified;
    property CreationDate:     TXSDateTime                                 Index (IS_OPTN) read FCreationDate write SetCreationDate stored CreationDate_Specified;
    property LastModifiedDate: TXSDateTime                                 Index (IS_OPTN) read FLastModifiedDate write SetLastModifiedDate stored LastModifiedDate_Specified;
    property MessageMedia:     Array_Of_MessageMediaType                   Index (IS_OPTN or IS_UNBD) read FMessageMedia write SetMessageMedia stored MessageMedia_Specified;
  end;



  // ************************************************************************ //
  // XML       : CategoryMappingType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryMappingType = class(TRemotable)
  private
    FoldID: string;
    FoldID_Specified: boolean;
    Fid: string;
    Fid_Specified: boolean;
    procedure SetoldID(Index: Integer; const Astring: string);
    function  oldID_Specified(Index: Integer): boolean;
    procedure Setid(Index: Integer; const Astring: string);
    function  id_Specified(Index: Integer): boolean;
  published
    property oldID: string  Index (IS_ATTR or IS_OPTN) read FoldID write SetoldID stored oldID_Specified;
    property id:    string  Index (IS_ATTR or IS_OPTN) read Fid write Setid stored id_Specified;
  end;



  // ************************************************************************ //
  // XML       : CategoryItemSpecificsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryItemSpecificsType = class(TRemotable)
  private
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FItemSpecifics: NameValueListArrayType;
    FItemSpecifics_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  ItemSpecifics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CategoryID:    string                  Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property ItemSpecifics: NameValueListArrayType  Index (IS_OPTN) read FItemSpecifics write SetItemSpecifics stored ItemSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : RecommendationsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RecommendationsType = class(TRemotable)
  private
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FProductIdentifiers: Array_Of_ProductIdentifiersType;
    FProductIdentifiers_Specified: boolean;
    FNameRecommendation: Array_Of_NameRecommendationType;
    FNameRecommendation_Specified: boolean;
    FUpdated: Boolean;
    FUpdated_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetProductIdentifiers(Index: Integer; const AArray_Of_ProductIdentifiersType: Array_Of_ProductIdentifiersType);
    function  ProductIdentifiers_Specified(Index: Integer): boolean;
    procedure SetNameRecommendation(Index: Integer; const AArray_Of_NameRecommendationType: Array_Of_NameRecommendationType);
    function  NameRecommendation_Specified(Index: Integer): boolean;
    procedure SetUpdated(Index: Integer; const ABoolean: Boolean);
    function  Updated_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CategoryID:         string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property ProductIdentifiers: Array_Of_ProductIdentifiersType  Index (IS_OPTN or IS_UNBD) read FProductIdentifiers write SetProductIdentifiers stored ProductIdentifiers_Specified;
    property NameRecommendation: Array_Of_NameRecommendationType  Index (IS_OPTN or IS_UNBD) read FNameRecommendation write SetNameRecommendation stored NameRecommendation_Specified;
    property Updated:            Boolean                          Index (IS_OPTN) read FUpdated write SetUpdated stored Updated_Specified;
  end;

  ItemArrayType = array of ItemType;            { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : UserDefinedListType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserDefinedListType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FItemCount: Integer;
    FItemCount_Specified: boolean;
    FFavoriteSearcheCount: Integer;
    FFavoriteSearcheCount_Specified: boolean;
    FFavoriteSellerCount: Integer;
    FFavoriteSellerCount_Specified: boolean;
    FItemArray: ItemArrayType;
    FItemArray_Specified: boolean;
    FFavoriteSearches: MyeBayFavoriteSearchListType;
    FFavoriteSearches_Specified: boolean;
    FFavoriteSellers: MyeBayFavoriteSellerListType;
    FFavoriteSellers_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetItemCount(Index: Integer; const AInteger: Integer);
    function  ItemCount_Specified(Index: Integer): boolean;
    procedure SetFavoriteSearcheCount(Index: Integer; const AInteger: Integer);
    function  FavoriteSearcheCount_Specified(Index: Integer): boolean;
    procedure SetFavoriteSellerCount(Index: Integer; const AInteger: Integer);
    function  FavoriteSellerCount_Specified(Index: Integer): boolean;
    procedure SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
    function  ItemArray_Specified(Index: Integer): boolean;
    procedure SetFavoriteSearches(Index: Integer; const AMyeBayFavoriteSearchListType: MyeBayFavoriteSearchListType);
    function  FavoriteSearches_Specified(Index: Integer): boolean;
    procedure SetFavoriteSellers(Index: Integer; const AMyeBayFavoriteSellerListType: MyeBayFavoriteSellerListType);
    function  FavoriteSellers_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:                string                        Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property ItemCount:            Integer                       Index (IS_OPTN) read FItemCount write SetItemCount stored ItemCount_Specified;
    property FavoriteSearcheCount: Integer                       Index (IS_OPTN) read FFavoriteSearcheCount write SetFavoriteSearcheCount stored FavoriteSearcheCount_Specified;
    property FavoriteSellerCount:  Integer                       Index (IS_OPTN) read FFavoriteSellerCount write SetFavoriteSellerCount stored FavoriteSellerCount_Specified;
    property ItemArray:            ItemArrayType                 Index (IS_OPTN) read FItemArray write SetItemArray stored ItemArray_Specified;
    property FavoriteSearches:     MyeBayFavoriteSearchListType  Index (IS_OPTN) read FFavoriteSearches write SetFavoriteSearches stored FavoriteSearches_Specified;
    property FavoriteSellers:      MyeBayFavoriteSellerListType  Index (IS_OPTN) read FFavoriteSellers write SetFavoriteSellers stored FavoriteSellers_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaginatedItemArrayType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedItemArrayType = class(TRemotable)
  private
    FItemArray: ItemArrayType;
    FItemArray_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
    function  ItemArray_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemArray:        ItemArrayType         Index (IS_OPTN) read FItemArray write SetItemArray stored ItemArray_Specified;
    property PaginationResult: PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;

  CategoryArrayType = array of CategoryType;    { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : AmountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AmountType = class(TRemotable)
  private
    FText: Double;
    FcurrencyID: CurrencyCodeType;
  published
    property Text:       Double            Index (IS_TEXT) read FText write FText;
    property currencyID: CurrencyCodeType  Index (IS_ATTR) read FcurrencyID write FcurrencyID;
  end;



  // ************************************************************************ //
  // XML       : RefundLineType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundLineType = class(AmountType)
  private
    Ftype_: RefundLineTypeCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const ARefundLineTypeCodeType: RefundLineTypeCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property type_: RefundLineTypeCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;



  // ************************************************************************ //
  // XML       : UnitInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnitInfoType = class(TRemotable)
  private
    FUnitType: string;
    FUnitType_Specified: boolean;
    FUnitQuantity: Double;
    FUnitQuantity_Specified: boolean;
    procedure SetUnitType(Index: Integer; const Astring: string);
    function  UnitType_Specified(Index: Integer): boolean;
    procedure SetUnitQuantity(Index: Integer; const ADouble: Double);
    function  UnitQuantity_Specified(Index: Integer): boolean;
  published
    property UnitType:     string  Index (IS_OPTN) read FUnitType write SetUnitType stored UnitType_Specified;
    property UnitQuantity: Double  Index (IS_OPTN) read FUnitQuantity write SetUnitQuantity stored UnitQuantity_Specified;
  end;

  Array_Of_FeatureIDCodeType = array of FeatureIDCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : PromotedItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotedItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FPictureURL: string;
    FPictureURL_Specified: boolean;
    FPosition: Integer;
    FPosition_Specified: boolean;
    FSelectionType: PromotionItemSelectionCodeType;
    FSelectionType_Specified: boolean;
    FTitle: string;
    FTitle_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FPromotionDetails: Array_Of_PromotionDetailsType;
    FPromotionDetails_Specified: boolean;
    FTimeLeft: TXSDuration;
    FTimeLeft_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetPictureURL(Index: Integer; const Astring: string);
    function  PictureURL_Specified(Index: Integer): boolean;
    procedure SetPosition(Index: Integer; const AInteger: Integer);
    function  Position_Specified(Index: Integer): boolean;
    procedure SetSelectionType(Index: Integer; const APromotionItemSelectionCodeType: PromotionItemSelectionCodeType);
    function  SelectionType_Specified(Index: Integer): boolean;
    procedure SetTitle(Index: Integer; const Astring: string);
    function  Title_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetPromotionDetails(Index: Integer; const AArray_Of_PromotionDetailsType: Array_Of_PromotionDetailsType);
    function  PromotionDetails_Specified(Index: Integer): boolean;
    procedure SetTimeLeft(Index: Integer; const ATXSDuration: TXSDuration);
    function  TimeLeft_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID:           ItemIDType                      Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property PictureURL:       string                          Index (IS_OPTN) read FPictureURL write SetPictureURL stored PictureURL_Specified;
    property Position:         Integer                         Index (IS_OPTN) read FPosition write SetPosition stored Position_Specified;
    property SelectionType:    PromotionItemSelectionCodeType  Index (IS_OPTN) read FSelectionType write SetSelectionType stored SelectionType_Specified;
    property Title:            string                          Index (IS_OPTN) read FTitle write SetTitle stored Title_Specified;
    property ListingType:      ListingTypeCodeType             Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property PromotionDetails: Array_Of_PromotionDetailsType   Index (IS_OPTN or IS_UNBD) read FPromotionDetails write SetPromotionDetails stored PromotionDetails_Specified;
    property TimeLeft:         TXSDuration                     Index (IS_OPTN) read FTimeLeft write SetTimeLeft stored TimeLeft_Specified;
  end;



  // ************************************************************************ //
  // XML       : CrossPromotionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossPromotionsType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FPrimaryScheme: PromotionSchemeCodeType;
    FPrimaryScheme_Specified: boolean;
    FPromotionMethod: PromotionMethodCodeType;
    FPromotionMethod_Specified: boolean;
    FSellerID: string;
    FSellerID_Specified: boolean;
    FShippingDiscount: Boolean;
    FStoreName: string;
    FStoreName_Specified: boolean;
    FPromotedItem: Array_Of_PromotedItemType;
    FPromotedItem_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetPrimaryScheme(Index: Integer; const APromotionSchemeCodeType: PromotionSchemeCodeType);
    function  PrimaryScheme_Specified(Index: Integer): boolean;
    procedure SetPromotionMethod(Index: Integer; const APromotionMethodCodeType: PromotionMethodCodeType);
    function  PromotionMethod_Specified(Index: Integer): boolean;
    procedure SetSellerID(Index: Integer; const Astring: string);
    function  SellerID_Specified(Index: Integer): boolean;
    procedure SetStoreName(Index: Integer; const Astring: string);
    function  StoreName_Specified(Index: Integer): boolean;
    procedure SetPromotedItem(Index: Integer; const AArray_Of_PromotedItemType: Array_Of_PromotedItemType);
    function  PromotedItem_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID:           ItemIDType                 Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property PrimaryScheme:    PromotionSchemeCodeType    Index (IS_OPTN) read FPrimaryScheme write SetPrimaryScheme stored PrimaryScheme_Specified;
    property PromotionMethod:  PromotionMethodCodeType    Index (IS_OPTN) read FPromotionMethod write SetPromotionMethod stored PromotionMethod_Specified;
    property SellerID:         string                     Index (IS_OPTN) read FSellerID write SetSellerID stored SellerID_Specified;
    property ShippingDiscount: Boolean                    read FShippingDiscount write FShippingDiscount;
    property StoreName:        string                     Index (IS_OPTN) read FStoreName write SetStoreName stored StoreName_Specified;
    property PromotedItem:     Array_Of_PromotedItemType  Index (IS_OPTN or IS_UNBD) read FPromotedItem write SetPromotedItem stored PromotedItem_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeliveryDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DeliveryDetailsType = class(TRemotable)
  private
    FRecipient: DigitalDeliveryUserType;
    FRecipient_Specified: boolean;
    FSender: DigitalDeliveryUserType;
    FSender_Specified: boolean;
    procedure SetRecipient(Index: Integer; const ADigitalDeliveryUserType: DigitalDeliveryUserType);
    function  Recipient_Specified(Index: Integer): boolean;
    procedure SetSender(Index: Integer; const ADigitalDeliveryUserType: DigitalDeliveryUserType);
    function  Sender_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Recipient: DigitalDeliveryUserType  Index (IS_OPTN) read FRecipient write SetRecipient stored Recipient_Specified;
    property Sender:    DigitalDeliveryUserType  Index (IS_OPTN) read FSender write SetSender stored Sender_Specified;
  end;



  // ************************************************************************ //
  // XML       : DescriptionTemplateType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DescriptionTemplateType = class(TRemotable)
  private
    FGroupID: Integer;
    FGroupID_Specified: boolean;
    FID: Integer;
    FID_Specified: boolean;
    FImageURL: string;
    FImageURL_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FTemplateXML: string;
    FTemplateXML_Specified: boolean;
    FType_: DescriptionTemplateCodeType;
    FType__Specified: boolean;
    procedure SetGroupID(Index: Integer; const AInteger: Integer);
    function  GroupID_Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const AInteger: Integer);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetImageURL(Index: Integer; const Astring: string);
    function  ImageURL_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetTemplateXML(Index: Integer; const Astring: string);
    function  TemplateXML_Specified(Index: Integer): boolean;
    procedure SetType_(Index: Integer; const ADescriptionTemplateCodeType: DescriptionTemplateCodeType);
    function  Type__Specified(Index: Integer): boolean;
  published
    property GroupID:     Integer                      Index (IS_OPTN) read FGroupID write SetGroupID stored GroupID_Specified;
    property ID:          Integer                      Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property ImageURL:    string                       Index (IS_OPTN) read FImageURL write SetImageURL stored ImageURL_Specified;
    property Name_:       string                       Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property TemplateXML: string                       Index (IS_OPTN) read FTemplateXML write SetTemplateXML stored TemplateXML_Specified;
    property Type_:       DescriptionTemplateCodeType  Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
  end;



  // ************************************************************************ //
  // XML       : DigitalGoodDeliveryEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalGoodDeliveryEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DigitalDeliveryUserType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalDeliveryUserType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
  published
    property Name_: string  Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Email: string  Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
  end;



  // ************************************************************************ //
  // XML       : DepositSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DepositSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConditionEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ConditionEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConditionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ConditionType = class(TRemotable)
  private
    FID: Integer;
    FID_Specified: boolean;
    FDisplayName: string;
    FDisplayName_Specified: boolean;
    procedure SetID(Index: Integer; const AInteger: Integer);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetDisplayName(Index: Integer; const Astring: string);
    function  DisplayName_Specified(Index: Integer): boolean;
  published
    property ID:          Integer  Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property DisplayName: string   Index (IS_OPTN) read FDisplayName write SetDisplayName stored DisplayName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConditionValuesDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ConditionValuesDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CombinedPaymentPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CombinedPaymentPreferencesType = class(TRemotable)
  private
    FCalculatedShippingPreferences: CalculatedShippingPreferencesType;
    FCalculatedShippingPreferences_Specified: boolean;
    FCombinedPaymentOption: CombinedPaymentOptionCodeType;
    FCombinedPaymentOption_Specified: boolean;
    FCombinedPaymentPeriod: CombinedPaymentPeriodCodeType;
    FCombinedPaymentPeriod_Specified: boolean;
    FFlatShippingPreferences: FlatShippingPreferencesType;
    FFlatShippingPreferences_Specified: boolean;
    procedure SetCalculatedShippingPreferences(Index: Integer; const ACalculatedShippingPreferencesType: CalculatedShippingPreferencesType);
    function  CalculatedShippingPreferences_Specified(Index: Integer): boolean;
    procedure SetCombinedPaymentOption(Index: Integer; const ACombinedPaymentOptionCodeType: CombinedPaymentOptionCodeType);
    function  CombinedPaymentOption_Specified(Index: Integer): boolean;
    procedure SetCombinedPaymentPeriod(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
    function  CombinedPaymentPeriod_Specified(Index: Integer): boolean;
    procedure SetFlatShippingPreferences(Index: Integer; const AFlatShippingPreferencesType: FlatShippingPreferencesType);
    function  FlatShippingPreferences_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CalculatedShippingPreferences: CalculatedShippingPreferencesType  Index (IS_OPTN) read FCalculatedShippingPreferences write SetCalculatedShippingPreferences stored CalculatedShippingPreferences_Specified;
    property CombinedPaymentOption:         CombinedPaymentOptionCodeType      Index (IS_OPTN) read FCombinedPaymentOption write SetCombinedPaymentOption stored CombinedPaymentOption_Specified;
    property CombinedPaymentPeriod:         CombinedPaymentPeriodCodeType      Index (IS_OPTN) read FCombinedPaymentPeriod write SetCombinedPaymentPeriod stored CombinedPaymentPeriod_Specified;
    property FlatShippingPreferences:       FlatShippingPreferencesType        Index (IS_OPTN) read FFlatShippingPreferences write SetFlatShippingPreferences stored FlatShippingPreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : CompatibleVehicleTypeDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CompatibleVehicleTypeDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CrossBorderTradeGBEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossBorderTradeGBEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CrossBorderTradeNorthAmericaEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossBorderTradeNorthAmericaEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CrossPromotionPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossPromotionPreferencesType = class(TRemotable)
  private
    FCrossPromotionEnabled: Boolean;
    FCrossPromotionEnabled_Specified: boolean;
    FCrossSellItemFormatSortFilter: ItemFormatSortFilterCodeType;
    FCrossSellItemFormatSortFilter_Specified: boolean;
    FCrossSellGallerySortFilter: GallerySortFilterCodeType;
    FCrossSellGallerySortFilter_Specified: boolean;
    FCrossSellItemSortFilter: ItemSortFilterCodeType;
    FCrossSellItemSortFilter_Specified: boolean;
    FUpSellItemFormatSortFilter: ItemFormatSortFilterCodeType;
    FUpSellItemFormatSortFilter_Specified: boolean;
    FUpSellGallerySortFilter: GallerySortFilterCodeType;
    FUpSellGallerySortFilter_Specified: boolean;
    FUpSellItemSortFilter: ItemSortFilterCodeType;
    FUpSellItemSortFilter_Specified: boolean;
    procedure SetCrossPromotionEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossPromotionEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossSellItemFormatSortFilter(Index: Integer; const AItemFormatSortFilterCodeType: ItemFormatSortFilterCodeType);
    function  CrossSellItemFormatSortFilter_Specified(Index: Integer): boolean;
    procedure SetCrossSellGallerySortFilter(Index: Integer; const AGallerySortFilterCodeType: GallerySortFilterCodeType);
    function  CrossSellGallerySortFilter_Specified(Index: Integer): boolean;
    procedure SetCrossSellItemSortFilter(Index: Integer; const AItemSortFilterCodeType: ItemSortFilterCodeType);
    function  CrossSellItemSortFilter_Specified(Index: Integer): boolean;
    procedure SetUpSellItemFormatSortFilter(Index: Integer; const AItemFormatSortFilterCodeType: ItemFormatSortFilterCodeType);
    function  UpSellItemFormatSortFilter_Specified(Index: Integer): boolean;
    procedure SetUpSellGallerySortFilter(Index: Integer; const AGallerySortFilterCodeType: GallerySortFilterCodeType);
    function  UpSellGallerySortFilter_Specified(Index: Integer): boolean;
    procedure SetUpSellItemSortFilter(Index: Integer; const AItemSortFilterCodeType: ItemSortFilterCodeType);
    function  UpSellItemSortFilter_Specified(Index: Integer): boolean;
  published
    property CrossPromotionEnabled:         Boolean                       Index (IS_OPTN) read FCrossPromotionEnabled write SetCrossPromotionEnabled stored CrossPromotionEnabled_Specified;
    property CrossSellItemFormatSortFilter: ItemFormatSortFilterCodeType  Index (IS_OPTN) read FCrossSellItemFormatSortFilter write SetCrossSellItemFormatSortFilter stored CrossSellItemFormatSortFilter_Specified;
    property CrossSellGallerySortFilter:    GallerySortFilterCodeType     Index (IS_OPTN) read FCrossSellGallerySortFilter write SetCrossSellGallerySortFilter stored CrossSellGallerySortFilter_Specified;
    property CrossSellItemSortFilter:       ItemSortFilterCodeType        Index (IS_OPTN) read FCrossSellItemSortFilter write SetCrossSellItemSortFilter stored CrossSellItemSortFilter_Specified;
    property UpSellItemFormatSortFilter:    ItemFormatSortFilterCodeType  Index (IS_OPTN) read FUpSellItemFormatSortFilter write SetUpSellItemFormatSortFilter stored UpSellItemFormatSortFilter_Specified;
    property UpSellGallerySortFilter:       GallerySortFilterCodeType     Index (IS_OPTN) read FUpSellGallerySortFilter write SetUpSellGallerySortFilter stored UpSellGallerySortFilter_Specified;
    property UpSellItemSortFilter:          ItemSortFilterCodeType        Index (IS_OPTN) read FUpSellItemSortFilter write SetUpSellItemSortFilter stored UpSellItemSortFilter_Specified;
  end;



  // ************************************************************************ //
  // XML       : ContactHoursDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ContactHoursDetailsType = class(TRemotable)
  private
    FTimeZoneID: string;
    FTimeZoneID_Specified: boolean;
    FHours1Days: DaysCodeType;
    FHours1Days_Specified: boolean;
    FHours1AnyTime: Boolean;
    FHours1AnyTime_Specified: boolean;
    FHours1From: TXSTime;
    FHours1From_Specified: boolean;
    FHours1To: TXSTime;
    FHours1To_Specified: boolean;
    FHours2Days: DaysCodeType;
    FHours2Days_Specified: boolean;
    FHours2AnyTime: Boolean;
    FHours2AnyTime_Specified: boolean;
    FHours2From: TXSTime;
    FHours2From_Specified: boolean;
    FHours2To: TXSTime;
    FHours2To_Specified: boolean;
    procedure SetTimeZoneID(Index: Integer; const Astring: string);
    function  TimeZoneID_Specified(Index: Integer): boolean;
    procedure SetHours1Days(Index: Integer; const ADaysCodeType: DaysCodeType);
    function  Hours1Days_Specified(Index: Integer): boolean;
    procedure SetHours1AnyTime(Index: Integer; const ABoolean: Boolean);
    function  Hours1AnyTime_Specified(Index: Integer): boolean;
    procedure SetHours1From(Index: Integer; const ATXSTime: TXSTime);
    function  Hours1From_Specified(Index: Integer): boolean;
    procedure SetHours1To(Index: Integer; const ATXSTime: TXSTime);
    function  Hours1To_Specified(Index: Integer): boolean;
    procedure SetHours2Days(Index: Integer; const ADaysCodeType: DaysCodeType);
    function  Hours2Days_Specified(Index: Integer): boolean;
    procedure SetHours2AnyTime(Index: Integer; const ABoolean: Boolean);
    function  Hours2AnyTime_Specified(Index: Integer): boolean;
    procedure SetHours2From(Index: Integer; const ATXSTime: TXSTime);
    function  Hours2From_Specified(Index: Integer): boolean;
    procedure SetHours2To(Index: Integer; const ATXSTime: TXSTime);
    function  Hours2To_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property TimeZoneID:    string        Index (IS_OPTN) read FTimeZoneID write SetTimeZoneID stored TimeZoneID_Specified;
    property Hours1Days:    DaysCodeType  Index (IS_OPTN) read FHours1Days write SetHours1Days stored Hours1Days_Specified;
    property Hours1AnyTime: Boolean       Index (IS_OPTN) read FHours1AnyTime write SetHours1AnyTime stored Hours1AnyTime_Specified;
    property Hours1From:    TXSTime       Index (IS_OPTN) read FHours1From write SetHours1From stored Hours1From_Specified;
    property Hours1To:      TXSTime       Index (IS_OPTN) read FHours1To write SetHours1To stored Hours1To_Specified;
    property Hours2Days:    DaysCodeType  Index (IS_OPTN) read FHours2Days write SetHours2Days stored Hours2Days_Specified;
    property Hours2AnyTime: Boolean       Index (IS_OPTN) read FHours2AnyTime write SetHours2AnyTime stored Hours2AnyTime_Specified;
    property Hours2From:    TXSTime       Index (IS_OPTN) read FHours2From write SetHours2From stored Hours2From_Specified;
    property Hours2To:      TXSTime       Index (IS_OPTN) read FHours2To write SetHours2To stored Hours2To_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerAutoRelistType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAutoRelistType = class(TRemotable)
  private
    FType_: SellingManagerAutoRelistTypeCodeType;
    FType__Specified: boolean;
    FRelistCondition: SellingManagerAutoRelistOptionCodeType;
    FRelistCondition_Specified: boolean;
    FRelistAfterDays: Integer;
    FRelistAfterDays_Specified: boolean;
    FRelistAfterHours: Integer;
    FRelistAfterHours_Specified: boolean;
    FRelistAtSpecificTimeOfDay: TXSTime;
    FRelistAtSpecificTimeOfDay_Specified: boolean;
    FBestOfferDetails: BestOfferDetailsType;
    FBestOfferDetails_Specified: boolean;
    FListingHoldInventoryLevel: Integer;
    FListingHoldInventoryLevel_Specified: boolean;
    procedure SetType_(Index: Integer; const ASellingManagerAutoRelistTypeCodeType: SellingManagerAutoRelistTypeCodeType);
    function  Type__Specified(Index: Integer): boolean;
    procedure SetRelistCondition(Index: Integer; const ASellingManagerAutoRelistOptionCodeType: SellingManagerAutoRelistOptionCodeType);
    function  RelistCondition_Specified(Index: Integer): boolean;
    procedure SetRelistAfterDays(Index: Integer; const AInteger: Integer);
    function  RelistAfterDays_Specified(Index: Integer): boolean;
    procedure SetRelistAfterHours(Index: Integer; const AInteger: Integer);
    function  RelistAfterHours_Specified(Index: Integer): boolean;
    procedure SetRelistAtSpecificTimeOfDay(Index: Integer; const ATXSTime: TXSTime);
    function  RelistAtSpecificTimeOfDay_Specified(Index: Integer): boolean;
    procedure SetBestOfferDetails(Index: Integer; const ABestOfferDetailsType: BestOfferDetailsType);
    function  BestOfferDetails_Specified(Index: Integer): boolean;
    procedure SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
    function  ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Type_:                     SellingManagerAutoRelistTypeCodeType    Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
    property RelistCondition:           SellingManagerAutoRelistOptionCodeType  Index (IS_OPTN) read FRelistCondition write SetRelistCondition stored RelistCondition_Specified;
    property RelistAfterDays:           Integer                                 Index (IS_OPTN) read FRelistAfterDays write SetRelistAfterDays stored RelistAfterDays_Specified;
    property RelistAfterHours:          Integer                                 Index (IS_OPTN) read FRelistAfterHours write SetRelistAfterHours stored RelistAfterHours_Specified;
    property RelistAtSpecificTimeOfDay: TXSTime                                 Index (IS_OPTN) read FRelistAtSpecificTimeOfDay write SetRelistAtSpecificTimeOfDay stored RelistAtSpecificTimeOfDay_Specified;
    property BestOfferDetails:          BestOfferDetailsType                    Index (IS_OPTN) read FBestOfferDetails write SetBestOfferDetails stored BestOfferDetails_Specified;
    property ListingHoldInventoryLevel: Integer                                 Index (IS_OPTN) read FListingHoldInventoryLevel write SetListingHoldInventoryLevel stored ListingHoldInventoryLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : DispatchCutoffTimePreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DispatchCutoffTimePreferencesType = class(TRemotable)
  private
    FCutoffTime: TXSTime;
    FCutoffTime_Specified: boolean;
    procedure SetCutoffTime(Index: Integer; const ATXSTime: TXSTime);
    function  CutoffTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CutoffTime: TXSTime  Index (IS_OPTN) read FCutoffTime write SetCutoffTime stored CutoffTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerAutoListAccordingToScheduleType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAutoListAccordingToScheduleType = class(TRemotable)
  private
    FDayOfWeek: Array_Of_DayOfWeekCodeType;
    FDayOfWeek_Specified: boolean;
    FListingPeriodInWeeks: Integer;
    FListingPeriodInWeeks_Specified: boolean;
    FListAtSpecificTimeOfDay: TXSTime;
    FListAtSpecificTimeOfDay_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FMaxActiveItemCount: Integer;
    FMaxActiveItemCount_Specified: boolean;
    FListingHoldInventoryLevel: Integer;
    FListingHoldInventoryLevel_Specified: boolean;
    procedure SetDayOfWeek(Index: Integer; const AArray_Of_DayOfWeekCodeType: Array_Of_DayOfWeekCodeType);
    function  DayOfWeek_Specified(Index: Integer): boolean;
    procedure SetListingPeriodInWeeks(Index: Integer; const AInteger: Integer);
    function  ListingPeriodInWeeks_Specified(Index: Integer): boolean;
    procedure SetListAtSpecificTimeOfDay(Index: Integer; const ATXSTime: TXSTime);
    function  ListAtSpecificTimeOfDay_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetMaxActiveItemCount(Index: Integer; const AInteger: Integer);
    function  MaxActiveItemCount_Specified(Index: Integer): boolean;
    procedure SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
    function  ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DayOfWeek:                 Array_Of_DayOfWeekCodeType  Index (IS_OPTN or IS_UNBD) read FDayOfWeek write SetDayOfWeek stored DayOfWeek_Specified;
    property ListingPeriodInWeeks:      Integer                     Index (IS_OPTN) read FListingPeriodInWeeks write SetListingPeriodInWeeks stored ListingPeriodInWeeks_Specified;
    property ListAtSpecificTimeOfDay:   TXSTime                     Index (IS_OPTN) read FListAtSpecificTimeOfDay write SetListAtSpecificTimeOfDay stored ListAtSpecificTimeOfDay_Specified;
    property StartTime:                 TXSDateTime                 Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                   TXSDateTime                 Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property MaxActiveItemCount:        Integer                     Index (IS_OPTN) read FMaxActiveItemCount write SetMaxActiveItemCount stored MaxActiveItemCount_Specified;
    property ListingHoldInventoryLevel: Integer                     Index (IS_OPTN) read FListingHoldInventoryLevel write SetListingHoldInventoryLevel stored ListingHoldInventoryLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerAutoListMinActiveItemsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAutoListMinActiveItemsType = class(TRemotable)
  private
    FMinActiveItemCount: Integer;
    FMinActiveItemCount_Specified: boolean;
    FListTimeFrom: TXSTime;
    FListTimeFrom_Specified: boolean;
    FListTimeTo: TXSTime;
    FListTimeTo_Specified: boolean;
    FSpacingIntervalInMinutes: Integer;
    FSpacingIntervalInMinutes_Specified: boolean;
    FListingHoldInventoryLevel: Integer;
    FListingHoldInventoryLevel_Specified: boolean;
    procedure SetMinActiveItemCount(Index: Integer; const AInteger: Integer);
    function  MinActiveItemCount_Specified(Index: Integer): boolean;
    procedure SetListTimeFrom(Index: Integer; const ATXSTime: TXSTime);
    function  ListTimeFrom_Specified(Index: Integer): boolean;
    procedure SetListTimeTo(Index: Integer; const ATXSTime: TXSTime);
    function  ListTimeTo_Specified(Index: Integer): boolean;
    procedure SetSpacingIntervalInMinutes(Index: Integer; const AInteger: Integer);
    function  SpacingIntervalInMinutes_Specified(Index: Integer): boolean;
    procedure SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
    function  ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MinActiveItemCount:        Integer  Index (IS_OPTN) read FMinActiveItemCount write SetMinActiveItemCount stored MinActiveItemCount_Specified;
    property ListTimeFrom:              TXSTime  Index (IS_OPTN) read FListTimeFrom write SetListTimeFrom stored ListTimeFrom_Specified;
    property ListTimeTo:                TXSTime  Index (IS_OPTN) read FListTimeTo write SetListTimeTo stored ListTimeTo_Specified;
    property SpacingIntervalInMinutes:  Integer  Index (IS_OPTN) read FSpacingIntervalInMinutes write SetSpacingIntervalInMinutes stored SpacingIntervalInMinutes_Specified;
    property ListingHoldInventoryLevel: Integer  Index (IS_OPTN) read FListingHoldInventoryLevel write SetListingHoldInventoryLevel stored ListingHoldInventoryLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : CrossBorderTradeAustraliaEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossBorderTradeAustraliaEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DigitalGoodInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalGoodInfoType = class(TRemotable)
  private
    FDigitalDelivery: Boolean;
    FDigitalDelivery_Specified: boolean;
    procedure SetDigitalDelivery(Index: Integer; const ABoolean: Boolean);
    function  DigitalDelivery_Specified(Index: Integer): boolean;
  published
    property DigitalDelivery: Boolean  Index (IS_OPTN) read FDigitalDelivery write SetDigitalDelivery stored DigitalDelivery_Specified;
  end;



  // ************************************************************************ //
  // XML       : EANEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EANEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EANIdentifierEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EANIdentifierEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndOfAuctionEmailPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EndOfAuctionEmailPreferencesType = class(TRemotable)
  private
    FTemplateText: string;
    FTemplateText_Specified: boolean;
    FLogoURL: string;
    FLogoURL_Specified: boolean;
    FLogoType: EndOfAuctionLogoTypeCodeType;
    FLogoType_Specified: boolean;
    FEmailCustomized: Boolean;
    FEmailCustomized_Specified: boolean;
    FTextCustomized: Boolean;
    FTextCustomized_Specified: boolean;
    FLogoCustomized: Boolean;
    FLogoCustomized_Specified: boolean;
    FCopyEmail: Boolean;
    FCopyEmail_Specified: boolean;
    procedure SetTemplateText(Index: Integer; const Astring: string);
    function  TemplateText_Specified(Index: Integer): boolean;
    procedure SetLogoURL(Index: Integer; const Astring: string);
    function  LogoURL_Specified(Index: Integer): boolean;
    procedure SetLogoType(Index: Integer; const AEndOfAuctionLogoTypeCodeType: EndOfAuctionLogoTypeCodeType);
    function  LogoType_Specified(Index: Integer): boolean;
    procedure SetEmailCustomized(Index: Integer; const ABoolean: Boolean);
    function  EmailCustomized_Specified(Index: Integer): boolean;
    procedure SetTextCustomized(Index: Integer; const ABoolean: Boolean);
    function  TextCustomized_Specified(Index: Integer): boolean;
    procedure SetLogoCustomized(Index: Integer; const ABoolean: Boolean);
    function  LogoCustomized_Specified(Index: Integer): boolean;
    procedure SetCopyEmail(Index: Integer; const ABoolean: Boolean);
    function  CopyEmail_Specified(Index: Integer): boolean;
  published
    property TemplateText:    string                        Index (IS_OPTN) read FTemplateText write SetTemplateText stored TemplateText_Specified;
    property LogoURL:         string                        Index (IS_OPTN) read FLogoURL write SetLogoURL stored LogoURL_Specified;
    property LogoType:        EndOfAuctionLogoTypeCodeType  Index (IS_OPTN) read FLogoType write SetLogoType stored LogoType_Specified;
    property EmailCustomized: Boolean                       Index (IS_OPTN) read FEmailCustomized write SetEmailCustomized stored EmailCustomized_Specified;
    property TextCustomized:  Boolean                       Index (IS_OPTN) read FTextCustomized write SetTextCustomized stored TextCustomized_Specified;
    property LogoCustomized:  Boolean                       Index (IS_OPTN) read FLogoCustomized write SetLogoCustomized stored LogoCustomized_Specified;
    property CopyEmail:       Boolean                       Index (IS_OPTN) read FCopyEmail write SetCopyEmail stored CopyEmail_Specified;
  end;



  // ************************************************************************ //
  // XML       : DomesticReturnsShipmentPayeeDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DomesticReturnsShipmentPayeeDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DutchBINEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DutchBINEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EpidSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EpidSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExtendedContactDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExtendedContactDetailsType = class(TRemotable)
  private
    FContactHoursDetails: ContactHoursDetailsType;
    FContactHoursDetails_Specified: boolean;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FClassifiedAdContactByEmailEnabled_Specified: boolean;
    FPayPerLeadPhoneNumber: string;
    FPayPerLeadPhoneNumber_Specified: boolean;
    procedure SetContactHoursDetails(Index: Integer; const AContactHoursDetailsType: ContactHoursDetailsType);
    function  ContactHoursDetails_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetPayPerLeadPhoneNumber(Index: Integer; const Astring: string);
    function  PayPerLeadPhoneNumber_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ContactHoursDetails:               ContactHoursDetailsType  Index (IS_OPTN) read FContactHoursDetails write SetContactHoursDetails stored ContactHoursDetails_Specified;
    property ClassifiedAdContactByEmailEnabled: Boolean                  Index (IS_OPTN) read FClassifiedAdContactByEmailEnabled write SetClassifiedAdContactByEmailEnabled stored ClassifiedAdContactByEmailEnabled_Specified;
    property PayPerLeadPhoneNumber:             string                   Index (IS_OPTN) read FPayPerLeadPhoneNumber write SetPayPerLeadPhoneNumber stored PayPerLeadPhoneNumber_Specified;
  end;

  ExtendedPictureDetailsType = array of PictureURLsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : VariationSpecificPictureSetType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationSpecificPictureSetType = class(TRemotable)
  private
    FVariationSpecificValue: string;
    FVariationSpecificValue_Specified: boolean;
    FPictureURL: Array_Of_anyURI;
    FPictureURL_Specified: boolean;
    FGalleryURL: string;
    FGalleryURL_Specified: boolean;
    FExternalPictureURL: Array_Of_anyURI;
    FExternalPictureURL_Specified: boolean;
    FExtendedPictureDetails: ExtendedPictureDetailsType;
    FExtendedPictureDetails_Specified: boolean;
    procedure SetVariationSpecificValue(Index: Integer; const Astring: string);
    function  VariationSpecificValue_Specified(Index: Integer): boolean;
    procedure SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  PictureURL_Specified(Index: Integer): boolean;
    procedure SetGalleryURL(Index: Integer; const Astring: string);
    function  GalleryURL_Specified(Index: Integer): boolean;
    procedure SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  ExternalPictureURL_Specified(Index: Integer): boolean;
    procedure SetExtendedPictureDetails(Index: Integer; const AExtendedPictureDetailsType: ExtendedPictureDetailsType);
    function  ExtendedPictureDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property VariationSpecificValue: string                      Index (IS_OPTN) read FVariationSpecificValue write SetVariationSpecificValue stored VariationSpecificValue_Specified;
    property PictureURL:             Array_Of_anyURI             Index (IS_OPTN or IS_UNBD) read FPictureURL write SetPictureURL stored PictureURL_Specified;
    property GalleryURL:             string                      Index (IS_OPTN) read FGalleryURL write SetGalleryURL stored GalleryURL_Specified;
    property ExternalPictureURL:     Array_Of_anyURI             Index (IS_OPTN or IS_UNBD) read FExternalPictureURL write SetExternalPictureURL stored ExternalPictureURL_Specified;
    property ExtendedPictureDetails: ExtendedPictureDetailsType  Index (IS_OPTN) read FExtendedPictureDetails write SetExtendedPictureDetails stored ExtendedPictureDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : PictureDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureDetailsType = class(TRemotable)
  private
    FGalleryType: GalleryTypeCodeType;
    FGalleryType_Specified: boolean;
    FPhotoDisplay: PhotoDisplayCodeType;
    FPhotoDisplay_Specified: boolean;
    FPictureURL: Array_Of_anyURI;
    FPictureURL_Specified: boolean;
    FPictureSource: PictureSourceCodeType;
    FPictureSource_Specified: boolean;
    FGalleryStatus: GalleryStatusCodeType;
    FGalleryStatus_Specified: boolean;
    FGalleryErrorInfo: string;
    FGalleryErrorInfo_Specified: boolean;
    FExternalPictureURL: Array_Of_anyURI;
    FExternalPictureURL_Specified: boolean;
    FExtendedPictureDetails: ExtendedPictureDetailsType;
    FExtendedPictureDetails_Specified: boolean;
    procedure SetGalleryType(Index: Integer; const AGalleryTypeCodeType: GalleryTypeCodeType);
    function  GalleryType_Specified(Index: Integer): boolean;
    procedure SetPhotoDisplay(Index: Integer; const APhotoDisplayCodeType: PhotoDisplayCodeType);
    function  PhotoDisplay_Specified(Index: Integer): boolean;
    procedure SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  PictureURL_Specified(Index: Integer): boolean;
    procedure SetPictureSource(Index: Integer; const APictureSourceCodeType: PictureSourceCodeType);
    function  PictureSource_Specified(Index: Integer): boolean;
    procedure SetGalleryStatus(Index: Integer; const AGalleryStatusCodeType: GalleryStatusCodeType);
    function  GalleryStatus_Specified(Index: Integer): boolean;
    procedure SetGalleryErrorInfo(Index: Integer; const Astring: string);
    function  GalleryErrorInfo_Specified(Index: Integer): boolean;
    procedure SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  ExternalPictureURL_Specified(Index: Integer): boolean;
    procedure SetExtendedPictureDetails(Index: Integer; const AExtendedPictureDetailsType: ExtendedPictureDetailsType);
    function  ExtendedPictureDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property GalleryType:            GalleryTypeCodeType         Index (IS_OPTN) read FGalleryType write SetGalleryType stored GalleryType_Specified;
    property PhotoDisplay:           PhotoDisplayCodeType        Index (IS_OPTN) read FPhotoDisplay write SetPhotoDisplay stored PhotoDisplay_Specified;
    property PictureURL:             Array_Of_anyURI             Index (IS_OPTN or IS_UNBD) read FPictureURL write SetPictureURL stored PictureURL_Specified;
    property PictureSource:          PictureSourceCodeType       Index (IS_OPTN) read FPictureSource write SetPictureSource stored PictureSource_Specified;
    property GalleryStatus:          GalleryStatusCodeType       Index (IS_OPTN) read FGalleryStatus write SetGalleryStatus stored GalleryStatus_Specified;
    property GalleryErrorInfo:       string                      Index (IS_OPTN) read FGalleryErrorInfo write SetGalleryErrorInfo stored GalleryErrorInfo_Specified;
    property ExternalPictureURL:     Array_Of_anyURI             Index (IS_OPTN or IS_UNBD) read FExternalPictureURL write SetExternalPictureURL stored ExternalPictureURL_Specified;
    property ExtendedPictureDetails: ExtendedPictureDetailsType  Index (IS_OPTN) read FExtendedPictureDetails write SetExtendedPictureDetails stored ExtendedPictureDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : PictureURLsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureURLsType = class(TRemotable)
  private
    FeBayPictureURL: string;
    FeBayPictureURL_Specified: boolean;
    FExternalPictureURL: string;
    FExternalPictureURL_Specified: boolean;
    procedure SeteBayPictureURL(Index: Integer; const Astring: string);
    function  eBayPictureURL_Specified(Index: Integer): boolean;
    procedure SetExternalPictureURL(Index: Integer; const Astring: string);
    function  ExternalPictureURL_Specified(Index: Integer): boolean;
  published
    property eBayPictureURL:     string  Index (IS_OPTN) read FeBayPictureURL write SeteBayPictureURL stored eBayPictureURL_Specified;
    property ExternalPictureURL: string  Index (IS_OPTN) read FExternalPictureURL write SetExternalPictureURL stored ExternalPictureURL_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExpressConditionRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressConditionRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExpressEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExpressPicturesRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressPicturesRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DiscountPriceInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DiscountPriceInfoType = class(TRemotable)
  private
    FOriginalRetailPrice: AmountType;
    FOriginalRetailPrice_Specified: boolean;
    FMinimumAdvertisedPrice: AmountType;
    FMinimumAdvertisedPrice_Specified: boolean;
    FMinimumAdvertisedPriceExposure: MinimumAdvertisedPriceExposureCodeType;
    FMinimumAdvertisedPriceExposure_Specified: boolean;
    FPricingTreatment: PricingTreatmentCodeType;
    FPricingTreatment_Specified: boolean;
    FSoldOneBay: Boolean;
    FSoldOneBay_Specified: boolean;
    FSoldOffeBay: Boolean;
    FSoldOffeBay_Specified: boolean;
    FMadeForOutletComparisonPrice: AmountType;
    FMadeForOutletComparisonPrice_Specified: boolean;
    procedure SetOriginalRetailPrice(Index: Integer; const AAmountType: AmountType);
    function  OriginalRetailPrice_Specified(Index: Integer): boolean;
    procedure SetMinimumAdvertisedPrice(Index: Integer; const AAmountType: AmountType);
    function  MinimumAdvertisedPrice_Specified(Index: Integer): boolean;
    procedure SetMinimumAdvertisedPriceExposure(Index: Integer; const AMinimumAdvertisedPriceExposureCodeType: MinimumAdvertisedPriceExposureCodeType);
    function  MinimumAdvertisedPriceExposure_Specified(Index: Integer): boolean;
    procedure SetPricingTreatment(Index: Integer; const APricingTreatmentCodeType: PricingTreatmentCodeType);
    function  PricingTreatment_Specified(Index: Integer): boolean;
    procedure SetSoldOneBay(Index: Integer; const ABoolean: Boolean);
    function  SoldOneBay_Specified(Index: Integer): boolean;
    procedure SetSoldOffeBay(Index: Integer; const ABoolean: Boolean);
    function  SoldOffeBay_Specified(Index: Integer): boolean;
    procedure SetMadeForOutletComparisonPrice(Index: Integer; const AAmountType: AmountType);
    function  MadeForOutletComparisonPrice_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OriginalRetailPrice:            AmountType                              Index (IS_OPTN) read FOriginalRetailPrice write SetOriginalRetailPrice stored OriginalRetailPrice_Specified;
    property MinimumAdvertisedPrice:         AmountType                              Index (IS_OPTN) read FMinimumAdvertisedPrice write SetMinimumAdvertisedPrice stored MinimumAdvertisedPrice_Specified;
    property MinimumAdvertisedPriceExposure: MinimumAdvertisedPriceExposureCodeType  Index (IS_OPTN) read FMinimumAdvertisedPriceExposure write SetMinimumAdvertisedPriceExposure stored MinimumAdvertisedPriceExposure_Specified;
    property PricingTreatment:               PricingTreatmentCodeType                Index (IS_OPTN) read FPricingTreatment write SetPricingTreatment stored PricingTreatment_Specified;
    property SoldOneBay:                     Boolean                                 Index (IS_OPTN) read FSoldOneBay write SetSoldOneBay stored SoldOneBay_Specified;
    property SoldOffeBay:                    Boolean                                 Index (IS_OPTN) read FSoldOffeBay write SetSoldOffeBay stored SoldOffeBay_Specified;
    property MadeForOutletComparisonPrice:   AmountType                              Index (IS_OPTN) read FMadeForOutletComparisonPrice write SetMadeForOutletComparisonPrice stored MadeForOutletComparisonPrice_Specified;
  end;



  // ************************************************************************ //
  // XML       : DisputeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeType = class(TRemotable)
  private
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    FDisputeRecordType: DisputeRecordTypeCodeType;
    FDisputeRecordType_Specified: boolean;
    FDisputeState: DisputeStateCodeType;
    FDisputeState_Specified: boolean;
    FDisputeStatus: DisputeStatusCodeType;
    FDisputeStatus_Specified: boolean;
    FOtherPartyRole: TradingRoleCodeType;
    FOtherPartyRole_Specified: boolean;
    FOtherPartyName: string;
    FOtherPartyName_Specified: boolean;
    FUserRole: TradingRoleCodeType;
    FUserRole_Specified: boolean;
    FBuyerUserID: UserIDType;
    FBuyerUserID_Specified: boolean;
    FSellerUserID: UserIDType;
    FSellerUserID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    FDisputeReason: DisputeReasonCodeType;
    FDisputeReason_Specified: boolean;
    FDisputeExplanation: DisputeExplanationCodeType;
    FDisputeExplanation_Specified: boolean;
    FDisputeCreditEligibility: DisputeCreditEligibilityCodeType;
    FDisputeCreditEligibility_Specified: boolean;
    FDisputeCreatedTime: TXSDateTime;
    FDisputeCreatedTime_Specified: boolean;
    FDisputeModifiedTime: TXSDateTime;
    FDisputeModifiedTime_Specified: boolean;
    FDisputeResolution: Array_Of_DisputeResolutionType;
    FDisputeResolution_Specified: boolean;
    FDisputeMessage: Array_Of_DisputeMessageType;
    FDisputeMessage_Specified: boolean;
    FEscalation: Boolean;
    FEscalation_Specified: boolean;
    FPurchaseProtection: Boolean;
    FPurchaseProtection_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
    procedure SetDisputeRecordType(Index: Integer; const ADisputeRecordTypeCodeType: DisputeRecordTypeCodeType);
    function  DisputeRecordType_Specified(Index: Integer): boolean;
    procedure SetDisputeState(Index: Integer; const ADisputeStateCodeType: DisputeStateCodeType);
    function  DisputeState_Specified(Index: Integer): boolean;
    procedure SetDisputeStatus(Index: Integer; const ADisputeStatusCodeType: DisputeStatusCodeType);
    function  DisputeStatus_Specified(Index: Integer): boolean;
    procedure SetOtherPartyRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  OtherPartyRole_Specified(Index: Integer): boolean;
    procedure SetOtherPartyName(Index: Integer; const Astring: string);
    function  OtherPartyName_Specified(Index: Integer): boolean;
    procedure SetUserRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  UserRole_Specified(Index: Integer): boolean;
    procedure SetBuyerUserID(Index: Integer; const AUserIDType: UserIDType);
    function  BuyerUserID_Specified(Index: Integer): boolean;
    procedure SetSellerUserID(Index: Integer; const AUserIDType: UserIDType);
    function  SellerUserID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDisputeReason(Index: Integer; const ADisputeReasonCodeType: DisputeReasonCodeType);
    function  DisputeReason_Specified(Index: Integer): boolean;
    procedure SetDisputeExplanation(Index: Integer; const ADisputeExplanationCodeType: DisputeExplanationCodeType);
    function  DisputeExplanation_Specified(Index: Integer): boolean;
    procedure SetDisputeCreditEligibility(Index: Integer; const ADisputeCreditEligibilityCodeType: DisputeCreditEligibilityCodeType);
    function  DisputeCreditEligibility_Specified(Index: Integer): boolean;
    procedure SetDisputeCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DisputeCreatedTime_Specified(Index: Integer): boolean;
    procedure SetDisputeModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DisputeModifiedTime_Specified(Index: Integer): boolean;
    procedure SetDisputeResolution(Index: Integer; const AArray_Of_DisputeResolutionType: Array_Of_DisputeResolutionType);
    function  DisputeResolution_Specified(Index: Integer): boolean;
    procedure SetDisputeMessage(Index: Integer; const AArray_Of_DisputeMessageType: Array_Of_DisputeMessageType);
    function  DisputeMessage_Specified(Index: Integer): boolean;
    procedure SetEscalation(Index: Integer; const ABoolean: Boolean);
    function  Escalation_Specified(Index: Integer): boolean;
    procedure SetPurchaseProtection(Index: Integer; const ABoolean: Boolean);
    function  PurchaseProtection_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DisputeID:                DisputeIDType                     Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
    property DisputeRecordType:        DisputeRecordTypeCodeType         Index (IS_OPTN) read FDisputeRecordType write SetDisputeRecordType stored DisputeRecordType_Specified;
    property DisputeState:             DisputeStateCodeType              Index (IS_OPTN) read FDisputeState write SetDisputeState stored DisputeState_Specified;
    property DisputeStatus:            DisputeStatusCodeType             Index (IS_OPTN) read FDisputeStatus write SetDisputeStatus stored DisputeStatus_Specified;
    property OtherPartyRole:           TradingRoleCodeType               Index (IS_OPTN) read FOtherPartyRole write SetOtherPartyRole stored OtherPartyRole_Specified;
    property OtherPartyName:           string                            Index (IS_OPTN) read FOtherPartyName write SetOtherPartyName stored OtherPartyName_Specified;
    property UserRole:                 TradingRoleCodeType               Index (IS_OPTN) read FUserRole write SetUserRole stored UserRole_Specified;
    property BuyerUserID:              UserIDType                        Index (IS_OPTN) read FBuyerUserID write SetBuyerUserID stored BuyerUserID_Specified;
    property SellerUserID:             UserIDType                        Index (IS_OPTN) read FSellerUserID write SetSellerUserID stored SellerUserID_Specified;
    property TransactionID:            string                            Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property Item:                     ItemType                          Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DisputeReason:            DisputeReasonCodeType             Index (IS_OPTN) read FDisputeReason write SetDisputeReason stored DisputeReason_Specified;
    property DisputeExplanation:       DisputeExplanationCodeType        Index (IS_OPTN) read FDisputeExplanation write SetDisputeExplanation stored DisputeExplanation_Specified;
    property DisputeCreditEligibility: DisputeCreditEligibilityCodeType  Index (IS_OPTN) read FDisputeCreditEligibility write SetDisputeCreditEligibility stored DisputeCreditEligibility_Specified;
    property DisputeCreatedTime:       TXSDateTime                       Index (IS_OPTN) read FDisputeCreatedTime write SetDisputeCreatedTime stored DisputeCreatedTime_Specified;
    property DisputeModifiedTime:      TXSDateTime                       Index (IS_OPTN) read FDisputeModifiedTime write SetDisputeModifiedTime stored DisputeModifiedTime_Specified;
    property DisputeResolution:        Array_Of_DisputeResolutionType    Index (IS_OPTN or IS_UNBD) read FDisputeResolution write SetDisputeResolution stored DisputeResolution_Specified;
    property DisputeMessage:           Array_Of_DisputeMessageType       Index (IS_OPTN or IS_UNBD) read FDisputeMessage write SetDisputeMessage stored DisputeMessage_Specified;
    property Escalation:               Boolean                           Index (IS_OPTN) read FEscalation write SetEscalation stored Escalation_Specified;
    property PurchaseProtection:       Boolean                           Index (IS_OPTN) read FPurchaseProtection write SetPurchaseProtection stored PurchaseProtection_Specified;
    property OrderLineItemID:          string                            Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DomesticReturnsAcceptedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DomesticReturnsAcceptedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DomesticReturnsDurationDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DomesticReturnsDurationDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DistanceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DistanceType = class(TRemotable)
  private
    FDistanceMeasurement: Integer;
    FDistanceUnit: string;
    FDistanceUnit_Specified: boolean;
    procedure SetDistanceUnit(Index: Integer; const Astring: string);
    function  DistanceUnit_Specified(Index: Integer): boolean;
  published
    property DistanceMeasurement: Integer  read FDistanceMeasurement write FDistanceMeasurement;
    property DistanceUnit:        string   Index (IS_OPTN) read FDistanceUnit write SetDistanceUnit stored DistanceUnit_Specified;
  end;

  DomesticReturnsShipmentPayeeCodeType = array of ReturnsShipmentPayeeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsShipmentPayeeCodeType = array of ReturnsShipmentPayeeCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DomesticRefundMethodCodeType = array of ReturnsRefundMethodCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsAcceptedCodeType = array of ReturnsAcceptedCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  DomesticReturnsDurationCodeType = array of ReturnsDurationCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalReturnsDurationCodeType = array of ReturnsDurationCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  InternationalRefundMethodCodeType = array of ReturnsRefundMethodCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : FeatureDefinitionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeatureDefinitionsType = class(TRemotable)
  private
    FListingDurations: ListingDurationDefinitionsType;
    FListingDurations_Specified: boolean;
    FShippingTermsRequired: ShippingTermRequiredDefinitionType;
    FShippingTermsRequired_Specified: boolean;
    FBestOfferEnabled: BestOfferEnabledDefinitionType;
    FBestOfferEnabled_Specified: boolean;
    FDutchBINEnabled: DutchBINEnabledDefinitionType;
    FDutchBINEnabled_Specified: boolean;
    FUserConsentRequired: UserConsentRequiredDefinitionType;
    FUserConsentRequired_Specified: boolean;
    FHomePageFeaturedEnabled: HomePageFeaturedEnabledDefinitionType;
    FHomePageFeaturedEnabled_Specified: boolean;
    FProPackEnabled: ProPackEnabledDefinitionType;
    FProPackEnabled_Specified: boolean;
    FBasicUpgradePackEnabled: BasicUpgradePackEnabledDefinitionType;
    FBasicUpgradePackEnabled_Specified: boolean;
    FValuePackEnabled: ValuePackEnabledDefinitionType;
    FValuePackEnabled_Specified: boolean;
    FProPackPlusEnabled: ProPackPlusEnabledDefinitionType;
    FProPackPlusEnabled_Specified: boolean;
    FAdFormatEnabled: AdFormatEnabledDefinitionType;
    FAdFormatEnabled_Specified: boolean;
    FBestOfferCounterEnabled: BestOfferCounterEnabledDefinitionType;
    FBestOfferCounterEnabled_Specified: boolean;
    FBestOfferAutoDeclineEnabled: BestOfferAutoDeclineEnabledDefinitionType;
    FBestOfferAutoDeclineEnabled_Specified: boolean;
    FLocalMarketSpecialitySubscription: LocalMarketSpecialitySubscriptionDefinitionType;
    FLocalMarketSpecialitySubscription_Specified: boolean;
    FLocalMarketRegularSubscription: LocalMarketRegularSubscriptionDefinitionType;
    FLocalMarketRegularSubscription_Specified: boolean;
    FLocalMarketPremiumSubscription: LocalMarketPremiumSubscriptionDefinitionType;
    FLocalMarketPremiumSubscription_Specified: boolean;
    FLocalMarketNonSubscription: LocalMarketNonSubscriptionDefinitionType;
    FLocalMarketNonSubscription_Specified: boolean;
    FExpressEnabled: ExpressEnabledDefinitionType;
    FExpressEnabled_Specified: boolean;
    FExpressPicturesRequired: ExpressPicturesRequiredDefinitionType;
    FExpressPicturesRequired_Specified: boolean;
    FExpressConditionRequired: ExpressConditionRequiredDefinitionType;
    FExpressConditionRequired_Specified: boolean;
    FMinimumReservePrice: MinimumReservePriceDefinitionType;
    FMinimumReservePrice_Specified: boolean;
    FTransactionConfirmationRequestEnabled: TCREnabledDefinitionType;
    FTransactionConfirmationRequestEnabled_Specified: boolean;
    FSellerContactDetailsEnabled: SellerContactDetailsEnabledDefinitionType;
    FSellerContactDetailsEnabled_Specified: boolean;
    FStoreInventoryEnabled: StoreInventoryEnabledDefinitionType;
    FStoreInventoryEnabled_Specified: boolean;
    FSkypeMeTransactionalEnabled: SkypeMeTransactionalEnabledDefinitionType;
    FSkypeMeTransactionalEnabled_Specified: boolean;
    FSkypeMeNonTransactionalEnabled: SkypeMeNonTransactionalEnabledDefinitionType;
    FSkypeMeNonTransactionalEnabled_Specified: boolean;
    FLocalListingDistancesRegular: LocalListingDistancesRegularDefinitionType;
    FLocalListingDistancesRegular_Specified: boolean;
    FLocalListingDistancesSpecialty: LocalListingDistancesSpecialtyDefinitionType;
    FLocalListingDistancesSpecialty_Specified: boolean;
    FLocalListingDistancesNonSubscription: LocalListingDistancesNonSubscriptionDefinitionType;
    FLocalListingDistancesNonSubscription_Specified: boolean;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledDefinitionType;
    FClassifiedAdPaymentMethodEnabled_Specified: boolean;
    FClassifiedAdShippingMethodEnabled: ClassifiedAdShippingMethodEnabledDefinitionType;
    FClassifiedAdShippingMethodEnabled_Specified: boolean;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledDefinitionType;
    FClassifiedAdBestOfferEnabled_Specified: boolean;
    FClassifiedAdCounterOfferEnabled: ClassifiedAdCounterOfferEnabledDefinitionType;
    FClassifiedAdCounterOfferEnabled_Specified: boolean;
    FClassifiedAdAutoDeclineEnabled: ClassifiedAdAutoDeclineEnabledDefinitionType;
    FClassifiedAdAutoDeclineEnabled_Specified: boolean;
    FClassifiedAdContactByPhoneEnabled: ClassifiedAdContactByPhoneEnabledDefinitionType;
    FClassifiedAdContactByPhoneEnabled_Specified: boolean;
    FClassifiedAdContactByEmailEnabled: ClassifiedAdContactByEmailEnabledDefintionType;
    FClassifiedAdContactByEmailEnabled_Specified: boolean;
    FSafePaymentRequired: SafePaymentRequiredDefinitionType;
    FSafePaymentRequired_Specified: boolean;
    FClassifiedAdPayPerLeadEnabled: ClassifiedAdPayPerLeadEnabledDefinitionType;
    FClassifiedAdPayPerLeadEnabled_Specified: boolean;
    FItemSpecificsEnabled: ItemSpecificsEnabledDefinitionType;
    FItemSpecificsEnabled_Specified: boolean;
    FPaisaPayFullEscrowEnabled: PaisaPayFullEscrowEnabledDefinitionType;
    FPaisaPayFullEscrowEnabled_Specified: boolean;
    FISBNIdentifierEnabled: ISBNIdentifierEnabledDefinitionType;
    FISBNIdentifierEnabled_Specified: boolean;
    FUPCIdentifierEnabled: UPCIdentifierEnabledDefinitionType;
    FUPCIdentifierEnabled_Specified: boolean;
    FEANIdentifierEnabled: EANIdentifierEnabledDefinitionType;
    FEANIdentifierEnabled_Specified: boolean;
    FBrandMPNIdentifierEnabled: BrandMPNIdentifierEnabledDefinitionType;
    FBrandMPNIdentifierEnabled_Specified: boolean;
    FBestOfferAutoAcceptEnabled: BestOfferAutoAcceptEnabledDefinitionType;
    FBestOfferAutoAcceptEnabled_Specified: boolean;
    FClassifiedAdAutoAcceptEnabled: ClassifiedAdAutoAcceptEnabledDefinitionType;
    FClassifiedAdAutoAcceptEnabled_Specified: boolean;
    FCrossBorderTradeNorthAmericaEnabled: CrossBorderTradeNorthAmericaEnabledDefinitionType;
    FCrossBorderTradeNorthAmericaEnabled_Specified: boolean;
    FCrossBorderTradeGBEnabled: CrossBorderTradeGBEnabledDefinitionType;
    FCrossBorderTradeGBEnabled_Specified: boolean;
    FCrossBorderTradeAustraliaEnabled: CrossBorderTradeAustraliaEnabledDefinitionType;
    FCrossBorderTradeAustraliaEnabled_Specified: boolean;
    FPayPalBuyerProtectionEnabled: PayPalBuyerProtectionEnabledDefinitionType;
    FPayPalBuyerProtectionEnabled_Specified: boolean;
    FBuyerGuaranteeEnabled: BuyerGuaranteeEnabledDefinitionType;
    FBuyerGuaranteeEnabled_Specified: boolean;
    FCombinedFixedPriceTreatmentEnabled: CombinedFixedPriceTreatmentEnabledDefinitionType;
    FCombinedFixedPriceTreatmentEnabled_Specified: boolean;
    FGalleryFeaturedDurations: ListingEnhancementDurationDefinitionType;
    FGalleryFeaturedDurations_Specified: boolean;
    FINEscrowWorkflowTimeline: INEscrowWorkflowTimelineDefinitionType;
    FINEscrowWorkflowTimeline_Specified: boolean;
    FPayPalRequired: PayPalRequiredDefinitionType;
    FPayPalRequired_Specified: boolean;
    FeBayMotorsProAdFormatEnabled: eBayMotorsProAdFormatEnabledDefinitionType;
    FeBayMotorsProAdFormatEnabled_Specified: boolean;
    FeBayMotorsProContactByPhoneEnabled: eBayMotorsProContactByPhoneEnabledDefinitionType;
    FeBayMotorsProContactByPhoneEnabled_Specified: boolean;
    FeBayMotorsProPhoneCount: eBayMotorsProPhoneCountDefinitionType;
    FeBayMotorsProPhoneCount_Specified: boolean;
    FeBayMotorsProContactByAddressEnabled: eBayMotorsProContactByAddressEnabledDefinitionType;
    FeBayMotorsProContactByAddressEnabled_Specified: boolean;
    FeBayMotorsProStreetCount: eBayMotorsProStreetCountDefinitionType;
    FeBayMotorsProStreetCount_Specified: boolean;
    FeBayMotorsProCompanyNameEnabled: eBayMotorsProCompanyNameEnabledDefinitionType;
    FeBayMotorsProCompanyNameEnabled_Specified: boolean;
    FeBayMotorsProContactByEmailEnabled: eBayMotorsProContactByEmailEnabledDefinitionType;
    FeBayMotorsProContactByEmailEnabled_Specified: boolean;
    FeBayMotorsProBestOfferEnabled: eBayMotorsProBestOfferEnabledDefinitionType;
    FeBayMotorsProBestOfferEnabled_Specified: boolean;
    FeBayMotorsProAutoAcceptEnabled: eBayMotorsProAutoAcceptEnabledDefinitionType;
    FeBayMotorsProAutoAcceptEnabled_Specified: boolean;
    FeBayMotorsProAutoDeclineEnabled: eBayMotorsProAutoDeclineEnabledDefinitionType;
    FeBayMotorsProAutoDeclineEnabled_Specified: boolean;
    FeBayMotorsProPaymentMethodCheckOutEnabled: eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType;
    FeBayMotorsProPaymentMethodCheckOutEnabled_Specified: boolean;
    FeBayMotorsProShippingMethodEnabled: eBayMotorsProShippingMethodEnabledDefinitionType;
    FeBayMotorsProShippingMethodEnabled_Specified: boolean;
    FeBayMotorsProCounterOfferEnabled: eBayMotorsProCounterOfferEnabledDefinitionType;
    FeBayMotorsProCounterOfferEnabled_Specified: boolean;
    FeBayMotorsProSellerContactDetailsEnabled: eBayMotorsProSellerContactDetailsEnabledDefinitionType;
    FeBayMotorsProSellerContactDetailsEnabled_Specified: boolean;
    FLocalMarketAdFormatEnabled: LocalMarketAdFormatEnabledDefinitionType;
    FLocalMarketAdFormatEnabled_Specified: boolean;
    FLocalMarketContactByPhoneEnabled: LocalMarketContactByPhoneEnabledDefinitionType;
    FLocalMarketContactByPhoneEnabled_Specified: boolean;
    FLocalMarketPhoneCount: LocalMarketPhoneCountDefinitionType;
    FLocalMarketPhoneCount_Specified: boolean;
    FLocalMarketContactByAddressEnabled: LocalMarketContactByAddressEnabledDefinitionType;
    FLocalMarketContactByAddressEnabled_Specified: boolean;
    FLocalMarketStreetCount: LocalMarketStreetCountDefinitionType;
    FLocalMarketStreetCount_Specified: boolean;
    FLocalMarketCompanyNameEnabled: LocalMarketCompanyNameEnabledDefinitionType;
    FLocalMarketCompanyNameEnabled_Specified: boolean;
    FLocalMarketContactByEmailEnabled: LocalMarketContactByEmailEnabledDefinitionType;
    FLocalMarketContactByEmailEnabled_Specified: boolean;
    FLocalMarketBestOfferEnabled: LocalMarketBestOfferEnabledDefinitionType;
    FLocalMarketBestOfferEnabled_Specified: boolean;
    FLocalMarketAutoAcceptEnabled: LocalMarketAutoAcceptEnabledDefinitionType;
    FLocalMarketAutoAcceptEnabled_Specified: boolean;
    FLocalMarketAutoDeclineEnabled: LocalMarketAutoDeclineEnabledDefinitionType;
    FLocalMarketAutoDeclineEnabled_Specified: boolean;
    FLocalMarketPaymentMethodCheckOutEnabled: LocalMarketPaymentMethodCheckOutEnabledDefinitionType;
    FLocalMarketPaymentMethodCheckOutEnabled_Specified: boolean;
    FLocalMarketShippingMethodEnabled: LocalMarketShippingMethodEnabledDefinitionType;
    FLocalMarketShippingMethodEnabled_Specified: boolean;
    FLocalMarketCounterOfferEnabled: LocalMarketCounterOfferEnabledDefinitionType;
    FLocalMarketCounterOfferEnabled_Specified: boolean;
    FLocalMarketSellerContactDetailsEnabled: LocalMarketSellerContactDetailsEnabledDefinitionType;
    FLocalMarketSellerContactDetailsEnabled_Specified: boolean;
    FClassifiedAdPhoneCount: ClassifiedAdPhoneCountDefinitionType;
    FClassifiedAdPhoneCount_Specified: boolean;
    FClassifiedAdContactByAddressEnabled: ClassifiedAdContactByAddressEnabledDefinitionType;
    FClassifiedAdContactByAddressEnabled_Specified: boolean;
    FClassifiedAdStreetCount: ClassifiedAdStreetCountDefinitionType;
    FClassifiedAdStreetCount_Specified: boolean;
    FClassifiedAdCompanyNameEnabled: ClassifiedAdCompanyNameEnabledDefinitionType;
    FClassifiedAdCompanyNameEnabled_Specified: boolean;
    FSpecialitySubscription: SpecialitySubscriptionDefinitionType;
    FSpecialitySubscription_Specified: boolean;
    FRegularSubscription: RegularSubscriptionDefinitionType;
    FRegularSubscription_Specified: boolean;
    FPremiumSubscription: PremiumSubscriptionDefinitionType;
    FPremiumSubscription_Specified: boolean;
    FNonSubscription: NonSubscriptionDefinitionType;
    FNonSubscription_Specified: boolean;
    FReturnPolicyEnabled: ReturnPolicyEnabledDefinitionType;
    FReturnPolicyEnabled_Specified: boolean;
    FHandlingTimeEnabled: HandlingTimeEnabledDefinitionType;
    FHandlingTimeEnabled_Specified: boolean;
    FPayPalRequiredForStoreOwner: PayPalRequiredForStoreOwnerDefinitionType;
    FPayPalRequiredForStoreOwner_Specified: boolean;
    FReviseQuantityAllowed: ReviseQuantityAllowedDefinitionType;
    FReviseQuantityAllowed_Specified: boolean;
    FRevisePriceAllowed: RevisePriceAllowedDefinitionType;
    FRevisePriceAllowed_Specified: boolean;
    FStoreOwnerExtendedListingDurationsEnabled: StoreOwnerExtendedListingDurationsEnabledDefinitionType;
    FStoreOwnerExtendedListingDurationsEnabled_Specified: boolean;
    FStoreOwnerExtendedListingDurations: StoreOwnerExtendedListingDurationsDefinitionType;
    FStoreOwnerExtendedListingDurations_Specified: boolean;
    FPaymentMethod: PaymentMethodDefinitionType;
    FPaymentMethod_Specified: boolean;
    FGroup1MaxFlatShippingCost: Group1MaxFlatShippingCostDefinitionType;
    FGroup1MaxFlatShippingCost_Specified: boolean;
    FGroup2MaxFlatShippingCost: Group2MaxFlatShippingCostDefinitionType;
    FGroup2MaxFlatShippingCost_Specified: boolean;
    FGroup3MaxFlatShippingCost: Group3MaxFlatShippingCostDefinitionType;
    FGroup3MaxFlatShippingCost_Specified: boolean;
    FMaxFlatShippingCostCBTExempt: MaxFlatShippingCostCBTExemptDefinitionType;
    FMaxFlatShippingCostCBTExempt_Specified: boolean;
    FMaxFlatShippingCost: MaxFlatShippingCostDefinitionType;
    FMaxFlatShippingCost_Specified: boolean;
    FVariationsEnabled: VariationsEnabledDefinitionType;
    FVariationsEnabled_Specified: boolean;
    FAttributeConversionEnabled: AttributeConversionEnabledFeatureDefinitionType;
    FAttributeConversionEnabled_Specified: boolean;
    FFreeGalleryPlusEnabled: FreeGalleryPlusEnabledDefinitionType;
    FFreeGalleryPlusEnabled_Specified: boolean;
    FFreePicturePackEnabled: FreePicturePackEnabledDefinitionType;
    FFreePicturePackEnabled_Specified: boolean;
    FItemCompatibilityEnabled: ItemCompatibilityEnabledDefinitionType;
    FItemCompatibilityEnabled_Specified: boolean;
    FMaxItemCompatibility: MaxItemCompatibilityDefinitionType;
    FMaxItemCompatibility_Specified: boolean;
    FMinItemCompatibility: MinItemCompatibilityDefinitionType;
    FMinItemCompatibility_Specified: boolean;
    FConditionEnabled: ConditionEnabledDefinitionType;
    FConditionEnabled_Specified: boolean;
    FConditionValues: ConditionValuesDefinitionType;
    FConditionValues_Specified: boolean;
    FValueCategory: ValueCategoryDefinitionType;
    FValueCategory_Specified: boolean;
    FProductCreationEnabled: ProductCreationEnabledDefinitionType;
    FProductCreationEnabled_Specified: boolean;
    FEANEnabled: EANEnabledDefinitionType;
    FEANEnabled_Specified: boolean;
    FISBNEnabled: ISBNEnabledDefinitionType;
    FISBNEnabled_Specified: boolean;
    FUPCEnabled: UPCEnabledDefinitionType;
    FUPCEnabled_Specified: boolean;
    FCompatibleVehicleType: CompatibleVehicleTypeDefinitionType;
    FCompatibleVehicleType_Specified: boolean;
    FMaxGranularFitmentCount: MaxGranularFitmentCountDefinitionType;
    FMaxGranularFitmentCount_Specified: boolean;
    FPaymentOptionsGroup: PaymentOptionsGroupEnabledDefinitionType;
    FPaymentOptionsGroup_Specified: boolean;
    FShippingProfileCategoryGroup: ProfileCategoryGroupDefinitionType;
    FShippingProfileCategoryGroup_Specified: boolean;
    FPaymentProfileCategoryGroup: ProfileCategoryGroupDefinitionType;
    FPaymentProfileCategoryGroup_Specified: boolean;
    FReturnPolicyProfileCategoryGroup: ProfileCategoryGroupDefinitionType;
    FReturnPolicyProfileCategoryGroup_Specified: boolean;
    FVINSupported: VINSupportedDefinitionType;
    FVINSupported_Specified: boolean;
    FVRMSupported: VRMSupportedDefinitionType;
    FVRMSupported_Specified: boolean;
    FSellerProvidedTitleSupported: SellerProvidedTitleSupportedDefinitionType;
    FSellerProvidedTitleSupported_Specified: boolean;
    FDepositSupported: DepositSupportedDefinitionType;
    FDepositSupported_Specified: boolean;
    FGlobalShippingEnabled: GlobalShippingEnabledDefinitionType;
    FGlobalShippingEnabled_Specified: boolean;
    FAdditionalCompatibilityEnabled: AdditionalCompatibilityEnabledDefinitionType;
    FAdditionalCompatibilityEnabled_Specified: boolean;
    FPickupDropOffEnabled: PickupDropOffEnabledDefinitionType;
    FPickupDropOffEnabled_Specified: boolean;
    FDigitalGoodDeliveryEnabled: DigitalGoodDeliveryEnabledDefinitionType;
    FDigitalGoodDeliveryEnabled_Specified: boolean;
    FEpidSupported: EpidSupportedDefinitionType;
    FEpidSupported_Specified: boolean;
    FKTypeSupported: KTypeSupportedDefinitionType;
    FKTypeSupported_Specified: boolean;
    FProductRequiredEnabled: ProductRequiredEnabledDefinitionType;
    FProductRequiredEnabled_Specified: boolean;
    FDomesticReturnsAcceptedValues: DomesticReturnsAcceptedDefinitionType;
    FDomesticReturnsAcceptedValues_Specified: boolean;
    FInternationalReturnsAcceptedValues: InternationalReturnsAcceptedDefinitionType;
    FInternationalReturnsAcceptedValues_Specified: boolean;
    FDomesticReturnsDurationValues: DomesticReturnsDurationDefinitionType;
    FDomesticReturnsDurationValues_Specified: boolean;
    FInternationalReturnsDurationValues: InternationalReturnsDurationDefinitionType;
    FInternationalReturnsDurationValues_Specified: boolean;
    FDomesticReturnsShipmentPayeeValues: DomesticReturnsShipmentPayeeDefinitionType;
    FDomesticReturnsShipmentPayeeValues_Specified: boolean;
    FInternationalReturnsShipmentPayeeValues: InternationalReturnsShipmentPayeeDefinitionType;
    FInternationalReturnsShipmentPayeeValues_Specified: boolean;
    FDomesticRefundMethodValues: DomesticRefundMethodCodeType;
    FDomesticRefundMethodValues_Specified: boolean;
    FInternationalRefundMethodValues: InternationalRefundMethodCodeType;
    FInternationalRefundMethodValues_Specified: boolean;
    FReturnPolicyDescriptionEnabled: ReturnPolicyDescriptionEnabledDefinitionType;
    FReturnPolicyDescriptionEnabled_Specified: boolean;
    procedure SetListingDurations(Index: Integer; const AListingDurationDefinitionsType: ListingDurationDefinitionsType);
    function  ListingDurations_Specified(Index: Integer): boolean;
    procedure SetShippingTermsRequired(Index: Integer; const AShippingTermRequiredDefinitionType: ShippingTermRequiredDefinitionType);
    function  ShippingTermsRequired_Specified(Index: Integer): boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABestOfferEnabledDefinitionType: BestOfferEnabledDefinitionType);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetDutchBINEnabled(Index: Integer; const ADutchBINEnabledDefinitionType: DutchBINEnabledDefinitionType);
    function  DutchBINEnabled_Specified(Index: Integer): boolean;
    procedure SetUserConsentRequired(Index: Integer; const AUserConsentRequiredDefinitionType: UserConsentRequiredDefinitionType);
    function  UserConsentRequired_Specified(Index: Integer): boolean;
    procedure SetHomePageFeaturedEnabled(Index: Integer; const AHomePageFeaturedEnabledDefinitionType: HomePageFeaturedEnabledDefinitionType);
    function  HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackEnabled(Index: Integer; const AProPackEnabledDefinitionType: ProPackEnabledDefinitionType);
    function  ProPackEnabled_Specified(Index: Integer): boolean;
    procedure SetBasicUpgradePackEnabled(Index: Integer; const ABasicUpgradePackEnabledDefinitionType: BasicUpgradePackEnabledDefinitionType);
    function  BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
    procedure SetValuePackEnabled(Index: Integer; const AValuePackEnabledDefinitionType: ValuePackEnabledDefinitionType);
    function  ValuePackEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackPlusEnabled(Index: Integer; const AProPackPlusEnabledDefinitionType: ProPackPlusEnabledDefinitionType);
    function  ProPackPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledDefinitionType: AdFormatEnabledDefinitionType);
    function  AdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferCounterEnabled(Index: Integer; const ABestOfferCounterEnabledDefinitionType: BestOfferCounterEnabledDefinitionType);
    function  BestOfferCounterEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoDeclineEnabled(Index: Integer; const ABestOfferAutoDeclineEnabledDefinitionType: BestOfferAutoDeclineEnabledDefinitionType);
    function  BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSpecialitySubscription(Index: Integer; const ALocalMarketSpecialitySubscriptionDefinitionType: LocalMarketSpecialitySubscriptionDefinitionType);
    function  LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketRegularSubscription(Index: Integer; const ALocalMarketRegularSubscriptionDefinitionType: LocalMarketRegularSubscriptionDefinitionType);
    function  LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPremiumSubscription(Index: Integer; const ALocalMarketPremiumSubscriptionDefinitionType: LocalMarketPremiumSubscriptionDefinitionType);
    function  LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketNonSubscription(Index: Integer; const ALocalMarketNonSubscriptionDefinitionType: LocalMarketNonSubscriptionDefinitionType);
    function  LocalMarketNonSubscription_Specified(Index: Integer): boolean;
    procedure SetExpressEnabled(Index: Integer; const AExpressEnabledDefinitionType: ExpressEnabledDefinitionType);
    function  ExpressEnabled_Specified(Index: Integer): boolean;
    procedure SetExpressPicturesRequired(Index: Integer; const AExpressPicturesRequiredDefinitionType: ExpressPicturesRequiredDefinitionType);
    function  ExpressPicturesRequired_Specified(Index: Integer): boolean;
    procedure SetExpressConditionRequired(Index: Integer; const AExpressConditionRequiredDefinitionType: ExpressConditionRequiredDefinitionType);
    function  ExpressConditionRequired_Specified(Index: Integer): boolean;
    procedure SetMinimumReservePrice(Index: Integer; const AMinimumReservePriceDefinitionType: MinimumReservePriceDefinitionType);
    function  MinimumReservePrice_Specified(Index: Integer): boolean;
    procedure SetTransactionConfirmationRequestEnabled(Index: Integer; const ATCREnabledDefinitionType: TCREnabledDefinitionType);
    function  TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
    procedure SetSellerContactDetailsEnabled(Index: Integer; const ASellerContactDetailsEnabledDefinitionType: SellerContactDetailsEnabledDefinitionType);
    function  SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreInventoryEnabled(Index: Integer; const AStoreInventoryEnabledDefinitionType: StoreInventoryEnabledDefinitionType);
    function  StoreInventoryEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeTransactionalEnabled(Index: Integer; const ASkypeMeTransactionalEnabledDefinitionType: SkypeMeTransactionalEnabledDefinitionType);
    function  SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeNonTransactionalEnabled(Index: Integer; const ASkypeMeNonTransactionalEnabledDefinitionType: SkypeMeNonTransactionalEnabledDefinitionType);
    function  SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesRegular(Index: Integer; const ALocalListingDistancesRegularDefinitionType: LocalListingDistancesRegularDefinitionType);
    function  LocalListingDistancesRegular_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesSpecialty(Index: Integer; const ALocalListingDistancesSpecialtyDefinitionType: LocalListingDistancesSpecialtyDefinitionType);
    function  LocalListingDistancesSpecialty_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesNonSubscription(Index: Integer; const ALocalListingDistancesNonSubscriptionDefinitionType: LocalListingDistancesNonSubscriptionDefinitionType);
    function  LocalListingDistancesNonSubscription_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledDefinitionType: ClassifiedAdPaymentMethodEnabledDefinitionType);
    function  ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdShippingMethodEnabled(Index: Integer; const AClassifiedAdShippingMethodEnabledDefinitionType: ClassifiedAdShippingMethodEnabledDefinitionType);
    function  ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledDefinitionType: ClassifiedAdBestOfferEnabledDefinitionType);
    function  ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCounterOfferEnabled(Index: Integer; const AClassifiedAdCounterOfferEnabledDefinitionType: ClassifiedAdCounterOfferEnabledDefinitionType);
    function  ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoDeclineEnabled(Index: Integer; const AClassifiedAdAutoDeclineEnabledDefinitionType: ClassifiedAdAutoDeclineEnabledDefinitionType);
    function  ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByPhoneEnabled(Index: Integer; const AClassifiedAdContactByPhoneEnabledDefinitionType: ClassifiedAdContactByPhoneEnabledDefinitionType);
    function  ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByEmailEnabled(Index: Integer; const AClassifiedAdContactByEmailEnabledDefintionType: ClassifiedAdContactByEmailEnabledDefintionType);
    function  ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetSafePaymentRequired(Index: Integer; const ASafePaymentRequiredDefinitionType: SafePaymentRequiredDefinitionType);
    function  SafePaymentRequired_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPayPerLeadEnabled(Index: Integer; const AClassifiedAdPayPerLeadEnabledDefinitionType: ClassifiedAdPayPerLeadEnabledDefinitionType);
    function  ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
    procedure SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledDefinitionType: ItemSpecificsEnabledDefinitionType);
    function  ItemSpecificsEnabled_Specified(Index: Integer): boolean;
    procedure SetPaisaPayFullEscrowEnabled(Index: Integer; const APaisaPayFullEscrowEnabledDefinitionType: PaisaPayFullEscrowEnabledDefinitionType);
    function  PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
    procedure SetISBNIdentifierEnabled(Index: Integer; const AISBNIdentifierEnabledDefinitionType: ISBNIdentifierEnabledDefinitionType);
    function  ISBNIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetUPCIdentifierEnabled(Index: Integer; const AUPCIdentifierEnabledDefinitionType: UPCIdentifierEnabledDefinitionType);
    function  UPCIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetEANIdentifierEnabled(Index: Integer; const AEANIdentifierEnabledDefinitionType: EANIdentifierEnabledDefinitionType);
    function  EANIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetBrandMPNIdentifierEnabled(Index: Integer; const ABrandMPNIdentifierEnabledDefinitionType: BrandMPNIdentifierEnabledDefinitionType);
    function  BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoAcceptEnabled(Index: Integer; const ABestOfferAutoAcceptEnabledDefinitionType: BestOfferAutoAcceptEnabledDefinitionType);
    function  BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoAcceptEnabled(Index: Integer; const AClassifiedAdAutoAcceptEnabledDefinitionType: ClassifiedAdAutoAcceptEnabledDefinitionType);
    function  ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ACrossBorderTradeNorthAmericaEnabledDefinitionType: CrossBorderTradeNorthAmericaEnabledDefinitionType);
    function  CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeGBEnabled(Index: Integer; const ACrossBorderTradeGBEnabledDefinitionType: CrossBorderTradeGBEnabledDefinitionType);
    function  CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ACrossBorderTradeAustraliaEnabledDefinitionType: CrossBorderTradeAustraliaEnabledDefinitionType);
    function  CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
    procedure SetPayPalBuyerProtectionEnabled(Index: Integer; const APayPalBuyerProtectionEnabledDefinitionType: PayPalBuyerProtectionEnabledDefinitionType);
    function  PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
    procedure SetBuyerGuaranteeEnabled(Index: Integer; const ABuyerGuaranteeEnabledDefinitionType: BuyerGuaranteeEnabledDefinitionType);
    function  BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
    procedure SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ACombinedFixedPriceTreatmentEnabledDefinitionType: CombinedFixedPriceTreatmentEnabledDefinitionType);
    function  CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
    procedure SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationDefinitionType: ListingEnhancementDurationDefinitionType);
    function  GalleryFeaturedDurations_Specified(Index: Integer): boolean;
    procedure SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineDefinitionType: INEscrowWorkflowTimelineDefinitionType);
    function  INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
    procedure SetPayPalRequired(Index: Integer; const APayPalRequiredDefinitionType: PayPalRequiredDefinitionType);
    function  PayPalRequired_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAdFormatEnabled(Index: Integer; const AeBayMotorsProAdFormatEnabledDefinitionType: eBayMotorsProAdFormatEnabledDefinitionType);
    function  eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const AeBayMotorsProContactByPhoneEnabledDefinitionType: eBayMotorsProContactByPhoneEnabledDefinitionType);
    function  eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPhoneCount(Index: Integer; const AeBayMotorsProPhoneCountDefinitionType: eBayMotorsProPhoneCountDefinitionType);
    function  eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByAddressEnabled(Index: Integer; const AeBayMotorsProContactByAddressEnabledDefinitionType: eBayMotorsProContactByAddressEnabledDefinitionType);
    function  eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProStreetCount(Index: Integer; const AeBayMotorsProStreetCountDefinitionType: eBayMotorsProStreetCountDefinitionType);
    function  eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCompanyNameEnabled(Index: Integer; const AeBayMotorsProCompanyNameEnabledDefinitionType: eBayMotorsProCompanyNameEnabledDefinitionType);
    function  eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByEmailEnabled(Index: Integer; const AeBayMotorsProContactByEmailEnabledDefinitionType: eBayMotorsProContactByEmailEnabledDefinitionType);
    function  eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProBestOfferEnabled(Index: Integer; const AeBayMotorsProBestOfferEnabledDefinitionType: eBayMotorsProBestOfferEnabledDefinitionType);
    function  eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const AeBayMotorsProAutoAcceptEnabledDefinitionType: eBayMotorsProAutoAcceptEnabledDefinitionType);
    function  eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const AeBayMotorsProAutoDeclineEnabledDefinitionType: eBayMotorsProAutoDeclineEnabledDefinitionType);
    function  eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AeBayMotorsProPaymentMethodCheckOutEnabledDefinitionType: eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType);
    function  eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProShippingMethodEnabled(Index: Integer; const AeBayMotorsProShippingMethodEnabledDefinitionType: eBayMotorsProShippingMethodEnabledDefinitionType);
    function  eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCounterOfferEnabled(Index: Integer; const AeBayMotorsProCounterOfferEnabledDefinitionType: eBayMotorsProCounterOfferEnabledDefinitionType);
    function  eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const AeBayMotorsProSellerContactDetailsEnabledDefinitionType: eBayMotorsProSellerContactDetailsEnabledDefinitionType);
    function  eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAdFormatEnabled(Index: Integer; const ALocalMarketAdFormatEnabledDefinitionType: LocalMarketAdFormatEnabledDefinitionType);
    function  LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByPhoneEnabled(Index: Integer; const ALocalMarketContactByPhoneEnabledDefinitionType: LocalMarketContactByPhoneEnabledDefinitionType);
    function  LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPhoneCount(Index: Integer; const ALocalMarketPhoneCountDefinitionType: LocalMarketPhoneCountDefinitionType);
    function  LocalMarketPhoneCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByAddressEnabled(Index: Integer; const ALocalMarketContactByAddressEnabledDefinitionType: LocalMarketContactByAddressEnabledDefinitionType);
    function  LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketStreetCount(Index: Integer; const ALocalMarketStreetCountDefinitionType: LocalMarketStreetCountDefinitionType);
    function  LocalMarketStreetCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCompanyNameEnabled(Index: Integer; const ALocalMarketCompanyNameEnabledDefinitionType: LocalMarketCompanyNameEnabledDefinitionType);
    function  LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByEmailEnabled(Index: Integer; const ALocalMarketContactByEmailEnabledDefinitionType: LocalMarketContactByEmailEnabledDefinitionType);
    function  LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketBestOfferEnabled(Index: Integer; const ALocalMarketBestOfferEnabledDefinitionType: LocalMarketBestOfferEnabledDefinitionType);
    function  LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoAcceptEnabled(Index: Integer; const ALocalMarketAutoAcceptEnabledDefinitionType: LocalMarketAutoAcceptEnabledDefinitionType);
    function  LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoDeclineEnabled(Index: Integer; const ALocalMarketAutoDeclineEnabledDefinitionType: LocalMarketAutoDeclineEnabledDefinitionType);
    function  LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const ALocalMarketPaymentMethodCheckOutEnabledDefinitionType: LocalMarketPaymentMethodCheckOutEnabledDefinitionType);
    function  LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketShippingMethodEnabled(Index: Integer; const ALocalMarketShippingMethodEnabledDefinitionType: LocalMarketShippingMethodEnabledDefinitionType);
    function  LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCounterOfferEnabled(Index: Integer; const ALocalMarketCounterOfferEnabledDefinitionType: LocalMarketCounterOfferEnabledDefinitionType);
    function  LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ALocalMarketSellerContactDetailsEnabledDefinitionType: LocalMarketSellerContactDetailsEnabledDefinitionType);
    function  LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPhoneCount(Index: Integer; const AClassifiedAdPhoneCountDefinitionType: ClassifiedAdPhoneCountDefinitionType);
    function  ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByAddressEnabled(Index: Integer; const AClassifiedAdContactByAddressEnabledDefinitionType: ClassifiedAdContactByAddressEnabledDefinitionType);
    function  ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdStreetCount(Index: Integer; const AClassifiedAdStreetCountDefinitionType: ClassifiedAdStreetCountDefinitionType);
    function  ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCompanyNameEnabled(Index: Integer; const AClassifiedAdCompanyNameEnabledDefinitionType: ClassifiedAdCompanyNameEnabledDefinitionType);
    function  ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetSpecialitySubscription(Index: Integer; const ASpecialitySubscriptionDefinitionType: SpecialitySubscriptionDefinitionType);
    function  SpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetRegularSubscription(Index: Integer; const ARegularSubscriptionDefinitionType: RegularSubscriptionDefinitionType);
    function  RegularSubscription_Specified(Index: Integer): boolean;
    procedure SetPremiumSubscription(Index: Integer; const APremiumSubscriptionDefinitionType: PremiumSubscriptionDefinitionType);
    function  PremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetNonSubscription(Index: Integer; const ANonSubscriptionDefinitionType: NonSubscriptionDefinitionType);
    function  NonSubscription_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyEnabled(Index: Integer; const AReturnPolicyEnabledDefinitionType: ReturnPolicyEnabledDefinitionType);
    function  ReturnPolicyEnabled_Specified(Index: Integer): boolean;
    procedure SetHandlingTimeEnabled(Index: Integer; const AHandlingTimeEnabledDefinitionType: HandlingTimeEnabledDefinitionType);
    function  HandlingTimeEnabled_Specified(Index: Integer): boolean;
    procedure SetPayPalRequiredForStoreOwner(Index: Integer; const APayPalRequiredForStoreOwnerDefinitionType: PayPalRequiredForStoreOwnerDefinitionType);
    function  PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
    procedure SetReviseQuantityAllowed(Index: Integer; const AReviseQuantityAllowedDefinitionType: ReviseQuantityAllowedDefinitionType);
    function  ReviseQuantityAllowed_Specified(Index: Integer): boolean;
    procedure SetRevisePriceAllowed(Index: Integer; const ARevisePriceAllowedDefinitionType: RevisePriceAllowedDefinitionType);
    function  RevisePriceAllowed_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const AStoreOwnerExtendedListingDurationsEnabledDefinitionType: StoreOwnerExtendedListingDurationsEnabledDefinitionType);
    function  StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsDefinitionType: StoreOwnerExtendedListingDurationsDefinitionType);
    function  StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const APaymentMethodDefinitionType: PaymentMethodDefinitionType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetGroup1MaxFlatShippingCost(Index: Integer; const AGroup1MaxFlatShippingCostDefinitionType: Group1MaxFlatShippingCostDefinitionType);
    function  Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup2MaxFlatShippingCost(Index: Integer; const AGroup2MaxFlatShippingCostDefinitionType: Group2MaxFlatShippingCostDefinitionType);
    function  Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup3MaxFlatShippingCost(Index: Integer; const AGroup3MaxFlatShippingCostDefinitionType: Group3MaxFlatShippingCostDefinitionType);
    function  Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetMaxFlatShippingCostCBTExempt(Index: Integer; const AMaxFlatShippingCostCBTExemptDefinitionType: MaxFlatShippingCostCBTExemptDefinitionType);
    function  MaxFlatShippingCostCBTExempt_Specified(Index: Integer): boolean;
    procedure SetMaxFlatShippingCost(Index: Integer; const AMaxFlatShippingCostDefinitionType: MaxFlatShippingCostDefinitionType);
    function  MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetVariationsEnabled(Index: Integer; const AVariationsEnabledDefinitionType: VariationsEnabledDefinitionType);
    function  VariationsEnabled_Specified(Index: Integer): boolean;
    procedure SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledFeatureDefinitionType: AttributeConversionEnabledFeatureDefinitionType);
    function  AttributeConversionEnabled_Specified(Index: Integer): boolean;
    procedure SetFreeGalleryPlusEnabled(Index: Integer; const AFreeGalleryPlusEnabledDefinitionType: FreeGalleryPlusEnabledDefinitionType);
    function  FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetFreePicturePackEnabled(Index: Integer; const AFreePicturePackEnabledDefinitionType: FreePicturePackEnabledDefinitionType);
    function  FreePicturePackEnabled_Specified(Index: Integer): boolean;
    procedure SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledDefinitionType: ItemCompatibilityEnabledDefinitionType);
    function  ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetMaxItemCompatibility(Index: Integer; const AMaxItemCompatibilityDefinitionType: MaxItemCompatibilityDefinitionType);
    function  MaxItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetMinItemCompatibility(Index: Integer; const AMinItemCompatibilityDefinitionType: MinItemCompatibilityDefinitionType);
    function  MinItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetConditionEnabled(Index: Integer; const AConditionEnabledDefinitionType: ConditionEnabledDefinitionType);
    function  ConditionEnabled_Specified(Index: Integer): boolean;
    procedure SetConditionValues(Index: Integer; const AConditionValuesDefinitionType: ConditionValuesDefinitionType);
    function  ConditionValues_Specified(Index: Integer): boolean;
    procedure SetValueCategory(Index: Integer; const AValueCategoryDefinitionType: ValueCategoryDefinitionType);
    function  ValueCategory_Specified(Index: Integer): boolean;
    procedure SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledDefinitionType: ProductCreationEnabledDefinitionType);
    function  ProductCreationEnabled_Specified(Index: Integer): boolean;
    procedure SetEANEnabled(Index: Integer; const AEANEnabledDefinitionType: EANEnabledDefinitionType);
    function  EANEnabled_Specified(Index: Integer): boolean;
    procedure SetISBNEnabled(Index: Integer; const AISBNEnabledDefinitionType: ISBNEnabledDefinitionType);
    function  ISBNEnabled_Specified(Index: Integer): boolean;
    procedure SetUPCEnabled(Index: Integer; const AUPCEnabledDefinitionType: UPCEnabledDefinitionType);
    function  UPCEnabled_Specified(Index: Integer): boolean;
    procedure SetCompatibleVehicleType(Index: Integer; const ACompatibleVehicleTypeDefinitionType: CompatibleVehicleTypeDefinitionType);
    function  CompatibleVehicleType_Specified(Index: Integer): boolean;
    procedure SetMaxGranularFitmentCount(Index: Integer; const AMaxGranularFitmentCountDefinitionType: MaxGranularFitmentCountDefinitionType);
    function  MaxGranularFitmentCount_Specified(Index: Integer): boolean;
    procedure SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledDefinitionType: PaymentOptionsGroupEnabledDefinitionType);
    function  PaymentOptionsGroup_Specified(Index: Integer): boolean;
    procedure SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
    function  ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
    function  PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
    function  ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetVINSupported(Index: Integer; const AVINSupportedDefinitionType: VINSupportedDefinitionType);
    function  VINSupported_Specified(Index: Integer): boolean;
    procedure SetVRMSupported(Index: Integer; const AVRMSupportedDefinitionType: VRMSupportedDefinitionType);
    function  VRMSupported_Specified(Index: Integer): boolean;
    procedure SetSellerProvidedTitleSupported(Index: Integer; const ASellerProvidedTitleSupportedDefinitionType: SellerProvidedTitleSupportedDefinitionType);
    function  SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
    procedure SetDepositSupported(Index: Integer; const ADepositSupportedDefinitionType: DepositSupportedDefinitionType);
    function  DepositSupported_Specified(Index: Integer): boolean;
    procedure SetGlobalShippingEnabled(Index: Integer; const AGlobalShippingEnabledDefinitionType: GlobalShippingEnabledDefinitionType);
    function  GlobalShippingEnabled_Specified(Index: Integer): boolean;
    procedure SetAdditionalCompatibilityEnabled(Index: Integer; const AAdditionalCompatibilityEnabledDefinitionType: AdditionalCompatibilityEnabledDefinitionType);
    function  AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetPickupDropOffEnabled(Index: Integer; const APickupDropOffEnabledDefinitionType: PickupDropOffEnabledDefinitionType);
    function  PickupDropOffEnabled_Specified(Index: Integer): boolean;
    procedure SetDigitalGoodDeliveryEnabled(Index: Integer; const ADigitalGoodDeliveryEnabledDefinitionType: DigitalGoodDeliveryEnabledDefinitionType);
    function  DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
    procedure SetEpidSupported(Index: Integer; const AEpidSupportedDefinitionType: EpidSupportedDefinitionType);
    function  EpidSupported_Specified(Index: Integer): boolean;
    procedure SetKTypeSupported(Index: Integer; const AKTypeSupportedDefinitionType: KTypeSupportedDefinitionType);
    function  KTypeSupported_Specified(Index: Integer): boolean;
    procedure SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledDefinitionType: ProductRequiredEnabledDefinitionType);
    function  ProductRequiredEnabled_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedDefinitionType: DomesticReturnsAcceptedDefinitionType);
    function  DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedDefinitionType: InternationalReturnsAcceptedDefinitionType);
    function  InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationDefinitionType: DomesticReturnsDurationDefinitionType);
    function  DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationDefinitionType: InternationalReturnsDurationDefinitionType);
    function  InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeDefinitionType: DomesticReturnsShipmentPayeeDefinitionType);
    function  DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeDefinitionType: InternationalReturnsShipmentPayeeDefinitionType);
    function  InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
    function  DomesticRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
    function  InternationalRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyDescriptionEnabled(Index: Integer; const AReturnPolicyDescriptionEnabledDefinitionType: ReturnPolicyDescriptionEnabledDefinitionType);
    function  ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ListingDurations:                          ListingDurationDefinitionsType                           Index (IS_OPTN) read FListingDurations write SetListingDurations stored ListingDurations_Specified;
    property ShippingTermsRequired:                     ShippingTermRequiredDefinitionType                       Index (IS_OPTN) read FShippingTermsRequired write SetShippingTermsRequired stored ShippingTermsRequired_Specified;
    property BestOfferEnabled:                          BestOfferEnabledDefinitionType                           Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property DutchBINEnabled:                           DutchBINEnabledDefinitionType                            Index (IS_OPTN) read FDutchBINEnabled write SetDutchBINEnabled stored DutchBINEnabled_Specified;
    property UserConsentRequired:                       UserConsentRequiredDefinitionType                        Index (IS_OPTN) read FUserConsentRequired write SetUserConsentRequired stored UserConsentRequired_Specified;
    property HomePageFeaturedEnabled:                   HomePageFeaturedEnabledDefinitionType                    Index (IS_OPTN) read FHomePageFeaturedEnabled write SetHomePageFeaturedEnabled stored HomePageFeaturedEnabled_Specified;
    property ProPackEnabled:                            ProPackEnabledDefinitionType                             Index (IS_OPTN) read FProPackEnabled write SetProPackEnabled stored ProPackEnabled_Specified;
    property BasicUpgradePackEnabled:                   BasicUpgradePackEnabledDefinitionType                    Index (IS_OPTN) read FBasicUpgradePackEnabled write SetBasicUpgradePackEnabled stored BasicUpgradePackEnabled_Specified;
    property ValuePackEnabled:                          ValuePackEnabledDefinitionType                           Index (IS_OPTN) read FValuePackEnabled write SetValuePackEnabled stored ValuePackEnabled_Specified;
    property ProPackPlusEnabled:                        ProPackPlusEnabledDefinitionType                         Index (IS_OPTN) read FProPackPlusEnabled write SetProPackPlusEnabled stored ProPackPlusEnabled_Specified;
    property AdFormatEnabled:                           AdFormatEnabledDefinitionType                            Index (IS_OPTN) read FAdFormatEnabled write SetAdFormatEnabled stored AdFormatEnabled_Specified;
    property BestOfferCounterEnabled:                   BestOfferCounterEnabledDefinitionType                    Index (IS_OPTN) read FBestOfferCounterEnabled write SetBestOfferCounterEnabled stored BestOfferCounterEnabled_Specified;
    property BestOfferAutoDeclineEnabled:               BestOfferAutoDeclineEnabledDefinitionType                Index (IS_OPTN) read FBestOfferAutoDeclineEnabled write SetBestOfferAutoDeclineEnabled stored BestOfferAutoDeclineEnabled_Specified;
    property LocalMarketSpecialitySubscription:         LocalMarketSpecialitySubscriptionDefinitionType          Index (IS_OPTN) read FLocalMarketSpecialitySubscription write SetLocalMarketSpecialitySubscription stored LocalMarketSpecialitySubscription_Specified;
    property LocalMarketRegularSubscription:            LocalMarketRegularSubscriptionDefinitionType             Index (IS_OPTN) read FLocalMarketRegularSubscription write SetLocalMarketRegularSubscription stored LocalMarketRegularSubscription_Specified;
    property LocalMarketPremiumSubscription:            LocalMarketPremiumSubscriptionDefinitionType             Index (IS_OPTN) read FLocalMarketPremiumSubscription write SetLocalMarketPremiumSubscription stored LocalMarketPremiumSubscription_Specified;
    property LocalMarketNonSubscription:                LocalMarketNonSubscriptionDefinitionType                 Index (IS_OPTN) read FLocalMarketNonSubscription write SetLocalMarketNonSubscription stored LocalMarketNonSubscription_Specified;
    property ExpressEnabled:                            ExpressEnabledDefinitionType                             Index (IS_OPTN) read FExpressEnabled write SetExpressEnabled stored ExpressEnabled_Specified;
    property ExpressPicturesRequired:                   ExpressPicturesRequiredDefinitionType                    Index (IS_OPTN) read FExpressPicturesRequired write SetExpressPicturesRequired stored ExpressPicturesRequired_Specified;
    property ExpressConditionRequired:                  ExpressConditionRequiredDefinitionType                   Index (IS_OPTN) read FExpressConditionRequired write SetExpressConditionRequired stored ExpressConditionRequired_Specified;
    property MinimumReservePrice:                       MinimumReservePriceDefinitionType                        Index (IS_OPTN) read FMinimumReservePrice write SetMinimumReservePrice stored MinimumReservePrice_Specified;
    property TransactionConfirmationRequestEnabled:     TCREnabledDefinitionType                                 Index (IS_OPTN) read FTransactionConfirmationRequestEnabled write SetTransactionConfirmationRequestEnabled stored TransactionConfirmationRequestEnabled_Specified;
    property SellerContactDetailsEnabled:               SellerContactDetailsEnabledDefinitionType                Index (IS_OPTN) read FSellerContactDetailsEnabled write SetSellerContactDetailsEnabled stored SellerContactDetailsEnabled_Specified;
    property StoreInventoryEnabled:                     StoreInventoryEnabledDefinitionType                      Index (IS_OPTN) read FStoreInventoryEnabled write SetStoreInventoryEnabled stored StoreInventoryEnabled_Specified;
    property SkypeMeTransactionalEnabled:               SkypeMeTransactionalEnabledDefinitionType                Index (IS_OPTN) read FSkypeMeTransactionalEnabled write SetSkypeMeTransactionalEnabled stored SkypeMeTransactionalEnabled_Specified;
    property SkypeMeNonTransactionalEnabled:            SkypeMeNonTransactionalEnabledDefinitionType             Index (IS_OPTN) read FSkypeMeNonTransactionalEnabled write SetSkypeMeNonTransactionalEnabled stored SkypeMeNonTransactionalEnabled_Specified;
    property LocalListingDistancesRegular:              LocalListingDistancesRegularDefinitionType               Index (IS_OPTN) read FLocalListingDistancesRegular write SetLocalListingDistancesRegular stored LocalListingDistancesRegular_Specified;
    property LocalListingDistancesSpecialty:            LocalListingDistancesSpecialtyDefinitionType             Index (IS_OPTN) read FLocalListingDistancesSpecialty write SetLocalListingDistancesSpecialty stored LocalListingDistancesSpecialty_Specified;
    property LocalListingDistancesNonSubscription:      LocalListingDistancesNonSubscriptionDefinitionType       Index (IS_OPTN) read FLocalListingDistancesNonSubscription write SetLocalListingDistancesNonSubscription stored LocalListingDistancesNonSubscription_Specified;
    property ClassifiedAdPaymentMethodEnabled:          ClassifiedAdPaymentMethodEnabledDefinitionType           Index (IS_OPTN) read FClassifiedAdPaymentMethodEnabled write SetClassifiedAdPaymentMethodEnabled stored ClassifiedAdPaymentMethodEnabled_Specified;
    property ClassifiedAdShippingMethodEnabled:         ClassifiedAdShippingMethodEnabledDefinitionType          Index (IS_OPTN) read FClassifiedAdShippingMethodEnabled write SetClassifiedAdShippingMethodEnabled stored ClassifiedAdShippingMethodEnabled_Specified;
    property ClassifiedAdBestOfferEnabled:              ClassifiedAdBestOfferEnabledDefinitionType               Index (IS_OPTN) read FClassifiedAdBestOfferEnabled write SetClassifiedAdBestOfferEnabled stored ClassifiedAdBestOfferEnabled_Specified;
    property ClassifiedAdCounterOfferEnabled:           ClassifiedAdCounterOfferEnabledDefinitionType            Index (IS_OPTN) read FClassifiedAdCounterOfferEnabled write SetClassifiedAdCounterOfferEnabled stored ClassifiedAdCounterOfferEnabled_Specified;
    property ClassifiedAdAutoDeclineEnabled:            ClassifiedAdAutoDeclineEnabledDefinitionType             Index (IS_OPTN) read FClassifiedAdAutoDeclineEnabled write SetClassifiedAdAutoDeclineEnabled stored ClassifiedAdAutoDeclineEnabled_Specified;
    property ClassifiedAdContactByPhoneEnabled:         ClassifiedAdContactByPhoneEnabledDefinitionType          Index (IS_OPTN) read FClassifiedAdContactByPhoneEnabled write SetClassifiedAdContactByPhoneEnabled stored ClassifiedAdContactByPhoneEnabled_Specified;
    property ClassifiedAdContactByEmailEnabled:         ClassifiedAdContactByEmailEnabledDefintionType           Index (IS_OPTN) read FClassifiedAdContactByEmailEnabled write SetClassifiedAdContactByEmailEnabled stored ClassifiedAdContactByEmailEnabled_Specified;
    property SafePaymentRequired:                       SafePaymentRequiredDefinitionType                        Index (IS_OPTN) read FSafePaymentRequired write SetSafePaymentRequired stored SafePaymentRequired_Specified;
    property ClassifiedAdPayPerLeadEnabled:             ClassifiedAdPayPerLeadEnabledDefinitionType              Index (IS_OPTN) read FClassifiedAdPayPerLeadEnabled write SetClassifiedAdPayPerLeadEnabled stored ClassifiedAdPayPerLeadEnabled_Specified;
    property ItemSpecificsEnabled:                      ItemSpecificsEnabledDefinitionType                       Index (IS_OPTN) read FItemSpecificsEnabled write SetItemSpecificsEnabled stored ItemSpecificsEnabled_Specified;
    property PaisaPayFullEscrowEnabled:                 PaisaPayFullEscrowEnabledDefinitionType                  Index (IS_OPTN) read FPaisaPayFullEscrowEnabled write SetPaisaPayFullEscrowEnabled stored PaisaPayFullEscrowEnabled_Specified;
    property ISBNIdentifierEnabled:                     ISBNIdentifierEnabledDefinitionType                      Index (IS_OPTN) read FISBNIdentifierEnabled write SetISBNIdentifierEnabled stored ISBNIdentifierEnabled_Specified;
    property UPCIdentifierEnabled:                      UPCIdentifierEnabledDefinitionType                       Index (IS_OPTN) read FUPCIdentifierEnabled write SetUPCIdentifierEnabled stored UPCIdentifierEnabled_Specified;
    property EANIdentifierEnabled:                      EANIdentifierEnabledDefinitionType                       Index (IS_OPTN) read FEANIdentifierEnabled write SetEANIdentifierEnabled stored EANIdentifierEnabled_Specified;
    property BrandMPNIdentifierEnabled:                 BrandMPNIdentifierEnabledDefinitionType                  Index (IS_OPTN) read FBrandMPNIdentifierEnabled write SetBrandMPNIdentifierEnabled stored BrandMPNIdentifierEnabled_Specified;
    property BestOfferAutoAcceptEnabled:                BestOfferAutoAcceptEnabledDefinitionType                 Index (IS_OPTN) read FBestOfferAutoAcceptEnabled write SetBestOfferAutoAcceptEnabled stored BestOfferAutoAcceptEnabled_Specified;
    property ClassifiedAdAutoAcceptEnabled:             ClassifiedAdAutoAcceptEnabledDefinitionType              Index (IS_OPTN) read FClassifiedAdAutoAcceptEnabled write SetClassifiedAdAutoAcceptEnabled stored ClassifiedAdAutoAcceptEnabled_Specified;
    property CrossBorderTradeNorthAmericaEnabled:       CrossBorderTradeNorthAmericaEnabledDefinitionType        Index (IS_OPTN) read FCrossBorderTradeNorthAmericaEnabled write SetCrossBorderTradeNorthAmericaEnabled stored CrossBorderTradeNorthAmericaEnabled_Specified;
    property CrossBorderTradeGBEnabled:                 CrossBorderTradeGBEnabledDefinitionType                  Index (IS_OPTN) read FCrossBorderTradeGBEnabled write SetCrossBorderTradeGBEnabled stored CrossBorderTradeGBEnabled_Specified;
    property CrossBorderTradeAustraliaEnabled:          CrossBorderTradeAustraliaEnabledDefinitionType           Index (IS_OPTN) read FCrossBorderTradeAustraliaEnabled write SetCrossBorderTradeAustraliaEnabled stored CrossBorderTradeAustraliaEnabled_Specified;
    property PayPalBuyerProtectionEnabled:              PayPalBuyerProtectionEnabledDefinitionType               Index (IS_OPTN) read FPayPalBuyerProtectionEnabled write SetPayPalBuyerProtectionEnabled stored PayPalBuyerProtectionEnabled_Specified;
    property BuyerGuaranteeEnabled:                     BuyerGuaranteeEnabledDefinitionType                      Index (IS_OPTN) read FBuyerGuaranteeEnabled write SetBuyerGuaranteeEnabled stored BuyerGuaranteeEnabled_Specified;
    property CombinedFixedPriceTreatmentEnabled:        CombinedFixedPriceTreatmentEnabledDefinitionType         Index (IS_OPTN) read FCombinedFixedPriceTreatmentEnabled write SetCombinedFixedPriceTreatmentEnabled stored CombinedFixedPriceTreatmentEnabled_Specified;
    property GalleryFeaturedDurations:                  ListingEnhancementDurationDefinitionType                 Index (IS_OPTN) read FGalleryFeaturedDurations write SetGalleryFeaturedDurations stored GalleryFeaturedDurations_Specified;
    property INEscrowWorkflowTimeline:                  INEscrowWorkflowTimelineDefinitionType                   Index (IS_OPTN) read FINEscrowWorkflowTimeline write SetINEscrowWorkflowTimeline stored INEscrowWorkflowTimeline_Specified;
    property PayPalRequired:                            PayPalRequiredDefinitionType                             Index (IS_OPTN) read FPayPalRequired write SetPayPalRequired stored PayPalRequired_Specified;
    property eBayMotorsProAdFormatEnabled:              eBayMotorsProAdFormatEnabledDefinitionType               Index (IS_OPTN) read FeBayMotorsProAdFormatEnabled write SeteBayMotorsProAdFormatEnabled stored eBayMotorsProAdFormatEnabled_Specified;
    property eBayMotorsProContactByPhoneEnabled:        eBayMotorsProContactByPhoneEnabledDefinitionType         Index (IS_OPTN) read FeBayMotorsProContactByPhoneEnabled write SeteBayMotorsProContactByPhoneEnabled stored eBayMotorsProContactByPhoneEnabled_Specified;
    property eBayMotorsProPhoneCount:                   eBayMotorsProPhoneCountDefinitionType                    Index (IS_OPTN) read FeBayMotorsProPhoneCount write SeteBayMotorsProPhoneCount stored eBayMotorsProPhoneCount_Specified;
    property eBayMotorsProContactByAddressEnabled:      eBayMotorsProContactByAddressEnabledDefinitionType       Index (IS_OPTN) read FeBayMotorsProContactByAddressEnabled write SeteBayMotorsProContactByAddressEnabled stored eBayMotorsProContactByAddressEnabled_Specified;
    property eBayMotorsProStreetCount:                  eBayMotorsProStreetCountDefinitionType                   Index (IS_OPTN) read FeBayMotorsProStreetCount write SeteBayMotorsProStreetCount stored eBayMotorsProStreetCount_Specified;
    property eBayMotorsProCompanyNameEnabled:           eBayMotorsProCompanyNameEnabledDefinitionType            Index (IS_OPTN) read FeBayMotorsProCompanyNameEnabled write SeteBayMotorsProCompanyNameEnabled stored eBayMotorsProCompanyNameEnabled_Specified;
    property eBayMotorsProContactByEmailEnabled:        eBayMotorsProContactByEmailEnabledDefinitionType         Index (IS_OPTN) read FeBayMotorsProContactByEmailEnabled write SeteBayMotorsProContactByEmailEnabled stored eBayMotorsProContactByEmailEnabled_Specified;
    property eBayMotorsProBestOfferEnabled:             eBayMotorsProBestOfferEnabledDefinitionType              Index (IS_OPTN) read FeBayMotorsProBestOfferEnabled write SeteBayMotorsProBestOfferEnabled stored eBayMotorsProBestOfferEnabled_Specified;
    property eBayMotorsProAutoAcceptEnabled:            eBayMotorsProAutoAcceptEnabledDefinitionType             Index (IS_OPTN) read FeBayMotorsProAutoAcceptEnabled write SeteBayMotorsProAutoAcceptEnabled stored eBayMotorsProAutoAcceptEnabled_Specified;
    property eBayMotorsProAutoDeclineEnabled:           eBayMotorsProAutoDeclineEnabledDefinitionType            Index (IS_OPTN) read FeBayMotorsProAutoDeclineEnabled write SeteBayMotorsProAutoDeclineEnabled stored eBayMotorsProAutoDeclineEnabled_Specified;
    property eBayMotorsProPaymentMethodCheckOutEnabled: eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType  Index (IS_OPTN) read FeBayMotorsProPaymentMethodCheckOutEnabled write SeteBayMotorsProPaymentMethodCheckOutEnabled stored eBayMotorsProPaymentMethodCheckOutEnabled_Specified;
    property eBayMotorsProShippingMethodEnabled:        eBayMotorsProShippingMethodEnabledDefinitionType         Index (IS_OPTN) read FeBayMotorsProShippingMethodEnabled write SeteBayMotorsProShippingMethodEnabled stored eBayMotorsProShippingMethodEnabled_Specified;
    property eBayMotorsProCounterOfferEnabled:          eBayMotorsProCounterOfferEnabledDefinitionType           Index (IS_OPTN) read FeBayMotorsProCounterOfferEnabled write SeteBayMotorsProCounterOfferEnabled stored eBayMotorsProCounterOfferEnabled_Specified;
    property eBayMotorsProSellerContactDetailsEnabled:  eBayMotorsProSellerContactDetailsEnabledDefinitionType   Index (IS_OPTN) read FeBayMotorsProSellerContactDetailsEnabled write SeteBayMotorsProSellerContactDetailsEnabled stored eBayMotorsProSellerContactDetailsEnabled_Specified;
    property LocalMarketAdFormatEnabled:                LocalMarketAdFormatEnabledDefinitionType                 Index (IS_OPTN) read FLocalMarketAdFormatEnabled write SetLocalMarketAdFormatEnabled stored LocalMarketAdFormatEnabled_Specified;
    property LocalMarketContactByPhoneEnabled:          LocalMarketContactByPhoneEnabledDefinitionType           Index (IS_OPTN) read FLocalMarketContactByPhoneEnabled write SetLocalMarketContactByPhoneEnabled stored LocalMarketContactByPhoneEnabled_Specified;
    property LocalMarketPhoneCount:                     LocalMarketPhoneCountDefinitionType                      Index (IS_OPTN) read FLocalMarketPhoneCount write SetLocalMarketPhoneCount stored LocalMarketPhoneCount_Specified;
    property LocalMarketContactByAddressEnabled:        LocalMarketContactByAddressEnabledDefinitionType         Index (IS_OPTN) read FLocalMarketContactByAddressEnabled write SetLocalMarketContactByAddressEnabled stored LocalMarketContactByAddressEnabled_Specified;
    property LocalMarketStreetCount:                    LocalMarketStreetCountDefinitionType                     Index (IS_OPTN) read FLocalMarketStreetCount write SetLocalMarketStreetCount stored LocalMarketStreetCount_Specified;
    property LocalMarketCompanyNameEnabled:             LocalMarketCompanyNameEnabledDefinitionType              Index (IS_OPTN) read FLocalMarketCompanyNameEnabled write SetLocalMarketCompanyNameEnabled stored LocalMarketCompanyNameEnabled_Specified;
    property LocalMarketContactByEmailEnabled:          LocalMarketContactByEmailEnabledDefinitionType           Index (IS_OPTN) read FLocalMarketContactByEmailEnabled write SetLocalMarketContactByEmailEnabled stored LocalMarketContactByEmailEnabled_Specified;
    property LocalMarketBestOfferEnabled:               LocalMarketBestOfferEnabledDefinitionType                Index (IS_OPTN) read FLocalMarketBestOfferEnabled write SetLocalMarketBestOfferEnabled stored LocalMarketBestOfferEnabled_Specified;
    property LocalMarketAutoAcceptEnabled:              LocalMarketAutoAcceptEnabledDefinitionType               Index (IS_OPTN) read FLocalMarketAutoAcceptEnabled write SetLocalMarketAutoAcceptEnabled stored LocalMarketAutoAcceptEnabled_Specified;
    property LocalMarketAutoDeclineEnabled:             LocalMarketAutoDeclineEnabledDefinitionType              Index (IS_OPTN) read FLocalMarketAutoDeclineEnabled write SetLocalMarketAutoDeclineEnabled stored LocalMarketAutoDeclineEnabled_Specified;
    property LocalMarketPaymentMethodCheckOutEnabled:   LocalMarketPaymentMethodCheckOutEnabledDefinitionType    Index (IS_OPTN) read FLocalMarketPaymentMethodCheckOutEnabled write SetLocalMarketPaymentMethodCheckOutEnabled stored LocalMarketPaymentMethodCheckOutEnabled_Specified;
    property LocalMarketShippingMethodEnabled:          LocalMarketShippingMethodEnabledDefinitionType           Index (IS_OPTN) read FLocalMarketShippingMethodEnabled write SetLocalMarketShippingMethodEnabled stored LocalMarketShippingMethodEnabled_Specified;
    property LocalMarketCounterOfferEnabled:            LocalMarketCounterOfferEnabledDefinitionType             Index (IS_OPTN) read FLocalMarketCounterOfferEnabled write SetLocalMarketCounterOfferEnabled stored LocalMarketCounterOfferEnabled_Specified;
    property LocalMarketSellerContactDetailsEnabled:    LocalMarketSellerContactDetailsEnabledDefinitionType     Index (IS_OPTN) read FLocalMarketSellerContactDetailsEnabled write SetLocalMarketSellerContactDetailsEnabled stored LocalMarketSellerContactDetailsEnabled_Specified;
    property ClassifiedAdPhoneCount:                    ClassifiedAdPhoneCountDefinitionType                     Index (IS_OPTN) read FClassifiedAdPhoneCount write SetClassifiedAdPhoneCount stored ClassifiedAdPhoneCount_Specified;
    property ClassifiedAdContactByAddressEnabled:       ClassifiedAdContactByAddressEnabledDefinitionType        Index (IS_OPTN) read FClassifiedAdContactByAddressEnabled write SetClassifiedAdContactByAddressEnabled stored ClassifiedAdContactByAddressEnabled_Specified;
    property ClassifiedAdStreetCount:                   ClassifiedAdStreetCountDefinitionType                    Index (IS_OPTN) read FClassifiedAdStreetCount write SetClassifiedAdStreetCount stored ClassifiedAdStreetCount_Specified;
    property ClassifiedAdCompanyNameEnabled:            ClassifiedAdCompanyNameEnabledDefinitionType             Index (IS_OPTN) read FClassifiedAdCompanyNameEnabled write SetClassifiedAdCompanyNameEnabled stored ClassifiedAdCompanyNameEnabled_Specified;
    property SpecialitySubscription:                    SpecialitySubscriptionDefinitionType                     Index (IS_OPTN) read FSpecialitySubscription write SetSpecialitySubscription stored SpecialitySubscription_Specified;
    property RegularSubscription:                       RegularSubscriptionDefinitionType                        Index (IS_OPTN) read FRegularSubscription write SetRegularSubscription stored RegularSubscription_Specified;
    property PremiumSubscription:                       PremiumSubscriptionDefinitionType                        Index (IS_OPTN) read FPremiumSubscription write SetPremiumSubscription stored PremiumSubscription_Specified;
    property NonSubscription:                           NonSubscriptionDefinitionType                            Index (IS_OPTN) read FNonSubscription write SetNonSubscription stored NonSubscription_Specified;
    property ReturnPolicyEnabled:                       ReturnPolicyEnabledDefinitionType                        Index (IS_OPTN) read FReturnPolicyEnabled write SetReturnPolicyEnabled stored ReturnPolicyEnabled_Specified;
    property HandlingTimeEnabled:                       HandlingTimeEnabledDefinitionType                        Index (IS_OPTN) read FHandlingTimeEnabled write SetHandlingTimeEnabled stored HandlingTimeEnabled_Specified;
    property PayPalRequiredForStoreOwner:               PayPalRequiredForStoreOwnerDefinitionType                Index (IS_OPTN) read FPayPalRequiredForStoreOwner write SetPayPalRequiredForStoreOwner stored PayPalRequiredForStoreOwner_Specified;
    property ReviseQuantityAllowed:                     ReviseQuantityAllowedDefinitionType                      Index (IS_OPTN) read FReviseQuantityAllowed write SetReviseQuantityAllowed stored ReviseQuantityAllowed_Specified;
    property RevisePriceAllowed:                        RevisePriceAllowedDefinitionType                         Index (IS_OPTN) read FRevisePriceAllowed write SetRevisePriceAllowed stored RevisePriceAllowed_Specified;
    property StoreOwnerExtendedListingDurationsEnabled: StoreOwnerExtendedListingDurationsEnabledDefinitionType  Index (IS_OPTN) read FStoreOwnerExtendedListingDurationsEnabled write SetStoreOwnerExtendedListingDurationsEnabled stored StoreOwnerExtendedListingDurationsEnabled_Specified;
    property StoreOwnerExtendedListingDurations:        StoreOwnerExtendedListingDurationsDefinitionType         Index (IS_OPTN) read FStoreOwnerExtendedListingDurations write SetStoreOwnerExtendedListingDurations stored StoreOwnerExtendedListingDurations_Specified;
    property PaymentMethod:                             PaymentMethodDefinitionType                              Index (IS_OPTN) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property Group1MaxFlatShippingCost:                 Group1MaxFlatShippingCostDefinitionType                  Index (IS_OPTN) read FGroup1MaxFlatShippingCost write SetGroup1MaxFlatShippingCost stored Group1MaxFlatShippingCost_Specified;
    property Group2MaxFlatShippingCost:                 Group2MaxFlatShippingCostDefinitionType                  Index (IS_OPTN) read FGroup2MaxFlatShippingCost write SetGroup2MaxFlatShippingCost stored Group2MaxFlatShippingCost_Specified;
    property Group3MaxFlatShippingCost:                 Group3MaxFlatShippingCostDefinitionType                  Index (IS_OPTN) read FGroup3MaxFlatShippingCost write SetGroup3MaxFlatShippingCost stored Group3MaxFlatShippingCost_Specified;
    property MaxFlatShippingCostCBTExempt:              MaxFlatShippingCostCBTExemptDefinitionType               Index (IS_OPTN) read FMaxFlatShippingCostCBTExempt write SetMaxFlatShippingCostCBTExempt stored MaxFlatShippingCostCBTExempt_Specified;
    property MaxFlatShippingCost:                       MaxFlatShippingCostDefinitionType                        Index (IS_OPTN) read FMaxFlatShippingCost write SetMaxFlatShippingCost stored MaxFlatShippingCost_Specified;
    property VariationsEnabled:                         VariationsEnabledDefinitionType                          Index (IS_OPTN) read FVariationsEnabled write SetVariationsEnabled stored VariationsEnabled_Specified;
    property AttributeConversionEnabled:                AttributeConversionEnabledFeatureDefinitionType          Index (IS_OPTN) read FAttributeConversionEnabled write SetAttributeConversionEnabled stored AttributeConversionEnabled_Specified;
    property FreeGalleryPlusEnabled:                    FreeGalleryPlusEnabledDefinitionType                     Index (IS_OPTN) read FFreeGalleryPlusEnabled write SetFreeGalleryPlusEnabled stored FreeGalleryPlusEnabled_Specified;
    property FreePicturePackEnabled:                    FreePicturePackEnabledDefinitionType                     Index (IS_OPTN) read FFreePicturePackEnabled write SetFreePicturePackEnabled stored FreePicturePackEnabled_Specified;
    property ItemCompatibilityEnabled:                  ItemCompatibilityEnabledDefinitionType                   Index (IS_OPTN) read FItemCompatibilityEnabled write SetItemCompatibilityEnabled stored ItemCompatibilityEnabled_Specified;
    property MaxItemCompatibility:                      MaxItemCompatibilityDefinitionType                       Index (IS_OPTN) read FMaxItemCompatibility write SetMaxItemCompatibility stored MaxItemCompatibility_Specified;
    property MinItemCompatibility:                      MinItemCompatibilityDefinitionType                       Index (IS_OPTN) read FMinItemCompatibility write SetMinItemCompatibility stored MinItemCompatibility_Specified;
    property ConditionEnabled:                          ConditionEnabledDefinitionType                           Index (IS_OPTN) read FConditionEnabled write SetConditionEnabled stored ConditionEnabled_Specified;
    property ConditionValues:                           ConditionValuesDefinitionType                            Index (IS_OPTN) read FConditionValues write SetConditionValues stored ConditionValues_Specified;
    property ValueCategory:                             ValueCategoryDefinitionType                              Index (IS_OPTN) read FValueCategory write SetValueCategory stored ValueCategory_Specified;
    property ProductCreationEnabled:                    ProductCreationEnabledDefinitionType                     Index (IS_OPTN) read FProductCreationEnabled write SetProductCreationEnabled stored ProductCreationEnabled_Specified;
    property EANEnabled:                                EANEnabledDefinitionType                                 Index (IS_OPTN) read FEANEnabled write SetEANEnabled stored EANEnabled_Specified;
    property ISBNEnabled:                               ISBNEnabledDefinitionType                                Index (IS_OPTN) read FISBNEnabled write SetISBNEnabled stored ISBNEnabled_Specified;
    property UPCEnabled:                                UPCEnabledDefinitionType                                 Index (IS_OPTN) read FUPCEnabled write SetUPCEnabled stored UPCEnabled_Specified;
    property CompatibleVehicleType:                     CompatibleVehicleTypeDefinitionType                      Index (IS_OPTN) read FCompatibleVehicleType write SetCompatibleVehicleType stored CompatibleVehicleType_Specified;
    property MaxGranularFitmentCount:                   MaxGranularFitmentCountDefinitionType                    Index (IS_OPTN) read FMaxGranularFitmentCount write SetMaxGranularFitmentCount stored MaxGranularFitmentCount_Specified;
    property PaymentOptionsGroup:                       PaymentOptionsGroupEnabledDefinitionType                 Index (IS_OPTN) read FPaymentOptionsGroup write SetPaymentOptionsGroup stored PaymentOptionsGroup_Specified;
    property ShippingProfileCategoryGroup:              ProfileCategoryGroupDefinitionType                       Index (IS_OPTN) read FShippingProfileCategoryGroup write SetShippingProfileCategoryGroup stored ShippingProfileCategoryGroup_Specified;
    property PaymentProfileCategoryGroup:               ProfileCategoryGroupDefinitionType                       Index (IS_OPTN) read FPaymentProfileCategoryGroup write SetPaymentProfileCategoryGroup stored PaymentProfileCategoryGroup_Specified;
    property ReturnPolicyProfileCategoryGroup:          ProfileCategoryGroupDefinitionType                       Index (IS_OPTN) read FReturnPolicyProfileCategoryGroup write SetReturnPolicyProfileCategoryGroup stored ReturnPolicyProfileCategoryGroup_Specified;
    property VINSupported:                              VINSupportedDefinitionType                               Index (IS_OPTN) read FVINSupported write SetVINSupported stored VINSupported_Specified;
    property VRMSupported:                              VRMSupportedDefinitionType                               Index (IS_OPTN) read FVRMSupported write SetVRMSupported stored VRMSupported_Specified;
    property SellerProvidedTitleSupported:              SellerProvidedTitleSupportedDefinitionType               Index (IS_OPTN) read FSellerProvidedTitleSupported write SetSellerProvidedTitleSupported stored SellerProvidedTitleSupported_Specified;
    property DepositSupported:                          DepositSupportedDefinitionType                           Index (IS_OPTN) read FDepositSupported write SetDepositSupported stored DepositSupported_Specified;
    property GlobalShippingEnabled:                     GlobalShippingEnabledDefinitionType                      Index (IS_OPTN) read FGlobalShippingEnabled write SetGlobalShippingEnabled stored GlobalShippingEnabled_Specified;
    property AdditionalCompatibilityEnabled:            AdditionalCompatibilityEnabledDefinitionType             Index (IS_OPTN) read FAdditionalCompatibilityEnabled write SetAdditionalCompatibilityEnabled stored AdditionalCompatibilityEnabled_Specified;
    property PickupDropOffEnabled:                      PickupDropOffEnabledDefinitionType                       Index (IS_OPTN) read FPickupDropOffEnabled write SetPickupDropOffEnabled stored PickupDropOffEnabled_Specified;
    property DigitalGoodDeliveryEnabled:                DigitalGoodDeliveryEnabledDefinitionType                 Index (IS_OPTN) read FDigitalGoodDeliveryEnabled write SetDigitalGoodDeliveryEnabled stored DigitalGoodDeliveryEnabled_Specified;
    property EpidSupported:                             EpidSupportedDefinitionType                              Index (IS_OPTN) read FEpidSupported write SetEpidSupported stored EpidSupported_Specified;
    property KTypeSupported:                            KTypeSupportedDefinitionType                             Index (IS_OPTN) read FKTypeSupported write SetKTypeSupported stored KTypeSupported_Specified;
    property ProductRequiredEnabled:                    ProductRequiredEnabledDefinitionType                     Index (IS_OPTN) read FProductRequiredEnabled write SetProductRequiredEnabled stored ProductRequiredEnabled_Specified;
    property DomesticReturnsAcceptedValues:             DomesticReturnsAcceptedDefinitionType                    Index (IS_OPTN) read FDomesticReturnsAcceptedValues write SetDomesticReturnsAcceptedValues stored DomesticReturnsAcceptedValues_Specified;
    property InternationalReturnsAcceptedValues:        InternationalReturnsAcceptedDefinitionType               Index (IS_OPTN) read FInternationalReturnsAcceptedValues write SetInternationalReturnsAcceptedValues stored InternationalReturnsAcceptedValues_Specified;
    property DomesticReturnsDurationValues:             DomesticReturnsDurationDefinitionType                    Index (IS_OPTN) read FDomesticReturnsDurationValues write SetDomesticReturnsDurationValues stored DomesticReturnsDurationValues_Specified;
    property InternationalReturnsDurationValues:        InternationalReturnsDurationDefinitionType               Index (IS_OPTN) read FInternationalReturnsDurationValues write SetInternationalReturnsDurationValues stored InternationalReturnsDurationValues_Specified;
    property DomesticReturnsShipmentPayeeValues:        DomesticReturnsShipmentPayeeDefinitionType               Index (IS_OPTN) read FDomesticReturnsShipmentPayeeValues write SetDomesticReturnsShipmentPayeeValues stored DomesticReturnsShipmentPayeeValues_Specified;
    property InternationalReturnsShipmentPayeeValues:   InternationalReturnsShipmentPayeeDefinitionType          Index (IS_OPTN) read FInternationalReturnsShipmentPayeeValues write SetInternationalReturnsShipmentPayeeValues stored InternationalReturnsShipmentPayeeValues_Specified;
    property DomesticRefundMethodValues:                DomesticRefundMethodCodeType                             Index (IS_OPTN) read FDomesticRefundMethodValues write SetDomesticRefundMethodValues stored DomesticRefundMethodValues_Specified;
    property InternationalRefundMethodValues:           InternationalRefundMethodCodeType                        Index (IS_OPTN) read FInternationalRefundMethodValues write SetInternationalRefundMethodValues stored InternationalRefundMethodValues_Specified;
    property ReturnPolicyDescriptionEnabled:            ReturnPolicyDescriptionEnabledDefinitionType             Index (IS_OPTN) read FReturnPolicyDescriptionEnabled write SetReturnPolicyDescriptionEnabled stored ReturnPolicyDescriptionEnabled_Specified;
  end;



  // ************************************************************************ //
  // XML       : CharacteristicType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharacteristicType = class(TRemotable)
  private
    FAttributeID: Integer;
    FDateFormat: string;
    FDateFormat_Specified: boolean;
    FDisplaySequence: string;
    FDisplaySequence_Specified: boolean;
    FDisplayUOM: string;
    FDisplayUOM_Specified: boolean;
    FLabel_: LabelType;
    FLabel__Specified: boolean;
    FSortOrder: SortOrderCodeType;
    FSortOrder_Specified: boolean;
    FValueList: Array_Of_ValType;
    FValueList_Specified: boolean;
    procedure SetDateFormat(Index: Integer; const Astring: string);
    function  DateFormat_Specified(Index: Integer): boolean;
    procedure SetDisplaySequence(Index: Integer; const Astring: string);
    function  DisplaySequence_Specified(Index: Integer): boolean;
    procedure SetDisplayUOM(Index: Integer; const Astring: string);
    function  DisplayUOM_Specified(Index: Integer): boolean;
    procedure SetLabel_(Index: Integer; const ALabelType: LabelType);
    function  Label__Specified(Index: Integer): boolean;
    procedure SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  SortOrder_Specified(Index: Integer): boolean;
    procedure SetValueList(Index: Integer; const AArray_Of_ValType: Array_Of_ValType);
    function  ValueList_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AttributeID:     Integer            read FAttributeID write FAttributeID;
    property DateFormat:      string             Index (IS_OPTN) read FDateFormat write SetDateFormat stored DateFormat_Specified;
    property DisplaySequence: string             Index (IS_OPTN) read FDisplaySequence write SetDisplaySequence stored DisplaySequence_Specified;
    property DisplayUOM:      string             Index (IS_OPTN) read FDisplayUOM write SetDisplayUOM stored DisplayUOM_Specified;
    property Label_:          LabelType          Index (IS_OPTN) read FLabel_ write SetLabel_ stored Label__Specified;
    property SortOrder:       SortOrderCodeType  Index (IS_OPTN) read FSortOrder write SetSortOrder stored SortOrder_Specified;
    property ValueList:       Array_Of_ValType   Index (IS_OPTN or IS_UNBD) read FValueList write SetValueList stored ValueList_Specified;
  end;



  // ************************************************************************ //
  // XML       : LabelType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LabelType = class(TRemotable)
  private
    Fvisible: Boolean;
    Fvisible_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    procedure Setvisible(Index: Integer; const ABoolean: Boolean);
    function  visible_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
  published
    property visible: Boolean  Index (IS_ATTR or IS_OPTN) read Fvisible write Setvisible stored visible_Specified;
    property Name_:   string   Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
  end;



  // ************************************************************************ //
  // XML       : CategoryGroupType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryGroupType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FIsDefault: Boolean;
    FIsDefault_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetIsDefault(Index: Integer; const ABoolean: Boolean);
    function  IsDefault_Specified(Index: Integer): boolean;
  published
    property Name_:     string   Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property IsDefault: Boolean  Index (IS_OPTN) read FIsDefault write SetIsDefault stored IsDefault_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExtendedProductFinderIDType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExtendedProductFinderIDType = class(TRemotable)
  private
    FProductFinderID: Integer;
    FProductFinderID_Specified: boolean;
    FProductFinderBuySide: Boolean;
    FProductFinderBuySide_Specified: boolean;
    procedure SetProductFinderID(Index: Integer; const AInteger: Integer);
    function  ProductFinderID_Specified(Index: Integer): boolean;
    procedure SetProductFinderBuySide(Index: Integer; const ABoolean: Boolean);
    function  ProductFinderBuySide_Specified(Index: Integer): boolean;
  published
    property ProductFinderID:      Integer  Index (IS_OPTN) read FProductFinderID write SetProductFinderID stored ProductFinderID_Specified;
    property ProductFinderBuySide: Boolean  Index (IS_OPTN) read FProductFinderBuySide write SetProductFinderBuySide stored ProductFinderBuySide_Specified;
  end;



  // ************************************************************************ //
  // XML       : CharacteristicsSetType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharacteristicsSetType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FAttributeSetID: Integer;
    FAttributeSetID_Specified: boolean;
    FAttributeSetVersion: string;
    FAttributeSetVersion_Specified: boolean;
    FCharacteristics: Array_Of_CharacteristicType;
    FCharacteristics_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetAttributeSetID(Index: Integer; const AInteger: Integer);
    function  AttributeSetID_Specified(Index: Integer): boolean;
    procedure SetAttributeSetVersion(Index: Integer; const Astring: string);
    function  AttributeSetVersion_Specified(Index: Integer): boolean;
    procedure SetCharacteristics(Index: Integer; const AArray_Of_CharacteristicType: Array_Of_CharacteristicType);
    function  Characteristics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:               string                       Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property AttributeSetID:      Integer                      Index (IS_OPTN) read FAttributeSetID write SetAttributeSetID stored AttributeSetID_Specified;
    property AttributeSetVersion: string                       Index (IS_OPTN) read FAttributeSetVersion write SetAttributeSetVersion stored AttributeSetVersion_Specified;
    property Characteristics:     Array_Of_CharacteristicType  Index (IS_OPTN or IS_UNBD) read FCharacteristics write SetCharacteristics stored Characteristics_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConditionValuesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ConditionValuesType = class(TRemotable)
  private
    FCondition: Array_Of_ConditionType;
    FCondition_Specified: boolean;
    FConditionHelpURL: string;
    FConditionHelpURL_Specified: boolean;
    procedure SetCondition(Index: Integer; const AArray_Of_ConditionType: Array_Of_ConditionType);
    function  Condition_Specified(Index: Integer): boolean;
    procedure SetConditionHelpURL(Index: Integer; const Astring: string);
    function  ConditionHelpURL_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Condition:        Array_Of_ConditionType  Index (IS_OPTN or IS_UNBD) read FCondition write SetCondition stored Condition_Specified;
    property ConditionHelpURL: string                  Index (IS_OPTN) read FConditionHelpURL write SetConditionHelpURL stored ConditionHelpURL_Specified;
  end;

  DomesticReturnsAcceptedCodeType = array of ReturnsAcceptedCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : CharityAffiliationDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityAffiliationDetailType = class(TRemotable)
  private
    FCharityID: string;
    FCharityID_Specified: boolean;
    FAffiliationType: CharityAffiliationTypeCodeType;
    FAffiliationType_Specified: boolean;
    FLastUsedTime: TXSDateTime;
    FLastUsedTime_Specified: boolean;
    procedure SetCharityID(Index: Integer; const Astring: string);
    function  CharityID_Specified(Index: Integer): boolean;
    procedure SetAffiliationType(Index: Integer; const ACharityAffiliationTypeCodeType: CharityAffiliationTypeCodeType);
    function  AffiliationType_Specified(Index: Integer): boolean;
    procedure SetLastUsedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastUsedTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CharityID:       string                          Index (IS_OPTN) read FCharityID write SetCharityID stored CharityID_Specified;
    property AffiliationType: CharityAffiliationTypeCodeType  Index (IS_OPTN) read FAffiliationType write SetAffiliationType stored AffiliationType_Specified;
    property LastUsedTime:    TXSDateTime                     Index (IS_OPTN) read FLastUsedTime write SetLastUsedTime stored LastUsedTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdContactByAddressEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdContactByAddressEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdContactByEmailEnabledDefintionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdContactByEmailEnabledDefintionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdContactByPhoneEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdContactByPhoneEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdAutoDeclineEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdBestOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdBestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdCompanyNameEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdCompanyNameEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdCounterOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdCounterOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdShippingMethodEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdShippingMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdStreetCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdStreetCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CombinedFixedPriceTreatmentEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CombinedFixedPriceTreatmentEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdPayPerLeadEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdPayPerLeadEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdPaymentMethodEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdPaymentMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdPhoneCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdPhoneCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CharityInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityInfoType = class(TRemotable)
  private
    Fid: string;
    Fid_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FListingNPEmailNotifPref: Boolean;
    FListingNPEmailNotifPref_Specified: boolean;
    FListingNPEmail: string;
    FListingNPEmail_Specified: boolean;
    FListingNPContactName: string;
    FListingNPContactName_Specified: boolean;
    FMission: string;
    FMission_Specified: boolean;
    FLogoURL: string;
    FLogoURL_Specified: boolean;
    FStatus: CharityStatusCodeType;
    FStatus_Specified: boolean;
    FSearchableString: string;
    FSearchableString_Specified: boolean;
    FCharityRegion: Integer;
    FCharityRegion_Specified: boolean;
    FCharityDomain: NumberOfPolicyViolationsDetailsType;
    FCharityDomain_Specified: boolean;
    FCharityID: string;
    FCharityID_Specified: boolean;
    FLogoURLSelling: string;
    FLogoURLSelling_Specified: boolean;
    FDisplayLogoSelling: Boolean;
    FDisplayLogoSelling_Specified: boolean;
    FDisplayNameInCheckout: Boolean;
    FDisplayNameInCheckout_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FShowMultipleDonationAmountInCheckout: Boolean;
    FShowMultipleDonationAmountInCheckout_Specified: boolean;
    FExternalID: string;
    FExternalID_Specified: boolean;
    FPopularityIndex: Integer;
    FPopularityIndex_Specified: boolean;
    FEIN: string;
    FEIN_Specified: boolean;
    FNonProfitSecondName: string;
    FNonProfitSecondName_Specified: boolean;
    FNonProfitAddress: Array_Of_NonProfitAddressType;
    FNonProfitAddress_Specified: boolean;
    FNonProfitSocialAddress: Array_Of_NonProfitSocialAddressType;
    FNonProfitSocialAddress_Specified: boolean;
    procedure Setid(Index: Integer; const Astring: string);
    function  id_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetListingNPEmailNotifPref(Index: Integer; const ABoolean: Boolean);
    function  ListingNPEmailNotifPref_Specified(Index: Integer): boolean;
    procedure SetListingNPEmail(Index: Integer; const Astring: string);
    function  ListingNPEmail_Specified(Index: Integer): boolean;
    procedure SetListingNPContactName(Index: Integer; const Astring: string);
    function  ListingNPContactName_Specified(Index: Integer): boolean;
    procedure SetMission(Index: Integer; const Astring: string);
    function  Mission_Specified(Index: Integer): boolean;
    procedure SetLogoURL(Index: Integer; const Astring: string);
    function  LogoURL_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ACharityStatusCodeType: CharityStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetSearchableString(Index: Integer; const Astring: string);
    function  SearchableString_Specified(Index: Integer): boolean;
    procedure SetCharityRegion(Index: Integer; const AInteger: Integer);
    function  CharityRegion_Specified(Index: Integer): boolean;
    procedure SetCharityDomain(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  CharityDomain_Specified(Index: Integer): boolean;
    procedure SetCharityID(Index: Integer; const Astring: string);
    function  CharityID_Specified(Index: Integer): boolean;
    procedure SetLogoURLSelling(Index: Integer; const Astring: string);
    function  LogoURLSelling_Specified(Index: Integer): boolean;
    procedure SetDisplayLogoSelling(Index: Integer; const ABoolean: Boolean);
    function  DisplayLogoSelling_Specified(Index: Integer): boolean;
    procedure SetDisplayNameInCheckout(Index: Integer; const ABoolean: Boolean);
    function  DisplayNameInCheckout_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetShowMultipleDonationAmountInCheckout(Index: Integer; const ABoolean: Boolean);
    function  ShowMultipleDonationAmountInCheckout_Specified(Index: Integer): boolean;
    procedure SetExternalID(Index: Integer; const Astring: string);
    function  ExternalID_Specified(Index: Integer): boolean;
    procedure SetPopularityIndex(Index: Integer; const AInteger: Integer);
    function  PopularityIndex_Specified(Index: Integer): boolean;
    procedure SetEIN(Index: Integer; const Astring: string);
    function  EIN_Specified(Index: Integer): boolean;
    procedure SetNonProfitSecondName(Index: Integer; const Astring: string);
    function  NonProfitSecondName_Specified(Index: Integer): boolean;
    procedure SetNonProfitAddress(Index: Integer; const AArray_Of_NonProfitAddressType: Array_Of_NonProfitAddressType);
    function  NonProfitAddress_Specified(Index: Integer): boolean;
    procedure SetNonProfitSocialAddress(Index: Integer; const AArray_Of_NonProfitSocialAddressType: Array_Of_NonProfitSocialAddressType);
    function  NonProfitSocialAddress_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property id:                                   string                               Index (IS_ATTR or IS_OPTN) read Fid write Setid stored id_Specified;
    property Name_:                                string                               Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property ListingNPEmailNotifPref:              Boolean                              Index (IS_OPTN) read FListingNPEmailNotifPref write SetListingNPEmailNotifPref stored ListingNPEmailNotifPref_Specified;
    property ListingNPEmail:                       string                               Index (IS_OPTN) read FListingNPEmail write SetListingNPEmail stored ListingNPEmail_Specified;
    property ListingNPContactName:                 string                               Index (IS_OPTN) read FListingNPContactName write SetListingNPContactName stored ListingNPContactName_Specified;
    property Mission:                              string                               Index (IS_OPTN) read FMission write SetMission stored Mission_Specified;
    property LogoURL:                              string                               Index (IS_OPTN) read FLogoURL write SetLogoURL stored LogoURL_Specified;
    property Status:                               CharityStatusCodeType                Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property SearchableString:                     string                               Index (IS_OPTN) read FSearchableString write SetSearchableString stored SearchableString_Specified;
    property CharityRegion:                        Integer                              Index (IS_OPTN) read FCharityRegion write SetCharityRegion stored CharityRegion_Specified;
    property CharityDomain:                        NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FCharityDomain write SetCharityDomain stored CharityDomain_Specified;
    property CharityID:                            string                               Index (IS_OPTN) read FCharityID write SetCharityID stored CharityID_Specified;
    property LogoURLSelling:                       string                               Index (IS_OPTN) read FLogoURLSelling write SetLogoURLSelling stored LogoURLSelling_Specified;
    property DisplayLogoSelling:                   Boolean                              Index (IS_OPTN) read FDisplayLogoSelling write SetDisplayLogoSelling stored DisplayLogoSelling_Specified;
    property DisplayNameInCheckout:                Boolean                              Index (IS_OPTN) read FDisplayNameInCheckout write SetDisplayNameInCheckout stored DisplayNameInCheckout_Specified;
    property Description:                          string                               Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ShowMultipleDonationAmountInCheckout: Boolean                              Index (IS_OPTN) read FShowMultipleDonationAmountInCheckout write SetShowMultipleDonationAmountInCheckout stored ShowMultipleDonationAmountInCheckout_Specified;
    property ExternalID:                           string                               Index (IS_OPTN) read FExternalID write SetExternalID stored ExternalID_Specified;
    property PopularityIndex:                      Integer                              Index (IS_OPTN) read FPopularityIndex write SetPopularityIndex stored PopularityIndex_Specified;
    property EIN:                                  string                               Index (IS_OPTN) read FEIN write SetEIN stored EIN_Specified;
    property NonProfitSecondName:                  string                               Index (IS_OPTN) read FNonProfitSecondName write SetNonProfitSecondName stored NonProfitSecondName_Specified;
    property NonProfitAddress:                     Array_Of_NonProfitAddressType        Index (IS_OPTN or IS_UNBD) read FNonProfitAddress write SetNonProfitAddress stored NonProfitAddress_Specified;
    property NonProfitSocialAddress:               Array_Of_NonProfitSocialAddressType  Index (IS_OPTN or IS_UNBD) read FNonProfitSocialAddress write SetNonProfitSocialAddress stored NonProfitSocialAddress_Specified;
  end;

  CharityAffiliationDetailsType = array of CharityAffiliationDetailType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  CharityAffiliationsType = array of CharityIDType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : CharityIDType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityIDType = class(TRemotable)
  private
    FText: string;
    Ftype_: CharityAffiliationTypeCodeType;
  published
    property Text:  string                          Index (IS_TEXT) read FText write FText;
    property type_: CharityAffiliationTypeCodeType  Index (IS_ATTR) read Ftype_ write Ftype_;
  end;



  // ************************************************************************ //
  // XML       : NonProfitSocialAddressType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NonProfitSocialAddressType = class(TRemotable)
  private
    FSocialAddressType: SocialAddressTypeCodeType;
    FSocialAddressType_Specified: boolean;
    FSocialAddressId: string;
    FSocialAddressId_Specified: boolean;
    procedure SetSocialAddressType(Index: Integer; const ASocialAddressTypeCodeType: SocialAddressTypeCodeType);
    function  SocialAddressType_Specified(Index: Integer): boolean;
    procedure SetSocialAddressId(Index: Integer; const Astring: string);
    function  SocialAddressId_Specified(Index: Integer): boolean;
  published
    property SocialAddressType: SocialAddressTypeCodeType  Index (IS_OPTN) read FSocialAddressType write SetSocialAddressType stored SocialAddressType_Specified;
    property SocialAddressId:   string                     Index (IS_OPTN) read FSocialAddressId write SetSocialAddressId stored SocialAddressId_Specified;
  end;



  // ************************************************************************ //
  // XML       : eBayPaymentMismatchDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayPaymentMismatchDetailsType = class(TRemotable)
  private
    FMismatchType: MismatchTypeCodeType;
    FMismatchType_Specified: boolean;
    FActionRequiredBy: TXSDateTime;
    FActionRequiredBy_Specified: boolean;
    FMismatchAmount: AmountType;
    FMismatchAmount_Specified: boolean;
    procedure SetMismatchType(Index: Integer; const AMismatchTypeCodeType: MismatchTypeCodeType);
    function  MismatchType_Specified(Index: Integer): boolean;
    procedure SetActionRequiredBy(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ActionRequiredBy_Specified(Index: Integer): boolean;
    procedure SetMismatchAmount(Index: Integer; const AAmountType: AmountType);
    function  MismatchAmount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MismatchType:     MismatchTypeCodeType  Index (IS_OPTN) read FMismatchType write SetMismatchType stored MismatchType_Specified;
    property ActionRequiredBy: TXSDateTime           Index (IS_OPTN) read FActionRequiredBy write SetActionRequiredBy stored ActionRequiredBy_Specified;
    property MismatchAmount:   AmountType            Index (IS_OPTN) read FMismatchAmount write SetMismatchAmount stored MismatchAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ClassifiedAdAutoAcceptEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PaymentTransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentTransactionType = class(TRemotable)
  private
    FPaymentStatus: PaymentTransactionStatusCodeType;
    FPaymentStatus_Specified: boolean;
    FPayer: UserIdentityType;
    FPayer_Specified: boolean;
    FPayee: UserIdentityType;
    FPayee_Specified: boolean;
    FPaymentTime: TXSDateTime;
    FPaymentTime_Specified: boolean;
    FPaymentAmount: AmountType;
    FPaymentAmount_Specified: boolean;
    FReferenceID: TransactionReferenceType;
    FReferenceID_Specified: boolean;
    FFeeOrCreditAmount: AmountType;
    FFeeOrCreditAmount_Specified: boolean;
    FPaymentReferenceID: Array_Of_TransactionReferenceType;
    FPaymentReferenceID_Specified: boolean;
    procedure SetPaymentStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
    function  PaymentStatus_Specified(Index: Integer): boolean;
    procedure SetPayer(Index: Integer; const AUserIdentityType: UserIdentityType);
    function  Payer_Specified(Index: Integer): boolean;
    procedure SetPayee(Index: Integer; const AUserIdentityType: UserIdentityType);
    function  Payee_Specified(Index: Integer): boolean;
    procedure SetPaymentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PaymentTime_Specified(Index: Integer): boolean;
    procedure SetPaymentAmount(Index: Integer; const AAmountType: AmountType);
    function  PaymentAmount_Specified(Index: Integer): boolean;
    procedure SetReferenceID(Index: Integer; const ATransactionReferenceType: TransactionReferenceType);
    function  ReferenceID_Specified(Index: Integer): boolean;
    procedure SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
    function  FeeOrCreditAmount_Specified(Index: Integer): boolean;
    procedure SetPaymentReferenceID(Index: Integer; const AArray_Of_TransactionReferenceType: Array_Of_TransactionReferenceType);
    function  PaymentReferenceID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PaymentStatus:      PaymentTransactionStatusCodeType   Index (IS_OPTN) read FPaymentStatus write SetPaymentStatus stored PaymentStatus_Specified;
    property Payer:              UserIdentityType                   Index (IS_OPTN) read FPayer write SetPayer stored Payer_Specified;
    property Payee:              UserIdentityType                   Index (IS_OPTN) read FPayee write SetPayee stored Payee_Specified;
    property PaymentTime:        TXSDateTime                        Index (IS_OPTN) read FPaymentTime write SetPaymentTime stored PaymentTime_Specified;
    property PaymentAmount:      AmountType                         Index (IS_OPTN) read FPaymentAmount write SetPaymentAmount stored PaymentAmount_Specified;
    property ReferenceID:        TransactionReferenceType           Index (IS_OPTN) read FReferenceID write SetReferenceID stored ReferenceID_Specified;
    property FeeOrCreditAmount:  AmountType                         Index (IS_OPTN) read FFeeOrCreditAmount write SetFeeOrCreditAmount stored FeeOrCreditAmount_Specified;
    property PaymentReferenceID: Array_Of_TransactionReferenceType  Index (IS_OPTN or IS_UNBD) read FPaymentReferenceID write SetPaymentReferenceID stored PaymentReferenceID_Specified;
  end;



  // ************************************************************************ //
  // XML       : RefundTransactionInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundTransactionInfoType = class(TRemotable)
  private
    FRefundStatus: PaymentTransactionStatusCodeType;
    FRefundStatus_Specified: boolean;
    FRefundType: RefundSourceTypeCodeType;
    FRefundType_Specified: boolean;
    FRefundTo: UserIdentityType;
    FRefundTo_Specified: boolean;
    FRefundTime: TXSDateTime;
    FRefundTime_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FReferenceID: TransactionReferenceType;
    FReferenceID_Specified: boolean;
    FFeeOrCreditAmount: AmountType;
    FFeeOrCreditAmount_Specified: boolean;
    procedure SetRefundStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
    function  RefundStatus_Specified(Index: Integer): boolean;
    procedure SetRefundType(Index: Integer; const ARefundSourceTypeCodeType: RefundSourceTypeCodeType);
    function  RefundType_Specified(Index: Integer): boolean;
    procedure SetRefundTo(Index: Integer; const AUserIdentityType: UserIdentityType);
    function  RefundTo_Specified(Index: Integer): boolean;
    procedure SetRefundTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundTime_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetReferenceID(Index: Integer; const ATransactionReferenceType: TransactionReferenceType);
    function  ReferenceID_Specified(Index: Integer): boolean;
    procedure SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
    function  FeeOrCreditAmount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property RefundStatus:      PaymentTransactionStatusCodeType  Index (IS_OPTN) read FRefundStatus write SetRefundStatus stored RefundStatus_Specified;
    property RefundType:        RefundSourceTypeCodeType          Index (IS_OPTN) read FRefundType write SetRefundType stored RefundType_Specified;
    property RefundTo:          UserIdentityType                  Index (IS_OPTN) read FRefundTo write SetRefundTo stored RefundTo_Specified;
    property RefundTime:        TXSDateTime                       Index (IS_OPTN) read FRefundTime write SetRefundTime stored RefundTime_Specified;
    property RefundAmount:      AmountType                        Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property ReferenceID:       TransactionReferenceType          Index (IS_OPTN) read FReferenceID write SetReferenceID stored ReferenceID_Specified;
    property FeeOrCreditAmount: AmountType                        Index (IS_OPTN) read FFeeOrCreditAmount write SetFeeOrCreditAmount stored FeeOrCreditAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : Group1MaxFlatShippingCostDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  Group1MaxFlatShippingCostDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Group2MaxFlatShippingCostDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  Group2MaxFlatShippingCostDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Group3MaxFlatShippingCostDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  Group3MaxFlatShippingCostDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : StoreOwnerExtendedListingDurationsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreOwnerExtendedListingDurationsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : StoreOwnerExtendedListingDurationsDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreOwnerExtendedListingDurationsDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PaymentMethodDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentMethodDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MaxFlatShippingCostCBTExemptDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaxFlatShippingCostCBTExemptDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FreePicturePackEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FreePicturePackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ItemCompatibilityEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemCompatibilityEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MaxItemCompatibilityDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaxItemCompatibilityDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MaxFlatShippingCostDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaxFlatShippingCostDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VariationsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VariationsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FreeGalleryPlusEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FreeGalleryPlusEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketSellerContactDetailsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketSellerContactDetailsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SpecialitySubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SpecialitySubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RegularSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RegularSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketPaymentMethodCheckOutEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketPaymentMethodCheckOutEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketShippingMethodEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketShippingMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketCounterOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketCounterOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PremiumSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PremiumSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PayPalRequiredForStoreOwnerDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PayPalRequiredForStoreOwnerDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseQuantityAllowedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReviseQuantityAllowedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RevisePriceAllowedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RevisePriceAllowedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : NonSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NonSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReturnPolicyEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnPolicyEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : HandlingTimeEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  HandlingTimeEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MinItemCompatibilityDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MinItemCompatibilityDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InternationalReturnsShipmentPayeeDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InternationalReturnsShipmentPayeeDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReturnPolicyDescriptionEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnPolicyDescriptionEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FeatureEligibilityType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeatureEligibilityType = class(TRemotable)
  private
    FQualifiesForBuyItNow: Boolean;
    FQualifiesForBuyItNow_Specified: boolean;
    FQualifiesForBuyItNowMultiple: Boolean;
    FQualifiesForBuyItNowMultiple_Specified: boolean;
    FQualifiedForFixedPriceOneDayDuration: Boolean;
    FQualifiedForFixedPriceOneDayDuration_Specified: boolean;
    FQualifiesForVariations: Boolean;
    FQualifiesForVariations_Specified: boolean;
    FQualifiedForAuctionOneDayDuration: Boolean;
    FQualifiedForAuctionOneDayDuration_Specified: boolean;
    procedure SetQualifiesForBuyItNow(Index: Integer; const ABoolean: Boolean);
    function  QualifiesForBuyItNow_Specified(Index: Integer): boolean;
    procedure SetQualifiesForBuyItNowMultiple(Index: Integer; const ABoolean: Boolean);
    function  QualifiesForBuyItNowMultiple_Specified(Index: Integer): boolean;
    procedure SetQualifiedForFixedPriceOneDayDuration(Index: Integer; const ABoolean: Boolean);
    function  QualifiedForFixedPriceOneDayDuration_Specified(Index: Integer): boolean;
    procedure SetQualifiesForVariations(Index: Integer; const ABoolean: Boolean);
    function  QualifiesForVariations_Specified(Index: Integer): boolean;
    procedure SetQualifiedForAuctionOneDayDuration(Index: Integer; const ABoolean: Boolean);
    function  QualifiedForAuctionOneDayDuration_Specified(Index: Integer): boolean;
  published
    property QualifiesForBuyItNow:                 Boolean  Index (IS_OPTN) read FQualifiesForBuyItNow write SetQualifiesForBuyItNow stored QualifiesForBuyItNow_Specified;
    property QualifiesForBuyItNowMultiple:         Boolean  Index (IS_OPTN) read FQualifiesForBuyItNowMultiple write SetQualifiesForBuyItNowMultiple stored QualifiesForBuyItNowMultiple_Specified;
    property QualifiedForFixedPriceOneDayDuration: Boolean  Index (IS_OPTN) read FQualifiedForFixedPriceOneDayDuration write SetQualifiedForFixedPriceOneDayDuration stored QualifiedForFixedPriceOneDayDuration_Specified;
    property QualifiesForVariations:               Boolean  Index (IS_OPTN) read FQualifiesForVariations write SetQualifiesForVariations stored QualifiesForVariations_Specified;
    property QualifiedForAuctionOneDayDuration:    Boolean  Index (IS_OPTN) read FQualifiedForAuctionOneDayDuration write SetQualifiedForAuctionOneDayDuration stored QualifiedForAuctionOneDayDuration_Specified;
  end;



  // ************************************************************************ //
  // XML       : ProductRequiredEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductRequiredEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InternationalReturnsAcceptedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InternationalReturnsAcceptedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InternationalReturnsDurationDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InternationalReturnsDurationDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FeeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeeType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FFee: AmountType;
    FFee_Specified: boolean;
    FPromotionalDiscount: AmountType;
    FPromotionalDiscount_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetFee(Index: Integer; const AAmountType: AmountType);
    function  Fee_Specified(Index: Integer): boolean;
    procedure SetPromotionalDiscount(Index: Integer; const AAmountType: AmountType);
    function  PromotionalDiscount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:               string      Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Fee:                 AmountType  Index (IS_OPTN) read FFee write SetFee stored Fee_Specified;
    property PromotionalDiscount: AmountType  Index (IS_OPTN) read FPromotionalDiscount write SetPromotionalDiscount stored PromotionalDiscount_Specified;
  end;



  // ************************************************************************ //
  // XML       : FeedbackPeriodType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackPeriodType = class(TRemotable)
  private
    FPeriodInDays: Integer;
    FPeriodInDays_Specified: boolean;
    FCount: Integer;
    FCount_Specified: boolean;
    procedure SetPeriodInDays(Index: Integer; const AInteger: Integer);
    function  PeriodInDays_Specified(Index: Integer): boolean;
    procedure SetCount(Index: Integer; const AInteger: Integer);
    function  Count_Specified(Index: Integer): boolean;
  published
    property PeriodInDays: Integer  Index (IS_OPTN) read FPeriodInDays write SetPeriodInDays stored PeriodInDays_Specified;
    property Count:        Integer  Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
  end;



  // ************************************************************************ //
  // XML       : FeedbackRequirementsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackRequirementsType = class(TRemotable)
  private
    FText: Boolean;
    Fminimum: string;
    Fminimum_Specified: boolean;
    procedure Setminimum(Index: Integer; const Astring: string);
    function  minimum_Specified(Index: Integer): boolean;
  published
    property Text:    Boolean  Index (IS_TEXT) read FText write FText;
    property minimum: string   Index (IS_ATTR or IS_OPTN) read Fminimum write Setminimum stored minimum_Specified;
  end;

  SellerRatingSummaryArrayType = array of AverageRatingSummaryType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : FeedbackDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackDetailType = class(TRemotable)
  private
    FCommentingUser: UserIDType;
    FCommentingUser_Specified: boolean;
    FFeedbackRatingStar: FeedbackRatingStarCodeType;
    FFeedbackRatingStar_Specified: boolean;
    FCommentingUserScore: Integer;
    FCommentingUserScore_Specified: boolean;
    FCommentText: string;
    FCommentText_Specified: boolean;
    FCommentTime: TXSDateTime;
    FCommentTime_Specified: boolean;
    FCommentType: CommentTypeCodeType;
    FCommentType_Specified: boolean;
    FFeedbackResponse: string;
    FFeedbackResponse_Specified: boolean;
    FFollowup: string;
    FFollowup_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FRole: TradingRoleCodeType;
    FRole_Specified: boolean;
    FItemTitle: string;
    FItemTitle_Specified: boolean;
    FItemPrice: AmountType;
    FItemPrice_Specified: boolean;
    FFeedbackID: string;
    FFeedbackID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FCommentReplaced: Boolean;
    FCommentReplaced_Specified: boolean;
    FResponseReplaced: Boolean;
    FResponseReplaced_Specified: boolean;
    FFollowUpReplaced: Boolean;
    FFollowUpReplaced_Specified: boolean;
    FCountable: Boolean;
    FCountable_Specified: boolean;
    FFeedbackRevised: Boolean;
    FFeedbackRevised_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetCommentingUser(Index: Integer; const AUserIDType: UserIDType);
    function  CommentingUser_Specified(Index: Integer): boolean;
    procedure SetFeedbackRatingStar(Index: Integer; const AFeedbackRatingStarCodeType: FeedbackRatingStarCodeType);
    function  FeedbackRatingStar_Specified(Index: Integer): boolean;
    procedure SetCommentingUserScore(Index: Integer; const AInteger: Integer);
    function  CommentingUserScore_Specified(Index: Integer): boolean;
    procedure SetCommentText(Index: Integer; const Astring: string);
    function  CommentText_Specified(Index: Integer): boolean;
    procedure SetCommentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CommentTime_Specified(Index: Integer): boolean;
    procedure SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
    function  CommentType_Specified(Index: Integer): boolean;
    procedure SetFeedbackResponse(Index: Integer; const Astring: string);
    function  FeedbackResponse_Specified(Index: Integer): boolean;
    procedure SetFollowup(Index: Integer; const Astring: string);
    function  Followup_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  Role_Specified(Index: Integer): boolean;
    procedure SetItemTitle(Index: Integer; const Astring: string);
    function  ItemTitle_Specified(Index: Integer): boolean;
    procedure SetItemPrice(Index: Integer; const AAmountType: AmountType);
    function  ItemPrice_Specified(Index: Integer): boolean;
    procedure SetFeedbackID(Index: Integer; const Astring: string);
    function  FeedbackID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetCommentReplaced(Index: Integer; const ABoolean: Boolean);
    function  CommentReplaced_Specified(Index: Integer): boolean;
    procedure SetResponseReplaced(Index: Integer; const ABoolean: Boolean);
    function  ResponseReplaced_Specified(Index: Integer): boolean;
    procedure SetFollowUpReplaced(Index: Integer; const ABoolean: Boolean);
    function  FollowUpReplaced_Specified(Index: Integer): boolean;
    procedure SetCountable(Index: Integer; const ABoolean: Boolean);
    function  Countable_Specified(Index: Integer): boolean;
    procedure SetFeedbackRevised(Index: Integer; const ABoolean: Boolean);
    function  FeedbackRevised_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CommentingUser:      UserIDType                  Index (IS_OPTN) read FCommentingUser write SetCommentingUser stored CommentingUser_Specified;
    property FeedbackRatingStar:  FeedbackRatingStarCodeType  Index (IS_OPTN) read FFeedbackRatingStar write SetFeedbackRatingStar stored FeedbackRatingStar_Specified;
    property CommentingUserScore: Integer                     Index (IS_OPTN) read FCommentingUserScore write SetCommentingUserScore stored CommentingUserScore_Specified;
    property CommentText:         string                      Index (IS_OPTN) read FCommentText write SetCommentText stored CommentText_Specified;
    property CommentTime:         TXSDateTime                 Index (IS_OPTN) read FCommentTime write SetCommentTime stored CommentTime_Specified;
    property CommentType:         CommentTypeCodeType         Index (IS_OPTN) read FCommentType write SetCommentType stored CommentType_Specified;
    property FeedbackResponse:    string                      Index (IS_OPTN) read FFeedbackResponse write SetFeedbackResponse stored FeedbackResponse_Specified;
    property Followup:            string                      Index (IS_OPTN) read FFollowup write SetFollowup stored Followup_Specified;
    property ItemID:              ItemIDType                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Role:                TradingRoleCodeType         Index (IS_OPTN) read FRole write SetRole stored Role_Specified;
    property ItemTitle:           string                      Index (IS_OPTN) read FItemTitle write SetItemTitle stored ItemTitle_Specified;
    property ItemPrice:           AmountType                  Index (IS_OPTN) read FItemPrice write SetItemPrice stored ItemPrice_Specified;
    property FeedbackID:          string                      Index (IS_OPTN) read FFeedbackID write SetFeedbackID stored FeedbackID_Specified;
    property TransactionID:       string                      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property CommentReplaced:     Boolean                     Index (IS_OPTN) read FCommentReplaced write SetCommentReplaced stored CommentReplaced_Specified;
    property ResponseReplaced:    Boolean                     Index (IS_OPTN) read FResponseReplaced write SetResponseReplaced stored ResponseReplaced_Specified;
    property FollowUpReplaced:    Boolean                     Index (IS_OPTN) read FFollowUpReplaced write SetFollowUpReplaced stored FollowUpReplaced_Specified;
    property Countable:           Boolean                     Index (IS_OPTN) read FCountable write SetCountable stored Countable_Specified;
    property FeedbackRevised:     Boolean                     Index (IS_OPTN) read FFeedbackRevised write SetFeedbackRevised stored FeedbackRevised_Specified;
    property OrderLineItemID:     string                      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;

  FeedbackPeriodArrayType = array of FeedbackPeriodType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : FeedbackSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackSummaryType = class(TRemotable)
  private
    FBidRetractionFeedbackPeriodArray: FeedbackPeriodArrayType;
    FBidRetractionFeedbackPeriodArray_Specified: boolean;
    FNegativeFeedbackPeriodArray: FeedbackPeriodArrayType;
    FNegativeFeedbackPeriodArray_Specified: boolean;
    FNeutralFeedbackPeriodArray: FeedbackPeriodArrayType;
    FNeutralFeedbackPeriodArray_Specified: boolean;
    FPositiveFeedbackPeriodArray: FeedbackPeriodArrayType;
    FPositiveFeedbackPeriodArray_Specified: boolean;
    FTotalFeedbackPeriodArray: FeedbackPeriodArrayType;
    FTotalFeedbackPeriodArray_Specified: boolean;
    FNeutralCommentCountFromSuspendedUsers: Integer;
    FNeutralCommentCountFromSuspendedUsers_Specified: boolean;
    FUniqueNegativeFeedbackCount: Integer;
    FUniqueNegativeFeedbackCount_Specified: boolean;
    FUniquePositiveFeedbackCount: Integer;
    FUniquePositiveFeedbackCount_Specified: boolean;
    FUniqueNeutralFeedbackCount: Integer;
    FUniqueNeutralFeedbackCount_Specified: boolean;
    FSellerRatingSummaryArray: SellerRatingSummaryArrayType;
    FSellerRatingSummaryArray_Specified: boolean;
    FSellerRoleMetrics: SellerRoleMetricsType;
    FSellerRoleMetrics_Specified: boolean;
    FBuyerRoleMetrics: BuyerRoleMetricsType;
    FBuyerRoleMetrics_Specified: boolean;
    procedure SetBidRetractionFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
    function  BidRetractionFeedbackPeriodArray_Specified(Index: Integer): boolean;
    procedure SetNegativeFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
    function  NegativeFeedbackPeriodArray_Specified(Index: Integer): boolean;
    procedure SetNeutralFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
    function  NeutralFeedbackPeriodArray_Specified(Index: Integer): boolean;
    procedure SetPositiveFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
    function  PositiveFeedbackPeriodArray_Specified(Index: Integer): boolean;
    procedure SetTotalFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
    function  TotalFeedbackPeriodArray_Specified(Index: Integer): boolean;
    procedure SetNeutralCommentCountFromSuspendedUsers(Index: Integer; const AInteger: Integer);
    function  NeutralCommentCountFromSuspendedUsers_Specified(Index: Integer): boolean;
    procedure SetUniqueNegativeFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniqueNegativeFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetUniquePositiveFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniquePositiveFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetUniqueNeutralFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniqueNeutralFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetSellerRatingSummaryArray(Index: Integer; const ASellerRatingSummaryArrayType: SellerRatingSummaryArrayType);
    function  SellerRatingSummaryArray_Specified(Index: Integer): boolean;
    procedure SetSellerRoleMetrics(Index: Integer; const ASellerRoleMetricsType: SellerRoleMetricsType);
    function  SellerRoleMetrics_Specified(Index: Integer): boolean;
    procedure SetBuyerRoleMetrics(Index: Integer; const ABuyerRoleMetricsType: BuyerRoleMetricsType);
    function  BuyerRoleMetrics_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BidRetractionFeedbackPeriodArray:      FeedbackPeriodArrayType       Index (IS_OPTN) read FBidRetractionFeedbackPeriodArray write SetBidRetractionFeedbackPeriodArray stored BidRetractionFeedbackPeriodArray_Specified;
    property NegativeFeedbackPeriodArray:           FeedbackPeriodArrayType       Index (IS_OPTN) read FNegativeFeedbackPeriodArray write SetNegativeFeedbackPeriodArray stored NegativeFeedbackPeriodArray_Specified;
    property NeutralFeedbackPeriodArray:            FeedbackPeriodArrayType       Index (IS_OPTN) read FNeutralFeedbackPeriodArray write SetNeutralFeedbackPeriodArray stored NeutralFeedbackPeriodArray_Specified;
    property PositiveFeedbackPeriodArray:           FeedbackPeriodArrayType       Index (IS_OPTN) read FPositiveFeedbackPeriodArray write SetPositiveFeedbackPeriodArray stored PositiveFeedbackPeriodArray_Specified;
    property TotalFeedbackPeriodArray:              FeedbackPeriodArrayType       Index (IS_OPTN) read FTotalFeedbackPeriodArray write SetTotalFeedbackPeriodArray stored TotalFeedbackPeriodArray_Specified;
    property NeutralCommentCountFromSuspendedUsers: Integer                       Index (IS_OPTN) read FNeutralCommentCountFromSuspendedUsers write SetNeutralCommentCountFromSuspendedUsers stored NeutralCommentCountFromSuspendedUsers_Specified;
    property UniqueNegativeFeedbackCount:           Integer                       Index (IS_OPTN) read FUniqueNegativeFeedbackCount write SetUniqueNegativeFeedbackCount stored UniqueNegativeFeedbackCount_Specified;
    property UniquePositiveFeedbackCount:           Integer                       Index (IS_OPTN) read FUniquePositiveFeedbackCount write SetUniquePositiveFeedbackCount stored UniquePositiveFeedbackCount_Specified;
    property UniqueNeutralFeedbackCount:            Integer                       Index (IS_OPTN) read FUniqueNeutralFeedbackCount write SetUniqueNeutralFeedbackCount stored UniqueNeutralFeedbackCount_Specified;
    property SellerRatingSummaryArray:              SellerRatingSummaryArrayType  Index (IS_OPTN) read FSellerRatingSummaryArray write SetSellerRatingSummaryArray stored SellerRatingSummaryArray_Specified;
    property SellerRoleMetrics:                     SellerRoleMetricsType         Index (IS_OPTN) read FSellerRoleMetrics write SetSellerRoleMetrics stored SellerRoleMetrics_Specified;
    property BuyerRoleMetrics:                      BuyerRoleMetricsType          Index (IS_OPTN) read FBuyerRoleMetrics write SetBuyerRoleMetrics stored BuyerRoleMetrics_Specified;
  end;



  // ************************************************************************ //
  // XML       : UPCEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UPCEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MaxGranularFitmentCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaxGranularFitmentCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PaymentOptionsGroupEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentOptionsGroupEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValueCategoryDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValueCategoryDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ProductCreationEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductCreationEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISBNEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ISBNEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ProfileCategoryGroupDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProfileCategoryGroupDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GlobalShippingEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GlobalShippingEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PickupDropOffEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PickupDropOffEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : KTypeSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  KTypeSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VINSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VINSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VRMSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VRMSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SellerProvidedTitleSupportedDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerProvidedTitleSupportedDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SkypeMeNonTransactionalEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SkypeMeNonTransactionalEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalListingDistancesRegularDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesRegularDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalListingDistancesSpecialtyDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesSpecialtyDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SellerContactDetailsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerContactDetailsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : StoreInventoryEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreInventoryEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SkypeMeTransactionalEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SkypeMeTransactionalEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalListingDistancesNonSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesNonSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ISBNIdentifierEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ISBNIdentifierEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UPCIdentifierEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UPCIdentifierEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PayPalBuyerProtectionEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PayPalBuyerProtectionEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SafePaymentRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SafePaymentRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ItemSpecificsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemSpecificsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PaisaPayFullEscrowEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaisaPayFullEscrowEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : HomePageFeaturedEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  HomePageFeaturedEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ProPackEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProPackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValuePackEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValuePackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListingDurationDefinitionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDurationDefinitionsType = class(TRemotable)
  private
    FVersion: Integer;
    FVersion_Specified: boolean;
    FListingDuration: Array_Of_ListingDurationDefinitionType;
    FListingDuration_Specified: boolean;
    procedure SetVersion(Index: Integer; const AInteger: Integer);
    function  Version_Specified(Index: Integer): boolean;
    procedure SetListingDuration(Index: Integer; const AArray_Of_ListingDurationDefinitionType: Array_Of_ListingDurationDefinitionType);
    function  ListingDuration_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Version:         Integer                                 Index (IS_ATTR or IS_OPTN) read FVersion write SetVersion stored Version_Specified;
    property ListingDuration: Array_Of_ListingDurationDefinitionType  Index (IS_OPTN or IS_UNBD) read FListingDuration write SetListingDuration stored ListingDuration_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingTermRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingTermRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserConsentRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserConsentRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ProPackPlusEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProPackPlusEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketNonSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketNonSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MinimumReservePriceDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MinimumReservePriceDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TCREnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TCREnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketSpecialitySubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketSpecialitySubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketRegularSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketRegularSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketPremiumSubscriptionDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketPremiumSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListingEnhancementDurationDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingEnhancementDurationDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketAdFormatEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketAdFormatEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketContactByPhoneEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketContactByPhoneEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketPhoneCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketPhoneCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProShippingMethodEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProShippingMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProCounterOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProCounterOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProSellerContactDetailsEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProSellerContactDetailsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketContactByAddressEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketContactByAddressEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketBestOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketBestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketAutoAcceptEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketAutoDeclineEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketStreetCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketStreetCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketCompanyNameEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketCompanyNameEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LocalMarketContactByEmailEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketContactByEmailEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProContactByPhoneEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProContactByPhoneEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProPhoneCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProPhoneCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProContactByAddressEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProContactByAddressEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : INEscrowWorkflowTimelineDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  INEscrowWorkflowTimelineDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PayPalRequiredDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PayPalRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProAdFormatEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProAdFormatEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProStreetCountDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProStreetCountDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProAutoAcceptEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProAutoDeclineEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProCompanyNameEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProCompanyNameEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProContactByEmailEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProContactByEmailEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : eBayMotorsProBestOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  eBayMotorsProBestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : StoreCustomPageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomPageType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FPageID: Int64;
    FPageID_Specified: boolean;
    FURLPath: string;
    FURLPath_Specified: boolean;
    FURL: string;
    FURL_Specified: boolean;
    FStatus: StoreCustomPageStatusCodeType;
    FStatus_Specified: boolean;
    FContent: string;
    FContent_Specified: boolean;
    FLeftNav: Boolean;
    FLeftNav_Specified: boolean;
    FPreviewEnabled: Boolean;
    FPreviewEnabled_Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetPageID(Index: Integer; const AInt64: Int64);
    function  PageID_Specified(Index: Integer): boolean;
    procedure SetURLPath(Index: Integer; const Astring: string);
    function  URLPath_Specified(Index: Integer): boolean;
    procedure SetURL(Index: Integer; const Astring: string);
    function  URL_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AStoreCustomPageStatusCodeType: StoreCustomPageStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetContent(Index: Integer; const Astring: string);
    function  Content_Specified(Index: Integer): boolean;
    procedure SetLeftNav(Index: Integer; const ABoolean: Boolean);
    function  LeftNav_Specified(Index: Integer): boolean;
    procedure SetPreviewEnabled(Index: Integer; const ABoolean: Boolean);
    function  PreviewEnabled_Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
  published
    property Name_:          string                         Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property PageID:         Int64                          Index (IS_OPTN) read FPageID write SetPageID stored PageID_Specified;
    property URLPath:        string                         Index (IS_OPTN) read FURLPath write SetURLPath stored URLPath_Specified;
    property URL:            string                         Index (IS_OPTN) read FURL write SetURL stored URL_Specified;
    property Status:         StoreCustomPageStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Content:        string                         Index (IS_OPTN) read FContent write SetContent stored Content_Specified;
    property LeftNav:        Boolean                        Index (IS_OPTN) read FLeftNav write SetLeftNav stored LeftNav_Specified;
    property PreviewEnabled: Boolean                        Index (IS_OPTN) read FPreviewEnabled write SetPreviewEnabled stored PreviewEnabled_Specified;
    property Order:          Integer                        Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
  end;

  StoreCustomCategoryArrayType = array of StoreCustomCategoryType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : StoreType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FURLPath: string;
    FURLPath_Specified: boolean;
    FURL: string;
    FURL_Specified: boolean;
    FSubscriptionLevel: StoreSubscriptionLevelCodeType;
    FSubscriptionLevel_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FLogo: StoreLogoType;
    FLogo_Specified: boolean;
    FTheme: StoreThemeType;
    FTheme_Specified: boolean;
    FHeaderStyle: StoreHeaderStyleCodeType;
    FHeaderStyle_Specified: boolean;
    FHomePage: Int64;
    FHomePage_Specified: boolean;
    FItemListLayout: StoreItemListLayoutCodeType;
    FItemListLayout_Specified: boolean;
    FItemListSortOrder: StoreItemListSortOrderCodeType;
    FItemListSortOrder_Specified: boolean;
    FCustomHeaderLayout: StoreCustomHeaderLayoutCodeType;
    FCustomHeaderLayout_Specified: boolean;
    FCustomHeader: string;
    FCustomHeader_Specified: boolean;
    FExportListings: Boolean;
    FExportListings_Specified: boolean;
    FCustomCategories: StoreCustomCategoryArrayType;
    FCustomCategories_Specified: boolean;
    FCustomListingHeader: StoreCustomListingHeaderType;
    FCustomListingHeader_Specified: boolean;
    FMerchDisplay: MerchDisplayCodeType;
    FMerchDisplay_Specified: boolean;
    FLastOpenedTime: TXSDateTime;
    FLastOpenedTime_Specified: boolean;
    FTitleWithCompatibility: Boolean;
    FTitleWithCompatibility_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetURLPath(Index: Integer; const Astring: string);
    function  URLPath_Specified(Index: Integer): boolean;
    procedure SetURL(Index: Integer; const Astring: string);
    function  URL_Specified(Index: Integer): boolean;
    procedure SetSubscriptionLevel(Index: Integer; const AStoreSubscriptionLevelCodeType: StoreSubscriptionLevelCodeType);
    function  SubscriptionLevel_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetLogo(Index: Integer; const AStoreLogoType: StoreLogoType);
    function  Logo_Specified(Index: Integer): boolean;
    procedure SetTheme(Index: Integer; const AStoreThemeType: StoreThemeType);
    function  Theme_Specified(Index: Integer): boolean;
    procedure SetHeaderStyle(Index: Integer; const AStoreHeaderStyleCodeType: StoreHeaderStyleCodeType);
    function  HeaderStyle_Specified(Index: Integer): boolean;
    procedure SetHomePage(Index: Integer; const AInt64: Int64);
    function  HomePage_Specified(Index: Integer): boolean;
    procedure SetItemListLayout(Index: Integer; const AStoreItemListLayoutCodeType: StoreItemListLayoutCodeType);
    function  ItemListLayout_Specified(Index: Integer): boolean;
    procedure SetItemListSortOrder(Index: Integer; const AStoreItemListSortOrderCodeType: StoreItemListSortOrderCodeType);
    function  ItemListSortOrder_Specified(Index: Integer): boolean;
    procedure SetCustomHeaderLayout(Index: Integer; const AStoreCustomHeaderLayoutCodeType: StoreCustomHeaderLayoutCodeType);
    function  CustomHeaderLayout_Specified(Index: Integer): boolean;
    procedure SetCustomHeader(Index: Integer; const Astring: string);
    function  CustomHeader_Specified(Index: Integer): boolean;
    procedure SetExportListings(Index: Integer; const ABoolean: Boolean);
    function  ExportListings_Specified(Index: Integer): boolean;
    procedure SetCustomCategories(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
    function  CustomCategories_Specified(Index: Integer): boolean;
    procedure SetCustomListingHeader(Index: Integer; const AStoreCustomListingHeaderType: StoreCustomListingHeaderType);
    function  CustomListingHeader_Specified(Index: Integer): boolean;
    procedure SetMerchDisplay(Index: Integer; const AMerchDisplayCodeType: MerchDisplayCodeType);
    function  MerchDisplay_Specified(Index: Integer): boolean;
    procedure SetLastOpenedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastOpenedTime_Specified(Index: Integer): boolean;
    procedure SetTitleWithCompatibility(Index: Integer; const ABoolean: Boolean);
    function  TitleWithCompatibility_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:                  string                           Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property URLPath:                string                           Index (IS_OPTN) read FURLPath write SetURLPath stored URLPath_Specified;
    property URL:                    string                           Index (IS_OPTN) read FURL write SetURL stored URL_Specified;
    property SubscriptionLevel:      StoreSubscriptionLevelCodeType   Index (IS_OPTN) read FSubscriptionLevel write SetSubscriptionLevel stored SubscriptionLevel_Specified;
    property Description:            string                           Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property Logo:                   StoreLogoType                    Index (IS_OPTN) read FLogo write SetLogo stored Logo_Specified;
    property Theme:                  StoreThemeType                   Index (IS_OPTN) read FTheme write SetTheme stored Theme_Specified;
    property HeaderStyle:            StoreHeaderStyleCodeType         Index (IS_OPTN) read FHeaderStyle write SetHeaderStyle stored HeaderStyle_Specified;
    property HomePage:               Int64                            Index (IS_OPTN) read FHomePage write SetHomePage stored HomePage_Specified;
    property ItemListLayout:         StoreItemListLayoutCodeType      Index (IS_OPTN) read FItemListLayout write SetItemListLayout stored ItemListLayout_Specified;
    property ItemListSortOrder:      StoreItemListSortOrderCodeType   Index (IS_OPTN) read FItemListSortOrder write SetItemListSortOrder stored ItemListSortOrder_Specified;
    property CustomHeaderLayout:     StoreCustomHeaderLayoutCodeType  Index (IS_OPTN) read FCustomHeaderLayout write SetCustomHeaderLayout stored CustomHeaderLayout_Specified;
    property CustomHeader:           string                           Index (IS_OPTN) read FCustomHeader write SetCustomHeader stored CustomHeader_Specified;
    property ExportListings:         Boolean                          Index (IS_OPTN) read FExportListings write SetExportListings stored ExportListings_Specified;
    property CustomCategories:       StoreCustomCategoryArrayType     Index (IS_OPTN) read FCustomCategories write SetCustomCategories stored CustomCategories_Specified;
    property CustomListingHeader:    StoreCustomListingHeaderType     Index (IS_OPTN) read FCustomListingHeader write SetCustomListingHeader stored CustomListingHeader_Specified;
    property MerchDisplay:           MerchDisplayCodeType             Index (IS_OPTN) read FMerchDisplay write SetMerchDisplay stored MerchDisplay_Specified;
    property LastOpenedTime:         TXSDateTime                      Index (IS_OPTN) read FLastOpenedTime write SetLastOpenedTime stored LastOpenedTime_Specified;
    property TitleWithCompatibility: Boolean                          Index (IS_OPTN) read FTitleWithCompatibility write SetTitleWithCompatibility stored TitleWithCompatibility_Specified;
  end;



  // ************************************************************************ //
  // XML       : StoreCustomCategoryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomCategoryType = class(TRemotable)
  private
    FCategoryID: Int64;
    FName_: string;
    FName__Specified: boolean;
    FOrder: Integer;
    FOrder_Specified: boolean;
    FChildCategory: StoreCustomCategoryArrayType;
    FChildCategory_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetOrder(Index: Integer; const AInteger: Integer);
    function  Order_Specified(Index: Integer): boolean;
    procedure SetChildCategory(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
    function  ChildCategory_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CategoryID:    Int64                         read FCategoryID write FCategoryID;
    property Name_:         string                        Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Order:         Integer                       Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
    property ChildCategory: StoreCustomCategoryArrayType  Index (IS_OPTN or IS_UNBD) read FChildCategory write SetChildCategory stored ChildCategory_Specified;
  end;

  FeedbackCommentArrayType = array of string;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ExpressItemRequirementsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressItemRequirementsType = class(TRemotable)
  private
    FSellerExpressEligible: Boolean;
    FSellerExpressEligible_Specified: boolean;
    FExpressOptOut: Boolean;
    FExpressOptOut_Specified: boolean;
    FExpressApproved: Boolean;
    FExpressApproved_Specified: boolean;
    FExpressEligibleListingType: Boolean;
    FExpressEligibleListingType_Specified: boolean;
    FExpressEnabledCategory: Boolean;
    FExpressEnabledCategory_Specified: boolean;
    FEligiblePayPalAccount: Boolean;
    FEligiblePayPalAccount_Specified: boolean;
    FDomesticShippingCost: Boolean;
    FDomesticShippingCost_Specified: boolean;
    FEligibleReturnPolicy: Boolean;
    FEligibleReturnPolicy_Specified: boolean;
    FPicture: Boolean;
    FPicture_Specified: boolean;
    FEligibleItemCondition: Boolean;
    FEligibleItemCondition_Specified: boolean;
    FPriceAboveMinimum: Boolean;
    FPriceAboveMinimum_Specified: boolean;
    FPriceBelowMaximum: Boolean;
    FPriceBelowMaximum_Specified: boolean;
    FEligibleCheckout: Boolean;
    FEligibleCheckout_Specified: boolean;
    FNoPreapprovedBidderList: Boolean;
    FNoPreapprovedBidderList_Specified: boolean;
    FNoCharity: Boolean;
    FNoCharity_Specified: boolean;
    FCombinedShippingDiscount: Boolean;
    FCombinedShippingDiscount_Specified: boolean;
    FShipFromEligibleCountry: Boolean;
    FShipFromEligibleCountry_Specified: boolean;
    FPayPalAccountAcceptsUnconfirmedAddress: Boolean;
    FPayPalAccountAcceptsUnconfirmedAddress_Specified: boolean;
    procedure SetSellerExpressEligible(Index: Integer; const ABoolean: Boolean);
    function  SellerExpressEligible_Specified(Index: Integer): boolean;
    procedure SetExpressOptOut(Index: Integer; const ABoolean: Boolean);
    function  ExpressOptOut_Specified(Index: Integer): boolean;
    procedure SetExpressApproved(Index: Integer; const ABoolean: Boolean);
    function  ExpressApproved_Specified(Index: Integer): boolean;
    procedure SetExpressEligibleListingType(Index: Integer; const ABoolean: Boolean);
    function  ExpressEligibleListingType_Specified(Index: Integer): boolean;
    procedure SetExpressEnabledCategory(Index: Integer; const ABoolean: Boolean);
    function  ExpressEnabledCategory_Specified(Index: Integer): boolean;
    procedure SetEligiblePayPalAccount(Index: Integer; const ABoolean: Boolean);
    function  EligiblePayPalAccount_Specified(Index: Integer): boolean;
    procedure SetDomesticShippingCost(Index: Integer; const ABoolean: Boolean);
    function  DomesticShippingCost_Specified(Index: Integer): boolean;
    procedure SetEligibleReturnPolicy(Index: Integer; const ABoolean: Boolean);
    function  EligibleReturnPolicy_Specified(Index: Integer): boolean;
    procedure SetPicture(Index: Integer; const ABoolean: Boolean);
    function  Picture_Specified(Index: Integer): boolean;
    procedure SetEligibleItemCondition(Index: Integer; const ABoolean: Boolean);
    function  EligibleItemCondition_Specified(Index: Integer): boolean;
    procedure SetPriceAboveMinimum(Index: Integer; const ABoolean: Boolean);
    function  PriceAboveMinimum_Specified(Index: Integer): boolean;
    procedure SetPriceBelowMaximum(Index: Integer; const ABoolean: Boolean);
    function  PriceBelowMaximum_Specified(Index: Integer): boolean;
    procedure SetEligibleCheckout(Index: Integer; const ABoolean: Boolean);
    function  EligibleCheckout_Specified(Index: Integer): boolean;
    procedure SetNoPreapprovedBidderList(Index: Integer; const ABoolean: Boolean);
    function  NoPreapprovedBidderList_Specified(Index: Integer): boolean;
    procedure SetNoCharity(Index: Integer; const ABoolean: Boolean);
    function  NoCharity_Specified(Index: Integer): boolean;
    procedure SetCombinedShippingDiscount(Index: Integer; const ABoolean: Boolean);
    function  CombinedShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetShipFromEligibleCountry(Index: Integer; const ABoolean: Boolean);
    function  ShipFromEligibleCountry_Specified(Index: Integer): boolean;
    procedure SetPayPalAccountAcceptsUnconfirmedAddress(Index: Integer; const ABoolean: Boolean);
    function  PayPalAccountAcceptsUnconfirmedAddress_Specified(Index: Integer): boolean;
  published
    property SellerExpressEligible:                  Boolean  Index (IS_OPTN) read FSellerExpressEligible write SetSellerExpressEligible stored SellerExpressEligible_Specified;
    property ExpressOptOut:                          Boolean  Index (IS_OPTN) read FExpressOptOut write SetExpressOptOut stored ExpressOptOut_Specified;
    property ExpressApproved:                        Boolean  Index (IS_OPTN) read FExpressApproved write SetExpressApproved stored ExpressApproved_Specified;
    property ExpressEligibleListingType:             Boolean  Index (IS_OPTN) read FExpressEligibleListingType write SetExpressEligibleListingType stored ExpressEligibleListingType_Specified;
    property ExpressEnabledCategory:                 Boolean  Index (IS_OPTN) read FExpressEnabledCategory write SetExpressEnabledCategory stored ExpressEnabledCategory_Specified;
    property EligiblePayPalAccount:                  Boolean  Index (IS_OPTN) read FEligiblePayPalAccount write SetEligiblePayPalAccount stored EligiblePayPalAccount_Specified;
    property DomesticShippingCost:                   Boolean  Index (IS_OPTN) read FDomesticShippingCost write SetDomesticShippingCost stored DomesticShippingCost_Specified;
    property EligibleReturnPolicy:                   Boolean  Index (IS_OPTN) read FEligibleReturnPolicy write SetEligibleReturnPolicy stored EligibleReturnPolicy_Specified;
    property Picture:                                Boolean  Index (IS_OPTN) read FPicture write SetPicture stored Picture_Specified;
    property EligibleItemCondition:                  Boolean  Index (IS_OPTN) read FEligibleItemCondition write SetEligibleItemCondition stored EligibleItemCondition_Specified;
    property PriceAboveMinimum:                      Boolean  Index (IS_OPTN) read FPriceAboveMinimum write SetPriceAboveMinimum stored PriceAboveMinimum_Specified;
    property PriceBelowMaximum:                      Boolean  Index (IS_OPTN) read FPriceBelowMaximum write SetPriceBelowMaximum stored PriceBelowMaximum_Specified;
    property EligibleCheckout:                       Boolean  Index (IS_OPTN) read FEligibleCheckout write SetEligibleCheckout stored EligibleCheckout_Specified;
    property NoPreapprovedBidderList:                Boolean  Index (IS_OPTN) read FNoPreapprovedBidderList write SetNoPreapprovedBidderList stored NoPreapprovedBidderList_Specified;
    property NoCharity:                              Boolean  Index (IS_OPTN) read FNoCharity write SetNoCharity stored NoCharity_Specified;
    property CombinedShippingDiscount:               Boolean  Index (IS_OPTN) read FCombinedShippingDiscount write SetCombinedShippingDiscount stored CombinedShippingDiscount_Specified;
    property ShipFromEligibleCountry:                Boolean  Index (IS_OPTN) read FShipFromEligibleCountry write SetShipFromEligibleCountry stored ShipFromEligibleCountry_Specified;
    property PayPalAccountAcceptsUnconfirmedAddress: Boolean  Index (IS_OPTN) read FPayPalAccountAcceptsUnconfirmedAddress write SetPayPalAccountAcceptsUnconfirmedAddress stored PayPalAccountAcceptsUnconfirmedAddress_Specified;
  end;

  VeROReportItemsType = array of VeROReportItemType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }
  Array_Of_DetailLevelCodeType = array of DetailLevelCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }
  Array_Of_PictureWatermarkCodeType = array of PictureWatermarkCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : SiteHostedPictureDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteHostedPictureDetailsType = class(TRemotable)
  private
    FPictureName: string;
    FPictureName_Specified: boolean;
    FPictureSet: PictureSetCodeType;
    FPictureSet_Specified: boolean;
    FPictureFormat: PictureFormatCodeType;
    FPictureFormat_Specified: boolean;
    FFullURL: string;
    FFullURL_Specified: boolean;
    FBaseURL: string;
    FBaseURL_Specified: boolean;
    FPictureSetMember: Array_Of_PictureSetMemberType;
    FPictureSetMember_Specified: boolean;
    FExternalPictureURL: string;
    FExternalPictureURL_Specified: boolean;
    FUseByDate: TXSDateTime;
    FUseByDate_Specified: boolean;
    procedure SetPictureName(Index: Integer; const Astring: string);
    function  PictureName_Specified(Index: Integer): boolean;
    procedure SetPictureSet(Index: Integer; const APictureSetCodeType: PictureSetCodeType);
    function  PictureSet_Specified(Index: Integer): boolean;
    procedure SetPictureFormat(Index: Integer; const APictureFormatCodeType: PictureFormatCodeType);
    function  PictureFormat_Specified(Index: Integer): boolean;
    procedure SetFullURL(Index: Integer; const Astring: string);
    function  FullURL_Specified(Index: Integer): boolean;
    procedure SetBaseURL(Index: Integer; const Astring: string);
    function  BaseURL_Specified(Index: Integer): boolean;
    procedure SetPictureSetMember(Index: Integer; const AArray_Of_PictureSetMemberType: Array_Of_PictureSetMemberType);
    function  PictureSetMember_Specified(Index: Integer): boolean;
    procedure SetExternalPictureURL(Index: Integer; const Astring: string);
    function  ExternalPictureURL_Specified(Index: Integer): boolean;
    procedure SetUseByDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UseByDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PictureName:        string                         Index (IS_OPTN) read FPictureName write SetPictureName stored PictureName_Specified;
    property PictureSet:         PictureSetCodeType             Index (IS_OPTN) read FPictureSet write SetPictureSet stored PictureSet_Specified;
    property PictureFormat:      PictureFormatCodeType          Index (IS_OPTN) read FPictureFormat write SetPictureFormat stored PictureFormat_Specified;
    property FullURL:            string                         Index (IS_OPTN) read FFullURL write SetFullURL stored FullURL_Specified;
    property BaseURL:            string                         Index (IS_OPTN) read FBaseURL write SetBaseURL stored BaseURL_Specified;
    property PictureSetMember:   Array_Of_PictureSetMemberType  Index (IS_OPTN or IS_UNBD) read FPictureSetMember write SetPictureSetMember stored PictureSetMember_Specified;
    property ExternalPictureURL: string                         Index (IS_OPTN) read FExternalPictureURL write SetExternalPictureURL stored ExternalPictureURL_Specified;
    property UseByDate:          TXSDateTime                    Index (IS_OPTN) read FUseByDate write SetUseByDate stored UseByDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : InventoryFeesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InventoryFeesType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FFee: FeesType;
    FFee_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetFee(Index: Integer; const AFeesType: FeesType);
    function  Fee_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID: ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Fee:    FeesType    Index (IS_OPTN or IS_UNBD) read FFee write SetFee stored Fee_Specified;
  end;

  StoreOwnerExtendedListingDurationsType = array of string;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : DeliveryStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DeliveryStatusType = class(TRemotable)
  private
    FEmail: string;
    FEmail_Specified: boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
  published
    property Email: string  Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
  end;



  // ************************************************************************ //
  // XML       : DigitalDeliverySelectedType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalDeliverySelectedType = class(TRemotable)
  private
    FDeliveryMethod: string;
    FDeliveryMethod_Specified: boolean;
    FDeliveryStatus: DeliveryStatusType;
    FDeliveryStatus_Specified: boolean;
    FDeliveryDetails: DeliveryDetailsType;
    FDeliveryDetails_Specified: boolean;
    procedure SetDeliveryMethod(Index: Integer; const Astring: string);
    function  DeliveryMethod_Specified(Index: Integer): boolean;
    procedure SetDeliveryStatus(Index: Integer; const ADeliveryStatusType: DeliveryStatusType);
    function  DeliveryStatus_Specified(Index: Integer): boolean;
    procedure SetDeliveryDetails(Index: Integer; const ADeliveryDetailsType: DeliveryDetailsType);
    function  DeliveryDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DeliveryMethod:  string               Index (IS_OPTN) read FDeliveryMethod write SetDeliveryMethod stored DeliveryMethod_Specified;
    property DeliveryStatus:  DeliveryStatusType   Index (IS_OPTN) read FDeliveryStatus write SetDeliveryStatus stored DeliveryStatus_Specified;
    property DeliveryDetails: DeliveryDetailsType  Index (IS_OPTN) read FDeliveryDetails write SetDeliveryDetails stored DeliveryDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingDetailsType = class(TRemotable)
  private
    FAllowPaymentEdit: Boolean;
    FAllowPaymentEdit_Specified: boolean;
    FApplyShippingDiscount: Boolean;
    FApplyShippingDiscount_Specified: boolean;
    FGlobalShipping: Boolean;
    FGlobalShipping_Specified: boolean;
    FCalculatedShippingRate: CalculatedShippingRateType;
    FCalculatedShippingRate_Specified: boolean;
    FChangePaymentInstructions: Boolean;
    FChangePaymentInstructions_Specified: boolean;
    FInsuranceWanted: Boolean;
    FInsuranceWanted_Specified: boolean;
    FPaymentEdited: Boolean;
    FPaymentEdited_Specified: boolean;
    FPaymentInstructions: string;
    FPaymentInstructions_Specified: boolean;
    FSalesTax: SalesTaxType;
    FSalesTax_Specified: boolean;
    FShippingRateErrorMessage: string;
    FShippingRateErrorMessage_Specified: boolean;
    FShippingRateType: ShippingRateTypeCodeType;
    FShippingRateType_Specified: boolean;
    FShippingServiceOptions: Array_Of_ShippingServiceOptionsType;
    FShippingServiceOptions_Specified: boolean;
    FInternationalShippingServiceOption: Array_Of_InternationalShippingServiceOptionsType;
    FInternationalShippingServiceOption_Specified: boolean;
    FShippingType: ShippingTypeCodeType;
    FShippingType_Specified: boolean;
    FSellingManagerSalesRecordNumber: Integer;
    FSellingManagerSalesRecordNumber_Specified: boolean;
    FThirdPartyCheckout: Boolean;
    FThirdPartyCheckout_Specified: boolean;
    FTaxTable: TaxTableType;
    FTaxTable_Specified: boolean;
    FGetItFast: Boolean;
    FGetItFast_Specified: boolean;
    FShippingServiceUsed: string;
    FShippingServiceUsed_Specified: boolean;
    FDefaultShippingCost: AmountType;
    FDefaultShippingCost_Specified: boolean;
    FShippingDiscountProfileID: string;
    FShippingDiscountProfileID_Specified: boolean;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FFlatShippingDiscount_Specified: boolean;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FCalculatedShippingDiscount_Specified: boolean;
    FPromotionalShippingDiscount: Boolean;
    FPromotionalShippingDiscount_Specified: boolean;
    FInternationalShippingDiscountProfileID: string;
    FInternationalShippingDiscountProfileID_Specified: boolean;
    FInternationalFlatShippingDiscount: FlatShippingDiscountType;
    FInternationalFlatShippingDiscount_Specified: boolean;
    FInternationalCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FInternationalCalculatedShippingDiscount_Specified: boolean;
    FInternationalPromotionalShippingDiscount: Boolean;
    FInternationalPromotionalShippingDiscount_Specified: boolean;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
    FPromotionalShippingDiscountDetails_Specified: boolean;
    FCODCost: AmountType;
    FCODCost_Specified: boolean;
    FExcludeShipToLocation: SellerExcludeShipToLocationPreferencesType;
    FExcludeShipToLocation_Specified: boolean;
    FSellerExcludeShipToLocationsPreference: Boolean;
    FSellerExcludeShipToLocationsPreference_Specified: boolean;
    FShipmentTrackingDetails: Array_Of_ShipmentTrackingDetailsType;
    FShipmentTrackingDetails_Specified: boolean;
    FRateTableDetails: RateTableDetailsType;
    FRateTableDetails_Specified: boolean;
    procedure SetAllowPaymentEdit(Index: Integer; const ABoolean: Boolean);
    function  AllowPaymentEdit_Specified(Index: Integer): boolean;
    procedure SetApplyShippingDiscount(Index: Integer; const ABoolean: Boolean);
    function  ApplyShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetGlobalShipping(Index: Integer; const ABoolean: Boolean);
    function  GlobalShipping_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingRate(Index: Integer; const ACalculatedShippingRateType: CalculatedShippingRateType);
    function  CalculatedShippingRate_Specified(Index: Integer): boolean;
    procedure SetChangePaymentInstructions(Index: Integer; const ABoolean: Boolean);
    function  ChangePaymentInstructions_Specified(Index: Integer): boolean;
    procedure SetInsuranceWanted(Index: Integer; const ABoolean: Boolean);
    function  InsuranceWanted_Specified(Index: Integer): boolean;
    procedure SetPaymentEdited(Index: Integer; const ABoolean: Boolean);
    function  PaymentEdited_Specified(Index: Integer): boolean;
    procedure SetPaymentInstructions(Index: Integer; const Astring: string);
    function  PaymentInstructions_Specified(Index: Integer): boolean;
    procedure SetSalesTax(Index: Integer; const ASalesTaxType: SalesTaxType);
    function  SalesTax_Specified(Index: Integer): boolean;
    procedure SetShippingRateErrorMessage(Index: Integer; const Astring: string);
    function  ShippingRateErrorMessage_Specified(Index: Integer): boolean;
    procedure SetShippingRateType(Index: Integer; const AShippingRateTypeCodeType: ShippingRateTypeCodeType);
    function  ShippingRateType_Specified(Index: Integer): boolean;
    procedure SetShippingServiceOptions(Index: Integer; const AArray_Of_ShippingServiceOptionsType: Array_Of_ShippingServiceOptionsType);
    function  ShippingServiceOptions_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingServiceOption(Index: Integer; const AArray_Of_InternationalShippingServiceOptionsType: Array_Of_InternationalShippingServiceOptionsType);
    function  InternationalShippingServiceOption_Specified(Index: Integer): boolean;
    procedure SetShippingType(Index: Integer; const AShippingTypeCodeType: ShippingTypeCodeType);
    function  ShippingType_Specified(Index: Integer): boolean;
    procedure SetSellingManagerSalesRecordNumber(Index: Integer; const AInteger: Integer);
    function  SellingManagerSalesRecordNumber_Specified(Index: Integer): boolean;
    procedure SetThirdPartyCheckout(Index: Integer; const ABoolean: Boolean);
    function  ThirdPartyCheckout_Specified(Index: Integer): boolean;
    procedure SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
    function  TaxTable_Specified(Index: Integer): boolean;
    procedure SetGetItFast(Index: Integer; const ABoolean: Boolean);
    function  GetItFast_Specified(Index: Integer): boolean;
    procedure SetShippingServiceUsed(Index: Integer; const Astring: string);
    function  ShippingServiceUsed_Specified(Index: Integer): boolean;
    procedure SetDefaultShippingCost(Index: Integer; const AAmountType: AmountType);
    function  DefaultShippingCost_Specified(Index: Integer): boolean;
    procedure SetShippingDiscountProfileID(Index: Integer; const Astring: string);
    function  ShippingDiscountProfileID_Specified(Index: Integer): boolean;
    procedure SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
    function  FlatShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
    function  CalculatedShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
    function  PromotionalShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingDiscountProfileID(Index: Integer; const Astring: string);
    function  InternationalShippingDiscountProfileID_Specified(Index: Integer): boolean;
    procedure SetInternationalFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
    function  InternationalFlatShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetInternationalCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
    function  InternationalCalculatedShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetInternationalPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
    function  InternationalPromotionalShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
    function  PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
    procedure SetCODCost(Index: Integer; const AAmountType: AmountType);
    function  CODCost_Specified(Index: Integer): boolean;
    procedure SetExcludeShipToLocation(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  ExcludeShipToLocation_Specified(Index: Integer): boolean;
    procedure SetSellerExcludeShipToLocationsPreference(Index: Integer; const ABoolean: Boolean);
    function  SellerExcludeShipToLocationsPreference_Specified(Index: Integer): boolean;
    procedure SetShipmentTrackingDetails(Index: Integer; const AArray_Of_ShipmentTrackingDetailsType: Array_Of_ShipmentTrackingDetailsType);
    function  ShipmentTrackingDetails_Specified(Index: Integer): boolean;
    procedure SetRateTableDetails(Index: Integer; const ARateTableDetailsType: RateTableDetailsType);
    function  RateTableDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AllowPaymentEdit:                         Boolean                                           Index (IS_OPTN) read FAllowPaymentEdit write SetAllowPaymentEdit stored AllowPaymentEdit_Specified;
    property ApplyShippingDiscount:                    Boolean                                           Index (IS_OPTN) read FApplyShippingDiscount write SetApplyShippingDiscount stored ApplyShippingDiscount_Specified;
    property GlobalShipping:                           Boolean                                           Index (IS_OPTN) read FGlobalShipping write SetGlobalShipping stored GlobalShipping_Specified;
    property CalculatedShippingRate:                   CalculatedShippingRateType                        Index (IS_OPTN) read FCalculatedShippingRate write SetCalculatedShippingRate stored CalculatedShippingRate_Specified;
    property ChangePaymentInstructions:                Boolean                                           Index (IS_OPTN) read FChangePaymentInstructions write SetChangePaymentInstructions stored ChangePaymentInstructions_Specified;
    property InsuranceWanted:                          Boolean                                           Index (IS_OPTN) read FInsuranceWanted write SetInsuranceWanted stored InsuranceWanted_Specified;
    property PaymentEdited:                            Boolean                                           Index (IS_OPTN) read FPaymentEdited write SetPaymentEdited stored PaymentEdited_Specified;
    property PaymentInstructions:                      string                                            Index (IS_OPTN) read FPaymentInstructions write SetPaymentInstructions stored PaymentInstructions_Specified;
    property SalesTax:                                 SalesTaxType                                      Index (IS_OPTN) read FSalesTax write SetSalesTax stored SalesTax_Specified;
    property ShippingRateErrorMessage:                 string                                            Index (IS_OPTN) read FShippingRateErrorMessage write SetShippingRateErrorMessage stored ShippingRateErrorMessage_Specified;
    property ShippingRateType:                         ShippingRateTypeCodeType                          Index (IS_OPTN) read FShippingRateType write SetShippingRateType stored ShippingRateType_Specified;
    property ShippingServiceOptions:                   Array_Of_ShippingServiceOptionsType               Index (IS_OPTN or IS_UNBD) read FShippingServiceOptions write SetShippingServiceOptions stored ShippingServiceOptions_Specified;
    property InternationalShippingServiceOption:       Array_Of_InternationalShippingServiceOptionsType  Index (IS_OPTN or IS_UNBD) read FInternationalShippingServiceOption write SetInternationalShippingServiceOption stored InternationalShippingServiceOption_Specified;
    property ShippingType:                             ShippingTypeCodeType                              Index (IS_OPTN) read FShippingType write SetShippingType stored ShippingType_Specified;
    property SellingManagerSalesRecordNumber:          Integer                                           Index (IS_OPTN) read FSellingManagerSalesRecordNumber write SetSellingManagerSalesRecordNumber stored SellingManagerSalesRecordNumber_Specified;
    property ThirdPartyCheckout:                       Boolean                                           Index (IS_OPTN) read FThirdPartyCheckout write SetThirdPartyCheckout stored ThirdPartyCheckout_Specified;
    property TaxTable:                                 TaxTableType                                      Index (IS_OPTN) read FTaxTable write SetTaxTable stored TaxTable_Specified;
    property GetItFast:                                Boolean                                           Index (IS_OPTN) read FGetItFast write SetGetItFast stored GetItFast_Specified;
    property ShippingServiceUsed:                      string                                            Index (IS_OPTN) read FShippingServiceUsed write SetShippingServiceUsed stored ShippingServiceUsed_Specified;
    property DefaultShippingCost:                      AmountType                                        Index (IS_OPTN) read FDefaultShippingCost write SetDefaultShippingCost stored DefaultShippingCost_Specified;
    property ShippingDiscountProfileID:                string                                            Index (IS_OPTN) read FShippingDiscountProfileID write SetShippingDiscountProfileID stored ShippingDiscountProfileID_Specified;
    property FlatShippingDiscount:                     FlatShippingDiscountType                          Index (IS_OPTN) read FFlatShippingDiscount write SetFlatShippingDiscount stored FlatShippingDiscount_Specified;
    property CalculatedShippingDiscount:               CalculatedShippingDiscountType                    Index (IS_OPTN) read FCalculatedShippingDiscount write SetCalculatedShippingDiscount stored CalculatedShippingDiscount_Specified;
    property PromotionalShippingDiscount:              Boolean                                           Index (IS_OPTN) read FPromotionalShippingDiscount write SetPromotionalShippingDiscount stored PromotionalShippingDiscount_Specified;
    property InternationalShippingDiscountProfileID:   string                                            Index (IS_OPTN) read FInternationalShippingDiscountProfileID write SetInternationalShippingDiscountProfileID stored InternationalShippingDiscountProfileID_Specified;
    property InternationalFlatShippingDiscount:        FlatShippingDiscountType                          Index (IS_OPTN) read FInternationalFlatShippingDiscount write SetInternationalFlatShippingDiscount stored InternationalFlatShippingDiscount_Specified;
    property InternationalCalculatedShippingDiscount:  CalculatedShippingDiscountType                    Index (IS_OPTN) read FInternationalCalculatedShippingDiscount write SetInternationalCalculatedShippingDiscount stored InternationalCalculatedShippingDiscount_Specified;
    property InternationalPromotionalShippingDiscount: Boolean                                           Index (IS_OPTN) read FInternationalPromotionalShippingDiscount write SetInternationalPromotionalShippingDiscount stored InternationalPromotionalShippingDiscount_Specified;
    property PromotionalShippingDiscountDetails:       PromotionalShippingDiscountDetailsType            Index (IS_OPTN) read FPromotionalShippingDiscountDetails write SetPromotionalShippingDiscountDetails stored PromotionalShippingDiscountDetails_Specified;
    property CODCost:                                  AmountType                                        Index (IS_OPTN) read FCODCost write SetCODCost stored CODCost_Specified;
    property ExcludeShipToLocation:                    SellerExcludeShipToLocationPreferencesType        Index (IS_OPTN or IS_UNBD) read FExcludeShipToLocation write SetExcludeShipToLocation stored ExcludeShipToLocation_Specified;
    property SellerExcludeShipToLocationsPreference:   Boolean                                           Index (IS_OPTN) read FSellerExcludeShipToLocationsPreference write SetSellerExcludeShipToLocationsPreference stored SellerExcludeShipToLocationsPreference_Specified;
    property ShipmentTrackingDetails:                  Array_Of_ShipmentTrackingDetailsType              Index (IS_OPTN or IS_UNBD) read FShipmentTrackingDetails write SetShipmentTrackingDetails stored ShipmentTrackingDetails_Specified;
    property RateTableDetails:                         RateTableDetailsType                              Index (IS_OPTN) read FRateTableDetails write SetRateTableDetails stored RateTableDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShipmentType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShipmentType = class(TRemotable)
  private
    FEstimatedDeliveryDate: TXSDateTime;
    FEstimatedDeliveryDate_Specified: boolean;
    FInsuredValue: AmountType;
    FInsuredValue_Specified: boolean;
    FPackageDepth: MeasureType;
    FPackageDepth_Specified: boolean;
    FPackageLength: MeasureType;
    FPackageLength_Specified: boolean;
    FPackageWidth: MeasureType;
    FPackageWidth_Specified: boolean;
    FPayPalShipmentID: string;
    FPayPalShipmentID_Specified: boolean;
    FShipmentID: Int64;
    FShipmentID_Specified: boolean;
    FPostageTotal: AmountType;
    FPostageTotal_Specified: boolean;
    FPrintedTime: TXSDateTime;
    FPrintedTime_Specified: boolean;
    FShipFromAddress: AddressType;
    FShipFromAddress_Specified: boolean;
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FShippingCarrierUsed: string;
    FShippingCarrierUsed_Specified: boolean;
    FShippingFeature: Array_Of_ShippingFeatureCodeType;
    FShippingFeature_Specified: boolean;
    FShippingPackage: ShippingPackageCodeType;
    FShippingPackage_Specified: boolean;
    FShippingServiceUsed: string;
    FShippingServiceUsed_Specified: boolean;
    FShipmentTrackingNumber: string;
    FShipmentTrackingNumber_Specified: boolean;
    FWeightMajor: MeasureType;
    FWeightMajor_Specified: boolean;
    FWeightMinor: MeasureType;
    FWeightMinor_Specified: boolean;
    FItemTransactionID: ItemTransactionIDArrayType;
    FItemTransactionID_Specified: boolean;
    FDeliveryDate: TXSDateTime;
    FDeliveryDate_Specified: boolean;
    FDeliveryStatus: ShipmentDeliveryStatusCodeType;
    FDeliveryStatus_Specified: boolean;
    FRefundGrantedTime: TXSDateTime;
    FRefundGrantedTime_Specified: boolean;
    FRefundRequestedTime: TXSDateTime;
    FRefundRequestedTime_Specified: boolean;
    FStatus: ShipmentStatusCodeType;
    FStatus_Specified: boolean;
    FShippedTime: TXSDateTime;
    FShippedTime_Specified: boolean;
    FNotes: string;
    FNotes_Specified: boolean;
    FShipmentTrackingDetails: Array_Of_ShipmentTrackingDetailsType;
    FShipmentTrackingDetails_Specified: boolean;
    FShipmentLineItem: ShipmentLineItemType;
    FShipmentLineItem_Specified: boolean;
    procedure SetEstimatedDeliveryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EstimatedDeliveryDate_Specified(Index: Integer): boolean;
    procedure SetInsuredValue(Index: Integer; const AAmountType: AmountType);
    function  InsuredValue_Specified(Index: Integer): boolean;
    procedure SetPackageDepth(Index: Integer; const AMeasureType: MeasureType);
    function  PackageDepth_Specified(Index: Integer): boolean;
    procedure SetPackageLength(Index: Integer; const AMeasureType: MeasureType);
    function  PackageLength_Specified(Index: Integer): boolean;
    procedure SetPackageWidth(Index: Integer; const AMeasureType: MeasureType);
    function  PackageWidth_Specified(Index: Integer): boolean;
    procedure SetPayPalShipmentID(Index: Integer; const Astring: string);
    function  PayPalShipmentID_Specified(Index: Integer): boolean;
    procedure SetShipmentID(Index: Integer; const AInt64: Int64);
    function  ShipmentID_Specified(Index: Integer): boolean;
    procedure SetPostageTotal(Index: Integer; const AAmountType: AmountType);
    function  PostageTotal_Specified(Index: Integer): boolean;
    procedure SetPrintedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PrintedTime_Specified(Index: Integer): boolean;
    procedure SetShipFromAddress(Index: Integer; const AAddressType: AddressType);
    function  ShipFromAddress_Specified(Index: Integer): boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetShippingCarrierUsed(Index: Integer; const Astring: string);
    function  ShippingCarrierUsed_Specified(Index: Integer): boolean;
    procedure SetShippingFeature(Index: Integer; const AArray_Of_ShippingFeatureCodeType: Array_Of_ShippingFeatureCodeType);
    function  ShippingFeature_Specified(Index: Integer): boolean;
    procedure SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
    function  ShippingPackage_Specified(Index: Integer): boolean;
    procedure SetShippingServiceUsed(Index: Integer; const Astring: string);
    function  ShippingServiceUsed_Specified(Index: Integer): boolean;
    procedure SetShipmentTrackingNumber(Index: Integer; const Astring: string);
    function  ShipmentTrackingNumber_Specified(Index: Integer): boolean;
    procedure SetWeightMajor(Index: Integer; const AMeasureType: MeasureType);
    function  WeightMajor_Specified(Index: Integer): boolean;
    procedure SetWeightMinor(Index: Integer; const AMeasureType: MeasureType);
    function  WeightMinor_Specified(Index: Integer): boolean;
    procedure SetItemTransactionID(Index: Integer; const AItemTransactionIDArrayType: ItemTransactionIDArrayType);
    function  ItemTransactionID_Specified(Index: Integer): boolean;
    procedure SetDeliveryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DeliveryDate_Specified(Index: Integer): boolean;
    procedure SetDeliveryStatus(Index: Integer; const AShipmentDeliveryStatusCodeType: ShipmentDeliveryStatusCodeType);
    function  DeliveryStatus_Specified(Index: Integer): boolean;
    procedure SetRefundGrantedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundGrantedTime_Specified(Index: Integer): boolean;
    procedure SetRefundRequestedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RefundRequestedTime_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AShipmentStatusCodeType: ShipmentStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippedTime_Specified(Index: Integer): boolean;
    procedure SetNotes(Index: Integer; const Astring: string);
    function  Notes_Specified(Index: Integer): boolean;
    procedure SetShipmentTrackingDetails(Index: Integer; const AArray_Of_ShipmentTrackingDetailsType: Array_Of_ShipmentTrackingDetailsType);
    function  ShipmentTrackingDetails_Specified(Index: Integer): boolean;
    procedure SetShipmentLineItem(Index: Integer; const AShipmentLineItemType: ShipmentLineItemType);
    function  ShipmentLineItem_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property EstimatedDeliveryDate:   TXSDateTime                           Index (IS_OPTN) read FEstimatedDeliveryDate write SetEstimatedDeliveryDate stored EstimatedDeliveryDate_Specified;
    property InsuredValue:            AmountType                            Index (IS_OPTN) read FInsuredValue write SetInsuredValue stored InsuredValue_Specified;
    property PackageDepth:            MeasureType                           Index (IS_OPTN) read FPackageDepth write SetPackageDepth stored PackageDepth_Specified;
    property PackageLength:           MeasureType                           Index (IS_OPTN) read FPackageLength write SetPackageLength stored PackageLength_Specified;
    property PackageWidth:            MeasureType                           Index (IS_OPTN) read FPackageWidth write SetPackageWidth stored PackageWidth_Specified;
    property PayPalShipmentID:        string                                Index (IS_OPTN) read FPayPalShipmentID write SetPayPalShipmentID stored PayPalShipmentID_Specified;
    property ShipmentID:              Int64                                 Index (IS_OPTN) read FShipmentID write SetShipmentID stored ShipmentID_Specified;
    property PostageTotal:            AmountType                            Index (IS_OPTN) read FPostageTotal write SetPostageTotal stored PostageTotal_Specified;
    property PrintedTime:             TXSDateTime                           Index (IS_OPTN) read FPrintedTime write SetPrintedTime stored PrintedTime_Specified;
    property ShipFromAddress:         AddressType                           Index (IS_OPTN) read FShipFromAddress write SetShipFromAddress stored ShipFromAddress_Specified;
    property ShippingAddress:         AddressType                           Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property ShippingCarrierUsed:     string                                Index (IS_OPTN) read FShippingCarrierUsed write SetShippingCarrierUsed stored ShippingCarrierUsed_Specified;
    property ShippingFeature:         Array_Of_ShippingFeatureCodeType      Index (IS_OPTN or IS_UNBD) read FShippingFeature write SetShippingFeature stored ShippingFeature_Specified;
    property ShippingPackage:         ShippingPackageCodeType               Index (IS_OPTN) read FShippingPackage write SetShippingPackage stored ShippingPackage_Specified;
    property ShippingServiceUsed:     string                                Index (IS_OPTN) read FShippingServiceUsed write SetShippingServiceUsed stored ShippingServiceUsed_Specified;
    property ShipmentTrackingNumber:  string                                Index (IS_OPTN) read FShipmentTrackingNumber write SetShipmentTrackingNumber stored ShipmentTrackingNumber_Specified;
    property WeightMajor:             MeasureType                           Index (IS_OPTN) read FWeightMajor write SetWeightMajor stored WeightMajor_Specified;
    property WeightMinor:             MeasureType                           Index (IS_OPTN) read FWeightMinor write SetWeightMinor stored WeightMinor_Specified;
    property ItemTransactionID:       ItemTransactionIDArrayType            Index (IS_OPTN or IS_UNBD) read FItemTransactionID write SetItemTransactionID stored ItemTransactionID_Specified;
    property DeliveryDate:            TXSDateTime                           Index (IS_OPTN) read FDeliveryDate write SetDeliveryDate stored DeliveryDate_Specified;
    property DeliveryStatus:          ShipmentDeliveryStatusCodeType        Index (IS_OPTN) read FDeliveryStatus write SetDeliveryStatus stored DeliveryStatus_Specified;
    property RefundGrantedTime:       TXSDateTime                           Index (IS_OPTN) read FRefundGrantedTime write SetRefundGrantedTime stored RefundGrantedTime_Specified;
    property RefundRequestedTime:     TXSDateTime                           Index (IS_OPTN) read FRefundRequestedTime write SetRefundRequestedTime stored RefundRequestedTime_Specified;
    property Status:                  ShipmentStatusCodeType                Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property ShippedTime:             TXSDateTime                           Index (IS_OPTN) read FShippedTime write SetShippedTime stored ShippedTime_Specified;
    property Notes:                   string                                Index (IS_OPTN) read FNotes write SetNotes stored Notes_Specified;
    property ShipmentTrackingDetails: Array_Of_ShipmentTrackingDetailsType  Index (IS_OPTN or IS_UNBD) read FShipmentTrackingDetails write SetShipmentTrackingDetails stored ShipmentTrackingDetails_Specified;
    property ShipmentLineItem:        ShipmentLineItemType                  Index (IS_OPTN) read FShipmentLineItem write SetShipmentLineItem stored ShipmentLineItem_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingServiceDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServiceDetailsType = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FExpeditedService: Boolean;
    FExpeditedService_Specified: boolean;
    FInternationalService: Boolean;
    FInternationalService_Specified: boolean;
    FShippingService: string;
    FShippingService_Specified: boolean;
    FShippingServiceID: Integer;
    FShippingServiceID_Specified: boolean;
    FShippingTimeMax: Integer;
    FShippingTimeMax_Specified: boolean;
    FShippingTimeMin: Integer;
    FShippingTimeMin_Specified: boolean;
    FShippingServiceCode: ShippingServiceCodeType;
    FShippingServiceCode_Specified: boolean;
    FServiceType: Array_Of_ShippingTypeCodeType;
    FServiceType_Specified: boolean;
    FShippingPackage: Array_Of_ShippingPackageCodeType;
    FShippingPackage_Specified: boolean;
    FDimensionsRequired: Boolean;
    FDimensionsRequired_Specified: boolean;
    FValidForSellingFlow: Boolean;
    FValidForSellingFlow_Specified: boolean;
    FSurchargeApplicable: Boolean;
    FSurchargeApplicable_Specified: boolean;
    FShippingCarrier: Array_Of_ShippingCarrierCodeType;
    FShippingCarrier_Specified: boolean;
    FCODService: Boolean;
    FCODService_Specified: boolean;
    FDeprecationDetails: Array_Of_AnnouncementMessageType;
    FDeprecationDetails_Specified: boolean;
    FMappedToShippingServiceID: Integer;
    FMappedToShippingServiceID_Specified: boolean;
    FCostGroupFlat: string;
    FCostGroupFlat_Specified: boolean;
    FShippingServicePackageDetails: Array_Of_ShippingServicePackageDetailsType;
    FShippingServicePackageDetails_Specified: boolean;
    FWeightRequired: Boolean;
    FWeightRequired_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FShippingCategory: string;
    FShippingCategory_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetExpeditedService(Index: Integer; const ABoolean: Boolean);
    function  ExpeditedService_Specified(Index: Integer): boolean;
    procedure SetInternationalService(Index: Integer; const ABoolean: Boolean);
    function  InternationalService_Specified(Index: Integer): boolean;
    procedure SetShippingService(Index: Integer; const Astring: string);
    function  ShippingService_Specified(Index: Integer): boolean;
    procedure SetShippingServiceID(Index: Integer; const AInteger: Integer);
    function  ShippingServiceID_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMax(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMax_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMin(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMin_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCode(Index: Integer; const AShippingServiceCodeType: ShippingServiceCodeType);
    function  ShippingServiceCode_Specified(Index: Integer): boolean;
    procedure SetServiceType(Index: Integer; const AArray_Of_ShippingTypeCodeType: Array_Of_ShippingTypeCodeType);
    function  ServiceType_Specified(Index: Integer): boolean;
    procedure SetShippingPackage(Index: Integer; const AArray_Of_ShippingPackageCodeType: Array_Of_ShippingPackageCodeType);
    function  ShippingPackage_Specified(Index: Integer): boolean;
    procedure SetDimensionsRequired(Index: Integer; const ABoolean: Boolean);
    function  DimensionsRequired_Specified(Index: Integer): boolean;
    procedure SetValidForSellingFlow(Index: Integer; const ABoolean: Boolean);
    function  ValidForSellingFlow_Specified(Index: Integer): boolean;
    procedure SetSurchargeApplicable(Index: Integer; const ABoolean: Boolean);
    function  SurchargeApplicable_Specified(Index: Integer): boolean;
    procedure SetShippingCarrier(Index: Integer; const AArray_Of_ShippingCarrierCodeType: Array_Of_ShippingCarrierCodeType);
    function  ShippingCarrier_Specified(Index: Integer): boolean;
    procedure SetCODService(Index: Integer; const ABoolean: Boolean);
    function  CODService_Specified(Index: Integer): boolean;
    procedure SetDeprecationDetails(Index: Integer; const AArray_Of_AnnouncementMessageType: Array_Of_AnnouncementMessageType);
    function  DeprecationDetails_Specified(Index: Integer): boolean;
    procedure SetMappedToShippingServiceID(Index: Integer; const AInteger: Integer);
    function  MappedToShippingServiceID_Specified(Index: Integer): boolean;
    procedure SetCostGroupFlat(Index: Integer; const Astring: string);
    function  CostGroupFlat_Specified(Index: Integer): boolean;
    procedure SetShippingServicePackageDetails(Index: Integer; const AArray_Of_ShippingServicePackageDetailsType: Array_Of_ShippingServicePackageDetailsType);
    function  ShippingServicePackageDetails_Specified(Index: Integer): boolean;
    procedure SetWeightRequired(Index: Integer; const ABoolean: Boolean);
    function  WeightRequired_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetShippingCategory(Index: Integer; const Astring: string);
    function  ShippingCategory_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Description:                   string                                      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ExpeditedService:              Boolean                                     Index (IS_OPTN) read FExpeditedService write SetExpeditedService stored ExpeditedService_Specified;
    property InternationalService:          Boolean                                     Index (IS_OPTN) read FInternationalService write SetInternationalService stored InternationalService_Specified;
    property ShippingService:               string                                      Index (IS_OPTN) read FShippingService write SetShippingService stored ShippingService_Specified;
    property ShippingServiceID:             Integer                                     Index (IS_OPTN) read FShippingServiceID write SetShippingServiceID stored ShippingServiceID_Specified;
    property ShippingTimeMax:               Integer                                     Index (IS_OPTN) read FShippingTimeMax write SetShippingTimeMax stored ShippingTimeMax_Specified;
    property ShippingTimeMin:               Integer                                     Index (IS_OPTN) read FShippingTimeMin write SetShippingTimeMin stored ShippingTimeMin_Specified;
    property ShippingServiceCode:           ShippingServiceCodeType                     Index (IS_OPTN) read FShippingServiceCode write SetShippingServiceCode stored ShippingServiceCode_Specified;
    property ServiceType:                   Array_Of_ShippingTypeCodeType               Index (IS_OPTN or IS_UNBD) read FServiceType write SetServiceType stored ServiceType_Specified;
    property ShippingPackage:               Array_Of_ShippingPackageCodeType            Index (IS_OPTN or IS_UNBD) read FShippingPackage write SetShippingPackage stored ShippingPackage_Specified;
    property DimensionsRequired:            Boolean                                     Index (IS_OPTN) read FDimensionsRequired write SetDimensionsRequired stored DimensionsRequired_Specified;
    property ValidForSellingFlow:           Boolean                                     Index (IS_OPTN) read FValidForSellingFlow write SetValidForSellingFlow stored ValidForSellingFlow_Specified;
    property SurchargeApplicable:           Boolean                                     Index (IS_OPTN) read FSurchargeApplicable write SetSurchargeApplicable stored SurchargeApplicable_Specified;
    property ShippingCarrier:               Array_Of_ShippingCarrierCodeType            Index (IS_OPTN or IS_UNBD) read FShippingCarrier write SetShippingCarrier stored ShippingCarrier_Specified;
    property CODService:                    Boolean                                     Index (IS_OPTN) read FCODService write SetCODService stored CODService_Specified;
    property DeprecationDetails:            Array_Of_AnnouncementMessageType            Index (IS_OPTN or IS_UNBD) read FDeprecationDetails write SetDeprecationDetails stored DeprecationDetails_Specified;
    property MappedToShippingServiceID:     Integer                                     Index (IS_OPTN) read FMappedToShippingServiceID write SetMappedToShippingServiceID stored MappedToShippingServiceID_Specified;
    property CostGroupFlat:                 string                                      Index (IS_OPTN) read FCostGroupFlat write SetCostGroupFlat stored CostGroupFlat_Specified;
    property ShippingServicePackageDetails: Array_Of_ShippingServicePackageDetailsType  Index (IS_OPTN or IS_UNBD) read FShippingServicePackageDetails write SetShippingServicePackageDetails stored ShippingServicePackageDetails_Specified;
    property WeightRequired:                Boolean                                     Index (IS_OPTN) read FWeightRequired write SetWeightRequired stored WeightRequired_Specified;
    property DetailVersion:                 string                                      Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:                    TXSDateTime                                 Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property ShippingCategory:              string                                      Index (IS_OPTN) read FShippingCategory write SetShippingCategory stored ShippingCategory_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingCategoryDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingCategoryDetailsType = class(TRemotable)
  private
    FShippingCategory: string;
    FShippingCategory_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetShippingCategory(Index: Integer; const Astring: string);
    function  ShippingCategory_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingCategory: string       Index (IS_OPTN) read FShippingCategory write SetShippingCategory stored ShippingCategory_Specified;
    property Description:      string       Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion:    string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:       TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : PickupMethodSelectedType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PickupMethodSelectedType = class(TRemotable)
  private
    FPickupMethod: string;
    FPickupMethod_Specified: boolean;
    FPickupStoreID: string;
    FPickupStoreID_Specified: boolean;
    FPickupStatus: PickupStatusCodeType;
    FPickupStatus_Specified: boolean;
    FMerchantPickupCode: string;
    FMerchantPickupCode_Specified: boolean;
    FPickupFulfillmentTime: TXSDateTime;
    FPickupFulfillmentTime_Specified: boolean;
    FPickupLocationUUID: string;
    FPickupLocationUUID_Specified: boolean;
    procedure SetPickupMethod(Index: Integer; const Astring: string);
    function  PickupMethod_Specified(Index: Integer): boolean;
    procedure SetPickupStoreID(Index: Integer; const Astring: string);
    function  PickupStoreID_Specified(Index: Integer): boolean;
    procedure SetPickupStatus(Index: Integer; const APickupStatusCodeType: PickupStatusCodeType);
    function  PickupStatus_Specified(Index: Integer): boolean;
    procedure SetMerchantPickupCode(Index: Integer; const Astring: string);
    function  MerchantPickupCode_Specified(Index: Integer): boolean;
    procedure SetPickupFulfillmentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PickupFulfillmentTime_Specified(Index: Integer): boolean;
    procedure SetPickupLocationUUID(Index: Integer; const Astring: string);
    function  PickupLocationUUID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PickupMethod:          string                Index (IS_OPTN) read FPickupMethod write SetPickupMethod stored PickupMethod_Specified;
    property PickupStoreID:         string                Index (IS_OPTN) read FPickupStoreID write SetPickupStoreID stored PickupStoreID_Specified;
    property PickupStatus:          PickupStatusCodeType  Index (IS_OPTN) read FPickupStatus write SetPickupStatus stored PickupStatus_Specified;
    property MerchantPickupCode:    string                Index (IS_OPTN) read FMerchantPickupCode write SetMerchantPickupCode stored MerchantPickupCode_Specified;
    property PickupFulfillmentTime: TXSDateTime           Index (IS_OPTN) read FPickupFulfillmentTime write SetPickupFulfillmentTime stored PickupFulfillmentTime_Specified;
    property PickupLocationUUID:    string                Index (IS_OPTN) read FPickupLocationUUID write SetPickupLocationUUID stored PickupLocationUUID_Specified;
  end;



  // ************************************************************************ //
  // XML       : PickupOptionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PickupOptionsType = class(TRemotable)
  private
    FPickupMethod: string;
    FPickupMethod_Specified: boolean;
    FPickupPriority: Integer;
    FPickupPriority_Specified: boolean;
    procedure SetPickupMethod(Index: Integer; const Astring: string);
    function  PickupMethod_Specified(Index: Integer): boolean;
    procedure SetPickupPriority(Index: Integer; const AInteger: Integer);
    function  PickupPriority_Specified(Index: Integer): boolean;
  published
    property PickupMethod:   string   Index (IS_OPTN) read FPickupMethod write SetPickupMethod stored PickupMethod_Specified;
    property PickupPriority: Integer  Index (IS_OPTN) read FPickupPriority write SetPickupPriority stored PickupPriority_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReturnPolicyType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnPolicyType = class(TRemotable)
  private
    FRefundOption: string;
    FRefundOption_Specified: boolean;
    FRefund: string;
    FRefund_Specified: boolean;
    FReturnsWithinOption: string;
    FReturnsWithinOption_Specified: boolean;
    FReturnsWithin: string;
    FReturnsWithin_Specified: boolean;
    FReturnsAcceptedOption: string;
    FReturnsAcceptedOption_Specified: boolean;
    FReturnsAccepted: string;
    FReturnsAccepted_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FWarrantyOfferedOption: string;
    FWarrantyOfferedOption_Specified: boolean;
    FWarrantyOffered: string;
    FWarrantyOffered_Specified: boolean;
    FWarrantyTypeOption: string;
    FWarrantyTypeOption_Specified: boolean;
    FWarrantyType: string;
    FWarrantyType_Specified: boolean;
    FWarrantyDurationOption: string;
    FWarrantyDurationOption_Specified: boolean;
    FWarrantyDuration: string;
    FWarrantyDuration_Specified: boolean;
    FShippingCostPaidByOption: string;
    FShippingCostPaidByOption_Specified: boolean;
    FShippingCostPaidBy: string;
    FShippingCostPaidBy_Specified: boolean;
    FRestockingFeeValue: string;
    FRestockingFeeValue_Specified: boolean;
    FRestockingFeeValueOption: string;
    FRestockingFeeValueOption_Specified: boolean;
    FExtendedHolidayReturns: Boolean;
    FExtendedHolidayReturns_Specified: boolean;
    FInternationalRefundOption: string;
    FInternationalRefundOption_Specified: boolean;
    FInternationalReturnsAcceptedOption: string;
    FInternationalReturnsAcceptedOption_Specified: boolean;
    FInternationalReturnsWithinOption: string;
    FInternationalReturnsWithinOption_Specified: boolean;
    FInternationalShippingCostPaidByOption: string;
    FInternationalShippingCostPaidByOption_Specified: boolean;
    procedure SetRefundOption(Index: Integer; const Astring: string);
    function  RefundOption_Specified(Index: Integer): boolean;
    procedure SetRefund(Index: Integer; const Astring: string);
    function  Refund_Specified(Index: Integer): boolean;
    procedure SetReturnsWithinOption(Index: Integer; const Astring: string);
    function  ReturnsWithinOption_Specified(Index: Integer): boolean;
    procedure SetReturnsWithin(Index: Integer; const Astring: string);
    function  ReturnsWithin_Specified(Index: Integer): boolean;
    procedure SetReturnsAcceptedOption(Index: Integer; const Astring: string);
    function  ReturnsAcceptedOption_Specified(Index: Integer): boolean;
    procedure SetReturnsAccepted(Index: Integer; const Astring: string);
    function  ReturnsAccepted_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetWarrantyOfferedOption(Index: Integer; const Astring: string);
    function  WarrantyOfferedOption_Specified(Index: Integer): boolean;
    procedure SetWarrantyOffered(Index: Integer; const Astring: string);
    function  WarrantyOffered_Specified(Index: Integer): boolean;
    procedure SetWarrantyTypeOption(Index: Integer; const Astring: string);
    function  WarrantyTypeOption_Specified(Index: Integer): boolean;
    procedure SetWarrantyType(Index: Integer; const Astring: string);
    function  WarrantyType_Specified(Index: Integer): boolean;
    procedure SetWarrantyDurationOption(Index: Integer; const Astring: string);
    function  WarrantyDurationOption_Specified(Index: Integer): boolean;
    procedure SetWarrantyDuration(Index: Integer; const Astring: string);
    function  WarrantyDuration_Specified(Index: Integer): boolean;
    procedure SetShippingCostPaidByOption(Index: Integer; const Astring: string);
    function  ShippingCostPaidByOption_Specified(Index: Integer): boolean;
    procedure SetShippingCostPaidBy(Index: Integer; const Astring: string);
    function  ShippingCostPaidBy_Specified(Index: Integer): boolean;
    procedure SetRestockingFeeValue(Index: Integer; const Astring: string);
    function  RestockingFeeValue_Specified(Index: Integer): boolean;
    procedure SetRestockingFeeValueOption(Index: Integer; const Astring: string);
    function  RestockingFeeValueOption_Specified(Index: Integer): boolean;
    procedure SetExtendedHolidayReturns(Index: Integer; const ABoolean: Boolean);
    function  ExtendedHolidayReturns_Specified(Index: Integer): boolean;
    procedure SetInternationalRefundOption(Index: Integer; const Astring: string);
    function  InternationalRefundOption_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsAcceptedOption(Index: Integer; const Astring: string);
    function  InternationalReturnsAcceptedOption_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsWithinOption(Index: Integer; const Astring: string);
    function  InternationalReturnsWithinOption_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingCostPaidByOption(Index: Integer; const Astring: string);
    function  InternationalShippingCostPaidByOption_Specified(Index: Integer): boolean;
  published
    property RefundOption:                          string   Index (IS_OPTN) read FRefundOption write SetRefundOption stored RefundOption_Specified;
    property Refund:                                string   Index (IS_OPTN) read FRefund write SetRefund stored Refund_Specified;
    property ReturnsWithinOption:                   string   Index (IS_OPTN) read FReturnsWithinOption write SetReturnsWithinOption stored ReturnsWithinOption_Specified;
    property ReturnsWithin:                         string   Index (IS_OPTN) read FReturnsWithin write SetReturnsWithin stored ReturnsWithin_Specified;
    property ReturnsAcceptedOption:                 string   Index (IS_OPTN) read FReturnsAcceptedOption write SetReturnsAcceptedOption stored ReturnsAcceptedOption_Specified;
    property ReturnsAccepted:                       string   Index (IS_OPTN) read FReturnsAccepted write SetReturnsAccepted stored ReturnsAccepted_Specified;
    property Description:                           string   Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property WarrantyOfferedOption:                 string   Index (IS_OPTN) read FWarrantyOfferedOption write SetWarrantyOfferedOption stored WarrantyOfferedOption_Specified;
    property WarrantyOffered:                       string   Index (IS_OPTN) read FWarrantyOffered write SetWarrantyOffered stored WarrantyOffered_Specified;
    property WarrantyTypeOption:                    string   Index (IS_OPTN) read FWarrantyTypeOption write SetWarrantyTypeOption stored WarrantyTypeOption_Specified;
    property WarrantyType:                          string   Index (IS_OPTN) read FWarrantyType write SetWarrantyType stored WarrantyType_Specified;
    property WarrantyDurationOption:                string   Index (IS_OPTN) read FWarrantyDurationOption write SetWarrantyDurationOption stored WarrantyDurationOption_Specified;
    property WarrantyDuration:                      string   Index (IS_OPTN) read FWarrantyDuration write SetWarrantyDuration stored WarrantyDuration_Specified;
    property ShippingCostPaidByOption:              string   Index (IS_OPTN) read FShippingCostPaidByOption write SetShippingCostPaidByOption stored ShippingCostPaidByOption_Specified;
    property ShippingCostPaidBy:                    string   Index (IS_OPTN) read FShippingCostPaidBy write SetShippingCostPaidBy stored ShippingCostPaidBy_Specified;
    property RestockingFeeValue:                    string   Index (IS_OPTN) read FRestockingFeeValue write SetRestockingFeeValue stored RestockingFeeValue_Specified;
    property RestockingFeeValueOption:              string   Index (IS_OPTN) read FRestockingFeeValueOption write SetRestockingFeeValueOption stored RestockingFeeValueOption_Specified;
    property ExtendedHolidayReturns:                Boolean  Index (IS_OPTN) read FExtendedHolidayReturns write SetExtendedHolidayReturns stored ExtendedHolidayReturns_Specified;
    property InternationalRefundOption:             string   Index (IS_OPTN) read FInternationalRefundOption write SetInternationalRefundOption stored InternationalRefundOption_Specified;
    property InternationalReturnsAcceptedOption:    string   Index (IS_OPTN) read FInternationalReturnsAcceptedOption write SetInternationalReturnsAcceptedOption stored InternationalReturnsAcceptedOption_Specified;
    property InternationalReturnsWithinOption:      string   Index (IS_OPTN) read FInternationalReturnsWithinOption write SetInternationalReturnsWithinOption stored InternationalReturnsWithinOption_Specified;
    property InternationalShippingCostPaidByOption: string   Index (IS_OPTN) read FInternationalShippingCostPaidByOption write SetInternationalShippingCostPaidByOption stored InternationalShippingCostPaidByOption_Specified;
  end;



  // ************************************************************************ //
  // XML       : MultiLegShippingServiceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MultiLegShippingServiceType = class(TRemotable)
  private
    FShippingService: string;
    FShippingService_Specified: boolean;
    FTotalShippingCost: AmountType;
    FTotalShippingCost_Specified: boolean;
    procedure SetShippingService(Index: Integer; const Astring: string);
    function  ShippingService_Specified(Index: Integer): boolean;
    procedure SetTotalShippingCost(Index: Integer; const AAmountType: AmountType);
    function  TotalShippingCost_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingService:   string      Index (IS_OPTN) read FShippingService write SetShippingService stored ShippingService_Specified;
    property TotalShippingCost: AmountType  Index (IS_OPTN) read FTotalShippingCost write SetTotalShippingCost stored TotalShippingCost_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingPackageInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingPackageInfoType = class(TRemotable)
  private
    FStoreID: string;
    FStoreID_Specified: boolean;
    FShippingTrackingEvent: string;
    FShippingTrackingEvent_Specified: boolean;
    FScheduledDeliveryTimeMin: TXSDateTime;
    FScheduledDeliveryTimeMin_Specified: boolean;
    FScheduledDeliveryTimeMax: TXSDateTime;
    FScheduledDeliveryTimeMax_Specified: boolean;
    FActualDeliveryTime: TXSDateTime;
    FActualDeliveryTime_Specified: boolean;
    FEstimatedDeliveryTimeMin: TXSDateTime;
    FEstimatedDeliveryTimeMin_Specified: boolean;
    FEstimatedDeliveryTimeMax: TXSDateTime;
    FEstimatedDeliveryTimeMax_Specified: boolean;
    FHandleByTime: TXSDateTime;
    FHandleByTime_Specified: boolean;
    FMinNativeEstimatedDeliveryTime: TXSDateTime;
    FMinNativeEstimatedDeliveryTime_Specified: boolean;
    FMaxNativeEstimatedDeliveryTime: TXSDateTime;
    FMaxNativeEstimatedDeliveryTime_Specified: boolean;
    procedure SetStoreID(Index: Integer; const Astring: string);
    function  StoreID_Specified(Index: Integer): boolean;
    procedure SetShippingTrackingEvent(Index: Integer; const Astring: string);
    function  ShippingTrackingEvent_Specified(Index: Integer): boolean;
    procedure SetScheduledDeliveryTimeMin(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ScheduledDeliveryTimeMin_Specified(Index: Integer): boolean;
    procedure SetScheduledDeliveryTimeMax(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ScheduledDeliveryTimeMax_Specified(Index: Integer): boolean;
    procedure SetActualDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ActualDeliveryTime_Specified(Index: Integer): boolean;
    procedure SetEstimatedDeliveryTimeMin(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EstimatedDeliveryTimeMin_Specified(Index: Integer): boolean;
    procedure SetEstimatedDeliveryTimeMax(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EstimatedDeliveryTimeMax_Specified(Index: Integer): boolean;
    procedure SetHandleByTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  HandleByTime_Specified(Index: Integer): boolean;
    procedure SetMinNativeEstimatedDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  MinNativeEstimatedDeliveryTime_Specified(Index: Integer): boolean;
    procedure SetMaxNativeEstimatedDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  MaxNativeEstimatedDeliveryTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property StoreID:                        string       Index (IS_OPTN) read FStoreID write SetStoreID stored StoreID_Specified;
    property ShippingTrackingEvent:          string       Index (IS_OPTN) read FShippingTrackingEvent write SetShippingTrackingEvent stored ShippingTrackingEvent_Specified;
    property ScheduledDeliveryTimeMin:       TXSDateTime  Index (IS_OPTN) read FScheduledDeliveryTimeMin write SetScheduledDeliveryTimeMin stored ScheduledDeliveryTimeMin_Specified;
    property ScheduledDeliveryTimeMax:       TXSDateTime  Index (IS_OPTN) read FScheduledDeliveryTimeMax write SetScheduledDeliveryTimeMax stored ScheduledDeliveryTimeMax_Specified;
    property ActualDeliveryTime:             TXSDateTime  Index (IS_OPTN) read FActualDeliveryTime write SetActualDeliveryTime stored ActualDeliveryTime_Specified;
    property EstimatedDeliveryTimeMin:       TXSDateTime  Index (IS_OPTN) read FEstimatedDeliveryTimeMin write SetEstimatedDeliveryTimeMin stored EstimatedDeliveryTimeMin_Specified;
    property EstimatedDeliveryTimeMax:       TXSDateTime  Index (IS_OPTN) read FEstimatedDeliveryTimeMax write SetEstimatedDeliveryTimeMax stored EstimatedDeliveryTimeMax_Specified;
    property HandleByTime:                   TXSDateTime  Index (IS_OPTN) read FHandleByTime write SetHandleByTime stored HandleByTime_Specified;
    property MinNativeEstimatedDeliveryTime: TXSDateTime  Index (IS_OPTN) read FMinNativeEstimatedDeliveryTime write SetMinNativeEstimatedDeliveryTime stored MinNativeEstimatedDeliveryTime_Specified;
    property MaxNativeEstimatedDeliveryTime: TXSDateTime  Index (IS_OPTN) read FMaxNativeEstimatedDeliveryTime write SetMaxNativeEstimatedDeliveryTime stored MaxNativeEstimatedDeliveryTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReturnsWithinDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnsWithinDetailsType = class(TRemotable)
  private
    FReturnsWithinOption: string;
    FReturnsWithinOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetReturnsWithinOption(Index: Integer; const Astring: string);
    function  ReturnsWithinOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property ReturnsWithinOption: string  Index (IS_OPTN) read FReturnsWithinOption write SetReturnsWithinOption stored ReturnsWithinOption_Specified;
    property Description:         string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : RestockingFeeValueDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RestockingFeeValueDetailsType = class(TRemotable)
  private
    FRestockingFeeValueOption: string;
    FRestockingFeeValueOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetRestockingFeeValueOption(Index: Integer; const Astring: string);
    function  RestockingFeeValueOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property RestockingFeeValueOption: string  Index (IS_OPTN) read FRestockingFeeValueOption write SetRestockingFeeValueOption stored RestockingFeeValueOption_Specified;
    property Description:              string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : RefundDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundDetailsType = class(TRemotable)
  private
    FRefundOption: string;
    FRefundOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetRefundOption(Index: Integer; const Astring: string);
    function  RefundOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property RefundOption: string  Index (IS_OPTN) read FRefundOption write SetRefundOption stored RefundOption_Specified;
    property Description:  string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerDiscountsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerDiscountsType = class(TRemotable)
  private
    FOriginalItemPrice: AmountType;
    FOriginalItemPrice_Specified: boolean;
    FOriginalItemShippingCost: AmountType;
    FOriginalItemShippingCost_Specified: boolean;
    FOriginalShippingService: string;
    FOriginalShippingService_Specified: boolean;
    FSellerDiscount: Array_Of_SellerDiscountType;
    FSellerDiscount_Specified: boolean;
    procedure SetOriginalItemPrice(Index: Integer; const AAmountType: AmountType);
    function  OriginalItemPrice_Specified(Index: Integer): boolean;
    procedure SetOriginalItemShippingCost(Index: Integer; const AAmountType: AmountType);
    function  OriginalItemShippingCost_Specified(Index: Integer): boolean;
    procedure SetOriginalShippingService(Index: Integer; const Astring: string);
    function  OriginalShippingService_Specified(Index: Integer): boolean;
    procedure SetSellerDiscount(Index: Integer; const AArray_Of_SellerDiscountType: Array_Of_SellerDiscountType);
    function  SellerDiscount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OriginalItemPrice:        AmountType                   Index (IS_OPTN) read FOriginalItemPrice write SetOriginalItemPrice stored OriginalItemPrice_Specified;
    property OriginalItemShippingCost: AmountType                   Index (IS_OPTN) read FOriginalItemShippingCost write SetOriginalItemShippingCost stored OriginalItemShippingCost_Specified;
    property OriginalShippingService:  string                       Index (IS_OPTN) read FOriginalShippingService write SetOriginalShippingService stored OriginalShippingService_Specified;
    property SellerDiscount:           Array_Of_SellerDiscountType  Index (IS_OPTN or IS_UNBD) read FSellerDiscount write SetSellerDiscount stored SellerDiscount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingCostPaidByDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingCostPaidByDetailsType = class(TRemotable)
  private
    FShippingCostPaidByOption: string;
    FShippingCostPaidByOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetShippingCostPaidByOption(Index: Integer; const Astring: string);
    function  ShippingCostPaidByOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property ShippingCostPaidByOption: string  Index (IS_OPTN) read FShippingCostPaidByOption write SetShippingCostPaidByOption stored ShippingCostPaidByOption_Specified;
    property Description:              string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : WarrantyTypeDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WarrantyTypeDetailsType = class(TRemotable)
  private
    FWarrantyTypeOption: string;
    FWarrantyTypeOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetWarrantyTypeOption(Index: Integer; const Astring: string);
    function  WarrantyTypeOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property WarrantyTypeOption: string  Index (IS_OPTN) read FWarrantyTypeOption write SetWarrantyTypeOption stored WarrantyTypeOption_Specified;
    property Description:        string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : WarrantyOfferedDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WarrantyOfferedDetailsType = class(TRemotable)
  private
    FWarrantyOfferedOption: string;
    FWarrantyOfferedOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetWarrantyOfferedOption(Index: Integer; const Astring: string);
    function  WarrantyOfferedOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property WarrantyOfferedOption: string  Index (IS_OPTN) read FWarrantyOfferedOption write SetWarrantyOfferedOption stored WarrantyOfferedOption_Specified;
    property Description:           string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReturnsAcceptedDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReturnsAcceptedDetailsType = class(TRemotable)
  private
    FReturnsAcceptedOption: string;
    FReturnsAcceptedOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetReturnsAcceptedOption(Index: Integer; const Astring: string);
    function  ReturnsAcceptedOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property ReturnsAcceptedOption: string  Index (IS_OPTN) read FReturnsAcceptedOption write SetReturnsAcceptedOption stored ReturnsAcceptedOption_Specified;
    property Description:           string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : WarrantyDurationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WarrantyDurationDetailsType = class(TRemotable)
  private
    FWarrantyDurationOption: string;
    FWarrantyDurationOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetWarrantyDurationOption(Index: Integer; const Astring: string);
    function  WarrantyDurationOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  published
    property WarrantyDurationOption: string  Index (IS_OPTN) read FWarrantyDurationOption write SetWarrantyDurationOption stored WarrantyDurationOption_Specified;
    property Description:            string  Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : PaymentOptionDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentOptionDetailsType = class(TRemotable)
  private
    FPaymentOption: BuyerPaymentMethodCodeType;
    FPaymentOption_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetPaymentOption(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
    function  PaymentOption_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PaymentOption: BuyerPaymentMethodCodeType  Index (IS_OPTN) read FPaymentOption write SetPaymentOption stored PaymentOption_Specified;
    property Description:   string                      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DetailVersion: string                      Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:    TXSDateTime                 Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;

  Array_Of_BuyerPaymentMethodCodeType = array of BuyerPaymentMethodCodeType;   { "urn:ebay:apis:eBLBaseComponents"[GblUbnd] }


  // ************************************************************************ //
  // XML       : SellingManagerOrderStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerOrderStatusType = class(TRemotable)
  private
    FCheckoutStatus: CheckoutStatusCodeType;
    FCheckoutStatus_Specified: boolean;
    FPaidStatus: SellingManagerPaidStatusCodeType;
    FPaidStatus_Specified: boolean;
    FShippedStatus: SellingManagerShippedStatusCodeType;
    FShippedStatus_Specified: boolean;
    FeBayPaymentStatus: PaymentStatusCodeType;
    FeBayPaymentStatus_Specified: boolean;
    FPayPalTransactionID: string;
    FPayPalTransactionID_Specified: boolean;
    FPaymentMethodUsed: BuyerPaymentMethodCodeType;
    FPaymentMethodUsed_Specified: boolean;
    FFeedbackReceived: CommentTypeCodeType;
    FFeedbackReceived_Specified: boolean;
    FFeedbackSent: Boolean;
    FFeedbackSent_Specified: boolean;
    FTotalEmailsSent: Integer;
    FTotalEmailsSent_Specified: boolean;
    FPaymentHoldStatus: PaymentHoldStatusCodeType;
    FPaymentHoldStatus_Specified: boolean;
    FSellerInvoiceNumber: string;
    FSellerInvoiceNumber_Specified: boolean;
    FShippedTime: TXSDateTime;
    FShippedTime_Specified: boolean;
    FPaidTime: TXSDateTime;
    FPaidTime_Specified: boolean;
    FLastEmailSentTime: TXSDateTime;
    FLastEmailSentTime_Specified: boolean;
    FSellerInvoiceTime: TXSDateTime;
    FSellerInvoiceTime_Specified: boolean;
    FIntegratedMerchantCreditCardEnabled: Boolean;
    FIntegratedMerchantCreditCardEnabled_Specified: boolean;
    procedure SetCheckoutStatus(Index: Integer; const ACheckoutStatusCodeType: CheckoutStatusCodeType);
    function  CheckoutStatus_Specified(Index: Integer): boolean;
    procedure SetPaidStatus(Index: Integer; const ASellingManagerPaidStatusCodeType: SellingManagerPaidStatusCodeType);
    function  PaidStatus_Specified(Index: Integer): boolean;
    procedure SetShippedStatus(Index: Integer; const ASellingManagerShippedStatusCodeType: SellingManagerShippedStatusCodeType);
    function  ShippedStatus_Specified(Index: Integer): boolean;
    procedure SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
    function  eBayPaymentStatus_Specified(Index: Integer): boolean;
    procedure SetPayPalTransactionID(Index: Integer; const Astring: string);
    function  PayPalTransactionID_Specified(Index: Integer): boolean;
    procedure SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
    function  PaymentMethodUsed_Specified(Index: Integer): boolean;
    procedure SetFeedbackReceived(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
    function  FeedbackReceived_Specified(Index: Integer): boolean;
    procedure SetFeedbackSent(Index: Integer; const ABoolean: Boolean);
    function  FeedbackSent_Specified(Index: Integer): boolean;
    procedure SetTotalEmailsSent(Index: Integer; const AInteger: Integer);
    function  TotalEmailsSent_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
    function  PaymentHoldStatus_Specified(Index: Integer): boolean;
    procedure SetSellerInvoiceNumber(Index: Integer; const Astring: string);
    function  SellerInvoiceNumber_Specified(Index: Integer): boolean;
    procedure SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippedTime_Specified(Index: Integer): boolean;
    procedure SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PaidTime_Specified(Index: Integer): boolean;
    procedure SetLastEmailSentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastEmailSentTime_Specified(Index: Integer): boolean;
    procedure SetSellerInvoiceTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  SellerInvoiceTime_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
    function  IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CheckoutStatus:                      CheckoutStatusCodeType               Index (IS_OPTN) read FCheckoutStatus write SetCheckoutStatus stored CheckoutStatus_Specified;
    property PaidStatus:                          SellingManagerPaidStatusCodeType     Index (IS_OPTN) read FPaidStatus write SetPaidStatus stored PaidStatus_Specified;
    property ShippedStatus:                       SellingManagerShippedStatusCodeType  Index (IS_OPTN) read FShippedStatus write SetShippedStatus stored ShippedStatus_Specified;
    property eBayPaymentStatus:                   PaymentStatusCodeType                Index (IS_OPTN) read FeBayPaymentStatus write SeteBayPaymentStatus stored eBayPaymentStatus_Specified;
    property PayPalTransactionID:                 string                               Index (IS_OPTN) read FPayPalTransactionID write SetPayPalTransactionID stored PayPalTransactionID_Specified;
    property PaymentMethodUsed:                   BuyerPaymentMethodCodeType           Index (IS_OPTN) read FPaymentMethodUsed write SetPaymentMethodUsed stored PaymentMethodUsed_Specified;
    property FeedbackReceived:                    CommentTypeCodeType                  Index (IS_OPTN) read FFeedbackReceived write SetFeedbackReceived stored FeedbackReceived_Specified;
    property FeedbackSent:                        Boolean                              Index (IS_OPTN) read FFeedbackSent write SetFeedbackSent stored FeedbackSent_Specified;
    property TotalEmailsSent:                     Integer                              Index (IS_OPTN) read FTotalEmailsSent write SetTotalEmailsSent stored TotalEmailsSent_Specified;
    property PaymentHoldStatus:                   PaymentHoldStatusCodeType            Index (IS_OPTN) read FPaymentHoldStatus write SetPaymentHoldStatus stored PaymentHoldStatus_Specified;
    property SellerInvoiceNumber:                 string                               Index (IS_OPTN) read FSellerInvoiceNumber write SetSellerInvoiceNumber stored SellerInvoiceNumber_Specified;
    property ShippedTime:                         TXSDateTime                          Index (IS_OPTN) read FShippedTime write SetShippedTime stored ShippedTime_Specified;
    property PaidTime:                            TXSDateTime                          Index (IS_OPTN) read FPaidTime write SetPaidTime stored PaidTime_Specified;
    property LastEmailSentTime:                   TXSDateTime                          Index (IS_OPTN) read FLastEmailSentTime write SetLastEmailSentTime stored LastEmailSentTime_Specified;
    property SellerInvoiceTime:                   TXSDateTime                          Index (IS_OPTN) read FSellerInvoiceTime write SetSellerInvoiceTime stored SellerInvoiceTime_Specified;
    property IntegratedMerchantCreditCardEnabled: Boolean                              Index (IS_OPTN) read FIntegratedMerchantCreditCardEnabled write SetIntegratedMerchantCreditCardEnabled stored IntegratedMerchantCreditCardEnabled_Specified;
  end;



  // ************************************************************************ //
  // XML       : CheckoutStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CheckoutStatusType = class(TRemotable)
  private
    FeBayPaymentStatus: PaymentStatusCodeType;
    FeBayPaymentStatus_Specified: boolean;
    FLastModifiedTime: TXSDateTime;
    FLastModifiedTime_Specified: boolean;
    FPaymentMethod: BuyerPaymentMethodCodeType;
    FPaymentMethod_Specified: boolean;
    FStatus: CompleteStatusCodeType;
    FStatus_Specified: boolean;
    FIntegratedMerchantCreditCardEnabled: Boolean;
    FIntegratedMerchantCreditCardEnabled_Specified: boolean;
    FeBayPaymentMismatchDetails: eBayPaymentMismatchDetailsType;
    FeBayPaymentMismatchDetails_Specified: boolean;
    FPaymentInstrument: BuyerPaymentInstrumentCodeType;
    FPaymentInstrument_Specified: boolean;
    procedure SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
    function  eBayPaymentStatus_Specified(Index: Integer): boolean;
    procedure SetLastModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastModifiedTime_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
    function  IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayPaymentMismatchDetails(Index: Integer; const AeBayPaymentMismatchDetailsType: eBayPaymentMismatchDetailsType);
    function  eBayPaymentMismatchDetails_Specified(Index: Integer): boolean;
    procedure SetPaymentInstrument(Index: Integer; const ABuyerPaymentInstrumentCodeType: BuyerPaymentInstrumentCodeType);
    function  PaymentInstrument_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property eBayPaymentStatus:                   PaymentStatusCodeType           Index (IS_OPTN) read FeBayPaymentStatus write SeteBayPaymentStatus stored eBayPaymentStatus_Specified;
    property LastModifiedTime:                    TXSDateTime                     Index (IS_OPTN) read FLastModifiedTime write SetLastModifiedTime stored LastModifiedTime_Specified;
    property PaymentMethod:                       BuyerPaymentMethodCodeType      Index (IS_OPTN) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property Status:                              CompleteStatusCodeType          Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property IntegratedMerchantCreditCardEnabled: Boolean                         Index (IS_OPTN) read FIntegratedMerchantCreditCardEnabled write SetIntegratedMerchantCreditCardEnabled stored IntegratedMerchantCreditCardEnabled_Specified;
    property eBayPaymentMismatchDetails:          eBayPaymentMismatchDetailsType  Index (IS_OPTN) read FeBayPaymentMismatchDetails write SeteBayPaymentMismatchDetails stored eBayPaymentMismatchDetails_Specified;
    property PaymentInstrument:                   BuyerPaymentInstrumentCodeType  Index (IS_OPTN) read FPaymentInstrument write SetPaymentInstrument stored PaymentInstrument_Specified;
  end;



  // ************************************************************************ //
  // XML       : TransactionStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TransactionStatusType = class(TRemotable)
  private
    FeBayPaymentStatus: PaymentStatusCodeType;
    FeBayPaymentStatus_Specified: boolean;
    FCheckoutStatus: CheckoutStatusCodeType;
    FCheckoutStatus_Specified: boolean;
    FLastTimeModified: TXSDateTime;
    FLastTimeModified_Specified: boolean;
    FPaymentMethodUsed: BuyerPaymentMethodCodeType;
    FPaymentMethodUsed_Specified: boolean;
    FCompleteStatus: CompleteStatusCodeType;
    FCompleteStatus_Specified: boolean;
    FBuyerSelectedShipping: Boolean;
    FBuyerSelectedShipping_Specified: boolean;
    FPaymentHoldStatus: PaymentHoldStatusCodeType;
    FPaymentHoldStatus_Specified: boolean;
    FIntegratedMerchantCreditCardEnabled: Boolean;
    FIntegratedMerchantCreditCardEnabled_Specified: boolean;
    FeBayPaymentMismatchDetails: eBayPaymentMismatchDetailsType;
    FeBayPaymentMismatchDetails_Specified: boolean;
    FInquiryStatus: InquiryStatusCodeType;
    FInquiryStatus_Specified: boolean;
    FReturnStatus: ReturnStatusCodeType;
    FReturnStatus_Specified: boolean;
    FPaymentInstrument: BuyerPaymentInstrumentCodeType;
    FPaymentInstrument_Specified: boolean;
    FDigitalStatus: DigitalStatusCodeType;
    FDigitalStatus_Specified: boolean;
    FCancelStatus: CancelStatusCodeType;
    FCancelStatus_Specified: boolean;
    procedure SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
    function  eBayPaymentStatus_Specified(Index: Integer): boolean;
    procedure SetCheckoutStatus(Index: Integer; const ACheckoutStatusCodeType: CheckoutStatusCodeType);
    function  CheckoutStatus_Specified(Index: Integer): boolean;
    procedure SetLastTimeModified(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastTimeModified_Specified(Index: Integer): boolean;
    procedure SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
    function  PaymentMethodUsed_Specified(Index: Integer): boolean;
    procedure SetCompleteStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
    function  CompleteStatus_Specified(Index: Integer): boolean;
    procedure SetBuyerSelectedShipping(Index: Integer; const ABoolean: Boolean);
    function  BuyerSelectedShipping_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
    function  PaymentHoldStatus_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
    function  IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayPaymentMismatchDetails(Index: Integer; const AeBayPaymentMismatchDetailsType: eBayPaymentMismatchDetailsType);
    function  eBayPaymentMismatchDetails_Specified(Index: Integer): boolean;
    procedure SetInquiryStatus(Index: Integer; const AInquiryStatusCodeType: InquiryStatusCodeType);
    function  InquiryStatus_Specified(Index: Integer): boolean;
    procedure SetReturnStatus(Index: Integer; const AReturnStatusCodeType: ReturnStatusCodeType);
    function  ReturnStatus_Specified(Index: Integer): boolean;
    procedure SetPaymentInstrument(Index: Integer; const ABuyerPaymentInstrumentCodeType: BuyerPaymentInstrumentCodeType);
    function  PaymentInstrument_Specified(Index: Integer): boolean;
    procedure SetDigitalStatus(Index: Integer; const ADigitalStatusCodeType: DigitalStatusCodeType);
    function  DigitalStatus_Specified(Index: Integer): boolean;
    procedure SetCancelStatus(Index: Integer; const ACancelStatusCodeType: CancelStatusCodeType);
    function  CancelStatus_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property eBayPaymentStatus:                   PaymentStatusCodeType           Index (IS_OPTN) read FeBayPaymentStatus write SeteBayPaymentStatus stored eBayPaymentStatus_Specified;
    property CheckoutStatus:                      CheckoutStatusCodeType          Index (IS_OPTN) read FCheckoutStatus write SetCheckoutStatus stored CheckoutStatus_Specified;
    property LastTimeModified:                    TXSDateTime                     Index (IS_OPTN) read FLastTimeModified write SetLastTimeModified stored LastTimeModified_Specified;
    property PaymentMethodUsed:                   BuyerPaymentMethodCodeType      Index (IS_OPTN) read FPaymentMethodUsed write SetPaymentMethodUsed stored PaymentMethodUsed_Specified;
    property CompleteStatus:                      CompleteStatusCodeType          Index (IS_OPTN) read FCompleteStatus write SetCompleteStatus stored CompleteStatus_Specified;
    property BuyerSelectedShipping:               Boolean                         Index (IS_OPTN) read FBuyerSelectedShipping write SetBuyerSelectedShipping stored BuyerSelectedShipping_Specified;
    property PaymentHoldStatus:                   PaymentHoldStatusCodeType       Index (IS_OPTN) read FPaymentHoldStatus write SetPaymentHoldStatus stored PaymentHoldStatus_Specified;
    property IntegratedMerchantCreditCardEnabled: Boolean                         Index (IS_OPTN) read FIntegratedMerchantCreditCardEnabled write SetIntegratedMerchantCreditCardEnabled stored IntegratedMerchantCreditCardEnabled_Specified;
    property eBayPaymentMismatchDetails:          eBayPaymentMismatchDetailsType  Index (IS_OPTN) read FeBayPaymentMismatchDetails write SeteBayPaymentMismatchDetails stored eBayPaymentMismatchDetails_Specified;
    property InquiryStatus:                       InquiryStatusCodeType           Index (IS_OPTN) read FInquiryStatus write SetInquiryStatus stored InquiryStatus_Specified;
    property ReturnStatus:                        ReturnStatusCodeType            Index (IS_OPTN) read FReturnStatus write SetReturnStatus stored ReturnStatus_Specified;
    property PaymentInstrument:                   BuyerPaymentInstrumentCodeType  Index (IS_OPTN) read FPaymentInstrument write SetPaymentInstrument stored PaymentInstrument_Specified;
    property DigitalStatus:                       DigitalStatusCodeType           Index (IS_OPTN) read FDigitalStatus write SetDigitalStatus stored DigitalStatus_Specified;
    property CancelStatus:                        CancelStatusCodeType            Index (IS_OPTN) read FCancelStatus write SetCancelStatus stored CancelStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : InventoryStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InventoryStatusType = class(TRemotable)
  private
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartPrice: AmountType;
    FStartPrice_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartPrice(Index: Integer; const AAmountType: AmountType);
    function  StartPrice_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SKU:        SKUType     Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property ItemID:     ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartPrice: AmountType  Index (IS_OPTN) read FStartPrice write SetStartPrice stored StartPrice_Specified;
    property Quantity:   Integer     Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExternalTransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExternalTransactionType = class(TRemotable)
  private
    FExternalTransactionID: string;
    FExternalTransactionID_Specified: boolean;
    FExternalTransactionTime: TXSDateTime;
    FExternalTransactionTime_Specified: boolean;
    FFeeOrCreditAmount: AmountType;
    FFeeOrCreditAmount_Specified: boolean;
    FPaymentOrRefundAmount: AmountType;
    FPaymentOrRefundAmount_Specified: boolean;
    FExternalTransactionStatus: PaymentTransactionStatusCodeType;
    FExternalTransactionStatus_Specified: boolean;
    procedure SetExternalTransactionID(Index: Integer; const Astring: string);
    function  ExternalTransactionID_Specified(Index: Integer): boolean;
    procedure SetExternalTransactionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExternalTransactionTime_Specified(Index: Integer): boolean;
    procedure SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
    function  FeeOrCreditAmount_Specified(Index: Integer): boolean;
    procedure SetPaymentOrRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  PaymentOrRefundAmount_Specified(Index: Integer): boolean;
    procedure SetExternalTransactionStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
    function  ExternalTransactionStatus_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ExternalTransactionID:     string                            Index (IS_OPTN) read FExternalTransactionID write SetExternalTransactionID stored ExternalTransactionID_Specified;
    property ExternalTransactionTime:   TXSDateTime                       Index (IS_OPTN) read FExternalTransactionTime write SetExternalTransactionTime stored ExternalTransactionTime_Specified;
    property FeeOrCreditAmount:         AmountType                        Index (IS_OPTN) read FFeeOrCreditAmount write SetFeeOrCreditAmount stored FeeOrCreditAmount_Specified;
    property PaymentOrRefundAmount:     AmountType                        Index (IS_OPTN) read FPaymentOrRefundAmount write SetPaymentOrRefundAmount stored PaymentOrRefundAmount_Specified;
    property ExternalTransactionStatus: PaymentTransactionStatusCodeType  Index (IS_OPTN) read FExternalTransactionStatus write SetExternalTransactionStatus stored ExternalTransactionStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : FlatShippingPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatShippingPreferencesType = class(TRemotable)
  private
    FAmountPerAdditionalItem: AmountType;
    FAmountPerAdditionalItem_Specified: boolean;
    FDeductionAmountPerAdditionalItem: AmountType;
    FDeductionAmountPerAdditionalItem_Specified: boolean;
    FFlatRateInsuranceRangeCost: Array_Of_FlatRateInsuranceRangeCostType;
    FFlatRateInsuranceRangeCost_Specified: boolean;
    FFlatShippingRateOption: FlatShippingRateOptionCodeType;
    FFlatShippingRateOption_Specified: boolean;
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceOption_Specified: boolean;
    procedure SetAmountPerAdditionalItem(Index: Integer; const AAmountType: AmountType);
    function  AmountPerAdditionalItem_Specified(Index: Integer): boolean;
    procedure SetDeductionAmountPerAdditionalItem(Index: Integer; const AAmountType: AmountType);
    function  DeductionAmountPerAdditionalItem_Specified(Index: Integer): boolean;
    procedure SetFlatRateInsuranceRangeCost(Index: Integer; const AArray_Of_FlatRateInsuranceRangeCostType: Array_Of_FlatRateInsuranceRangeCostType);
    function  FlatRateInsuranceRangeCost_Specified(Index: Integer): boolean;
    procedure SetFlatShippingRateOption(Index: Integer; const AFlatShippingRateOptionCodeType: FlatShippingRateOptionCodeType);
    function  FlatShippingRateOption_Specified(Index: Integer): boolean;
    procedure SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
    function  InsuranceOption_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AmountPerAdditionalItem:          AmountType                               Index (IS_OPTN) read FAmountPerAdditionalItem write SetAmountPerAdditionalItem stored AmountPerAdditionalItem_Specified;
    property DeductionAmountPerAdditionalItem: AmountType                               Index (IS_OPTN) read FDeductionAmountPerAdditionalItem write SetDeductionAmountPerAdditionalItem stored DeductionAmountPerAdditionalItem_Specified;
    property FlatRateInsuranceRangeCost:       Array_Of_FlatRateInsuranceRangeCostType  Index (IS_OPTN or IS_UNBD) read FFlatRateInsuranceRangeCost write SetFlatRateInsuranceRangeCost stored FlatRateInsuranceRangeCost_Specified;
    property FlatShippingRateOption:           FlatShippingRateOptionCodeType           Index (IS_OPTN) read FFlatShippingRateOption write SetFlatShippingRateOption stored FlatShippingRateOption_Specified;
    property InsuranceOption:                  InsuranceOptionCodeType                  Index (IS_OPTN) read FInsuranceOption write SetInsuranceOption stored InsuranceOption_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingInsuranceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingInsuranceType = class(TRemotable)
  private
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceOption_Specified: boolean;
    FFlatRateInsuranceRangeCost: Array_Of_FlatRateInsuranceRangeCostType;
    FFlatRateInsuranceRangeCost_Specified: boolean;
    procedure SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
    function  InsuranceOption_Specified(Index: Integer): boolean;
    procedure SetFlatRateInsuranceRangeCost(Index: Integer; const AArray_Of_FlatRateInsuranceRangeCostType: Array_Of_FlatRateInsuranceRangeCostType);
    function  FlatRateInsuranceRangeCost_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property InsuranceOption:            InsuranceOptionCodeType                  Index (IS_OPTN) read FInsuranceOption write SetInsuranceOption stored InsuranceOption_Specified;
    property FlatRateInsuranceRangeCost: Array_Of_FlatRateInsuranceRangeCostType  Index (IS_OPTN or IS_UNBD) read FFlatRateInsuranceRangeCost write SetFlatRateInsuranceRangeCost stored FlatRateInsuranceRangeCost_Specified;
  end;

  ItemIDArrayType = array of ItemIDType;        { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : SellerFavoriteItemPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerFavoriteItemPreferencesType = class(TRemotable)
  private
    FSearchKeywords: string;
    FSearchKeywords_Specified: boolean;
    FStoreCategoryID: Int64;
    FStoreCategoryID_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FSearchSortOrder: StoreItemListSortOrderCodeType;
    FSearchSortOrder_Specified: boolean;
    FMinPrice: AmountType;
    FMinPrice_Specified: boolean;
    FMaxPrice: AmountType;
    FMaxPrice_Specified: boolean;
    FFavoriteItemID: ItemIDArrayType;
    FFavoriteItemID_Specified: boolean;
    procedure SetSearchKeywords(Index: Integer; const Astring: string);
    function  SearchKeywords_Specified(Index: Integer): boolean;
    procedure SetStoreCategoryID(Index: Integer; const AInt64: Int64);
    function  StoreCategoryID_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetSearchSortOrder(Index: Integer; const AStoreItemListSortOrderCodeType: StoreItemListSortOrderCodeType);
    function  SearchSortOrder_Specified(Index: Integer): boolean;
    procedure SetMinPrice(Index: Integer; const AAmountType: AmountType);
    function  MinPrice_Specified(Index: Integer): boolean;
    procedure SetMaxPrice(Index: Integer; const AAmountType: AmountType);
    function  MaxPrice_Specified(Index: Integer): boolean;
    procedure SetFavoriteItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  FavoriteItemID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SearchKeywords:  string                          Index (IS_OPTN) read FSearchKeywords write SetSearchKeywords stored SearchKeywords_Specified;
    property StoreCategoryID: Int64                           Index (IS_OPTN) read FStoreCategoryID write SetStoreCategoryID stored StoreCategoryID_Specified;
    property ListingType:     ListingTypeCodeType             Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property SearchSortOrder: StoreItemListSortOrderCodeType  Index (IS_OPTN) read FSearchSortOrder write SetSearchSortOrder stored SearchSortOrder_Specified;
    property MinPrice:        AmountType                      Index (IS_OPTN) read FMinPrice write SetMinPrice stored MinPrice_Specified;
    property MaxPrice:        AmountType                      Index (IS_OPTN) read FMaxPrice write SetMaxPrice stored MaxPrice_Specified;
    property FavoriteItemID:  ItemIDArrayType                 Index (IS_OPTN or IS_UNBD) read FFavoriteItemID write SetFavoriteItemID stored FavoriteItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : PromotionalSaleType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalSaleType = class(TRemotable)
  private
    FPromotionalSaleID: Int64;
    FPromotionalSaleID_Specified: boolean;
    FPromotionalSaleName: string;
    FPromotionalSaleName_Specified: boolean;
    FPromotionalSaleItemIDArray: ItemIDArrayType;
    FPromotionalSaleItemIDArray_Specified: boolean;
    FStatus: PromotionalSaleStatusCodeType;
    FStatus_Specified: boolean;
    FDiscountType: DiscountCodeType;
    FDiscountType_Specified: boolean;
    FDiscountValue: Double;
    FDiscountValue_Specified: boolean;
    FPromotionalSaleStartTime: TXSDateTime;
    FPromotionalSaleStartTime_Specified: boolean;
    FPromotionalSaleEndTime: TXSDateTime;
    FPromotionalSaleEndTime_Specified: boolean;
    FPromotionalSaleType: PromotionalSaleTypeCodeType;
    FPromotionalSaleType_Specified: boolean;
    procedure SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
    function  PromotionalSaleID_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleName(Index: Integer; const Astring: string);
    function  PromotionalSaleName_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  PromotionalSaleItemIDArray_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetDiscountType(Index: Integer; const ADiscountCodeType: DiscountCodeType);
    function  DiscountType_Specified(Index: Integer): boolean;
    procedure SetDiscountValue(Index: Integer; const ADouble: Double);
    function  DiscountValue_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PromotionalSaleStartTime_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PromotionalSaleEndTime_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleType(Index: Integer; const APromotionalSaleTypeCodeType: PromotionalSaleTypeCodeType);
    function  PromotionalSaleType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PromotionalSaleID:          Int64                          Index (IS_OPTN) read FPromotionalSaleID write SetPromotionalSaleID stored PromotionalSaleID_Specified;
    property PromotionalSaleName:        string                         Index (IS_OPTN) read FPromotionalSaleName write SetPromotionalSaleName stored PromotionalSaleName_Specified;
    property PromotionalSaleItemIDArray: ItemIDArrayType                Index (IS_OPTN) read FPromotionalSaleItemIDArray write SetPromotionalSaleItemIDArray stored PromotionalSaleItemIDArray_Specified;
    property Status:                     PromotionalSaleStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property DiscountType:               DiscountCodeType               Index (IS_OPTN) read FDiscountType write SetDiscountType stored DiscountType_Specified;
    property DiscountValue:              Double                         Index (IS_OPTN) read FDiscountValue write SetDiscountValue stored DiscountValue_Specified;
    property PromotionalSaleStartTime:   TXSDateTime                    Index (IS_OPTN) read FPromotionalSaleStartTime write SetPromotionalSaleStartTime stored PromotionalSaleStartTime_Specified;
    property PromotionalSaleEndTime:     TXSDateTime                    Index (IS_OPTN) read FPromotionalSaleEndTime write SetPromotionalSaleEndTime stored PromotionalSaleEndTime_Specified;
    property PromotionalSaleType:        PromotionalSaleTypeCodeType    Index (IS_OPTN) read FPromotionalSaleType write SetPromotionalSaleType stored PromotionalSaleType_Specified;
  end;



  // ************************************************************************ //
  // XML       : InternationalShippingServiceOptionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InternationalShippingServiceOptionsType = class(TRemotable)
  private
    FShippingService: string;
    FShippingService_Specified: boolean;
    FShippingServiceCost: AmountType;
    FShippingServiceCost_Specified: boolean;
    FShippingServiceAdditionalCost: AmountType;
    FShippingServiceAdditionalCost_Specified: boolean;
    FShippingServicePriority: Integer;
    FShippingServicePriority_Specified: boolean;
    FShipToLocation: SellerExcludeShipToLocationPreferencesType;
    FShipToLocation_Specified: boolean;
    FShippingInsuranceCost: AmountType;
    FShippingInsuranceCost_Specified: boolean;
    FImportCharge: AmountType;
    FImportCharge_Specified: boolean;
    FShippingServiceCutOffTime: TXSDateTime;
    FShippingServiceCutOffTime_Specified: boolean;
    procedure SetShippingService(Index: Integer; const Astring: string);
    function  ShippingService_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceCost_Specified(Index: Integer): boolean;
    procedure SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
    procedure SetShippingServicePriority(Index: Integer; const AInteger: Integer);
    function  ShippingServicePriority_Specified(Index: Integer): boolean;
    procedure SetShipToLocation(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  ShipToLocation_Specified(Index: Integer): boolean;
    procedure SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingInsuranceCost_Specified(Index: Integer): boolean;
    procedure SetImportCharge(Index: Integer; const AAmountType: AmountType);
    function  ImportCharge_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCutOffTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippingServiceCutOffTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingService:               string                                      Index (IS_OPTN) read FShippingService write SetShippingService stored ShippingService_Specified;
    property ShippingServiceCost:           AmountType                                  Index (IS_OPTN) read FShippingServiceCost write SetShippingServiceCost stored ShippingServiceCost_Specified;
    property ShippingServiceAdditionalCost: AmountType                                  Index (IS_OPTN) read FShippingServiceAdditionalCost write SetShippingServiceAdditionalCost stored ShippingServiceAdditionalCost_Specified;
    property ShippingServicePriority:       Integer                                     Index (IS_OPTN) read FShippingServicePriority write SetShippingServicePriority stored ShippingServicePriority_Specified;
    property ShipToLocation:                SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FShipToLocation write SetShipToLocation stored ShipToLocation_Specified;
    property ShippingInsuranceCost:         AmountType                                  Index (IS_OPTN) read FShippingInsuranceCost write SetShippingInsuranceCost stored ShippingInsuranceCost_Specified;
    property ImportCharge:                  AmountType                                  Index (IS_OPTN) read FImportCharge write SetImportCharge stored ImportCharge_Specified;
    property ShippingServiceCutOffTime:     TXSDateTime                                 Index (IS_OPTN) read FShippingServiceCutOffTime write SetShippingServiceCutOffTime stored ShippingServiceCutOffTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShippingServiceOptionsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServiceOptionsType = class(TRemotable)
  private
    FShippingInsuranceCost: AmountType;
    FShippingInsuranceCost_Specified: boolean;
    FShippingService: string;
    FShippingService_Specified: boolean;
    FShippingServiceCost: AmountType;
    FShippingServiceCost_Specified: boolean;
    FShippingServiceAdditionalCost: AmountType;
    FShippingServiceAdditionalCost_Specified: boolean;
    FShippingServicePriority: Integer;
    FShippingServicePriority_Specified: boolean;
    FExpeditedService: Boolean;
    FExpeditedService_Specified: boolean;
    FShippingTimeMin: Integer;
    FShippingTimeMin_Specified: boolean;
    FShippingTimeMax: Integer;
    FShippingTimeMax_Specified: boolean;
    FFreeShipping: Boolean;
    FFreeShipping_Specified: boolean;
    FLocalPickup: Boolean;
    FLocalPickup_Specified: boolean;
    FImportCharge: AmountType;
    FImportCharge_Specified: boolean;
    FShippingPackageInfo: Array_Of_ShippingPackageInfoType;
    FShippingPackageInfo_Specified: boolean;
    FShippingServiceCutOffTime: TXSDateTime;
    FShippingServiceCutOffTime_Specified: boolean;
    FLogisticPlanType: string;
    FLogisticPlanType_Specified: boolean;
    procedure SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingInsuranceCost_Specified(Index: Integer): boolean;
    procedure SetShippingService(Index: Integer; const Astring: string);
    function  ShippingService_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceCost_Specified(Index: Integer): boolean;
    procedure SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
    procedure SetShippingServicePriority(Index: Integer; const AInteger: Integer);
    function  ShippingServicePriority_Specified(Index: Integer): boolean;
    procedure SetExpeditedService(Index: Integer; const ABoolean: Boolean);
    function  ExpeditedService_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMin(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMin_Specified(Index: Integer): boolean;
    procedure SetShippingTimeMax(Index: Integer; const AInteger: Integer);
    function  ShippingTimeMax_Specified(Index: Integer): boolean;
    procedure SetFreeShipping(Index: Integer; const ABoolean: Boolean);
    function  FreeShipping_Specified(Index: Integer): boolean;
    procedure SetLocalPickup(Index: Integer; const ABoolean: Boolean);
    function  LocalPickup_Specified(Index: Integer): boolean;
    procedure SetImportCharge(Index: Integer; const AAmountType: AmountType);
    function  ImportCharge_Specified(Index: Integer): boolean;
    procedure SetShippingPackageInfo(Index: Integer; const AArray_Of_ShippingPackageInfoType: Array_Of_ShippingPackageInfoType);
    function  ShippingPackageInfo_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCutOffTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippingServiceCutOffTime_Specified(Index: Integer): boolean;
    procedure SetLogisticPlanType(Index: Integer; const Astring: string);
    function  LogisticPlanType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingInsuranceCost:         AmountType                        Index (IS_OPTN) read FShippingInsuranceCost write SetShippingInsuranceCost stored ShippingInsuranceCost_Specified;
    property ShippingService:               string                            Index (IS_OPTN) read FShippingService write SetShippingService stored ShippingService_Specified;
    property ShippingServiceCost:           AmountType                        Index (IS_OPTN) read FShippingServiceCost write SetShippingServiceCost stored ShippingServiceCost_Specified;
    property ShippingServiceAdditionalCost: AmountType                        Index (IS_OPTN) read FShippingServiceAdditionalCost write SetShippingServiceAdditionalCost stored ShippingServiceAdditionalCost_Specified;
    property ShippingServicePriority:       Integer                           Index (IS_OPTN) read FShippingServicePriority write SetShippingServicePriority stored ShippingServicePriority_Specified;
    property ExpeditedService:              Boolean                           Index (IS_OPTN) read FExpeditedService write SetExpeditedService stored ExpeditedService_Specified;
    property ShippingTimeMin:               Integer                           Index (IS_OPTN) read FShippingTimeMin write SetShippingTimeMin stored ShippingTimeMin_Specified;
    property ShippingTimeMax:               Integer                           Index (IS_OPTN) read FShippingTimeMax write SetShippingTimeMax stored ShippingTimeMax_Specified;
    property FreeShipping:                  Boolean                           Index (IS_OPTN) read FFreeShipping write SetFreeShipping stored FreeShipping_Specified;
    property LocalPickup:                   Boolean                           Index (IS_OPTN) read FLocalPickup write SetLocalPickup stored LocalPickup_Specified;
    property ImportCharge:                  AmountType                        Index (IS_OPTN) read FImportCharge write SetImportCharge stored ImportCharge_Specified;
    property ShippingPackageInfo:           Array_Of_ShippingPackageInfoType  Index (IS_OPTN or IS_UNBD) read FShippingPackageInfo write SetShippingPackageInfo stored ShippingPackageInfo_Specified;
    property ShippingServiceCutOffTime:     TXSDateTime                       Index (IS_OPTN) read FShippingServiceCutOffTime write SetShippingServiceCutOffTime stored ShippingServiceCutOffTime_Specified;
    property LogisticPlanType:              string                            Index (IS_OPTN) read FLogisticPlanType write SetLogisticPlanType stored LogisticPlanType_Specified;
  end;



  // ************************************************************************ //
  // XML       : BiddingSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BiddingSummaryType = class(TRemotable)
  private
    FSummaryDays: Integer;
    FSummaryDays_Specified: boolean;
    FTotalBids: Integer;
    FTotalBids_Specified: boolean;
    FBidActivityWithSeller: Integer;
    FBidActivityWithSeller_Specified: boolean;
    FBidsToUniqueSellers: Integer;
    FBidsToUniqueSellers_Specified: boolean;
    FBidsToUniqueCategories: Integer;
    FBidsToUniqueCategories_Specified: boolean;
    FBidRetractions: Integer;
    FBidRetractions_Specified: boolean;
    FItemBidDetails: Array_Of_ItemBidDetailsType;
    FItemBidDetails_Specified: boolean;
    procedure SetSummaryDays(Index: Integer; const AInteger: Integer);
    function  SummaryDays_Specified(Index: Integer): boolean;
    procedure SetTotalBids(Index: Integer; const AInteger: Integer);
    function  TotalBids_Specified(Index: Integer): boolean;
    procedure SetBidActivityWithSeller(Index: Integer; const AInteger: Integer);
    function  BidActivityWithSeller_Specified(Index: Integer): boolean;
    procedure SetBidsToUniqueSellers(Index: Integer; const AInteger: Integer);
    function  BidsToUniqueSellers_Specified(Index: Integer): boolean;
    procedure SetBidsToUniqueCategories(Index: Integer; const AInteger: Integer);
    function  BidsToUniqueCategories_Specified(Index: Integer): boolean;
    procedure SetBidRetractions(Index: Integer; const AInteger: Integer);
    function  BidRetractions_Specified(Index: Integer): boolean;
    procedure SetItemBidDetails(Index: Integer; const AArray_Of_ItemBidDetailsType: Array_Of_ItemBidDetailsType);
    function  ItemBidDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SummaryDays:            Integer                      Index (IS_OPTN) read FSummaryDays write SetSummaryDays stored SummaryDays_Specified;
    property TotalBids:              Integer                      Index (IS_OPTN) read FTotalBids write SetTotalBids stored TotalBids_Specified;
    property BidActivityWithSeller:  Integer                      Index (IS_OPTN) read FBidActivityWithSeller write SetBidActivityWithSeller stored BidActivityWithSeller_Specified;
    property BidsToUniqueSellers:    Integer                      Index (IS_OPTN) read FBidsToUniqueSellers write SetBidsToUniqueSellers stored BidsToUniqueSellers_Specified;
    property BidsToUniqueCategories: Integer                      Index (IS_OPTN) read FBidsToUniqueCategories write SetBidsToUniqueCategories stored BidsToUniqueCategories_Specified;
    property BidRetractions:         Integer                      Index (IS_OPTN) read FBidRetractions write SetBidRetractions stored BidRetractions_Specified;
    property ItemBidDetails:         Array_Of_ItemBidDetailsType  Index (IS_OPTN or IS_UNBD) read FItemBidDetails write SetItemBidDetails stored ItemBidDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemBidDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemBidDetailsType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FBidCount: Integer;
    FBidCount_Specified: boolean;
    FSellerID: UserIDType;
    FSellerID_Specified: boolean;
    FLastBidTime: TXSDateTime;
    FLastBidTime_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetBidCount(Index: Integer; const AInteger: Integer);
    function  BidCount_Specified(Index: Integer): boolean;
    procedure SetSellerID(Index: Integer; const AUserIDType: UserIDType);
    function  SellerID_Specified(Index: Integer): boolean;
    procedure SetLastBidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastBidTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ItemID:      ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property CategoryID:  string       Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property BidCount:    Integer      Index (IS_OPTN) read FBidCount write SetBidCount stored BidCount_Specified;
    property SellerID:    UserIDType   Index (IS_OPTN) read FSellerID write SetSellerID stored SellerID_Specified;
    property LastBidTime: TXSDateTime  Index (IS_OPTN) read FLastBidTime write SetLastBidTime stored LastBidTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : BrandMPNIdentifierEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BrandMPNIdentifierEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BiddingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BiddingDetailsType = class(TRemotable)
  private
    FConvertedMaxBid: AmountType;
    FConvertedMaxBid_Specified: boolean;
    FMaxBid: AmountType;
    FMaxBid_Specified: boolean;
    FQuantityBid: Integer;
    FQuantityBid_Specified: boolean;
    FQuantityWon: Integer;
    FQuantityWon_Specified: boolean;
    FWinning: Boolean;
    FWinning_Specified: boolean;
    FBidAssistant: Boolean;
    FBidAssistant_Specified: boolean;
    procedure SetConvertedMaxBid(Index: Integer; const AAmountType: AmountType);
    function  ConvertedMaxBid_Specified(Index: Integer): boolean;
    procedure SetMaxBid(Index: Integer; const AAmountType: AmountType);
    function  MaxBid_Specified(Index: Integer): boolean;
    procedure SetQuantityBid(Index: Integer; const AInteger: Integer);
    function  QuantityBid_Specified(Index: Integer): boolean;
    procedure SetQuantityWon(Index: Integer; const AInteger: Integer);
    function  QuantityWon_Specified(Index: Integer): boolean;
    procedure SetWinning(Index: Integer; const ABoolean: Boolean);
    function  Winning_Specified(Index: Integer): boolean;
    procedure SetBidAssistant(Index: Integer; const ABoolean: Boolean);
    function  BidAssistant_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ConvertedMaxBid: AmountType  Index (IS_OPTN) read FConvertedMaxBid write SetConvertedMaxBid stored ConvertedMaxBid_Specified;
    property MaxBid:          AmountType  Index (IS_OPTN) read FMaxBid write SetMaxBid stored MaxBid_Specified;
    property QuantityBid:     Integer     Index (IS_OPTN) read FQuantityBid write SetQuantityBid stored QuantityBid_Specified;
    property QuantityWon:     Integer     Index (IS_OPTN) read FQuantityWon write SetQuantityWon stored QuantityWon_Specified;
    property Winning:         Boolean     Index (IS_OPTN) read FWinning write SetWinning stored Winning_Specified;
    property BidAssistant:    Boolean     Index (IS_OPTN) read FBidAssistant write SetBidAssistant stored BidAssistant_Specified;
  end;



  // ************************************************************************ //
  // XML       : BrandMPNType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BrandMPNType = class(TRemotable)
  private
    FBrand: string;
    FBrand_Specified: boolean;
    FMPN: string;
    FMPN_Specified: boolean;
    procedure SetBrand(Index: Integer; const Astring: string);
    function  Brand_Specified(Index: Integer): boolean;
    procedure SetMPN(Index: Integer; const Astring: string);
    function  MPN_Specified(Index: Integer): boolean;
  published
    property Brand: string  Index (IS_OPTN) read FBrand write SetBrand stored Brand_Specified;
    property MPN:   string  Index (IS_OPTN) read FMPN write SetMPN stored MPN_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerPackageEnclosureType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerPackageEnclosureType = class(TRemotable)
  private
    FText: string;
    Ftype_: PaymentInstructionCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const APaymentInstructionCodeType: PaymentInstructionCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property Text:  string                      Index (IS_TEXT) read FText write FText;
    property type_: PaymentInstructionCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;

  BuyerPackageEnclosuresType = array of BuyerPackageEnclosureType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : OrderType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OrderType = class(TRemotable)
  private
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FOrderStatus: OrderStatusCodeType;
    FOrderStatus_Specified: boolean;
    FAdjustmentAmount: AmountType;
    FAdjustmentAmount_Specified: boolean;
    FAmountPaid: AmountType;
    FAmountPaid_Specified: boolean;
    FAmountSaved: AmountType;
    FAmountSaved_Specified: boolean;
    FCheckoutStatus: CheckoutStatusType;
    FCheckoutStatus_Specified: boolean;
    FShippingDetails: ShippingDetailsType;
    FShippingDetails_Specified: boolean;
    FCreatingUserRole: TradingRoleCodeType;
    FCreatingUserRole_Specified: boolean;
    FCreatedTime: TXSDateTime;
    FCreatedTime_Specified: boolean;
    FPaymentMethods: Array_Of_BuyerPaymentMethodCodeType;
    FPaymentMethods_Specified: boolean;
    FSellerEmail: string;
    FSellerEmail_Specified: boolean;
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FShippingServiceSelected: ShippingServiceOptionsType;
    FShippingServiceSelected_Specified: boolean;
    FSubtotal: AmountType;
    FSubtotal_Specified: boolean;
    FTotal: AmountType;
    FTotal_Specified: boolean;
    FExternalTransaction: Array_Of_ExternalTransactionType;
    FExternalTransaction_Specified: boolean;
    FTransactionArray: TransactionArrayType;
    FTransactionArray_Specified: boolean;
    FBuyerUserID: UserIDType;
    FBuyerUserID_Specified: boolean;
    FPaidTime: TXSDateTime;
    FPaidTime_Specified: boolean;
    FShippedTime: TXSDateTime;
    FShippedTime_Specified: boolean;
    FIntegratedMerchantCreditCardEnabled: Boolean;
    FIntegratedMerchantCreditCardEnabled_Specified: boolean;
    FBundlePurchase: Boolean;
    FBundlePurchase_Specified: boolean;
    FBuyerCheckoutMessage: string;
    FBuyerCheckoutMessage_Specified: boolean;
    FEIASToken: string;
    FEIASToken_Specified: boolean;
    FPaymentHoldStatus: PaymentHoldStatusCodeType;
    FPaymentHoldStatus_Specified: boolean;
    FPaymentHoldDetails: PaymentHoldDetailType;
    FPaymentHoldDetails_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FRefundStatus: string;
    FRefundStatus_Specified: boolean;
    FRefundArray: RefundArrayType;
    FRefundArray_Specified: boolean;
    FIsMultiLegShipping: Boolean;
    FIsMultiLegShipping_Specified: boolean;
    FMultiLegShippingDetails: MultiLegShippingDetailsType;
    FMultiLegShippingDetails_Specified: boolean;
    FMonetaryDetails: PaymentsInformationType;
    FMonetaryDetails_Specified: boolean;
    FPickupDetails: PickupDetailsType;
    FPickupDetails_Specified: boolean;
    FPickupMethodSelected: PickupMethodSelectedType;
    FPickupMethodSelected_Specified: boolean;
    FSellerUserID: UserIDType;
    FSellerUserID_Specified: boolean;
    FSellerEIASToken: string;
    FSellerEIASToken_Specified: boolean;
    FCancelReason: string;
    FCancelReason_Specified: boolean;
    FCancelStatus: CancelStatusCodeType;
    FCancelStatus_Specified: boolean;
    FCancelReasonDetails: string;
    FCancelReasonDetails_Specified: boolean;
    FShippingConvenienceCharge: AmountType;
    FShippingConvenienceCharge_Specified: boolean;
    FCancelDetail: Array_Of_CancelDetailType;
    FCancelDetail_Specified: boolean;
    FLogisticsPlanType: string;
    FLogisticsPlanType_Specified: boolean;
    FBuyerTaxIdentifier: Array_Of_TaxIdentifierType;
    FBuyerTaxIdentifier_Specified: boolean;
    FBuyerPackageEnclosures: BuyerPackageEnclosuresType;
    FBuyerPackageEnclosures_Specified: boolean;
    FExtendedOrderID: string;
    FExtendedOrderID_Specified: boolean;
    FContainseBayPlusTransaction: Boolean;
    FContainseBayPlusTransaction_Specified: boolean;
    FeBayCollectAndRemitTax: Boolean;
    FeBayCollectAndRemitTax_Specified: boolean;
    FOrderLineItemCount: Int64;
    FOrderLineItemCount_Specified: boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetOrderStatus(Index: Integer; const AOrderStatusCodeType: OrderStatusCodeType);
    function  OrderStatus_Specified(Index: Integer): boolean;
    procedure SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  AdjustmentAmount_Specified(Index: Integer): boolean;
    procedure SetAmountPaid(Index: Integer; const AAmountType: AmountType);
    function  AmountPaid_Specified(Index: Integer): boolean;
    procedure SetAmountSaved(Index: Integer; const AAmountType: AmountType);
    function  AmountSaved_Specified(Index: Integer): boolean;
    procedure SetCheckoutStatus(Index: Integer; const ACheckoutStatusType: CheckoutStatusType);
    function  CheckoutStatus_Specified(Index: Integer): boolean;
    procedure SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
    function  ShippingDetails_Specified(Index: Integer): boolean;
    procedure SetCreatingUserRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  CreatingUserRole_Specified(Index: Integer): boolean;
    procedure SetCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreatedTime_Specified(Index: Integer): boolean;
    procedure SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
    function  PaymentMethods_Specified(Index: Integer): boolean;
    procedure SetSellerEmail(Index: Integer; const Astring: string);
    function  SellerEmail_Specified(Index: Integer): boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetShippingServiceSelected(Index: Integer; const AShippingServiceOptionsType: ShippingServiceOptionsType);
    function  ShippingServiceSelected_Specified(Index: Integer): boolean;
    procedure SetSubtotal(Index: Integer; const AAmountType: AmountType);
    function  Subtotal_Specified(Index: Integer): boolean;
    procedure SetTotal(Index: Integer; const AAmountType: AmountType);
    function  Total_Specified(Index: Integer): boolean;
    procedure SetExternalTransaction(Index: Integer; const AArray_Of_ExternalTransactionType: Array_Of_ExternalTransactionType);
    function  ExternalTransaction_Specified(Index: Integer): boolean;
    procedure SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
    function  TransactionArray_Specified(Index: Integer): boolean;
    procedure SetBuyerUserID(Index: Integer; const AUserIDType: UserIDType);
    function  BuyerUserID_Specified(Index: Integer): boolean;
    procedure SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PaidTime_Specified(Index: Integer): boolean;
    procedure SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippedTime_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
    function  IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
    procedure SetBundlePurchase(Index: Integer; const ABoolean: Boolean);
    function  BundlePurchase_Specified(Index: Integer): boolean;
    procedure SetBuyerCheckoutMessage(Index: Integer; const Astring: string);
    function  BuyerCheckoutMessage_Specified(Index: Integer): boolean;
    procedure SetEIASToken(Index: Integer; const Astring: string);
    function  EIASToken_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
    function  PaymentHoldStatus_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldDetails(Index: Integer; const APaymentHoldDetailType: PaymentHoldDetailType);
    function  PaymentHoldDetails_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetRefundStatus(Index: Integer; const Astring: string);
    function  RefundStatus_Specified(Index: Integer): boolean;
    procedure SetRefundArray(Index: Integer; const ARefundArrayType: RefundArrayType);
    function  RefundArray_Specified(Index: Integer): boolean;
    procedure SetIsMultiLegShipping(Index: Integer; const ABoolean: Boolean);
    function  IsMultiLegShipping_Specified(Index: Integer): boolean;
    procedure SetMultiLegShippingDetails(Index: Integer; const AMultiLegShippingDetailsType: MultiLegShippingDetailsType);
    function  MultiLegShippingDetails_Specified(Index: Integer): boolean;
    procedure SetMonetaryDetails(Index: Integer; const APaymentsInformationType: PaymentsInformationType);
    function  MonetaryDetails_Specified(Index: Integer): boolean;
    procedure SetPickupDetails(Index: Integer; const APickupDetailsType: PickupDetailsType);
    function  PickupDetails_Specified(Index: Integer): boolean;
    procedure SetPickupMethodSelected(Index: Integer; const APickupMethodSelectedType: PickupMethodSelectedType);
    function  PickupMethodSelected_Specified(Index: Integer): boolean;
    procedure SetSellerUserID(Index: Integer; const AUserIDType: UserIDType);
    function  SellerUserID_Specified(Index: Integer): boolean;
    procedure SetSellerEIASToken(Index: Integer; const Astring: string);
    function  SellerEIASToken_Specified(Index: Integer): boolean;
    procedure SetCancelReason(Index: Integer; const Astring: string);
    function  CancelReason_Specified(Index: Integer): boolean;
    procedure SetCancelStatus(Index: Integer; const ACancelStatusCodeType: CancelStatusCodeType);
    function  CancelStatus_Specified(Index: Integer): boolean;
    procedure SetCancelReasonDetails(Index: Integer; const Astring: string);
    function  CancelReasonDetails_Specified(Index: Integer): boolean;
    procedure SetShippingConvenienceCharge(Index: Integer; const AAmountType: AmountType);
    function  ShippingConvenienceCharge_Specified(Index: Integer): boolean;
    procedure SetCancelDetail(Index: Integer; const AArray_Of_CancelDetailType: Array_Of_CancelDetailType);
    function  CancelDetail_Specified(Index: Integer): boolean;
    procedure SetLogisticsPlanType(Index: Integer; const Astring: string);
    function  LogisticsPlanType_Specified(Index: Integer): boolean;
    procedure SetBuyerTaxIdentifier(Index: Integer; const AArray_Of_TaxIdentifierType: Array_Of_TaxIdentifierType);
    function  BuyerTaxIdentifier_Specified(Index: Integer): boolean;
    procedure SetBuyerPackageEnclosures(Index: Integer; const ABuyerPackageEnclosuresType: BuyerPackageEnclosuresType);
    function  BuyerPackageEnclosures_Specified(Index: Integer): boolean;
    procedure SetExtendedOrderID(Index: Integer; const Astring: string);
    function  ExtendedOrderID_Specified(Index: Integer): boolean;
    procedure SetContainseBayPlusTransaction(Index: Integer; const ABoolean: Boolean);
    function  ContainseBayPlusTransaction_Specified(Index: Integer): boolean;
    procedure SeteBayCollectAndRemitTax(Index: Integer; const ABoolean: Boolean);
    function  eBayCollectAndRemitTax_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemCount(Index: Integer; const AInt64: Int64);
    function  OrderLineItemCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OrderID:                             OrderIDType                          Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property OrderStatus:                         OrderStatusCodeType                  Index (IS_OPTN) read FOrderStatus write SetOrderStatus stored OrderStatus_Specified;
    property AdjustmentAmount:                    AmountType                           Index (IS_OPTN) read FAdjustmentAmount write SetAdjustmentAmount stored AdjustmentAmount_Specified;
    property AmountPaid:                          AmountType                           Index (IS_OPTN) read FAmountPaid write SetAmountPaid stored AmountPaid_Specified;
    property AmountSaved:                         AmountType                           Index (IS_OPTN) read FAmountSaved write SetAmountSaved stored AmountSaved_Specified;
    property CheckoutStatus:                      CheckoutStatusType                   Index (IS_OPTN) read FCheckoutStatus write SetCheckoutStatus stored CheckoutStatus_Specified;
    property ShippingDetails:                     ShippingDetailsType                  Index (IS_OPTN) read FShippingDetails write SetShippingDetails stored ShippingDetails_Specified;
    property CreatingUserRole:                    TradingRoleCodeType                  Index (IS_OPTN) read FCreatingUserRole write SetCreatingUserRole stored CreatingUserRole_Specified;
    property CreatedTime:                         TXSDateTime                          Index (IS_OPTN) read FCreatedTime write SetCreatedTime stored CreatedTime_Specified;
    property PaymentMethods:                      Array_Of_BuyerPaymentMethodCodeType  Index (IS_OPTN or IS_UNBD) read FPaymentMethods write SetPaymentMethods stored PaymentMethods_Specified;
    property SellerEmail:                         string                               Index (IS_OPTN) read FSellerEmail write SetSellerEmail stored SellerEmail_Specified;
    property ShippingAddress:                     AddressType                          Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property ShippingServiceSelected:             ShippingServiceOptionsType           Index (IS_OPTN) read FShippingServiceSelected write SetShippingServiceSelected stored ShippingServiceSelected_Specified;
    property Subtotal:                            AmountType                           Index (IS_OPTN) read FSubtotal write SetSubtotal stored Subtotal_Specified;
    property Total:                               AmountType                           Index (IS_OPTN) read FTotal write SetTotal stored Total_Specified;
    property ExternalTransaction:                 Array_Of_ExternalTransactionType     Index (IS_OPTN or IS_UNBD) read FExternalTransaction write SetExternalTransaction stored ExternalTransaction_Specified;
    property TransactionArray:                    TransactionArrayType                 Index (IS_OPTN) read FTransactionArray write SetTransactionArray stored TransactionArray_Specified;
    property BuyerUserID:                         UserIDType                           Index (IS_OPTN) read FBuyerUserID write SetBuyerUserID stored BuyerUserID_Specified;
    property PaidTime:                            TXSDateTime                          Index (IS_OPTN) read FPaidTime write SetPaidTime stored PaidTime_Specified;
    property ShippedTime:                         TXSDateTime                          Index (IS_OPTN) read FShippedTime write SetShippedTime stored ShippedTime_Specified;
    property IntegratedMerchantCreditCardEnabled: Boolean                              Index (IS_OPTN) read FIntegratedMerchantCreditCardEnabled write SetIntegratedMerchantCreditCardEnabled stored IntegratedMerchantCreditCardEnabled_Specified;
    property BundlePurchase:                      Boolean                              Index (IS_OPTN) read FBundlePurchase write SetBundlePurchase stored BundlePurchase_Specified;
    property BuyerCheckoutMessage:                string                               Index (IS_OPTN) read FBuyerCheckoutMessage write SetBuyerCheckoutMessage stored BuyerCheckoutMessage_Specified;
    property EIASToken:                           string                               Index (IS_OPTN) read FEIASToken write SetEIASToken stored EIASToken_Specified;
    property PaymentHoldStatus:                   PaymentHoldStatusCodeType            Index (IS_OPTN) read FPaymentHoldStatus write SetPaymentHoldStatus stored PaymentHoldStatus_Specified;
    property PaymentHoldDetails:                  PaymentHoldDetailType                Index (IS_OPTN) read FPaymentHoldDetails write SetPaymentHoldDetails stored PaymentHoldDetails_Specified;
    property RefundAmount:                        AmountType                           Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property RefundStatus:                        string                               Index (IS_OPTN) read FRefundStatus write SetRefundStatus stored RefundStatus_Specified;
    property RefundArray:                         RefundArrayType                      Index (IS_OPTN) read FRefundArray write SetRefundArray stored RefundArray_Specified;
    property IsMultiLegShipping:                  Boolean                              Index (IS_OPTN) read FIsMultiLegShipping write SetIsMultiLegShipping stored IsMultiLegShipping_Specified;
    property MultiLegShippingDetails:             MultiLegShippingDetailsType          Index (IS_OPTN) read FMultiLegShippingDetails write SetMultiLegShippingDetails stored MultiLegShippingDetails_Specified;
    property MonetaryDetails:                     PaymentsInformationType              Index (IS_OPTN) read FMonetaryDetails write SetMonetaryDetails stored MonetaryDetails_Specified;
    property PickupDetails:                       PickupDetailsType                    Index (IS_OPTN) read FPickupDetails write SetPickupDetails stored PickupDetails_Specified;
    property PickupMethodSelected:                PickupMethodSelectedType             Index (IS_OPTN) read FPickupMethodSelected write SetPickupMethodSelected stored PickupMethodSelected_Specified;
    property SellerUserID:                        UserIDType                           Index (IS_OPTN) read FSellerUserID write SetSellerUserID stored SellerUserID_Specified;
    property SellerEIASToken:                     string                               Index (IS_OPTN) read FSellerEIASToken write SetSellerEIASToken stored SellerEIASToken_Specified;
    property CancelReason:                        string                               Index (IS_OPTN) read FCancelReason write SetCancelReason stored CancelReason_Specified;
    property CancelStatus:                        CancelStatusCodeType                 Index (IS_OPTN) read FCancelStatus write SetCancelStatus stored CancelStatus_Specified;
    property CancelReasonDetails:                 string                               Index (IS_OPTN) read FCancelReasonDetails write SetCancelReasonDetails stored CancelReasonDetails_Specified;
    property ShippingConvenienceCharge:           AmountType                           Index (IS_OPTN) read FShippingConvenienceCharge write SetShippingConvenienceCharge stored ShippingConvenienceCharge_Specified;
    property CancelDetail:                        Array_Of_CancelDetailType            Index (IS_OPTN or IS_UNBD) read FCancelDetail write SetCancelDetail stored CancelDetail_Specified;
    property LogisticsPlanType:                   string                               Index (IS_OPTN) read FLogisticsPlanType write SetLogisticsPlanType stored LogisticsPlanType_Specified;
    property BuyerTaxIdentifier:                  Array_Of_TaxIdentifierType           Index (IS_OPTN or IS_UNBD) read FBuyerTaxIdentifier write SetBuyerTaxIdentifier stored BuyerTaxIdentifier_Specified;
    property BuyerPackageEnclosures:              BuyerPackageEnclosuresType           Index (IS_OPTN) read FBuyerPackageEnclosures write SetBuyerPackageEnclosures stored BuyerPackageEnclosures_Specified;
    property ExtendedOrderID:                     string                               Index (IS_OPTN) read FExtendedOrderID write SetExtendedOrderID stored ExtendedOrderID_Specified;
    property ContainseBayPlusTransaction:         Boolean                              Index (IS_OPTN) read FContainseBayPlusTransaction write SetContainseBayPlusTransaction stored ContainseBayPlusTransaction_Specified;
    property eBayCollectAndRemitTax:              Boolean                              Index (IS_OPTN) read FeBayCollectAndRemitTax write SeteBayCollectAndRemitTax stored eBayCollectAndRemitTax_Specified;
    property OrderLineItemCount:                  Int64                                Index (IS_OPTN) read FOrderLineItemCount write SetOrderLineItemCount stored OrderLineItemCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : BusinessSellerDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BusinessSellerDetailsType = class(TRemotable)
  private
    FAddress: AddressType;
    FAddress_Specified: boolean;
    FFax: string;
    FFax_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FAdditionalContactInformation: string;
    FAdditionalContactInformation_Specified: boolean;
    FTradeRegistrationNumber: string;
    FTradeRegistrationNumber_Specified: boolean;
    FLegalInvoice: Boolean;
    FLegalInvoice_Specified: boolean;
    FTermsAndConditions: string;
    FTermsAndConditions_Specified: boolean;
    FVATDetails: VATDetailsType;
    FVATDetails_Specified: boolean;
    procedure SetAddress(Index: Integer; const AAddressType: AddressType);
    function  Address_Specified(Index: Integer): boolean;
    procedure SetFax(Index: Integer; const Astring: string);
    function  Fax_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetAdditionalContactInformation(Index: Integer; const Astring: string);
    function  AdditionalContactInformation_Specified(Index: Integer): boolean;
    procedure SetTradeRegistrationNumber(Index: Integer; const Astring: string);
    function  TradeRegistrationNumber_Specified(Index: Integer): boolean;
    procedure SetLegalInvoice(Index: Integer; const ABoolean: Boolean);
    function  LegalInvoice_Specified(Index: Integer): boolean;
    procedure SetTermsAndConditions(Index: Integer; const Astring: string);
    function  TermsAndConditions_Specified(Index: Integer): boolean;
    procedure SetVATDetails(Index: Integer; const AVATDetailsType: VATDetailsType);
    function  VATDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Address:                      AddressType     Index (IS_OPTN) read FAddress write SetAddress stored Address_Specified;
    property Fax:                          string          Index (IS_OPTN) read FFax write SetFax stored Fax_Specified;
    property Email:                        string          Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
    property AdditionalContactInformation: string          Index (IS_OPTN) read FAdditionalContactInformation write SetAdditionalContactInformation stored AdditionalContactInformation_Specified;
    property TradeRegistrationNumber:      string          Index (IS_OPTN) read FTradeRegistrationNumber write SetTradeRegistrationNumber stored TradeRegistrationNumber_Specified;
    property LegalInvoice:                 Boolean         Index (IS_OPTN) read FLegalInvoice write SetLegalInvoice stored LegalInvoice_Specified;
    property TermsAndConditions:           string          Index (IS_OPTN) read FTermsAndConditions write SetTermsAndConditions stored TermsAndConditions_Specified;
    property VATDetails:                   VATDetailsType  Index (IS_OPTN) read FVATDetails write SetVATDetails stored VATDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerGuaranteeEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerGuaranteeEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BasicAmountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BasicAmountType = class(TRemotable)
  private
    FText: string;
    FcurrencyID: CurrencyCodeType;
  published
    property Text:       string            Index (IS_TEXT) read FText write FText;
    property currencyID: CurrencyCodeType  Index (IS_ATTR) read FcurrencyID write FcurrencyID;
  end;



  // ************************************************************************ //
  // XML       : BasicUpgradePackEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BasicUpgradePackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BestOfferAutoAcceptEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : Base64BinaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  Base64BinaryType = class(TRemotable)
  private
    FText: TByteDynArray;
    FcontentType: string;
    FcontentType_Specified: boolean;
    procedure SetcontentType(Index: Integer; const Astring: string);
    function  contentType_Specified(Index: Integer): boolean;
  published
    property Text:        TByteDynArray  Index (IS_TEXT) read FText write FText;
    property contentType: string         Index (IS_ATTR or IS_OPTN) read FcontentType write SetcontentType stored contentType_Specified;
  end;



  // ************************************************************************ //
  // XML       : BestOfferAutoDeclineEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BestOfferEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BidGroupType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidGroupType = class(TRemotable)
  private
    FBidGroupItem: Array_Of_BidGroupItemType;
    FBidGroupItem_Specified: boolean;
    FBidGroupID: Int64;
    FBidGroupID_Specified: boolean;
    FBidGroupName: string;
    FBidGroupName_Specified: boolean;
    FBidGroupStatus: BidGroupStatusCodeType;
    FBidGroupStatus_Specified: boolean;
    procedure SetBidGroupItem(Index: Integer; const AArray_Of_BidGroupItemType: Array_Of_BidGroupItemType);
    function  BidGroupItem_Specified(Index: Integer): boolean;
    procedure SetBidGroupID(Index: Integer; const AInt64: Int64);
    function  BidGroupID_Specified(Index: Integer): boolean;
    procedure SetBidGroupName(Index: Integer; const Astring: string);
    function  BidGroupName_Specified(Index: Integer): boolean;
    procedure SetBidGroupStatus(Index: Integer; const ABidGroupStatusCodeType: BidGroupStatusCodeType);
    function  BidGroupStatus_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BidGroupItem:   Array_Of_BidGroupItemType  Index (IS_OPTN or IS_UNBD) read FBidGroupItem write SetBidGroupItem stored BidGroupItem_Specified;
    property BidGroupID:     Int64                      Index (IS_OPTN) read FBidGroupID write SetBidGroupID stored BidGroupID_Specified;
    property BidGroupName:   string                     Index (IS_OPTN) read FBidGroupName write SetBidGroupName stored BidGroupName_Specified;
    property BidGroupStatus: BidGroupStatusCodeType     Index (IS_OPTN) read FBidGroupStatus write SetBidGroupStatus stored BidGroupStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : BidGroupItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidGroupItemType = class(TRemotable)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FBidGroupItemStatus: BidGroupItemStatusCodeType;
    FBidGroupItemStatus_Specified: boolean;
    FMaxBidAmount: AmountType;
    FMaxBidAmount_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetBidGroupItemStatus(Index: Integer; const ABidGroupItemStatusCodeType: BidGroupItemStatusCodeType);
    function  BidGroupItemStatus_Specified(Index: Integer): boolean;
    procedure SetMaxBidAmount(Index: Integer; const AAmountType: AmountType);
    function  MaxBidAmount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Item:               ItemType                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property BidGroupItemStatus: BidGroupItemStatusCodeType  Index (IS_OPTN) read FBidGroupItemStatus write SetBidGroupItemStatus stored BidGroupItemStatus_Specified;
    property MaxBidAmount:       AmountType                  Index (IS_OPTN) read FMaxBidAmount write SetMaxBidAmount stored MaxBidAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : BestOfferCounterEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferCounterEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BestOfferDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferDetailsType = class(TRemotable)
  private
    FBestOfferCount: Integer;
    FBestOfferCount_Specified: boolean;
    FBestOfferEnabled: Boolean;
    FBestOfferEnabled_Specified: boolean;
    FBestOffer: AmountType;
    FBestOffer_Specified: boolean;
    FBestOfferStatus: BestOfferStatusCodeType;
    FBestOfferStatus_Specified: boolean;
    FBestOfferType: BestOfferTypeCodeType;
    FBestOfferType_Specified: boolean;
    FNewBestOffer: Boolean;
    FNewBestOffer_Specified: boolean;
    procedure SetBestOfferCount(Index: Integer; const AInteger: Integer);
    function  BestOfferCount_Specified(Index: Integer): boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOffer(Index: Integer; const AAmountType: AmountType);
    function  BestOffer_Specified(Index: Integer): boolean;
    procedure SetBestOfferStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
    function  BestOfferStatus_Specified(Index: Integer): boolean;
    procedure SetBestOfferType(Index: Integer; const ABestOfferTypeCodeType: BestOfferTypeCodeType);
    function  BestOfferType_Specified(Index: Integer): boolean;
    procedure SetNewBestOffer(Index: Integer; const ABoolean: Boolean);
    function  NewBestOffer_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BestOfferCount:   Integer                  Index (IS_OPTN) read FBestOfferCount write SetBestOfferCount stored BestOfferCount_Specified;
    property BestOfferEnabled: Boolean                  Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property BestOffer:        AmountType               Index (IS_OPTN) read FBestOffer write SetBestOffer stored BestOffer_Specified;
    property BestOfferStatus:  BestOfferStatusCodeType  Index (IS_OPTN) read FBestOfferStatus write SetBestOfferStatus stored BestOfferStatus_Specified;
    property BestOfferType:    BestOfferTypeCodeType    Index (IS_OPTN) read FBestOfferType write SetBestOfferType stored BestOfferType_Specified;
    property NewBestOffer:     Boolean                  Index (IS_OPTN) read FNewBestOffer write SetNewBestOffer stored NewBestOffer_Specified;
  end;



  // ************************************************************************ //
  // XML       : BestOfferType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferType = class(TRemotable)
  private
    FBestOfferID: BestOfferIDType;
    FBestOfferID_Specified: boolean;
    FExpirationTime: TXSDateTime;
    FExpirationTime_Specified: boolean;
    FBuyer: UserType;
    FBuyer_Specified: boolean;
    FPrice: AmountType;
    FPrice_Specified: boolean;
    FStatus: BestOfferStatusCodeType;
    FStatus_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FBuyerMessage: string;
    FBuyerMessage_Specified: boolean;
    FSellerMessage: string;
    FSellerMessage_Specified: boolean;
    FBestOfferCodeType: BestOfferTypeCodeType;
    FBestOfferCodeType_Specified: boolean;
    FCallStatus: string;
    FCallStatus_Specified: boolean;
    FNewBestOffer: Boolean;
    FNewBestOffer_Specified: boolean;
    FImmediatePayEligible: Boolean;
    FImmediatePayEligible_Specified: boolean;
    procedure SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
    function  BestOfferID_Specified(Index: Integer): boolean;
    procedure SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ExpirationTime_Specified(Index: Integer): boolean;
    procedure SetBuyer(Index: Integer; const AUserType: UserType);
    function  Buyer_Specified(Index: Integer): boolean;
    procedure SetPrice(Index: Integer; const AAmountType: AmountType);
    function  Price_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetBuyerMessage(Index: Integer; const Astring: string);
    function  BuyerMessage_Specified(Index: Integer): boolean;
    procedure SetSellerMessage(Index: Integer; const Astring: string);
    function  SellerMessage_Specified(Index: Integer): boolean;
    procedure SetBestOfferCodeType(Index: Integer; const ABestOfferTypeCodeType: BestOfferTypeCodeType);
    function  BestOfferCodeType_Specified(Index: Integer): boolean;
    procedure SetCallStatus(Index: Integer; const Astring: string);
    function  CallStatus_Specified(Index: Integer): boolean;
    procedure SetNewBestOffer(Index: Integer; const ABoolean: Boolean);
    function  NewBestOffer_Specified(Index: Integer): boolean;
    procedure SetImmediatePayEligible(Index: Integer; const ABoolean: Boolean);
    function  ImmediatePayEligible_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BestOfferID:          BestOfferIDType          Index (IS_OPTN) read FBestOfferID write SetBestOfferID stored BestOfferID_Specified;
    property ExpirationTime:       TXSDateTime              Index (IS_OPTN) read FExpirationTime write SetExpirationTime stored ExpirationTime_Specified;
    property Buyer:                UserType                 Index (IS_OPTN) read FBuyer write SetBuyer stored Buyer_Specified;
    property Price:                AmountType               Index (IS_OPTN) read FPrice write SetPrice stored Price_Specified;
    property Status:               BestOfferStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Quantity:             Integer                  Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property BuyerMessage:         string                   Index (IS_OPTN) read FBuyerMessage write SetBuyerMessage stored BuyerMessage_Specified;
    property SellerMessage:        string                   Index (IS_OPTN) read FSellerMessage write SetSellerMessage stored SellerMessage_Specified;
    property BestOfferCodeType:    BestOfferTypeCodeType    Index (IS_OPTN) read FBestOfferCodeType write SetBestOfferCodeType stored BestOfferCodeType_Specified;
    property CallStatus:           string                   Index (IS_OPTN) read FCallStatus write SetCallStatus stored CallStatus_Specified;
    property NewBestOffer:         Boolean                  Index (IS_OPTN) read FNewBestOffer write SetNewBestOffer stored NewBestOffer_Specified;
    property ImmediatePayEligible: Boolean                  Index (IS_OPTN) read FImmediatePayEligible write SetImmediatePayEligible stored ImmediatePayEligible_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CancelDetailType = class(TRemotable)
  private
    FCancelReason: string;
    FCancelReason_Specified: boolean;
    FCancelReasonDetails: string;
    FCancelReasonDetails_Specified: boolean;
    FCancelIntiator: string;
    FCancelIntiator_Specified: boolean;
    FCancelIntiationDate: TXSDateTime;
    FCancelIntiationDate_Specified: boolean;
    FCancelCompleteDate: TXSDateTime;
    FCancelCompleteDate_Specified: boolean;
    procedure SetCancelReason(Index: Integer; const Astring: string);
    function  CancelReason_Specified(Index: Integer): boolean;
    procedure SetCancelReasonDetails(Index: Integer; const Astring: string);
    function  CancelReasonDetails_Specified(Index: Integer): boolean;
    procedure SetCancelIntiator(Index: Integer; const Astring: string);
    function  CancelIntiator_Specified(Index: Integer): boolean;
    procedure SetCancelIntiationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CancelIntiationDate_Specified(Index: Integer): boolean;
    procedure SetCancelCompleteDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CancelCompleteDate_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CancelReason:        string       Index (IS_OPTN) read FCancelReason write SetCancelReason stored CancelReason_Specified;
    property CancelReasonDetails: string       Index (IS_OPTN) read FCancelReasonDetails write SetCancelReasonDetails stored CancelReasonDetails_Specified;
    property CancelIntiator:      string       Index (IS_OPTN) read FCancelIntiator write SetCancelIntiator stored CancelIntiator_Specified;
    property CancelIntiationDate: TXSDateTime  Index (IS_OPTN) read FCancelIntiationDate write SetCancelIntiationDate stored CancelIntiationDate_Specified;
    property CancelCompleteDate:  TXSDateTime  Index (IS_OPTN) read FCancelCompleteDate write SetCancelCompleteDate stored CancelCompleteDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculatedShippingPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingPreferencesType = class(TRemotable)
  private
    FCalculatedShippingAmountForEntireOrder: AmountType;
    FCalculatedShippingAmountForEntireOrder_Specified: boolean;
    FCalculatedShippingChargeOption: CalculatedShippingChargeOptionCodeType;
    FCalculatedShippingChargeOption_Specified: boolean;
    FCalculatedShippingRateOption: CalculatedShippingRateOptionCodeType;
    FCalculatedShippingRateOption_Specified: boolean;
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceOption_Specified: boolean;
    procedure SetCalculatedShippingAmountForEntireOrder(Index: Integer; const AAmountType: AmountType);
    function  CalculatedShippingAmountForEntireOrder_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingChargeOption(Index: Integer; const ACalculatedShippingChargeOptionCodeType: CalculatedShippingChargeOptionCodeType);
    function  CalculatedShippingChargeOption_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingRateOption(Index: Integer; const ACalculatedShippingRateOptionCodeType: CalculatedShippingRateOptionCodeType);
    function  CalculatedShippingRateOption_Specified(Index: Integer): boolean;
    procedure SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
    function  InsuranceOption_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CalculatedShippingAmountForEntireOrder: AmountType                              Index (IS_OPTN) read FCalculatedShippingAmountForEntireOrder write SetCalculatedShippingAmountForEntireOrder stored CalculatedShippingAmountForEntireOrder_Specified;
    property CalculatedShippingChargeOption:         CalculatedShippingChargeOptionCodeType  Index (IS_OPTN) read FCalculatedShippingChargeOption write SetCalculatedShippingChargeOption stored CalculatedShippingChargeOption_Specified;
    property CalculatedShippingRateOption:           CalculatedShippingRateOptionCodeType    Index (IS_OPTN) read FCalculatedShippingRateOption write SetCalculatedShippingRateOption stored CalculatedShippingRateOption_Specified;
    property InsuranceOption:                        InsuranceOptionCodeType                 Index (IS_OPTN) read FInsuranceOption write SetInsuranceOption stored InsuranceOption_Specified;
  end;



  // ************************************************************************ //
  // XML       : CategoryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryType = class(TRemotable)
  private
    FBestOfferEnabled: Boolean;
    FBestOfferEnabled_Specified: boolean;
    FAutoPayEnabled: Boolean;
    FAutoPayEnabled_Specified: boolean;
    FB2BVATEnabled: Boolean;
    FB2BVATEnabled_Specified: boolean;
    FCatalogEnabled: Boolean;
    FCatalogEnabled_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategoryLevel: Integer;
    FCategoryLevel_Specified: boolean;
    FCategoryName: string;
    FCategoryName_Specified: boolean;
    FCategoryParentID: SellerExcludeShipToLocationPreferencesType;
    FCategoryParentID_Specified: boolean;
    FCategoryParentName: SellerExcludeShipToLocationPreferencesType;
    FCategoryParentName_Specified: boolean;
    FProductSearchPageAvailable: Boolean;
    FProductSearchPageAvailable_Specified: boolean;
    FProductFinderIDs: Array_Of_ExtendedProductFinderIDType;
    FProductFinderIDs_Specified: boolean;
    FCharacteristicsSets: Array_Of_CharacteristicsSetType;
    FCharacteristicsSets_Specified: boolean;
    FExpired: Boolean;
    FExpired_Specified: boolean;
    FIntlAutosFixedCat: Boolean;
    FIntlAutosFixedCat_Specified: boolean;
    FLeafCategory: Boolean;
    FLeafCategory_Specified: boolean;
    FVirtual_: Boolean;
    FVirtual__Specified: boolean;
    FNumOfItems: Integer;
    FNumOfItems_Specified: boolean;
    FSellerGuaranteeEligible: Boolean;
    FSellerGuaranteeEligible_Specified: boolean;
    FORPA: Boolean;
    FORPA_Specified: boolean;
    FORRA: Boolean;
    FORRA_Specified: boolean;
    FLSD: Boolean;
    FLSD_Specified: boolean;
    FKeywords: string;
    FKeywords_Specified: boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetAutoPayEnabled(Index: Integer; const ABoolean: Boolean);
    function  AutoPayEnabled_Specified(Index: Integer): boolean;
    procedure SetB2BVATEnabled(Index: Integer; const ABoolean: Boolean);
    function  B2BVATEnabled_Specified(Index: Integer): boolean;
    procedure SetCatalogEnabled(Index: Integer; const ABoolean: Boolean);
    function  CatalogEnabled_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategoryLevel(Index: Integer; const AInteger: Integer);
    function  CategoryLevel_Specified(Index: Integer): boolean;
    procedure SetCategoryName(Index: Integer; const Astring: string);
    function  CategoryName_Specified(Index: Integer): boolean;
    procedure SetCategoryParentID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CategoryParentID_Specified(Index: Integer): boolean;
    procedure SetCategoryParentName(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CategoryParentName_Specified(Index: Integer): boolean;
    procedure SetProductSearchPageAvailable(Index: Integer; const ABoolean: Boolean);
    function  ProductSearchPageAvailable_Specified(Index: Integer): boolean;
    procedure SetProductFinderIDs(Index: Integer; const AArray_Of_ExtendedProductFinderIDType: Array_Of_ExtendedProductFinderIDType);
    function  ProductFinderIDs_Specified(Index: Integer): boolean;
    procedure SetCharacteristicsSets(Index: Integer; const AArray_Of_CharacteristicsSetType: Array_Of_CharacteristicsSetType);
    function  CharacteristicsSets_Specified(Index: Integer): boolean;
    procedure SetExpired(Index: Integer; const ABoolean: Boolean);
    function  Expired_Specified(Index: Integer): boolean;
    procedure SetIntlAutosFixedCat(Index: Integer; const ABoolean: Boolean);
    function  IntlAutosFixedCat_Specified(Index: Integer): boolean;
    procedure SetLeafCategory(Index: Integer; const ABoolean: Boolean);
    function  LeafCategory_Specified(Index: Integer): boolean;
    procedure SetVirtual_(Index: Integer; const ABoolean: Boolean);
    function  Virtual__Specified(Index: Integer): boolean;
    procedure SetNumOfItems(Index: Integer; const AInteger: Integer);
    function  NumOfItems_Specified(Index: Integer): boolean;
    procedure SetSellerGuaranteeEligible(Index: Integer; const ABoolean: Boolean);
    function  SellerGuaranteeEligible_Specified(Index: Integer): boolean;
    procedure SetORPA(Index: Integer; const ABoolean: Boolean);
    function  ORPA_Specified(Index: Integer): boolean;
    procedure SetORRA(Index: Integer; const ABoolean: Boolean);
    function  ORRA_Specified(Index: Integer): boolean;
    procedure SetLSD(Index: Integer; const ABoolean: Boolean);
    function  LSD_Specified(Index: Integer): boolean;
    procedure SetKeywords(Index: Integer; const Astring: string);
    function  Keywords_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property BestOfferEnabled:           Boolean                                     Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property AutoPayEnabled:             Boolean                                     Index (IS_OPTN) read FAutoPayEnabled write SetAutoPayEnabled stored AutoPayEnabled_Specified;
    property B2BVATEnabled:              Boolean                                     Index (IS_OPTN) read FB2BVATEnabled write SetB2BVATEnabled stored B2BVATEnabled_Specified;
    property CatalogEnabled:             Boolean                                     Index (IS_OPTN) read FCatalogEnabled write SetCatalogEnabled stored CatalogEnabled_Specified;
    property CategoryID:                 string                                      Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property CategoryLevel:              Integer                                     Index (IS_OPTN) read FCategoryLevel write SetCategoryLevel stored CategoryLevel_Specified;
    property CategoryName:               string                                      Index (IS_OPTN) read FCategoryName write SetCategoryName stored CategoryName_Specified;
    property CategoryParentID:           SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCategoryParentID write SetCategoryParentID stored CategoryParentID_Specified;
    property CategoryParentName:         SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCategoryParentName write SetCategoryParentName stored CategoryParentName_Specified;
    property ProductSearchPageAvailable: Boolean                                     Index (IS_OPTN) read FProductSearchPageAvailable write SetProductSearchPageAvailable stored ProductSearchPageAvailable_Specified;
    property ProductFinderIDs:           Array_Of_ExtendedProductFinderIDType        Index (IS_OPTN or IS_UNBD) read FProductFinderIDs write SetProductFinderIDs stored ProductFinderIDs_Specified;
    property CharacteristicsSets:        Array_Of_CharacteristicsSetType             Index (IS_OPTN or IS_UNBD) read FCharacteristicsSets write SetCharacteristicsSets stored CharacteristicsSets_Specified;
    property Expired:                    Boolean                                     Index (IS_OPTN) read FExpired write SetExpired stored Expired_Specified;
    property IntlAutosFixedCat:          Boolean                                     Index (IS_OPTN) read FIntlAutosFixedCat write SetIntlAutosFixedCat stored IntlAutosFixedCat_Specified;
    property LeafCategory:               Boolean                                     Index (IS_OPTN) read FLeafCategory write SetLeafCategory stored LeafCategory_Specified;
    property Virtual_:                   Boolean                                     Index (IS_OPTN) read FVirtual_ write SetVirtual_ stored Virtual__Specified;
    property NumOfItems:                 Integer                                     Index (IS_OPTN) read FNumOfItems write SetNumOfItems stored NumOfItems_Specified;
    property SellerGuaranteeEligible:    Boolean                                     Index (IS_OPTN) read FSellerGuaranteeEligible write SetSellerGuaranteeEligible stored SellerGuaranteeEligible_Specified;
    property ORPA:                       Boolean                                     Index (IS_OPTN) read FORPA write SetORPA stored ORPA_Specified;
    property ORRA:                       Boolean                                     Index (IS_OPTN) read FORRA write SetORRA stored ORRA_Specified;
    property LSD:                        Boolean                                     Index (IS_OPTN) read FLSD write SetLSD stored LSD_Specified;
    property Keywords:                   string                                      Index (IS_OPTN) read FKeywords write SetKeywords stored Keywords_Specified;
  end;

  ListingEnhancementDurationReferenceType = array of string;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ListingDurationDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDurationDefinitionType = class(TRemotable)
  private
    FdurationSetID: Integer;
    FdurationSetID_Specified: boolean;
    FDuration: ListingEnhancementDurationReferenceType;
    FDuration_Specified: boolean;
    procedure SetdurationSetID(Index: Integer; const AInteger: Integer);
    function  durationSetID_Specified(Index: Integer): boolean;
    procedure SetDuration(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
    function  Duration_Specified(Index: Integer): boolean;
  published
    property durationSetID: Integer                                  Index (IS_ATTR or IS_OPTN) read FdurationSetID write SetdurationSetID stored durationSetID_Specified;
    property Duration:      ListingEnhancementDurationReferenceType  Index (IS_OPTN or IS_UNBD) read FDuration write SetDuration stored Duration_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingDurationReferenceType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDurationReferenceType = class(TRemotable)
  private
    FText: Integer;
    Ftype_: ListingTypeCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property Text:  Integer              Index (IS_TEXT) read FText write FText;
    property type_: ListingTypeCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;



  // ************************************************************************ //
  // XML       : SiteDefaultsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteDefaultsType = class(TRemotable)
  private
    FListingDuration: Array_Of_ListingDurationReferenceType;
    FListingDuration_Specified: boolean;
    FShippingTermsRequired: Boolean;
    FShippingTermsRequired_Specified: boolean;
    FBestOfferEnabled: Boolean;
    FBestOfferEnabled_Specified: boolean;
    FDutchBINEnabled: Boolean;
    FDutchBINEnabled_Specified: boolean;
    FUserConsentRequired: Boolean;
    FUserConsentRequired_Specified: boolean;
    FHomePageFeaturedEnabled: Boolean;
    FHomePageFeaturedEnabled_Specified: boolean;
    FProPackEnabled: Boolean;
    FProPackEnabled_Specified: boolean;
    FBasicUpgradePackEnabled: Boolean;
    FBasicUpgradePackEnabled_Specified: boolean;
    FValuePackEnabled: Boolean;
    FValuePackEnabled_Specified: boolean;
    FProPackPlusEnabled: Boolean;
    FProPackPlusEnabled_Specified: boolean;
    FAdFormatEnabled: AdFormatEnabledCodeType;
    FAdFormatEnabled_Specified: boolean;
    FBestOfferCounterEnabled: Boolean;
    FBestOfferCounterEnabled_Specified: boolean;
    FBestOfferAutoDeclineEnabled: Boolean;
    FBestOfferAutoDeclineEnabled_Specified: boolean;
    FLocalMarketSpecialitySubscription: Boolean;
    FLocalMarketSpecialitySubscription_Specified: boolean;
    FLocalMarketRegularSubscription: Boolean;
    FLocalMarketRegularSubscription_Specified: boolean;
    FLocalMarketPremiumSubscription: Boolean;
    FLocalMarketPremiumSubscription_Specified: boolean;
    FLocalMarketNonSubscription: Boolean;
    FLocalMarketNonSubscription_Specified: boolean;
    FExpressEnabled: Boolean;
    FExpressEnabled_Specified: boolean;
    FExpressPicturesRequired: Boolean;
    FExpressPicturesRequired_Specified: boolean;
    FExpressConditionRequired: Boolean;
    FExpressConditionRequired_Specified: boolean;
    FMinimumReservePrice: Double;
    FMinimumReservePrice_Specified: boolean;
    FSellerContactDetailsEnabled: Boolean;
    FSellerContactDetailsEnabled_Specified: boolean;
    FTransactionConfirmationRequestEnabled: Boolean;
    FTransactionConfirmationRequestEnabled_Specified: boolean;
    FStoreInventoryEnabled: Boolean;
    FStoreInventoryEnabled_Specified: boolean;
    FSkypeMeTransactionalEnabled: Boolean;
    FSkypeMeTransactionalEnabled_Specified: boolean;
    FSkypeMeNonTransactionalEnabled: Boolean;
    FSkypeMeNonTransactionalEnabled_Specified: boolean;
    FLocalListingDistancesRegular: string;
    FLocalListingDistancesRegular_Specified: boolean;
    FLocalListingDistancesSpecialty: string;
    FLocalListingDistancesSpecialty_Specified: boolean;
    FLocalListingDistancesNonSubscription: string;
    FLocalListingDistancesNonSubscription_Specified: boolean;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FClassifiedAdPaymentMethodEnabled_Specified: boolean;
    FClassifiedAdShippingMethodEnabled: Boolean;
    FClassifiedAdShippingMethodEnabled_Specified: boolean;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FClassifiedAdBestOfferEnabled_Specified: boolean;
    FClassifiedAdCounterOfferEnabled: Boolean;
    FClassifiedAdCounterOfferEnabled_Specified: boolean;
    FClassifiedAdAutoDeclineEnabled: Boolean;
    FClassifiedAdAutoDeclineEnabled_Specified: boolean;
    FClassifiedAdContactByPhoneEnabled: Boolean;
    FClassifiedAdContactByPhoneEnabled_Specified: boolean;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FClassifiedAdContactByEmailEnabled_Specified: boolean;
    FSafePaymentRequired: Boolean;
    FSafePaymentRequired_Specified: boolean;
    FClassifiedAdPayPerLeadEnabled: Boolean;
    FClassifiedAdPayPerLeadEnabled_Specified: boolean;
    FItemSpecificsEnabled: ItemSpecificsEnabledCodeType;
    FItemSpecificsEnabled_Specified: boolean;
    FPaisaPayFullEscrowEnabled: Boolean;
    FPaisaPayFullEscrowEnabled_Specified: boolean;
    FISBNIdentifierEnabled: Boolean;
    FISBNIdentifierEnabled_Specified: boolean;
    FUPCIdentifierEnabled: Boolean;
    FUPCIdentifierEnabled_Specified: boolean;
    FEANIdentifierEnabled: Boolean;
    FEANIdentifierEnabled_Specified: boolean;
    FBrandMPNIdentifierEnabled: Boolean;
    FBrandMPNIdentifierEnabled_Specified: boolean;
    FClassifiedAdAutoAcceptEnabled: Boolean;
    FClassifiedAdAutoAcceptEnabled_Specified: boolean;
    FBestOfferAutoAcceptEnabled: Boolean;
    FBestOfferAutoAcceptEnabled_Specified: boolean;
    FCrossBorderTradeNorthAmericaEnabled: Boolean;
    FCrossBorderTradeNorthAmericaEnabled_Specified: boolean;
    FCrossBorderTradeGBEnabled: Boolean;
    FCrossBorderTradeGBEnabled_Specified: boolean;
    FCrossBorderTradeAustraliaEnabled: Boolean;
    FCrossBorderTradeAustraliaEnabled_Specified: boolean;
    FPayPalBuyerProtectionEnabled: Boolean;
    FPayPalBuyerProtectionEnabled_Specified: boolean;
    FBuyerGuaranteeEnabled: Boolean;
    FBuyerGuaranteeEnabled_Specified: boolean;
    FINEscrowWorkflowTimeline: INEscrowWorkflowTimelineCodeType;
    FINEscrowWorkflowTimeline_Specified: boolean;
    FCombinedFixedPriceTreatmentEnabled: Boolean;
    FCombinedFixedPriceTreatmentEnabled_Specified: boolean;
    FGalleryFeaturedDurations: ListingEnhancementDurationReferenceType;
    FGalleryFeaturedDurations_Specified: boolean;
    FPayPalRequired: Boolean;
    FPayPalRequired_Specified: boolean;
    FeBayMotorsProAdFormatEnabled: AdFormatEnabledCodeType;
    FeBayMotorsProAdFormatEnabled_Specified: boolean;
    FeBayMotorsProContactByPhoneEnabled: Boolean;
    FeBayMotorsProContactByPhoneEnabled_Specified: boolean;
    FeBayMotorsProPhoneCount: Integer;
    FeBayMotorsProPhoneCount_Specified: boolean;
    FeBayMotorsProContactByAddressEnabled: Boolean;
    FeBayMotorsProContactByAddressEnabled_Specified: boolean;
    FeBayMotorsProStreetCount: Integer;
    FeBayMotorsProStreetCount_Specified: boolean;
    FeBayMotorsProCompanyNameEnabled: Boolean;
    FeBayMotorsProCompanyNameEnabled_Specified: boolean;
    FeBayMotorsProContactByEmailEnabled: Boolean;
    FeBayMotorsProContactByEmailEnabled_Specified: boolean;
    FeBayMotorsProBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FeBayMotorsProBestOfferEnabled_Specified: boolean;
    FeBayMotorsProAutoAcceptEnabled: Boolean;
    FeBayMotorsProAutoAcceptEnabled_Specified: boolean;
    FeBayMotorsProAutoDeclineEnabled: Boolean;
    FeBayMotorsProAutoDeclineEnabled_Specified: boolean;
    FeBayMotorsProPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FeBayMotorsProPaymentMethodCheckOutEnabled_Specified: boolean;
    FeBayMotorsProShippingMethodEnabled: Boolean;
    FeBayMotorsProShippingMethodEnabled_Specified: boolean;
    FeBayMotorsProCounterOfferEnabled: Boolean;
    FeBayMotorsProCounterOfferEnabled_Specified: boolean;
    FeBayMotorsProSellerContactDetailsEnabled: Boolean;
    FeBayMotorsProSellerContactDetailsEnabled_Specified: boolean;
    FLocalMarketAdFormatEnabled: AdFormatEnabledCodeType;
    FLocalMarketAdFormatEnabled_Specified: boolean;
    FLocalMarketContactByPhoneEnabled: Boolean;
    FLocalMarketContactByPhoneEnabled_Specified: boolean;
    FLocalMarketPhoneCount: Integer;
    FLocalMarketPhoneCount_Specified: boolean;
    FLocalMarketContactByAddressEnabled: Boolean;
    FLocalMarketContactByAddressEnabled_Specified: boolean;
    FLocalMarketStreetCount: Integer;
    FLocalMarketStreetCount_Specified: boolean;
    FLocalMarketCompanyNameEnabled: Boolean;
    FLocalMarketCompanyNameEnabled_Specified: boolean;
    FLocalMarketContactByEmailEnabled: Boolean;
    FLocalMarketContactByEmailEnabled_Specified: boolean;
    FLocalMarketBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FLocalMarketBestOfferEnabled_Specified: boolean;
    FLocalMarketAutoAcceptEnabled: Boolean;
    FLocalMarketAutoAcceptEnabled_Specified: boolean;
    FLocalMarketAutoDeclineEnabled: Boolean;
    FLocalMarketAutoDeclineEnabled_Specified: boolean;
    FLocalMarketPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FLocalMarketPaymentMethodCheckOutEnabled_Specified: boolean;
    FLocalMarketShippingMethodEnabled: Boolean;
    FLocalMarketShippingMethodEnabled_Specified: boolean;
    FLocalMarketCounterOfferEnabled: Boolean;
    FLocalMarketCounterOfferEnabled_Specified: boolean;
    FLocalMarketSellerContactDetailsEnabled: Boolean;
    FLocalMarketSellerContactDetailsEnabled_Specified: boolean;
    FClassifiedAdPhoneCount: Integer;
    FClassifiedAdPhoneCount_Specified: boolean;
    FClassifiedAdContactByAddressEnabled: Boolean;
    FClassifiedAdContactByAddressEnabled_Specified: boolean;
    FClassifiedAdStreetCount: Integer;
    FClassifiedAdStreetCount_Specified: boolean;
    FClassifiedAdCompanyNameEnabled: Boolean;
    FClassifiedAdCompanyNameEnabled_Specified: boolean;
    FSpecialitySubscription: GeographicExposureCodeType;
    FSpecialitySubscription_Specified: boolean;
    FRegularSubscription: GeographicExposureCodeType;
    FRegularSubscription_Specified: boolean;
    FPremiumSubscription: GeographicExposureCodeType;
    FPremiumSubscription_Specified: boolean;
    FNonSubscription: GeographicExposureCodeType;
    FNonSubscription_Specified: boolean;
    FPayPalRequiredForStoreOwner: Boolean;
    FPayPalRequiredForStoreOwner_Specified: boolean;
    FReviseQuantityAllowed: Boolean;
    FReviseQuantityAllowed_Specified: boolean;
    FRevisePriceAllowed: Boolean;
    FRevisePriceAllowed_Specified: boolean;
    FStoreOwnerExtendedListingDurationsEnabled: Boolean;
    FStoreOwnerExtendedListingDurationsEnabled_Specified: boolean;
    FStoreOwnerExtendedListingDurations: StoreOwnerExtendedListingDurationsType;
    FStoreOwnerExtendedListingDurations_Specified: boolean;
    FReturnPolicyEnabled: Boolean;
    FReturnPolicyEnabled_Specified: boolean;
    FHandlingTimeEnabled: Boolean;
    FHandlingTimeEnabled_Specified: boolean;
    FMaxFlatShippingCost: AmountType;
    FMaxFlatShippingCost_Specified: boolean;
    FMaxFlatShippingCostCBTExempt: Boolean;
    FMaxFlatShippingCostCBTExempt_Specified: boolean;
    FGroup1MaxFlatShippingCost: AmountType;
    FGroup1MaxFlatShippingCost_Specified: boolean;
    FGroup2MaxFlatShippingCost: AmountType;
    FGroup2MaxFlatShippingCost_Specified: boolean;
    FGroup3MaxFlatShippingCost: AmountType;
    FGroup3MaxFlatShippingCost_Specified: boolean;
    FPaymentMethod: Array_Of_BuyerPaymentMethodCodeType;
    FPaymentMethod_Specified: boolean;
    FVariationsEnabled: Boolean;
    FVariationsEnabled_Specified: boolean;
    FAttributeConversionEnabled: AttributeConversionEnabledCodeType;
    FAttributeConversionEnabled_Specified: boolean;
    FFreeGalleryPlusEnabled: Boolean;
    FFreeGalleryPlusEnabled_Specified: boolean;
    FFreePicturePackEnabled: Boolean;
    FFreePicturePackEnabled_Specified: boolean;
    FItemCompatibilityEnabled: ItemCompatibilityEnabledCodeType;
    FItemCompatibilityEnabled_Specified: boolean;
    FMinItemCompatibility: Integer;
    FMinItemCompatibility_Specified: boolean;
    FMaxItemCompatibility: Integer;
    FMaxItemCompatibility_Specified: boolean;
    FConditionEnabled: ConditionEnabledCodeType;
    FConditionEnabled_Specified: boolean;
    FConditionValues: ConditionValuesType;
    FConditionValues_Specified: boolean;
    FValueCategory: Boolean;
    FValueCategory_Specified: boolean;
    FProductCreationEnabled: ProductCreationEnabledCodeType;
    FProductCreationEnabled_Specified: boolean;
    FEANEnabled: ProductIdentiferEnabledCodeType;
    FEANEnabled_Specified: boolean;
    FISBNEnabled: ProductIdentiferEnabledCodeType;
    FISBNEnabled_Specified: boolean;
    FUPCEnabled: ProductIdentiferEnabledCodeType;
    FUPCEnabled_Specified: boolean;
    FMaxGranularFitmentCount: Integer;
    FMaxGranularFitmentCount_Specified: boolean;
    FCompatibleVehicleType: string;
    FCompatibleVehicleType_Specified: boolean;
    FPaymentOptionsGroup: PaymentOptionsGroupEnabledCodeType;
    FPaymentOptionsGroup_Specified: boolean;
    FShippingProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FShippingProfileCategoryGroup_Specified: boolean;
    FPaymentProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FPaymentProfileCategoryGroup_Specified: boolean;
    FReturnPolicyProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FReturnPolicyProfileCategoryGroup_Specified: boolean;
    FVINSupported: Boolean;
    FVINSupported_Specified: boolean;
    FVRMSupported: Boolean;
    FVRMSupported_Specified: boolean;
    FSellerProvidedTitleSupported: Boolean;
    FSellerProvidedTitleSupported_Specified: boolean;
    FDepositSupported: Boolean;
    FDepositSupported_Specified: boolean;
    FGlobalShippingEnabled: Boolean;
    FGlobalShippingEnabled_Specified: boolean;
    FAdditionalCompatibilityEnabled: Boolean;
    FAdditionalCompatibilityEnabled_Specified: boolean;
    FPickupDropOffEnabled: Boolean;
    FPickupDropOffEnabled_Specified: boolean;
    FDigitalGoodDeliveryEnabled: Boolean;
    FDigitalGoodDeliveryEnabled_Specified: boolean;
    FEpidSupported: Boolean;
    FEpidSupported_Specified: boolean;
    FKTypeSupported: Boolean;
    FKTypeSupported_Specified: boolean;
    FProductRequiredEnabled: ProductRequiredEnabledCodeType;
    FProductRequiredEnabled_Specified: boolean;
    FDomesticReturnsAcceptedValues: DomesticReturnsAcceptedCodeType;
    FDomesticReturnsAcceptedValues_Specified: boolean;
    FInternationalReturnsAcceptedValues: InternationalReturnsAcceptedCodeType;
    FInternationalReturnsAcceptedValues_Specified: boolean;
    FDomesticReturnsDurationValues: DomesticReturnsDurationCodeType;
    FDomesticReturnsDurationValues_Specified: boolean;
    FInternationalReturnsDurationValues: InternationalReturnsDurationCodeType;
    FInternationalReturnsDurationValues_Specified: boolean;
    FDomesticReturnsShipmentPayeeValues: DomesticReturnsShipmentPayeeCodeType;
    FDomesticReturnsShipmentPayeeValues_Specified: boolean;
    FInternationalReturnsShipmentPayeeValues: InternationalReturnsShipmentPayeeCodeType;
    FInternationalReturnsShipmentPayeeValues_Specified: boolean;
    FDomesticRefundMethodValues: DomesticRefundMethodCodeType;
    FDomesticRefundMethodValues_Specified: boolean;
    FInternationalRefundMethodValues: InternationalRefundMethodCodeType;
    FInternationalRefundMethodValues_Specified: boolean;
    FReturnPolicyDescriptionEnabled: Boolean;
    FReturnPolicyDescriptionEnabled_Specified: boolean;
    procedure SetListingDuration(Index: Integer; const AArray_Of_ListingDurationReferenceType: Array_Of_ListingDurationReferenceType);
    function  ListingDuration_Specified(Index: Integer): boolean;
    procedure SetShippingTermsRequired(Index: Integer; const ABoolean: Boolean);
    function  ShippingTermsRequired_Specified(Index: Integer): boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetDutchBINEnabled(Index: Integer; const ABoolean: Boolean);
    function  DutchBINEnabled_Specified(Index: Integer): boolean;
    procedure SetUserConsentRequired(Index: Integer; const ABoolean: Boolean);
    function  UserConsentRequired_Specified(Index: Integer): boolean;
    procedure SetHomePageFeaturedEnabled(Index: Integer; const ABoolean: Boolean);
    function  HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackEnabled(Index: Integer; const ABoolean: Boolean);
    function  ProPackEnabled_Specified(Index: Integer): boolean;
    procedure SetBasicUpgradePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
    procedure SetValuePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  ValuePackEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackPlusEnabled(Index: Integer; const ABoolean: Boolean);
    function  ProPackPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  AdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferCounterEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferCounterEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSpecialitySubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketRegularSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPremiumSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketNonSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketNonSubscription_Specified(Index: Integer): boolean;
    procedure SetExpressEnabled(Index: Integer; const ABoolean: Boolean);
    function  ExpressEnabled_Specified(Index: Integer): boolean;
    procedure SetExpressPicturesRequired(Index: Integer; const ABoolean: Boolean);
    function  ExpressPicturesRequired_Specified(Index: Integer): boolean;
    procedure SetExpressConditionRequired(Index: Integer; const ABoolean: Boolean);
    function  ExpressConditionRequired_Specified(Index: Integer): boolean;
    procedure SetMinimumReservePrice(Index: Integer; const ADouble: Double);
    function  MinimumReservePrice_Specified(Index: Integer): boolean;
    procedure SetSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetTransactionConfirmationRequestEnabled(Index: Integer; const ABoolean: Boolean);
    function  TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreInventoryEnabled(Index: Integer; const ABoolean: Boolean);
    function  StoreInventoryEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
    function  SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeNonTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
    function  SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesRegular(Index: Integer; const Astring: string);
    function  LocalListingDistancesRegular_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesSpecialty(Index: Integer; const Astring: string);
    function  LocalListingDistancesSpecialty_Specified(Index: Integer): boolean;
    procedure SetLocalListingDistancesNonSubscription(Index: Integer; const Astring: string);
    function  LocalListingDistancesNonSubscription_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetSafePaymentRequired(Index: Integer; const ABoolean: Boolean);
    function  SafePaymentRequired_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
    procedure SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledCodeType: ItemSpecificsEnabledCodeType);
    function  ItemSpecificsEnabled_Specified(Index: Integer): boolean;
    procedure SetPaisaPayFullEscrowEnabled(Index: Integer; const ABoolean: Boolean);
    function  PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
    procedure SetISBNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
    function  ISBNIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetUPCIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
    function  UPCIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetEANIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
    function  EANIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetBrandMPNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
    function  BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeGBEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
    procedure SetPayPalBuyerProtectionEnabled(Index: Integer; const ABoolean: Boolean);
    function  PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
    procedure SetBuyerGuaranteeEnabled(Index: Integer; const ABoolean: Boolean);
    function  BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
    procedure SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineCodeType: INEscrowWorkflowTimelineCodeType);
    function  INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
    procedure SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ABoolean: Boolean);
    function  CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
    procedure SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
    function  GalleryFeaturedDurations_Specified(Index: Integer): boolean;
    procedure SetPayPalRequired(Index: Integer; const ABoolean: Boolean);
    function  PayPalRequired_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPhoneCount(Index: Integer; const AInteger: Integer);
    function  eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProStreetCount(Index: Integer; const AInteger: Integer);
    function  eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPhoneCount(Index: Integer; const AInteger: Integer);
    function  LocalMarketPhoneCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketStreetCount(Index: Integer; const AInteger: Integer);
    function  LocalMarketStreetCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPhoneCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdStreetCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetSpecialitySubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  SpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetRegularSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  RegularSubscription_Specified(Index: Integer): boolean;
    procedure SetPremiumSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  PremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetNonSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  NonSubscription_Specified(Index: Integer): boolean;
    procedure SetPayPalRequiredForStoreOwner(Index: Integer; const ABoolean: Boolean);
    function  PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
    procedure SetReviseQuantityAllowed(Index: Integer; const ABoolean: Boolean);
    function  ReviseQuantityAllowed_Specified(Index: Integer): boolean;
    procedure SetRevisePriceAllowed(Index: Integer; const ABoolean: Boolean);
    function  RevisePriceAllowed_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const ABoolean: Boolean);
    function  StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsType: StoreOwnerExtendedListingDurationsType);
    function  StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyEnabled(Index: Integer; const ABoolean: Boolean);
    function  ReturnPolicyEnabled_Specified(Index: Integer): boolean;
    procedure SetHandlingTimeEnabled(Index: Integer; const ABoolean: Boolean);
    function  HandlingTimeEnabled_Specified(Index: Integer): boolean;
    procedure SetMaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetMaxFlatShippingCostCBTExempt(Index: Integer; const ABoolean: Boolean);
    function  MaxFlatShippingCostCBTExempt_Specified(Index: Integer): boolean;
    procedure SetGroup1MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup2MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup3MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetVariationsEnabled(Index: Integer; const ABoolean: Boolean);
    function  VariationsEnabled_Specified(Index: Integer): boolean;
    procedure SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledCodeType: AttributeConversionEnabledCodeType);
    function  AttributeConversionEnabled_Specified(Index: Integer): boolean;
    procedure SetFreeGalleryPlusEnabled(Index: Integer; const ABoolean: Boolean);
    function  FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetFreePicturePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  FreePicturePackEnabled_Specified(Index: Integer): boolean;
    procedure SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledCodeType: ItemCompatibilityEnabledCodeType);
    function  ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetMinItemCompatibility(Index: Integer; const AInteger: Integer);
    function  MinItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetMaxItemCompatibility(Index: Integer; const AInteger: Integer);
    function  MaxItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetConditionEnabled(Index: Integer; const AConditionEnabledCodeType: ConditionEnabledCodeType);
    function  ConditionEnabled_Specified(Index: Integer): boolean;
    procedure SetConditionValues(Index: Integer; const AConditionValuesType: ConditionValuesType);
    function  ConditionValues_Specified(Index: Integer): boolean;
    procedure SetValueCategory(Index: Integer; const ABoolean: Boolean);
    function  ValueCategory_Specified(Index: Integer): boolean;
    procedure SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledCodeType: ProductCreationEnabledCodeType);
    function  ProductCreationEnabled_Specified(Index: Integer): boolean;
    procedure SetEANEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  EANEnabled_Specified(Index: Integer): boolean;
    procedure SetISBNEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  ISBNEnabled_Specified(Index: Integer): boolean;
    procedure SetUPCEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  UPCEnabled_Specified(Index: Integer): boolean;
    procedure SetMaxGranularFitmentCount(Index: Integer; const AInteger: Integer);
    function  MaxGranularFitmentCount_Specified(Index: Integer): boolean;
    procedure SetCompatibleVehicleType(Index: Integer; const Astring: string);
    function  CompatibleVehicleType_Specified(Index: Integer): boolean;
    procedure SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledCodeType: PaymentOptionsGroupEnabledCodeType);
    function  PaymentOptionsGroup_Specified(Index: Integer): boolean;
    procedure SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetVINSupported(Index: Integer; const ABoolean: Boolean);
    function  VINSupported_Specified(Index: Integer): boolean;
    procedure SetVRMSupported(Index: Integer; const ABoolean: Boolean);
    function  VRMSupported_Specified(Index: Integer): boolean;
    procedure SetSellerProvidedTitleSupported(Index: Integer; const ABoolean: Boolean);
    function  SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
    procedure SetDepositSupported(Index: Integer; const ABoolean: Boolean);
    function  DepositSupported_Specified(Index: Integer): boolean;
    procedure SetGlobalShippingEnabled(Index: Integer; const ABoolean: Boolean);
    function  GlobalShippingEnabled_Specified(Index: Integer): boolean;
    procedure SetAdditionalCompatibilityEnabled(Index: Integer; const ABoolean: Boolean);
    function  AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetPickupDropOffEnabled(Index: Integer; const ABoolean: Boolean);
    function  PickupDropOffEnabled_Specified(Index: Integer): boolean;
    procedure SetDigitalGoodDeliveryEnabled(Index: Integer; const ABoolean: Boolean);
    function  DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
    procedure SetEpidSupported(Index: Integer; const ABoolean: Boolean);
    function  EpidSupported_Specified(Index: Integer): boolean;
    procedure SetKTypeSupported(Index: Integer; const ABoolean: Boolean);
    function  KTypeSupported_Specified(Index: Integer): boolean;
    procedure SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledCodeType: ProductRequiredEnabledCodeType);
    function  ProductRequiredEnabled_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedCodeType: DomesticReturnsAcceptedCodeType);
    function  DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedCodeType: InternationalReturnsAcceptedCodeType);
    function  InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationCodeType: DomesticReturnsDurationCodeType);
    function  DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationCodeType: InternationalReturnsDurationCodeType);
    function  InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeCodeType: DomesticReturnsShipmentPayeeCodeType);
    function  DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeCodeType: InternationalReturnsShipmentPayeeCodeType);
    function  InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
    function  DomesticRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
    function  InternationalRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyDescriptionEnabled(Index: Integer; const ABoolean: Boolean);
    function  ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ListingDuration:                           Array_Of_ListingDurationReferenceType      Index (IS_OPTN or IS_UNBD) read FListingDuration write SetListingDuration stored ListingDuration_Specified;
    property ShippingTermsRequired:                     Boolean                                    Index (IS_OPTN) read FShippingTermsRequired write SetShippingTermsRequired stored ShippingTermsRequired_Specified;
    property BestOfferEnabled:                          Boolean                                    Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property DutchBINEnabled:                           Boolean                                    Index (IS_OPTN) read FDutchBINEnabled write SetDutchBINEnabled stored DutchBINEnabled_Specified;
    property UserConsentRequired:                       Boolean                                    Index (IS_OPTN) read FUserConsentRequired write SetUserConsentRequired stored UserConsentRequired_Specified;
    property HomePageFeaturedEnabled:                   Boolean                                    Index (IS_OPTN) read FHomePageFeaturedEnabled write SetHomePageFeaturedEnabled stored HomePageFeaturedEnabled_Specified;
    property ProPackEnabled:                            Boolean                                    Index (IS_OPTN) read FProPackEnabled write SetProPackEnabled stored ProPackEnabled_Specified;
    property BasicUpgradePackEnabled:                   Boolean                                    Index (IS_OPTN) read FBasicUpgradePackEnabled write SetBasicUpgradePackEnabled stored BasicUpgradePackEnabled_Specified;
    property ValuePackEnabled:                          Boolean                                    Index (IS_OPTN) read FValuePackEnabled write SetValuePackEnabled stored ValuePackEnabled_Specified;
    property ProPackPlusEnabled:                        Boolean                                    Index (IS_OPTN) read FProPackPlusEnabled write SetProPackPlusEnabled stored ProPackPlusEnabled_Specified;
    property AdFormatEnabled:                           AdFormatEnabledCodeType                    Index (IS_OPTN) read FAdFormatEnabled write SetAdFormatEnabled stored AdFormatEnabled_Specified;
    property BestOfferCounterEnabled:                   Boolean                                    Index (IS_OPTN) read FBestOfferCounterEnabled write SetBestOfferCounterEnabled stored BestOfferCounterEnabled_Specified;
    property BestOfferAutoDeclineEnabled:               Boolean                                    Index (IS_OPTN) read FBestOfferAutoDeclineEnabled write SetBestOfferAutoDeclineEnabled stored BestOfferAutoDeclineEnabled_Specified;
    property LocalMarketSpecialitySubscription:         Boolean                                    Index (IS_OPTN) read FLocalMarketSpecialitySubscription write SetLocalMarketSpecialitySubscription stored LocalMarketSpecialitySubscription_Specified;
    property LocalMarketRegularSubscription:            Boolean                                    Index (IS_OPTN) read FLocalMarketRegularSubscription write SetLocalMarketRegularSubscription stored LocalMarketRegularSubscription_Specified;
    property LocalMarketPremiumSubscription:            Boolean                                    Index (IS_OPTN) read FLocalMarketPremiumSubscription write SetLocalMarketPremiumSubscription stored LocalMarketPremiumSubscription_Specified;
    property LocalMarketNonSubscription:                Boolean                                    Index (IS_OPTN) read FLocalMarketNonSubscription write SetLocalMarketNonSubscription stored LocalMarketNonSubscription_Specified;
    property ExpressEnabled:                            Boolean                                    Index (IS_OPTN) read FExpressEnabled write SetExpressEnabled stored ExpressEnabled_Specified;
    property ExpressPicturesRequired:                   Boolean                                    Index (IS_OPTN) read FExpressPicturesRequired write SetExpressPicturesRequired stored ExpressPicturesRequired_Specified;
    property ExpressConditionRequired:                  Boolean                                    Index (IS_OPTN) read FExpressConditionRequired write SetExpressConditionRequired stored ExpressConditionRequired_Specified;
    property MinimumReservePrice:                       Double                                     Index (IS_OPTN) read FMinimumReservePrice write SetMinimumReservePrice stored MinimumReservePrice_Specified;
    property SellerContactDetailsEnabled:               Boolean                                    Index (IS_OPTN) read FSellerContactDetailsEnabled write SetSellerContactDetailsEnabled stored SellerContactDetailsEnabled_Specified;
    property TransactionConfirmationRequestEnabled:     Boolean                                    Index (IS_OPTN) read FTransactionConfirmationRequestEnabled write SetTransactionConfirmationRequestEnabled stored TransactionConfirmationRequestEnabled_Specified;
    property StoreInventoryEnabled:                     Boolean                                    Index (IS_OPTN) read FStoreInventoryEnabled write SetStoreInventoryEnabled stored StoreInventoryEnabled_Specified;
    property SkypeMeTransactionalEnabled:               Boolean                                    Index (IS_OPTN) read FSkypeMeTransactionalEnabled write SetSkypeMeTransactionalEnabled stored SkypeMeTransactionalEnabled_Specified;
    property SkypeMeNonTransactionalEnabled:            Boolean                                    Index (IS_OPTN) read FSkypeMeNonTransactionalEnabled write SetSkypeMeNonTransactionalEnabled stored SkypeMeNonTransactionalEnabled_Specified;
    property LocalListingDistancesRegular:              string                                     Index (IS_OPTN) read FLocalListingDistancesRegular write SetLocalListingDistancesRegular stored LocalListingDistancesRegular_Specified;
    property LocalListingDistancesSpecialty:            string                                     Index (IS_OPTN) read FLocalListingDistancesSpecialty write SetLocalListingDistancesSpecialty stored LocalListingDistancesSpecialty_Specified;
    property LocalListingDistancesNonSubscription:      string                                     Index (IS_OPTN) read FLocalListingDistancesNonSubscription write SetLocalListingDistancesNonSubscription stored LocalListingDistancesNonSubscription_Specified;
    property ClassifiedAdPaymentMethodEnabled:          ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FClassifiedAdPaymentMethodEnabled write SetClassifiedAdPaymentMethodEnabled stored ClassifiedAdPaymentMethodEnabled_Specified;
    property ClassifiedAdShippingMethodEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdShippingMethodEnabled write SetClassifiedAdShippingMethodEnabled stored ClassifiedAdShippingMethodEnabled_Specified;
    property ClassifiedAdBestOfferEnabled:              ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FClassifiedAdBestOfferEnabled write SetClassifiedAdBestOfferEnabled stored ClassifiedAdBestOfferEnabled_Specified;
    property ClassifiedAdCounterOfferEnabled:           Boolean                                    Index (IS_OPTN) read FClassifiedAdCounterOfferEnabled write SetClassifiedAdCounterOfferEnabled stored ClassifiedAdCounterOfferEnabled_Specified;
    property ClassifiedAdAutoDeclineEnabled:            Boolean                                    Index (IS_OPTN) read FClassifiedAdAutoDeclineEnabled write SetClassifiedAdAutoDeclineEnabled stored ClassifiedAdAutoDeclineEnabled_Specified;
    property ClassifiedAdContactByPhoneEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByPhoneEnabled write SetClassifiedAdContactByPhoneEnabled stored ClassifiedAdContactByPhoneEnabled_Specified;
    property ClassifiedAdContactByEmailEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByEmailEnabled write SetClassifiedAdContactByEmailEnabled stored ClassifiedAdContactByEmailEnabled_Specified;
    property SafePaymentRequired:                       Boolean                                    Index (IS_OPTN) read FSafePaymentRequired write SetSafePaymentRequired stored SafePaymentRequired_Specified;
    property ClassifiedAdPayPerLeadEnabled:             Boolean                                    Index (IS_OPTN) read FClassifiedAdPayPerLeadEnabled write SetClassifiedAdPayPerLeadEnabled stored ClassifiedAdPayPerLeadEnabled_Specified;
    property ItemSpecificsEnabled:                      ItemSpecificsEnabledCodeType               Index (IS_OPTN) read FItemSpecificsEnabled write SetItemSpecificsEnabled stored ItemSpecificsEnabled_Specified;
    property PaisaPayFullEscrowEnabled:                 Boolean                                    Index (IS_OPTN) read FPaisaPayFullEscrowEnabled write SetPaisaPayFullEscrowEnabled stored PaisaPayFullEscrowEnabled_Specified;
    property ISBNIdentifierEnabled:                     Boolean                                    Index (IS_OPTN) read FISBNIdentifierEnabled write SetISBNIdentifierEnabled stored ISBNIdentifierEnabled_Specified;
    property UPCIdentifierEnabled:                      Boolean                                    Index (IS_OPTN) read FUPCIdentifierEnabled write SetUPCIdentifierEnabled stored UPCIdentifierEnabled_Specified;
    property EANIdentifierEnabled:                      Boolean                                    Index (IS_OPTN) read FEANIdentifierEnabled write SetEANIdentifierEnabled stored EANIdentifierEnabled_Specified;
    property BrandMPNIdentifierEnabled:                 Boolean                                    Index (IS_OPTN) read FBrandMPNIdentifierEnabled write SetBrandMPNIdentifierEnabled stored BrandMPNIdentifierEnabled_Specified;
    property ClassifiedAdAutoAcceptEnabled:             Boolean                                    Index (IS_OPTN) read FClassifiedAdAutoAcceptEnabled write SetClassifiedAdAutoAcceptEnabled stored ClassifiedAdAutoAcceptEnabled_Specified;
    property BestOfferAutoAcceptEnabled:                Boolean                                    Index (IS_OPTN) read FBestOfferAutoAcceptEnabled write SetBestOfferAutoAcceptEnabled stored BestOfferAutoAcceptEnabled_Specified;
    property CrossBorderTradeNorthAmericaEnabled:       Boolean                                    Index (IS_OPTN) read FCrossBorderTradeNorthAmericaEnabled write SetCrossBorderTradeNorthAmericaEnabled stored CrossBorderTradeNorthAmericaEnabled_Specified;
    property CrossBorderTradeGBEnabled:                 Boolean                                    Index (IS_OPTN) read FCrossBorderTradeGBEnabled write SetCrossBorderTradeGBEnabled stored CrossBorderTradeGBEnabled_Specified;
    property CrossBorderTradeAustraliaEnabled:          Boolean                                    Index (IS_OPTN) read FCrossBorderTradeAustraliaEnabled write SetCrossBorderTradeAustraliaEnabled stored CrossBorderTradeAustraliaEnabled_Specified;
    property PayPalBuyerProtectionEnabled:              Boolean                                    Index (IS_OPTN) read FPayPalBuyerProtectionEnabled write SetPayPalBuyerProtectionEnabled stored PayPalBuyerProtectionEnabled_Specified;
    property BuyerGuaranteeEnabled:                     Boolean                                    Index (IS_OPTN) read FBuyerGuaranteeEnabled write SetBuyerGuaranteeEnabled stored BuyerGuaranteeEnabled_Specified;
    property INEscrowWorkflowTimeline:                  INEscrowWorkflowTimelineCodeType           Index (IS_OPTN) read FINEscrowWorkflowTimeline write SetINEscrowWorkflowTimeline stored INEscrowWorkflowTimeline_Specified;
    property CombinedFixedPriceTreatmentEnabled:        Boolean                                    Index (IS_OPTN) read FCombinedFixedPriceTreatmentEnabled write SetCombinedFixedPriceTreatmentEnabled stored CombinedFixedPriceTreatmentEnabled_Specified;
    property GalleryFeaturedDurations:                  ListingEnhancementDurationReferenceType    Index (IS_OPTN) read FGalleryFeaturedDurations write SetGalleryFeaturedDurations stored GalleryFeaturedDurations_Specified;
    property PayPalRequired:                            Boolean                                    Index (IS_OPTN) read FPayPalRequired write SetPayPalRequired stored PayPalRequired_Specified;
    property eBayMotorsProAdFormatEnabled:              AdFormatEnabledCodeType                    Index (IS_OPTN) read FeBayMotorsProAdFormatEnabled write SeteBayMotorsProAdFormatEnabled stored eBayMotorsProAdFormatEnabled_Specified;
    property eBayMotorsProContactByPhoneEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByPhoneEnabled write SeteBayMotorsProContactByPhoneEnabled stored eBayMotorsProContactByPhoneEnabled_Specified;
    property eBayMotorsProPhoneCount:                   Integer                                    Index (IS_OPTN) read FeBayMotorsProPhoneCount write SeteBayMotorsProPhoneCount stored eBayMotorsProPhoneCount_Specified;
    property eBayMotorsProContactByAddressEnabled:      Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByAddressEnabled write SeteBayMotorsProContactByAddressEnabled stored eBayMotorsProContactByAddressEnabled_Specified;
    property eBayMotorsProStreetCount:                  Integer                                    Index (IS_OPTN) read FeBayMotorsProStreetCount write SeteBayMotorsProStreetCount stored eBayMotorsProStreetCount_Specified;
    property eBayMotorsProCompanyNameEnabled:           Boolean                                    Index (IS_OPTN) read FeBayMotorsProCompanyNameEnabled write SeteBayMotorsProCompanyNameEnabled stored eBayMotorsProCompanyNameEnabled_Specified;
    property eBayMotorsProContactByEmailEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByEmailEnabled write SeteBayMotorsProContactByEmailEnabled stored eBayMotorsProContactByEmailEnabled_Specified;
    property eBayMotorsProBestOfferEnabled:             ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FeBayMotorsProBestOfferEnabled write SeteBayMotorsProBestOfferEnabled stored eBayMotorsProBestOfferEnabled_Specified;
    property eBayMotorsProAutoAcceptEnabled:            Boolean                                    Index (IS_OPTN) read FeBayMotorsProAutoAcceptEnabled write SeteBayMotorsProAutoAcceptEnabled stored eBayMotorsProAutoAcceptEnabled_Specified;
    property eBayMotorsProAutoDeclineEnabled:           Boolean                                    Index (IS_OPTN) read FeBayMotorsProAutoDeclineEnabled write SeteBayMotorsProAutoDeclineEnabled stored eBayMotorsProAutoDeclineEnabled_Specified;
    property eBayMotorsProPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FeBayMotorsProPaymentMethodCheckOutEnabled write SeteBayMotorsProPaymentMethodCheckOutEnabled stored eBayMotorsProPaymentMethodCheckOutEnabled_Specified;
    property eBayMotorsProShippingMethodEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProShippingMethodEnabled write SeteBayMotorsProShippingMethodEnabled stored eBayMotorsProShippingMethodEnabled_Specified;
    property eBayMotorsProCounterOfferEnabled:          Boolean                                    Index (IS_OPTN) read FeBayMotorsProCounterOfferEnabled write SeteBayMotorsProCounterOfferEnabled stored eBayMotorsProCounterOfferEnabled_Specified;
    property eBayMotorsProSellerContactDetailsEnabled:  Boolean                                    Index (IS_OPTN) read FeBayMotorsProSellerContactDetailsEnabled write SeteBayMotorsProSellerContactDetailsEnabled stored eBayMotorsProSellerContactDetailsEnabled_Specified;
    property LocalMarketAdFormatEnabled:                AdFormatEnabledCodeType                    Index (IS_OPTN) read FLocalMarketAdFormatEnabled write SetLocalMarketAdFormatEnabled stored LocalMarketAdFormatEnabled_Specified;
    property LocalMarketContactByPhoneEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketContactByPhoneEnabled write SetLocalMarketContactByPhoneEnabled stored LocalMarketContactByPhoneEnabled_Specified;
    property LocalMarketPhoneCount:                     Integer                                    Index (IS_OPTN) read FLocalMarketPhoneCount write SetLocalMarketPhoneCount stored LocalMarketPhoneCount_Specified;
    property LocalMarketContactByAddressEnabled:        Boolean                                    Index (IS_OPTN) read FLocalMarketContactByAddressEnabled write SetLocalMarketContactByAddressEnabled stored LocalMarketContactByAddressEnabled_Specified;
    property LocalMarketStreetCount:                    Integer                                    Index (IS_OPTN) read FLocalMarketStreetCount write SetLocalMarketStreetCount stored LocalMarketStreetCount_Specified;
    property LocalMarketCompanyNameEnabled:             Boolean                                    Index (IS_OPTN) read FLocalMarketCompanyNameEnabled write SetLocalMarketCompanyNameEnabled stored LocalMarketCompanyNameEnabled_Specified;
    property LocalMarketContactByEmailEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketContactByEmailEnabled write SetLocalMarketContactByEmailEnabled stored LocalMarketContactByEmailEnabled_Specified;
    property LocalMarketBestOfferEnabled:               ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FLocalMarketBestOfferEnabled write SetLocalMarketBestOfferEnabled stored LocalMarketBestOfferEnabled_Specified;
    property LocalMarketAutoAcceptEnabled:              Boolean                                    Index (IS_OPTN) read FLocalMarketAutoAcceptEnabled write SetLocalMarketAutoAcceptEnabled stored LocalMarketAutoAcceptEnabled_Specified;
    property LocalMarketAutoDeclineEnabled:             Boolean                                    Index (IS_OPTN) read FLocalMarketAutoDeclineEnabled write SetLocalMarketAutoDeclineEnabled stored LocalMarketAutoDeclineEnabled_Specified;
    property LocalMarketPaymentMethodCheckOutEnabled:   ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FLocalMarketPaymentMethodCheckOutEnabled write SetLocalMarketPaymentMethodCheckOutEnabled stored LocalMarketPaymentMethodCheckOutEnabled_Specified;
    property LocalMarketShippingMethodEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketShippingMethodEnabled write SetLocalMarketShippingMethodEnabled stored LocalMarketShippingMethodEnabled_Specified;
    property LocalMarketCounterOfferEnabled:            Boolean                                    Index (IS_OPTN) read FLocalMarketCounterOfferEnabled write SetLocalMarketCounterOfferEnabled stored LocalMarketCounterOfferEnabled_Specified;
    property LocalMarketSellerContactDetailsEnabled:    Boolean                                    Index (IS_OPTN) read FLocalMarketSellerContactDetailsEnabled write SetLocalMarketSellerContactDetailsEnabled stored LocalMarketSellerContactDetailsEnabled_Specified;
    property ClassifiedAdPhoneCount:                    Integer                                    Index (IS_OPTN) read FClassifiedAdPhoneCount write SetClassifiedAdPhoneCount stored ClassifiedAdPhoneCount_Specified;
    property ClassifiedAdContactByAddressEnabled:       Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByAddressEnabled write SetClassifiedAdContactByAddressEnabled stored ClassifiedAdContactByAddressEnabled_Specified;
    property ClassifiedAdStreetCount:                   Integer                                    Index (IS_OPTN) read FClassifiedAdStreetCount write SetClassifiedAdStreetCount stored ClassifiedAdStreetCount_Specified;
    property ClassifiedAdCompanyNameEnabled:            Boolean                                    Index (IS_OPTN) read FClassifiedAdCompanyNameEnabled write SetClassifiedAdCompanyNameEnabled stored ClassifiedAdCompanyNameEnabled_Specified;
    property SpecialitySubscription:                    GeographicExposureCodeType                 Index (IS_OPTN) read FSpecialitySubscription write SetSpecialitySubscription stored SpecialitySubscription_Specified;
    property RegularSubscription:                       GeographicExposureCodeType                 Index (IS_OPTN) read FRegularSubscription write SetRegularSubscription stored RegularSubscription_Specified;
    property PremiumSubscription:                       GeographicExposureCodeType                 Index (IS_OPTN) read FPremiumSubscription write SetPremiumSubscription stored PremiumSubscription_Specified;
    property NonSubscription:                           GeographicExposureCodeType                 Index (IS_OPTN) read FNonSubscription write SetNonSubscription stored NonSubscription_Specified;
    property PayPalRequiredForStoreOwner:               Boolean                                    Index (IS_OPTN) read FPayPalRequiredForStoreOwner write SetPayPalRequiredForStoreOwner stored PayPalRequiredForStoreOwner_Specified;
    property ReviseQuantityAllowed:                     Boolean                                    Index (IS_OPTN) read FReviseQuantityAllowed write SetReviseQuantityAllowed stored ReviseQuantityAllowed_Specified;
    property RevisePriceAllowed:                        Boolean                                    Index (IS_OPTN) read FRevisePriceAllowed write SetRevisePriceAllowed stored RevisePriceAllowed_Specified;
    property StoreOwnerExtendedListingDurationsEnabled: Boolean                                    Index (IS_OPTN) read FStoreOwnerExtendedListingDurationsEnabled write SetStoreOwnerExtendedListingDurationsEnabled stored StoreOwnerExtendedListingDurationsEnabled_Specified;
    property StoreOwnerExtendedListingDurations:        StoreOwnerExtendedListingDurationsType     Index (IS_OPTN) read FStoreOwnerExtendedListingDurations write SetStoreOwnerExtendedListingDurations stored StoreOwnerExtendedListingDurations_Specified;
    property ReturnPolicyEnabled:                       Boolean                                    Index (IS_OPTN) read FReturnPolicyEnabled write SetReturnPolicyEnabled stored ReturnPolicyEnabled_Specified;
    property HandlingTimeEnabled:                       Boolean                                    Index (IS_OPTN) read FHandlingTimeEnabled write SetHandlingTimeEnabled stored HandlingTimeEnabled_Specified;
    property MaxFlatShippingCost:                       AmountType                                 Index (IS_OPTN) read FMaxFlatShippingCost write SetMaxFlatShippingCost stored MaxFlatShippingCost_Specified;
    property MaxFlatShippingCostCBTExempt:              Boolean                                    Index (IS_OPTN) read FMaxFlatShippingCostCBTExempt write SetMaxFlatShippingCostCBTExempt stored MaxFlatShippingCostCBTExempt_Specified;
    property Group1MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup1MaxFlatShippingCost write SetGroup1MaxFlatShippingCost stored Group1MaxFlatShippingCost_Specified;
    property Group2MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup2MaxFlatShippingCost write SetGroup2MaxFlatShippingCost stored Group2MaxFlatShippingCost_Specified;
    property Group3MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup3MaxFlatShippingCost write SetGroup3MaxFlatShippingCost stored Group3MaxFlatShippingCost_Specified;
    property PaymentMethod:                             Array_Of_BuyerPaymentMethodCodeType        Index (IS_OPTN or IS_UNBD) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property VariationsEnabled:                         Boolean                                    Index (IS_OPTN) read FVariationsEnabled write SetVariationsEnabled stored VariationsEnabled_Specified;
    property AttributeConversionEnabled:                AttributeConversionEnabledCodeType         Index (IS_OPTN) read FAttributeConversionEnabled write SetAttributeConversionEnabled stored AttributeConversionEnabled_Specified;
    property FreeGalleryPlusEnabled:                    Boolean                                    Index (IS_OPTN) read FFreeGalleryPlusEnabled write SetFreeGalleryPlusEnabled stored FreeGalleryPlusEnabled_Specified;
    property FreePicturePackEnabled:                    Boolean                                    Index (IS_OPTN) read FFreePicturePackEnabled write SetFreePicturePackEnabled stored FreePicturePackEnabled_Specified;
    property ItemCompatibilityEnabled:                  ItemCompatibilityEnabledCodeType           Index (IS_OPTN) read FItemCompatibilityEnabled write SetItemCompatibilityEnabled stored ItemCompatibilityEnabled_Specified;
    property MinItemCompatibility:                      Integer                                    Index (IS_OPTN) read FMinItemCompatibility write SetMinItemCompatibility stored MinItemCompatibility_Specified;
    property MaxItemCompatibility:                      Integer                                    Index (IS_OPTN) read FMaxItemCompatibility write SetMaxItemCompatibility stored MaxItemCompatibility_Specified;
    property ConditionEnabled:                          ConditionEnabledCodeType                   Index (IS_OPTN) read FConditionEnabled write SetConditionEnabled stored ConditionEnabled_Specified;
    property ConditionValues:                           ConditionValuesType                        Index (IS_OPTN) read FConditionValues write SetConditionValues stored ConditionValues_Specified;
    property ValueCategory:                             Boolean                                    Index (IS_OPTN) read FValueCategory write SetValueCategory stored ValueCategory_Specified;
    property ProductCreationEnabled:                    ProductCreationEnabledCodeType             Index (IS_OPTN) read FProductCreationEnabled write SetProductCreationEnabled stored ProductCreationEnabled_Specified;
    property EANEnabled:                                ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FEANEnabled write SetEANEnabled stored EANEnabled_Specified;
    property ISBNEnabled:                               ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FISBNEnabled write SetISBNEnabled stored ISBNEnabled_Specified;
    property UPCEnabled:                                ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FUPCEnabled write SetUPCEnabled stored UPCEnabled_Specified;
    property MaxGranularFitmentCount:                   Integer                                    Index (IS_OPTN) read FMaxGranularFitmentCount write SetMaxGranularFitmentCount stored MaxGranularFitmentCount_Specified;
    property CompatibleVehicleType:                     string                                     Index (IS_OPTN) read FCompatibleVehicleType write SetCompatibleVehicleType stored CompatibleVehicleType_Specified;
    property PaymentOptionsGroup:                       PaymentOptionsGroupEnabledCodeType         Index (IS_OPTN) read FPaymentOptionsGroup write SetPaymentOptionsGroup stored PaymentOptionsGroup_Specified;
    property ShippingProfileCategoryGroup:              ProfileCategoryGroupCodeType               Index (IS_OPTN) read FShippingProfileCategoryGroup write SetShippingProfileCategoryGroup stored ShippingProfileCategoryGroup_Specified;
    property PaymentProfileCategoryGroup:               ProfileCategoryGroupCodeType               Index (IS_OPTN) read FPaymentProfileCategoryGroup write SetPaymentProfileCategoryGroup stored PaymentProfileCategoryGroup_Specified;
    property ReturnPolicyProfileCategoryGroup:          ProfileCategoryGroupCodeType               Index (IS_OPTN) read FReturnPolicyProfileCategoryGroup write SetReturnPolicyProfileCategoryGroup stored ReturnPolicyProfileCategoryGroup_Specified;
    property VINSupported:                              Boolean                                    Index (IS_OPTN) read FVINSupported write SetVINSupported stored VINSupported_Specified;
    property VRMSupported:                              Boolean                                    Index (IS_OPTN) read FVRMSupported write SetVRMSupported stored VRMSupported_Specified;
    property SellerProvidedTitleSupported:              Boolean                                    Index (IS_OPTN) read FSellerProvidedTitleSupported write SetSellerProvidedTitleSupported stored SellerProvidedTitleSupported_Specified;
    property DepositSupported:                          Boolean                                    Index (IS_OPTN) read FDepositSupported write SetDepositSupported stored DepositSupported_Specified;
    property GlobalShippingEnabled:                     Boolean                                    Index (IS_OPTN) read FGlobalShippingEnabled write SetGlobalShippingEnabled stored GlobalShippingEnabled_Specified;
    property AdditionalCompatibilityEnabled:            Boolean                                    Index (IS_OPTN) read FAdditionalCompatibilityEnabled write SetAdditionalCompatibilityEnabled stored AdditionalCompatibilityEnabled_Specified;
    property PickupDropOffEnabled:                      Boolean                                    Index (IS_OPTN) read FPickupDropOffEnabled write SetPickupDropOffEnabled stored PickupDropOffEnabled_Specified;
    property DigitalGoodDeliveryEnabled:                Boolean                                    Index (IS_OPTN) read FDigitalGoodDeliveryEnabled write SetDigitalGoodDeliveryEnabled stored DigitalGoodDeliveryEnabled_Specified;
    property EpidSupported:                             Boolean                                    Index (IS_OPTN) read FEpidSupported write SetEpidSupported stored EpidSupported_Specified;
    property KTypeSupported:                            Boolean                                    Index (IS_OPTN) read FKTypeSupported write SetKTypeSupported stored KTypeSupported_Specified;
    property ProductRequiredEnabled:                    ProductRequiredEnabledCodeType             Index (IS_OPTN) read FProductRequiredEnabled write SetProductRequiredEnabled stored ProductRequiredEnabled_Specified;
    property DomesticReturnsAcceptedValues:             DomesticReturnsAcceptedCodeType            Index (IS_OPTN) read FDomesticReturnsAcceptedValues write SetDomesticReturnsAcceptedValues stored DomesticReturnsAcceptedValues_Specified;
    property InternationalReturnsAcceptedValues:        InternationalReturnsAcceptedCodeType       Index (IS_OPTN) read FInternationalReturnsAcceptedValues write SetInternationalReturnsAcceptedValues stored InternationalReturnsAcceptedValues_Specified;
    property DomesticReturnsDurationValues:             DomesticReturnsDurationCodeType            Index (IS_OPTN) read FDomesticReturnsDurationValues write SetDomesticReturnsDurationValues stored DomesticReturnsDurationValues_Specified;
    property InternationalReturnsDurationValues:        InternationalReturnsDurationCodeType       Index (IS_OPTN) read FInternationalReturnsDurationValues write SetInternationalReturnsDurationValues stored InternationalReturnsDurationValues_Specified;
    property DomesticReturnsShipmentPayeeValues:        DomesticReturnsShipmentPayeeCodeType       Index (IS_OPTN) read FDomesticReturnsShipmentPayeeValues write SetDomesticReturnsShipmentPayeeValues stored DomesticReturnsShipmentPayeeValues_Specified;
    property InternationalReturnsShipmentPayeeValues:   InternationalReturnsShipmentPayeeCodeType  Index (IS_OPTN) read FInternationalReturnsShipmentPayeeValues write SetInternationalReturnsShipmentPayeeValues stored InternationalReturnsShipmentPayeeValues_Specified;
    property DomesticRefundMethodValues:                DomesticRefundMethodCodeType               Index (IS_OPTN) read FDomesticRefundMethodValues write SetDomesticRefundMethodValues stored DomesticRefundMethodValues_Specified;
    property InternationalRefundMethodValues:           InternationalRefundMethodCodeType          Index (IS_OPTN) read FInternationalRefundMethodValues write SetInternationalRefundMethodValues stored InternationalRefundMethodValues_Specified;
    property ReturnPolicyDescriptionEnabled:            Boolean                                    Index (IS_OPTN) read FReturnPolicyDescriptionEnabled write SetReturnPolicyDescriptionEnabled stored ReturnPolicyDescriptionEnabled_Specified;
  end;



  // ************************************************************************ //
  // XML       : CategoryFeatureType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryFeatureType = class(TRemotable)
  private
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FListingDuration: Array_Of_ListingDurationReferenceType;
    FListingDuration_Specified: boolean;
    FShippingTermsRequired: Boolean;
    FShippingTermsRequired_Specified: boolean;
    FBestOfferEnabled: Boolean;
    FBestOfferEnabled_Specified: boolean;
    FDutchBINEnabled: Boolean;
    FDutchBINEnabled_Specified: boolean;
    FUserConsentRequired: Boolean;
    FUserConsentRequired_Specified: boolean;
    FHomePageFeaturedEnabled: Boolean;
    FHomePageFeaturedEnabled_Specified: boolean;
    FProPackEnabled: Boolean;
    FProPackEnabled_Specified: boolean;
    FBasicUpgradePackEnabled: Boolean;
    FBasicUpgradePackEnabled_Specified: boolean;
    FValuePackEnabled: Boolean;
    FValuePackEnabled_Specified: boolean;
    FProPackPlusEnabled: Boolean;
    FProPackPlusEnabled_Specified: boolean;
    FAdFormatEnabled: AdFormatEnabledCodeType;
    FAdFormatEnabled_Specified: boolean;
    FBestOfferCounterEnabled: Boolean;
    FBestOfferCounterEnabled_Specified: boolean;
    FBestOfferAutoDeclineEnabled: Boolean;
    FBestOfferAutoDeclineEnabled_Specified: boolean;
    FLocalMarketSpecialitySubscription: Boolean;
    FLocalMarketSpecialitySubscription_Specified: boolean;
    FLocalMarketRegularSubscription: Boolean;
    FLocalMarketRegularSubscription_Specified: boolean;
    FLocalMarketPremiumSubscription: Boolean;
    FLocalMarketPremiumSubscription_Specified: boolean;
    FLocalMarketNonSubscription: Boolean;
    FLocalMarketNonSubscription_Specified: boolean;
    FExpressEnabled: Boolean;
    FExpressEnabled_Specified: boolean;
    FExpressPicturesRequired: Boolean;
    FExpressPicturesRequired_Specified: boolean;
    FExpressConditionRequired: Boolean;
    FExpressConditionRequired_Specified: boolean;
    FMinimumReservePrice: Double;
    FMinimumReservePrice_Specified: boolean;
    FSellerContactDetailsEnabled: Boolean;
    FSellerContactDetailsEnabled_Specified: boolean;
    FTransactionConfirmationRequestEnabled: Boolean;
    FTransactionConfirmationRequestEnabled_Specified: boolean;
    FStoreInventoryEnabled: Boolean;
    FStoreInventoryEnabled_Specified: boolean;
    FSkypeMeTransactionalEnabled: Boolean;
    FSkypeMeTransactionalEnabled_Specified: boolean;
    FSkypeMeNonTransactionalEnabled: Boolean;
    FSkypeMeNonTransactionalEnabled_Specified: boolean;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FClassifiedAdPaymentMethodEnabled_Specified: boolean;
    FClassifiedAdShippingMethodEnabled: Boolean;
    FClassifiedAdShippingMethodEnabled_Specified: boolean;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FClassifiedAdBestOfferEnabled_Specified: boolean;
    FClassifiedAdCounterOfferEnabled: Boolean;
    FClassifiedAdCounterOfferEnabled_Specified: boolean;
    FClassifiedAdAutoDeclineEnabled: Boolean;
    FClassifiedAdAutoDeclineEnabled_Specified: boolean;
    FClassifiedAdContactByPhoneEnabled: Boolean;
    FClassifiedAdContactByPhoneEnabled_Specified: boolean;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FClassifiedAdContactByEmailEnabled_Specified: boolean;
    FSafePaymentRequired: Boolean;
    FSafePaymentRequired_Specified: boolean;
    FClassifiedAdPayPerLeadEnabled: Boolean;
    FClassifiedAdPayPerLeadEnabled_Specified: boolean;
    FItemSpecificsEnabled: ItemSpecificsEnabledCodeType;
    FItemSpecificsEnabled_Specified: boolean;
    FPaisaPayFullEscrowEnabled: Boolean;
    FPaisaPayFullEscrowEnabled_Specified: boolean;
    FBrandMPNIdentifierEnabled: Boolean;
    FBrandMPNIdentifierEnabled_Specified: boolean;
    FClassifiedAdAutoAcceptEnabled: Boolean;
    FClassifiedAdAutoAcceptEnabled_Specified: boolean;
    FBestOfferAutoAcceptEnabled: Boolean;
    FBestOfferAutoAcceptEnabled_Specified: boolean;
    FCrossBorderTradeNorthAmericaEnabled: Boolean;
    FCrossBorderTradeNorthAmericaEnabled_Specified: boolean;
    FCrossBorderTradeGBEnabled: Boolean;
    FCrossBorderTradeGBEnabled_Specified: boolean;
    FCrossBorderTradeAustraliaEnabled: Boolean;
    FCrossBorderTradeAustraliaEnabled_Specified: boolean;
    FPayPalBuyerProtectionEnabled: Boolean;
    FPayPalBuyerProtectionEnabled_Specified: boolean;
    FBuyerGuaranteeEnabled: Boolean;
    FBuyerGuaranteeEnabled_Specified: boolean;
    FCombinedFixedPriceTreatmentEnabled: Boolean;
    FCombinedFixedPriceTreatmentEnabled_Specified: boolean;
    FGalleryFeaturedDurations: ListingEnhancementDurationReferenceType;
    FGalleryFeaturedDurations_Specified: boolean;
    FPayPalRequired: Boolean;
    FPayPalRequired_Specified: boolean;
    FeBayMotorsProAdFormatEnabled: AdFormatEnabledCodeType;
    FeBayMotorsProAdFormatEnabled_Specified: boolean;
    FeBayMotorsProContactByPhoneEnabled: Boolean;
    FeBayMotorsProContactByPhoneEnabled_Specified: boolean;
    FeBayMotorsProPhoneCount: Integer;
    FeBayMotorsProPhoneCount_Specified: boolean;
    FeBayMotorsProContactByAddressEnabled: Boolean;
    FeBayMotorsProContactByAddressEnabled_Specified: boolean;
    FeBayMotorsProStreetCount: Integer;
    FeBayMotorsProStreetCount_Specified: boolean;
    FeBayMotorsProCompanyNameEnabled: Boolean;
    FeBayMotorsProCompanyNameEnabled_Specified: boolean;
    FeBayMotorsProContactByEmailEnabled: Boolean;
    FeBayMotorsProContactByEmailEnabled_Specified: boolean;
    FeBayMotorsProBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FeBayMotorsProBestOfferEnabled_Specified: boolean;
    FeBayMotorsProAutoAcceptEnabled: Boolean;
    FeBayMotorsProAutoAcceptEnabled_Specified: boolean;
    FeBayMotorsProAutoDeclineEnabled: Boolean;
    FeBayMotorsProAutoDeclineEnabled_Specified: boolean;
    FeBayMotorsProPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FeBayMotorsProPaymentMethodCheckOutEnabled_Specified: boolean;
    FeBayMotorsProShippingMethodEnabled: Boolean;
    FeBayMotorsProShippingMethodEnabled_Specified: boolean;
    FeBayMotorsProCounterOfferEnabled: Boolean;
    FeBayMotorsProCounterOfferEnabled_Specified: boolean;
    FeBayMotorsProSellerContactDetailsEnabled: Boolean;
    FeBayMotorsProSellerContactDetailsEnabled_Specified: boolean;
    FLocalMarketAdFormatEnabled: AdFormatEnabledCodeType;
    FLocalMarketAdFormatEnabled_Specified: boolean;
    FLocalMarketContactByPhoneEnabled: Boolean;
    FLocalMarketContactByPhoneEnabled_Specified: boolean;
    FLocalMarketPhoneCount: Integer;
    FLocalMarketPhoneCount_Specified: boolean;
    FLocalMarketContactByAddressEnabled: Boolean;
    FLocalMarketContactByAddressEnabled_Specified: boolean;
    FLocalMarketStreetCount: Integer;
    FLocalMarketStreetCount_Specified: boolean;
    FLocalMarketCompanyNameEnabled: Boolean;
    FLocalMarketCompanyNameEnabled_Specified: boolean;
    FLocalMarketContactByEmailEnabled: Boolean;
    FLocalMarketContactByEmailEnabled_Specified: boolean;
    FLocalMarketBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FLocalMarketBestOfferEnabled_Specified: boolean;
    FLocalMarketAutoAcceptEnabled: Boolean;
    FLocalMarketAutoAcceptEnabled_Specified: boolean;
    FLocalMarketAutoDeclineEnabled: Boolean;
    FLocalMarketAutoDeclineEnabled_Specified: boolean;
    FLocalMarketPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FLocalMarketPaymentMethodCheckOutEnabled_Specified: boolean;
    FLocalMarketShippingMethodEnabled: Boolean;
    FLocalMarketShippingMethodEnabled_Specified: boolean;
    FLocalMarketCounterOfferEnabled: Boolean;
    FLocalMarketCounterOfferEnabled_Specified: boolean;
    FLocalMarketSellerContactDetailsEnabled: Boolean;
    FLocalMarketSellerContactDetailsEnabled_Specified: boolean;
    FClassifiedAdPhoneCount: Integer;
    FClassifiedAdPhoneCount_Specified: boolean;
    FClassifiedAdContactByAddressEnabled: Boolean;
    FClassifiedAdContactByAddressEnabled_Specified: boolean;
    FClassifiedAdStreetCount: Integer;
    FClassifiedAdStreetCount_Specified: boolean;
    FClassifiedAdCompanyNameEnabled: Boolean;
    FClassifiedAdCompanyNameEnabled_Specified: boolean;
    FSpecialitySubscription: GeographicExposureCodeType;
    FSpecialitySubscription_Specified: boolean;
    FRegularSubscription: GeographicExposureCodeType;
    FRegularSubscription_Specified: boolean;
    FPremiumSubscription: GeographicExposureCodeType;
    FPremiumSubscription_Specified: boolean;
    FNonSubscription: GeographicExposureCodeType;
    FNonSubscription_Specified: boolean;
    FINEscrowWorkflowTimeline: INEscrowWorkflowTimelineCodeType;
    FINEscrowWorkflowTimeline_Specified: boolean;
    FPayPalRequiredForStoreOwner: Boolean;
    FPayPalRequiredForStoreOwner_Specified: boolean;
    FReviseQuantityAllowed: Boolean;
    FReviseQuantityAllowed_Specified: boolean;
    FRevisePriceAllowed: Boolean;
    FRevisePriceAllowed_Specified: boolean;
    FStoreOwnerExtendedListingDurationsEnabled: Boolean;
    FStoreOwnerExtendedListingDurationsEnabled_Specified: boolean;
    FStoreOwnerExtendedListingDurations: StoreOwnerExtendedListingDurationsType;
    FStoreOwnerExtendedListingDurations_Specified: boolean;
    FReturnPolicyEnabled: Boolean;
    FReturnPolicyEnabled_Specified: boolean;
    FHandlingTimeEnabled: Boolean;
    FHandlingTimeEnabled_Specified: boolean;
    FMaxFlatShippingCost: AmountType;
    FMaxFlatShippingCost_Specified: boolean;
    FGroup1MaxFlatShippingCost: AmountType;
    FGroup1MaxFlatShippingCost_Specified: boolean;
    FGroup2MaxFlatShippingCost: AmountType;
    FGroup2MaxFlatShippingCost_Specified: boolean;
    FGroup3MaxFlatShippingCost: AmountType;
    FGroup3MaxFlatShippingCost_Specified: boolean;
    FPaymentMethod: Array_Of_BuyerPaymentMethodCodeType;
    FPaymentMethod_Specified: boolean;
    FVariationsEnabled: Boolean;
    FVariationsEnabled_Specified: boolean;
    FAttributeConversionEnabled: AttributeConversionEnabledCodeType;
    FAttributeConversionEnabled_Specified: boolean;
    FFreeGalleryPlusEnabled: Boolean;
    FFreeGalleryPlusEnabled_Specified: boolean;
    FFreePicturePackEnabled: Boolean;
    FFreePicturePackEnabled_Specified: boolean;
    FItemCompatibilityEnabled: ItemCompatibilityEnabledCodeType;
    FItemCompatibilityEnabled_Specified: boolean;
    FMinItemCompatibility: Integer;
    FMinItemCompatibility_Specified: boolean;
    FMaxItemCompatibility: Integer;
    FMaxItemCompatibility_Specified: boolean;
    FConditionEnabled: ConditionEnabledCodeType;
    FConditionEnabled_Specified: boolean;
    FConditionValues: ConditionValuesType;
    FConditionValues_Specified: boolean;
    FValueCategory: Boolean;
    FValueCategory_Specified: boolean;
    FProductCreationEnabled: ProductCreationEnabledCodeType;
    FProductCreationEnabled_Specified: boolean;
    FEANEnabled: ProductIdentiferEnabledCodeType;
    FEANEnabled_Specified: boolean;
    FISBNEnabled: ProductIdentiferEnabledCodeType;
    FISBNEnabled_Specified: boolean;
    FUPCEnabled: ProductIdentiferEnabledCodeType;
    FUPCEnabled_Specified: boolean;
    FMaxGranularFitmentCount: Integer;
    FMaxGranularFitmentCount_Specified: boolean;
    FCompatibleVehicleType: string;
    FCompatibleVehicleType_Specified: boolean;
    FPaymentOptionsGroup: PaymentOptionsGroupEnabledCodeType;
    FPaymentOptionsGroup_Specified: boolean;
    FShippingProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FShippingProfileCategoryGroup_Specified: boolean;
    FPaymentProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FPaymentProfileCategoryGroup_Specified: boolean;
    FReturnPolicyProfileCategoryGroup: ProfileCategoryGroupCodeType;
    FReturnPolicyProfileCategoryGroup_Specified: boolean;
    FVINSupported: Boolean;
    FVINSupported_Specified: boolean;
    FVRMSupported: Boolean;
    FVRMSupported_Specified: boolean;
    FSellerProvidedTitleSupported: Boolean;
    FSellerProvidedTitleSupported_Specified: boolean;
    FDepositSupported: Boolean;
    FDepositSupported_Specified: boolean;
    FGlobalShippingEnabled: Boolean;
    FGlobalShippingEnabled_Specified: boolean;
    FAdditionalCompatibilityEnabled: Boolean;
    FAdditionalCompatibilityEnabled_Specified: boolean;
    FPickupDropOffEnabled: Boolean;
    FPickupDropOffEnabled_Specified: boolean;
    FDigitalGoodDeliveryEnabled: Boolean;
    FDigitalGoodDeliveryEnabled_Specified: boolean;
    FEpidSupported: Boolean;
    FEpidSupported_Specified: boolean;
    FKTypeSupported: Boolean;
    FKTypeSupported_Specified: boolean;
    FProductRequiredEnabled: ProductRequiredEnabledCodeType;
    FProductRequiredEnabled_Specified: boolean;
    FDomesticReturnsAcceptedValues: DomesticReturnsAcceptedCodeType;
    FDomesticReturnsAcceptedValues_Specified: boolean;
    FInternationalReturnsAcceptedValues: InternationalReturnsAcceptedCodeType;
    FInternationalReturnsAcceptedValues_Specified: boolean;
    FDomesticReturnsDurationValues: DomesticReturnsDurationCodeType;
    FDomesticReturnsDurationValues_Specified: boolean;
    FInternationalReturnsDurationValues: InternationalReturnsDurationCodeType;
    FInternationalReturnsDurationValues_Specified: boolean;
    FDomesticReturnsShipmentPayeeValues: DomesticReturnsShipmentPayeeCodeType;
    FDomesticReturnsShipmentPayeeValues_Specified: boolean;
    FInternationalReturnsShipmentPayeeValues: InternationalReturnsShipmentPayeeCodeType;
    FInternationalReturnsShipmentPayeeValues_Specified: boolean;
    FDomesticRefundMethodValues: DomesticRefundMethodCodeType;
    FDomesticRefundMethodValues_Specified: boolean;
    FInternationalRefundMethodValues: InternationalRefundMethodCodeType;
    FInternationalRefundMethodValues_Specified: boolean;
    FReturnPolicyDescriptionEnabled: Boolean;
    FReturnPolicyDescriptionEnabled_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetListingDuration(Index: Integer; const AArray_Of_ListingDurationReferenceType: Array_Of_ListingDurationReferenceType);
    function  ListingDuration_Specified(Index: Integer): boolean;
    procedure SetShippingTermsRequired(Index: Integer; const ABoolean: Boolean);
    function  ShippingTermsRequired_Specified(Index: Integer): boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetDutchBINEnabled(Index: Integer; const ABoolean: Boolean);
    function  DutchBINEnabled_Specified(Index: Integer): boolean;
    procedure SetUserConsentRequired(Index: Integer; const ABoolean: Boolean);
    function  UserConsentRequired_Specified(Index: Integer): boolean;
    procedure SetHomePageFeaturedEnabled(Index: Integer; const ABoolean: Boolean);
    function  HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackEnabled(Index: Integer; const ABoolean: Boolean);
    function  ProPackEnabled_Specified(Index: Integer): boolean;
    procedure SetBasicUpgradePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
    procedure SetValuePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  ValuePackEnabled_Specified(Index: Integer): boolean;
    procedure SetProPackPlusEnabled(Index: Integer; const ABoolean: Boolean);
    function  ProPackPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  AdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferCounterEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferCounterEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSpecialitySubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketRegularSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPremiumSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetLocalMarketNonSubscription(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketNonSubscription_Specified(Index: Integer): boolean;
    procedure SetExpressEnabled(Index: Integer; const ABoolean: Boolean);
    function  ExpressEnabled_Specified(Index: Integer): boolean;
    procedure SetExpressPicturesRequired(Index: Integer; const ABoolean: Boolean);
    function  ExpressPicturesRequired_Specified(Index: Integer): boolean;
    procedure SetExpressConditionRequired(Index: Integer; const ABoolean: Boolean);
    function  ExpressConditionRequired_Specified(Index: Integer): boolean;
    procedure SetMinimumReservePrice(Index: Integer; const ADouble: Double);
    function  MinimumReservePrice_Specified(Index: Integer): boolean;
    procedure SetSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetTransactionConfirmationRequestEnabled(Index: Integer; const ABoolean: Boolean);
    function  TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreInventoryEnabled(Index: Integer; const ABoolean: Boolean);
    function  StoreInventoryEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
    function  SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetSkypeMeNonTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
    function  SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetSafePaymentRequired(Index: Integer; const ABoolean: Boolean);
    function  SafePaymentRequired_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
    procedure SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledCodeType: ItemSpecificsEnabledCodeType);
    function  ItemSpecificsEnabled_Specified(Index: Integer): boolean;
    procedure SetPaisaPayFullEscrowEnabled(Index: Integer; const ABoolean: Boolean);
    function  PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
    procedure SetBrandMPNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
    function  BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetBestOfferAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeGBEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ABoolean: Boolean);
    function  CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
    procedure SetPayPalBuyerProtectionEnabled(Index: Integer; const ABoolean: Boolean);
    function  PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
    procedure SetBuyerGuaranteeEnabled(Index: Integer; const ABoolean: Boolean);
    function  BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
    procedure SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ABoolean: Boolean);
    function  CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
    procedure SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
    function  GalleryFeaturedDurations_Specified(Index: Integer): boolean;
    procedure SetPayPalRequired(Index: Integer; const ABoolean: Boolean);
    function  PayPalRequired_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPhoneCount(Index: Integer; const AInteger: Integer);
    function  eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProStreetCount(Index: Integer; const AInteger: Integer);
    function  eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
    function  LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPhoneCount(Index: Integer; const AInteger: Integer);
    function  LocalMarketPhoneCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketStreetCount(Index: Integer; const AInteger: Integer);
    function  LocalMarketStreetCount_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
    function  LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
    function  LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
    function  LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPhoneCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdStreetCount(Index: Integer; const AInteger: Integer);
    function  ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
    function  ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
    procedure SetSpecialitySubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  SpecialitySubscription_Specified(Index: Integer): boolean;
    procedure SetRegularSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  RegularSubscription_Specified(Index: Integer): boolean;
    procedure SetPremiumSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  PremiumSubscription_Specified(Index: Integer): boolean;
    procedure SetNonSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
    function  NonSubscription_Specified(Index: Integer): boolean;
    procedure SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineCodeType: INEscrowWorkflowTimelineCodeType);
    function  INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
    procedure SetPayPalRequiredForStoreOwner(Index: Integer; const ABoolean: Boolean);
    function  PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
    procedure SetReviseQuantityAllowed(Index: Integer; const ABoolean: Boolean);
    function  ReviseQuantityAllowed_Specified(Index: Integer): boolean;
    procedure SetRevisePriceAllowed(Index: Integer; const ABoolean: Boolean);
    function  RevisePriceAllowed_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const ABoolean: Boolean);
    function  StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
    procedure SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsType: StoreOwnerExtendedListingDurationsType);
    function  StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyEnabled(Index: Integer; const ABoolean: Boolean);
    function  ReturnPolicyEnabled_Specified(Index: Integer): boolean;
    procedure SetHandlingTimeEnabled(Index: Integer; const ABoolean: Boolean);
    function  HandlingTimeEnabled_Specified(Index: Integer): boolean;
    procedure SetMaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup1MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup2MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetGroup3MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
    function  Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetVariationsEnabled(Index: Integer; const ABoolean: Boolean);
    function  VariationsEnabled_Specified(Index: Integer): boolean;
    procedure SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledCodeType: AttributeConversionEnabledCodeType);
    function  AttributeConversionEnabled_Specified(Index: Integer): boolean;
    procedure SetFreeGalleryPlusEnabled(Index: Integer; const ABoolean: Boolean);
    function  FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
    procedure SetFreePicturePackEnabled(Index: Integer; const ABoolean: Boolean);
    function  FreePicturePackEnabled_Specified(Index: Integer): boolean;
    procedure SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledCodeType: ItemCompatibilityEnabledCodeType);
    function  ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetMinItemCompatibility(Index: Integer; const AInteger: Integer);
    function  MinItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetMaxItemCompatibility(Index: Integer; const AInteger: Integer);
    function  MaxItemCompatibility_Specified(Index: Integer): boolean;
    procedure SetConditionEnabled(Index: Integer; const AConditionEnabledCodeType: ConditionEnabledCodeType);
    function  ConditionEnabled_Specified(Index: Integer): boolean;
    procedure SetConditionValues(Index: Integer; const AConditionValuesType: ConditionValuesType);
    function  ConditionValues_Specified(Index: Integer): boolean;
    procedure SetValueCategory(Index: Integer; const ABoolean: Boolean);
    function  ValueCategory_Specified(Index: Integer): boolean;
    procedure SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledCodeType: ProductCreationEnabledCodeType);
    function  ProductCreationEnabled_Specified(Index: Integer): boolean;
    procedure SetEANEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  EANEnabled_Specified(Index: Integer): boolean;
    procedure SetISBNEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  ISBNEnabled_Specified(Index: Integer): boolean;
    procedure SetUPCEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
    function  UPCEnabled_Specified(Index: Integer): boolean;
    procedure SetMaxGranularFitmentCount(Index: Integer; const AInteger: Integer);
    function  MaxGranularFitmentCount_Specified(Index: Integer): boolean;
    procedure SetCompatibleVehicleType(Index: Integer; const Astring: string);
    function  CompatibleVehicleType_Specified(Index: Integer): boolean;
    procedure SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledCodeType: PaymentOptionsGroupEnabledCodeType);
    function  PaymentOptionsGroup_Specified(Index: Integer): boolean;
    procedure SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
    function  ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
    procedure SetVINSupported(Index: Integer; const ABoolean: Boolean);
    function  VINSupported_Specified(Index: Integer): boolean;
    procedure SetVRMSupported(Index: Integer; const ABoolean: Boolean);
    function  VRMSupported_Specified(Index: Integer): boolean;
    procedure SetSellerProvidedTitleSupported(Index: Integer; const ABoolean: Boolean);
    function  SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
    procedure SetDepositSupported(Index: Integer; const ABoolean: Boolean);
    function  DepositSupported_Specified(Index: Integer): boolean;
    procedure SetGlobalShippingEnabled(Index: Integer; const ABoolean: Boolean);
    function  GlobalShippingEnabled_Specified(Index: Integer): boolean;
    procedure SetAdditionalCompatibilityEnabled(Index: Integer; const ABoolean: Boolean);
    function  AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
    procedure SetPickupDropOffEnabled(Index: Integer; const ABoolean: Boolean);
    function  PickupDropOffEnabled_Specified(Index: Integer): boolean;
    procedure SetDigitalGoodDeliveryEnabled(Index: Integer; const ABoolean: Boolean);
    function  DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
    procedure SetEpidSupported(Index: Integer; const ABoolean: Boolean);
    function  EpidSupported_Specified(Index: Integer): boolean;
    procedure SetKTypeSupported(Index: Integer; const ABoolean: Boolean);
    function  KTypeSupported_Specified(Index: Integer): boolean;
    procedure SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledCodeType: ProductRequiredEnabledCodeType);
    function  ProductRequiredEnabled_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedCodeType: DomesticReturnsAcceptedCodeType);
    function  DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedCodeType: InternationalReturnsAcceptedCodeType);
    function  InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationCodeType: DomesticReturnsDurationCodeType);
    function  DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationCodeType: InternationalReturnsDurationCodeType);
    function  InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
    procedure SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeCodeType: DomesticReturnsShipmentPayeeCodeType);
    function  DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeCodeType: InternationalReturnsShipmentPayeeCodeType);
    function  InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
    procedure SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
    function  DomesticRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
    function  InternationalRefundMethodValues_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyDescriptionEnabled(Index: Integer; const ABoolean: Boolean);
    function  ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CategoryID:                                string                                     Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property ListingDuration:                           Array_Of_ListingDurationReferenceType      Index (IS_OPTN or IS_UNBD) read FListingDuration write SetListingDuration stored ListingDuration_Specified;
    property ShippingTermsRequired:                     Boolean                                    Index (IS_OPTN) read FShippingTermsRequired write SetShippingTermsRequired stored ShippingTermsRequired_Specified;
    property BestOfferEnabled:                          Boolean                                    Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property DutchBINEnabled:                           Boolean                                    Index (IS_OPTN) read FDutchBINEnabled write SetDutchBINEnabled stored DutchBINEnabled_Specified;
    property UserConsentRequired:                       Boolean                                    Index (IS_OPTN) read FUserConsentRequired write SetUserConsentRequired stored UserConsentRequired_Specified;
    property HomePageFeaturedEnabled:                   Boolean                                    Index (IS_OPTN) read FHomePageFeaturedEnabled write SetHomePageFeaturedEnabled stored HomePageFeaturedEnabled_Specified;
    property ProPackEnabled:                            Boolean                                    Index (IS_OPTN) read FProPackEnabled write SetProPackEnabled stored ProPackEnabled_Specified;
    property BasicUpgradePackEnabled:                   Boolean                                    Index (IS_OPTN) read FBasicUpgradePackEnabled write SetBasicUpgradePackEnabled stored BasicUpgradePackEnabled_Specified;
    property ValuePackEnabled:                          Boolean                                    Index (IS_OPTN) read FValuePackEnabled write SetValuePackEnabled stored ValuePackEnabled_Specified;
    property ProPackPlusEnabled:                        Boolean                                    Index (IS_OPTN) read FProPackPlusEnabled write SetProPackPlusEnabled stored ProPackPlusEnabled_Specified;
    property AdFormatEnabled:                           AdFormatEnabledCodeType                    Index (IS_OPTN) read FAdFormatEnabled write SetAdFormatEnabled stored AdFormatEnabled_Specified;
    property BestOfferCounterEnabled:                   Boolean                                    Index (IS_OPTN) read FBestOfferCounterEnabled write SetBestOfferCounterEnabled stored BestOfferCounterEnabled_Specified;
    property BestOfferAutoDeclineEnabled:               Boolean                                    Index (IS_OPTN) read FBestOfferAutoDeclineEnabled write SetBestOfferAutoDeclineEnabled stored BestOfferAutoDeclineEnabled_Specified;
    property LocalMarketSpecialitySubscription:         Boolean                                    Index (IS_OPTN) read FLocalMarketSpecialitySubscription write SetLocalMarketSpecialitySubscription stored LocalMarketSpecialitySubscription_Specified;
    property LocalMarketRegularSubscription:            Boolean                                    Index (IS_OPTN) read FLocalMarketRegularSubscription write SetLocalMarketRegularSubscription stored LocalMarketRegularSubscription_Specified;
    property LocalMarketPremiumSubscription:            Boolean                                    Index (IS_OPTN) read FLocalMarketPremiumSubscription write SetLocalMarketPremiumSubscription stored LocalMarketPremiumSubscription_Specified;
    property LocalMarketNonSubscription:                Boolean                                    Index (IS_OPTN) read FLocalMarketNonSubscription write SetLocalMarketNonSubscription stored LocalMarketNonSubscription_Specified;
    property ExpressEnabled:                            Boolean                                    Index (IS_OPTN) read FExpressEnabled write SetExpressEnabled stored ExpressEnabled_Specified;
    property ExpressPicturesRequired:                   Boolean                                    Index (IS_OPTN) read FExpressPicturesRequired write SetExpressPicturesRequired stored ExpressPicturesRequired_Specified;
    property ExpressConditionRequired:                  Boolean                                    Index (IS_OPTN) read FExpressConditionRequired write SetExpressConditionRequired stored ExpressConditionRequired_Specified;
    property MinimumReservePrice:                       Double                                     Index (IS_OPTN) read FMinimumReservePrice write SetMinimumReservePrice stored MinimumReservePrice_Specified;
    property SellerContactDetailsEnabled:               Boolean                                    Index (IS_OPTN) read FSellerContactDetailsEnabled write SetSellerContactDetailsEnabled stored SellerContactDetailsEnabled_Specified;
    property TransactionConfirmationRequestEnabled:     Boolean                                    Index (IS_OPTN) read FTransactionConfirmationRequestEnabled write SetTransactionConfirmationRequestEnabled stored TransactionConfirmationRequestEnabled_Specified;
    property StoreInventoryEnabled:                     Boolean                                    Index (IS_OPTN) read FStoreInventoryEnabled write SetStoreInventoryEnabled stored StoreInventoryEnabled_Specified;
    property SkypeMeTransactionalEnabled:               Boolean                                    Index (IS_OPTN) read FSkypeMeTransactionalEnabled write SetSkypeMeTransactionalEnabled stored SkypeMeTransactionalEnabled_Specified;
    property SkypeMeNonTransactionalEnabled:            Boolean                                    Index (IS_OPTN) read FSkypeMeNonTransactionalEnabled write SetSkypeMeNonTransactionalEnabled stored SkypeMeNonTransactionalEnabled_Specified;
    property ClassifiedAdPaymentMethodEnabled:          ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FClassifiedAdPaymentMethodEnabled write SetClassifiedAdPaymentMethodEnabled stored ClassifiedAdPaymentMethodEnabled_Specified;
    property ClassifiedAdShippingMethodEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdShippingMethodEnabled write SetClassifiedAdShippingMethodEnabled stored ClassifiedAdShippingMethodEnabled_Specified;
    property ClassifiedAdBestOfferEnabled:              ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FClassifiedAdBestOfferEnabled write SetClassifiedAdBestOfferEnabled stored ClassifiedAdBestOfferEnabled_Specified;
    property ClassifiedAdCounterOfferEnabled:           Boolean                                    Index (IS_OPTN) read FClassifiedAdCounterOfferEnabled write SetClassifiedAdCounterOfferEnabled stored ClassifiedAdCounterOfferEnabled_Specified;
    property ClassifiedAdAutoDeclineEnabled:            Boolean                                    Index (IS_OPTN) read FClassifiedAdAutoDeclineEnabled write SetClassifiedAdAutoDeclineEnabled stored ClassifiedAdAutoDeclineEnabled_Specified;
    property ClassifiedAdContactByPhoneEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByPhoneEnabled write SetClassifiedAdContactByPhoneEnabled stored ClassifiedAdContactByPhoneEnabled_Specified;
    property ClassifiedAdContactByEmailEnabled:         Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByEmailEnabled write SetClassifiedAdContactByEmailEnabled stored ClassifiedAdContactByEmailEnabled_Specified;
    property SafePaymentRequired:                       Boolean                                    Index (IS_OPTN) read FSafePaymentRequired write SetSafePaymentRequired stored SafePaymentRequired_Specified;
    property ClassifiedAdPayPerLeadEnabled:             Boolean                                    Index (IS_OPTN) read FClassifiedAdPayPerLeadEnabled write SetClassifiedAdPayPerLeadEnabled stored ClassifiedAdPayPerLeadEnabled_Specified;
    property ItemSpecificsEnabled:                      ItemSpecificsEnabledCodeType               Index (IS_OPTN) read FItemSpecificsEnabled write SetItemSpecificsEnabled stored ItemSpecificsEnabled_Specified;
    property PaisaPayFullEscrowEnabled:                 Boolean                                    Index (IS_OPTN) read FPaisaPayFullEscrowEnabled write SetPaisaPayFullEscrowEnabled stored PaisaPayFullEscrowEnabled_Specified;
    property BrandMPNIdentifierEnabled:                 Boolean                                    Index (IS_OPTN) read FBrandMPNIdentifierEnabled write SetBrandMPNIdentifierEnabled stored BrandMPNIdentifierEnabled_Specified;
    property ClassifiedAdAutoAcceptEnabled:             Boolean                                    Index (IS_OPTN) read FClassifiedAdAutoAcceptEnabled write SetClassifiedAdAutoAcceptEnabled stored ClassifiedAdAutoAcceptEnabled_Specified;
    property BestOfferAutoAcceptEnabled:                Boolean                                    Index (IS_OPTN) read FBestOfferAutoAcceptEnabled write SetBestOfferAutoAcceptEnabled stored BestOfferAutoAcceptEnabled_Specified;
    property CrossBorderTradeNorthAmericaEnabled:       Boolean                                    Index (IS_OPTN) read FCrossBorderTradeNorthAmericaEnabled write SetCrossBorderTradeNorthAmericaEnabled stored CrossBorderTradeNorthAmericaEnabled_Specified;
    property CrossBorderTradeGBEnabled:                 Boolean                                    Index (IS_OPTN) read FCrossBorderTradeGBEnabled write SetCrossBorderTradeGBEnabled stored CrossBorderTradeGBEnabled_Specified;
    property CrossBorderTradeAustraliaEnabled:          Boolean                                    Index (IS_OPTN) read FCrossBorderTradeAustraliaEnabled write SetCrossBorderTradeAustraliaEnabled stored CrossBorderTradeAustraliaEnabled_Specified;
    property PayPalBuyerProtectionEnabled:              Boolean                                    Index (IS_OPTN) read FPayPalBuyerProtectionEnabled write SetPayPalBuyerProtectionEnabled stored PayPalBuyerProtectionEnabled_Specified;
    property BuyerGuaranteeEnabled:                     Boolean                                    Index (IS_OPTN) read FBuyerGuaranteeEnabled write SetBuyerGuaranteeEnabled stored BuyerGuaranteeEnabled_Specified;
    property CombinedFixedPriceTreatmentEnabled:        Boolean                                    Index (IS_OPTN) read FCombinedFixedPriceTreatmentEnabled write SetCombinedFixedPriceTreatmentEnabled stored CombinedFixedPriceTreatmentEnabled_Specified;
    property GalleryFeaturedDurations:                  ListingEnhancementDurationReferenceType    Index (IS_OPTN) read FGalleryFeaturedDurations write SetGalleryFeaturedDurations stored GalleryFeaturedDurations_Specified;
    property PayPalRequired:                            Boolean                                    Index (IS_OPTN) read FPayPalRequired write SetPayPalRequired stored PayPalRequired_Specified;
    property eBayMotorsProAdFormatEnabled:              AdFormatEnabledCodeType                    Index (IS_OPTN) read FeBayMotorsProAdFormatEnabled write SeteBayMotorsProAdFormatEnabled stored eBayMotorsProAdFormatEnabled_Specified;
    property eBayMotorsProContactByPhoneEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByPhoneEnabled write SeteBayMotorsProContactByPhoneEnabled stored eBayMotorsProContactByPhoneEnabled_Specified;
    property eBayMotorsProPhoneCount:                   Integer                                    Index (IS_OPTN) read FeBayMotorsProPhoneCount write SeteBayMotorsProPhoneCount stored eBayMotorsProPhoneCount_Specified;
    property eBayMotorsProContactByAddressEnabled:      Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByAddressEnabled write SeteBayMotorsProContactByAddressEnabled stored eBayMotorsProContactByAddressEnabled_Specified;
    property eBayMotorsProStreetCount:                  Integer                                    Index (IS_OPTN) read FeBayMotorsProStreetCount write SeteBayMotorsProStreetCount stored eBayMotorsProStreetCount_Specified;
    property eBayMotorsProCompanyNameEnabled:           Boolean                                    Index (IS_OPTN) read FeBayMotorsProCompanyNameEnabled write SeteBayMotorsProCompanyNameEnabled stored eBayMotorsProCompanyNameEnabled_Specified;
    property eBayMotorsProContactByEmailEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProContactByEmailEnabled write SeteBayMotorsProContactByEmailEnabled stored eBayMotorsProContactByEmailEnabled_Specified;
    property eBayMotorsProBestOfferEnabled:             ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FeBayMotorsProBestOfferEnabled write SeteBayMotorsProBestOfferEnabled stored eBayMotorsProBestOfferEnabled_Specified;
    property eBayMotorsProAutoAcceptEnabled:            Boolean                                    Index (IS_OPTN) read FeBayMotorsProAutoAcceptEnabled write SeteBayMotorsProAutoAcceptEnabled stored eBayMotorsProAutoAcceptEnabled_Specified;
    property eBayMotorsProAutoDeclineEnabled:           Boolean                                    Index (IS_OPTN) read FeBayMotorsProAutoDeclineEnabled write SeteBayMotorsProAutoDeclineEnabled stored eBayMotorsProAutoDeclineEnabled_Specified;
    property eBayMotorsProPaymentMethodCheckOutEnabled: ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FeBayMotorsProPaymentMethodCheckOutEnabled write SeteBayMotorsProPaymentMethodCheckOutEnabled stored eBayMotorsProPaymentMethodCheckOutEnabled_Specified;
    property eBayMotorsProShippingMethodEnabled:        Boolean                                    Index (IS_OPTN) read FeBayMotorsProShippingMethodEnabled write SeteBayMotorsProShippingMethodEnabled stored eBayMotorsProShippingMethodEnabled_Specified;
    property eBayMotorsProCounterOfferEnabled:          Boolean                                    Index (IS_OPTN) read FeBayMotorsProCounterOfferEnabled write SeteBayMotorsProCounterOfferEnabled stored eBayMotorsProCounterOfferEnabled_Specified;
    property eBayMotorsProSellerContactDetailsEnabled:  Boolean                                    Index (IS_OPTN) read FeBayMotorsProSellerContactDetailsEnabled write SeteBayMotorsProSellerContactDetailsEnabled stored eBayMotorsProSellerContactDetailsEnabled_Specified;
    property LocalMarketAdFormatEnabled:                AdFormatEnabledCodeType                    Index (IS_OPTN) read FLocalMarketAdFormatEnabled write SetLocalMarketAdFormatEnabled stored LocalMarketAdFormatEnabled_Specified;
    property LocalMarketContactByPhoneEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketContactByPhoneEnabled write SetLocalMarketContactByPhoneEnabled stored LocalMarketContactByPhoneEnabled_Specified;
    property LocalMarketPhoneCount:                     Integer                                    Index (IS_OPTN) read FLocalMarketPhoneCount write SetLocalMarketPhoneCount stored LocalMarketPhoneCount_Specified;
    property LocalMarketContactByAddressEnabled:        Boolean                                    Index (IS_OPTN) read FLocalMarketContactByAddressEnabled write SetLocalMarketContactByAddressEnabled stored LocalMarketContactByAddressEnabled_Specified;
    property LocalMarketStreetCount:                    Integer                                    Index (IS_OPTN) read FLocalMarketStreetCount write SetLocalMarketStreetCount stored LocalMarketStreetCount_Specified;
    property LocalMarketCompanyNameEnabled:             Boolean                                    Index (IS_OPTN) read FLocalMarketCompanyNameEnabled write SetLocalMarketCompanyNameEnabled stored LocalMarketCompanyNameEnabled_Specified;
    property LocalMarketContactByEmailEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketContactByEmailEnabled write SetLocalMarketContactByEmailEnabled stored LocalMarketContactByEmailEnabled_Specified;
    property LocalMarketBestOfferEnabled:               ClassifiedAdBestOfferEnabledCodeType       Index (IS_OPTN) read FLocalMarketBestOfferEnabled write SetLocalMarketBestOfferEnabled stored LocalMarketBestOfferEnabled_Specified;
    property LocalMarketAutoAcceptEnabled:              Boolean                                    Index (IS_OPTN) read FLocalMarketAutoAcceptEnabled write SetLocalMarketAutoAcceptEnabled stored LocalMarketAutoAcceptEnabled_Specified;
    property LocalMarketAutoDeclineEnabled:             Boolean                                    Index (IS_OPTN) read FLocalMarketAutoDeclineEnabled write SetLocalMarketAutoDeclineEnabled stored LocalMarketAutoDeclineEnabled_Specified;
    property LocalMarketPaymentMethodCheckOutEnabled:   ClassifiedAdPaymentMethodEnabledCodeType   Index (IS_OPTN) read FLocalMarketPaymentMethodCheckOutEnabled write SetLocalMarketPaymentMethodCheckOutEnabled stored LocalMarketPaymentMethodCheckOutEnabled_Specified;
    property LocalMarketShippingMethodEnabled:          Boolean                                    Index (IS_OPTN) read FLocalMarketShippingMethodEnabled write SetLocalMarketShippingMethodEnabled stored LocalMarketShippingMethodEnabled_Specified;
    property LocalMarketCounterOfferEnabled:            Boolean                                    Index (IS_OPTN) read FLocalMarketCounterOfferEnabled write SetLocalMarketCounterOfferEnabled stored LocalMarketCounterOfferEnabled_Specified;
    property LocalMarketSellerContactDetailsEnabled:    Boolean                                    Index (IS_OPTN) read FLocalMarketSellerContactDetailsEnabled write SetLocalMarketSellerContactDetailsEnabled stored LocalMarketSellerContactDetailsEnabled_Specified;
    property ClassifiedAdPhoneCount:                    Integer                                    Index (IS_OPTN) read FClassifiedAdPhoneCount write SetClassifiedAdPhoneCount stored ClassifiedAdPhoneCount_Specified;
    property ClassifiedAdContactByAddressEnabled:       Boolean                                    Index (IS_OPTN) read FClassifiedAdContactByAddressEnabled write SetClassifiedAdContactByAddressEnabled stored ClassifiedAdContactByAddressEnabled_Specified;
    property ClassifiedAdStreetCount:                   Integer                                    Index (IS_OPTN) read FClassifiedAdStreetCount write SetClassifiedAdStreetCount stored ClassifiedAdStreetCount_Specified;
    property ClassifiedAdCompanyNameEnabled:            Boolean                                    Index (IS_OPTN) read FClassifiedAdCompanyNameEnabled write SetClassifiedAdCompanyNameEnabled stored ClassifiedAdCompanyNameEnabled_Specified;
    property SpecialitySubscription:                    GeographicExposureCodeType                 Index (IS_OPTN) read FSpecialitySubscription write SetSpecialitySubscription stored SpecialitySubscription_Specified;
    property RegularSubscription:                       GeographicExposureCodeType                 Index (IS_OPTN) read FRegularSubscription write SetRegularSubscription stored RegularSubscription_Specified;
    property PremiumSubscription:                       GeographicExposureCodeType                 Index (IS_OPTN) read FPremiumSubscription write SetPremiumSubscription stored PremiumSubscription_Specified;
    property NonSubscription:                           GeographicExposureCodeType                 Index (IS_OPTN) read FNonSubscription write SetNonSubscription stored NonSubscription_Specified;
    property INEscrowWorkflowTimeline:                  INEscrowWorkflowTimelineCodeType           Index (IS_OPTN) read FINEscrowWorkflowTimeline write SetINEscrowWorkflowTimeline stored INEscrowWorkflowTimeline_Specified;
    property PayPalRequiredForStoreOwner:               Boolean                                    Index (IS_OPTN) read FPayPalRequiredForStoreOwner write SetPayPalRequiredForStoreOwner stored PayPalRequiredForStoreOwner_Specified;
    property ReviseQuantityAllowed:                     Boolean                                    Index (IS_OPTN) read FReviseQuantityAllowed write SetReviseQuantityAllowed stored ReviseQuantityAllowed_Specified;
    property RevisePriceAllowed:                        Boolean                                    Index (IS_OPTN) read FRevisePriceAllowed write SetRevisePriceAllowed stored RevisePriceAllowed_Specified;
    property StoreOwnerExtendedListingDurationsEnabled: Boolean                                    Index (IS_OPTN) read FStoreOwnerExtendedListingDurationsEnabled write SetStoreOwnerExtendedListingDurationsEnabled stored StoreOwnerExtendedListingDurationsEnabled_Specified;
    property StoreOwnerExtendedListingDurations:        StoreOwnerExtendedListingDurationsType     Index (IS_OPTN) read FStoreOwnerExtendedListingDurations write SetStoreOwnerExtendedListingDurations stored StoreOwnerExtendedListingDurations_Specified;
    property ReturnPolicyEnabled:                       Boolean                                    Index (IS_OPTN) read FReturnPolicyEnabled write SetReturnPolicyEnabled stored ReturnPolicyEnabled_Specified;
    property HandlingTimeEnabled:                       Boolean                                    Index (IS_OPTN) read FHandlingTimeEnabled write SetHandlingTimeEnabled stored HandlingTimeEnabled_Specified;
    property MaxFlatShippingCost:                       AmountType                                 Index (IS_OPTN) read FMaxFlatShippingCost write SetMaxFlatShippingCost stored MaxFlatShippingCost_Specified;
    property Group1MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup1MaxFlatShippingCost write SetGroup1MaxFlatShippingCost stored Group1MaxFlatShippingCost_Specified;
    property Group2MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup2MaxFlatShippingCost write SetGroup2MaxFlatShippingCost stored Group2MaxFlatShippingCost_Specified;
    property Group3MaxFlatShippingCost:                 AmountType                                 Index (IS_OPTN) read FGroup3MaxFlatShippingCost write SetGroup3MaxFlatShippingCost stored Group3MaxFlatShippingCost_Specified;
    property PaymentMethod:                             Array_Of_BuyerPaymentMethodCodeType        Index (IS_OPTN or IS_UNBD) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property VariationsEnabled:                         Boolean                                    Index (IS_OPTN) read FVariationsEnabled write SetVariationsEnabled stored VariationsEnabled_Specified;
    property AttributeConversionEnabled:                AttributeConversionEnabledCodeType         Index (IS_OPTN) read FAttributeConversionEnabled write SetAttributeConversionEnabled stored AttributeConversionEnabled_Specified;
    property FreeGalleryPlusEnabled:                    Boolean                                    Index (IS_OPTN) read FFreeGalleryPlusEnabled write SetFreeGalleryPlusEnabled stored FreeGalleryPlusEnabled_Specified;
    property FreePicturePackEnabled:                    Boolean                                    Index (IS_OPTN) read FFreePicturePackEnabled write SetFreePicturePackEnabled stored FreePicturePackEnabled_Specified;
    property ItemCompatibilityEnabled:                  ItemCompatibilityEnabledCodeType           Index (IS_OPTN) read FItemCompatibilityEnabled write SetItemCompatibilityEnabled stored ItemCompatibilityEnabled_Specified;
    property MinItemCompatibility:                      Integer                                    Index (IS_OPTN) read FMinItemCompatibility write SetMinItemCompatibility stored MinItemCompatibility_Specified;
    property MaxItemCompatibility:                      Integer                                    Index (IS_OPTN) read FMaxItemCompatibility write SetMaxItemCompatibility stored MaxItemCompatibility_Specified;
    property ConditionEnabled:                          ConditionEnabledCodeType                   Index (IS_OPTN) read FConditionEnabled write SetConditionEnabled stored ConditionEnabled_Specified;
    property ConditionValues:                           ConditionValuesType                        Index (IS_OPTN) read FConditionValues write SetConditionValues stored ConditionValues_Specified;
    property ValueCategory:                             Boolean                                    Index (IS_OPTN) read FValueCategory write SetValueCategory stored ValueCategory_Specified;
    property ProductCreationEnabled:                    ProductCreationEnabledCodeType             Index (IS_OPTN) read FProductCreationEnabled write SetProductCreationEnabled stored ProductCreationEnabled_Specified;
    property EANEnabled:                                ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FEANEnabled write SetEANEnabled stored EANEnabled_Specified;
    property ISBNEnabled:                               ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FISBNEnabled write SetISBNEnabled stored ISBNEnabled_Specified;
    property UPCEnabled:                                ProductIdentiferEnabledCodeType            Index (IS_OPTN) read FUPCEnabled write SetUPCEnabled stored UPCEnabled_Specified;
    property MaxGranularFitmentCount:                   Integer                                    Index (IS_OPTN) read FMaxGranularFitmentCount write SetMaxGranularFitmentCount stored MaxGranularFitmentCount_Specified;
    property CompatibleVehicleType:                     string                                     Index (IS_OPTN) read FCompatibleVehicleType write SetCompatibleVehicleType stored CompatibleVehicleType_Specified;
    property PaymentOptionsGroup:                       PaymentOptionsGroupEnabledCodeType         Index (IS_OPTN) read FPaymentOptionsGroup write SetPaymentOptionsGroup stored PaymentOptionsGroup_Specified;
    property ShippingProfileCategoryGroup:              ProfileCategoryGroupCodeType               Index (IS_OPTN) read FShippingProfileCategoryGroup write SetShippingProfileCategoryGroup stored ShippingProfileCategoryGroup_Specified;
    property PaymentProfileCategoryGroup:               ProfileCategoryGroupCodeType               Index (IS_OPTN) read FPaymentProfileCategoryGroup write SetPaymentProfileCategoryGroup stored PaymentProfileCategoryGroup_Specified;
    property ReturnPolicyProfileCategoryGroup:          ProfileCategoryGroupCodeType               Index (IS_OPTN) read FReturnPolicyProfileCategoryGroup write SetReturnPolicyProfileCategoryGroup stored ReturnPolicyProfileCategoryGroup_Specified;
    property VINSupported:                              Boolean                                    Index (IS_OPTN) read FVINSupported write SetVINSupported stored VINSupported_Specified;
    property VRMSupported:                              Boolean                                    Index (IS_OPTN) read FVRMSupported write SetVRMSupported stored VRMSupported_Specified;
    property SellerProvidedTitleSupported:              Boolean                                    Index (IS_OPTN) read FSellerProvidedTitleSupported write SetSellerProvidedTitleSupported stored SellerProvidedTitleSupported_Specified;
    property DepositSupported:                          Boolean                                    Index (IS_OPTN) read FDepositSupported write SetDepositSupported stored DepositSupported_Specified;
    property GlobalShippingEnabled:                     Boolean                                    Index (IS_OPTN) read FGlobalShippingEnabled write SetGlobalShippingEnabled stored GlobalShippingEnabled_Specified;
    property AdditionalCompatibilityEnabled:            Boolean                                    Index (IS_OPTN) read FAdditionalCompatibilityEnabled write SetAdditionalCompatibilityEnabled stored AdditionalCompatibilityEnabled_Specified;
    property PickupDropOffEnabled:                      Boolean                                    Index (IS_OPTN) read FPickupDropOffEnabled write SetPickupDropOffEnabled stored PickupDropOffEnabled_Specified;
    property DigitalGoodDeliveryEnabled:                Boolean                                    Index (IS_OPTN) read FDigitalGoodDeliveryEnabled write SetDigitalGoodDeliveryEnabled stored DigitalGoodDeliveryEnabled_Specified;
    property EpidSupported:                             Boolean                                    Index (IS_OPTN) read FEpidSupported write SetEpidSupported stored EpidSupported_Specified;
    property KTypeSupported:                            Boolean                                    Index (IS_OPTN) read FKTypeSupported write SetKTypeSupported stored KTypeSupported_Specified;
    property ProductRequiredEnabled:                    ProductRequiredEnabledCodeType             Index (IS_OPTN) read FProductRequiredEnabled write SetProductRequiredEnabled stored ProductRequiredEnabled_Specified;
    property DomesticReturnsAcceptedValues:             DomesticReturnsAcceptedCodeType            Index (IS_OPTN) read FDomesticReturnsAcceptedValues write SetDomesticReturnsAcceptedValues stored DomesticReturnsAcceptedValues_Specified;
    property InternationalReturnsAcceptedValues:        InternationalReturnsAcceptedCodeType       Index (IS_OPTN) read FInternationalReturnsAcceptedValues write SetInternationalReturnsAcceptedValues stored InternationalReturnsAcceptedValues_Specified;
    property DomesticReturnsDurationValues:             DomesticReturnsDurationCodeType            Index (IS_OPTN) read FDomesticReturnsDurationValues write SetDomesticReturnsDurationValues stored DomesticReturnsDurationValues_Specified;
    property InternationalReturnsDurationValues:        InternationalReturnsDurationCodeType       Index (IS_OPTN) read FInternationalReturnsDurationValues write SetInternationalReturnsDurationValues stored InternationalReturnsDurationValues_Specified;
    property DomesticReturnsShipmentPayeeValues:        DomesticReturnsShipmentPayeeCodeType       Index (IS_OPTN) read FDomesticReturnsShipmentPayeeValues write SetDomesticReturnsShipmentPayeeValues stored DomesticReturnsShipmentPayeeValues_Specified;
    property InternationalReturnsShipmentPayeeValues:   InternationalReturnsShipmentPayeeCodeType  Index (IS_OPTN) read FInternationalReturnsShipmentPayeeValues write SetInternationalReturnsShipmentPayeeValues stored InternationalReturnsShipmentPayeeValues_Specified;
    property DomesticRefundMethodValues:                DomesticRefundMethodCodeType               Index (IS_OPTN) read FDomesticRefundMethodValues write SetDomesticRefundMethodValues stored DomesticRefundMethodValues_Specified;
    property InternationalRefundMethodValues:           InternationalRefundMethodCodeType          Index (IS_OPTN) read FInternationalRefundMethodValues write SetInternationalRefundMethodValues stored InternationalRefundMethodValues_Specified;
    property ReturnPolicyDescriptionEnabled:            Boolean                                    Index (IS_OPTN) read FReturnPolicyDescriptionEnabled write SetReturnPolicyDescriptionEnabled stored ReturnPolicyDescriptionEnabled_Specified;
  end;



  // ************************************************************************ //
  // XML       : MaximumItemRequirementsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumItemRequirementsType = class(TRemotable)
  private
    FMaximumItemCount: Integer;
    FMaximumItemCount_Specified: boolean;
    FMinimumFeedbackScore: Integer;
    FMinimumFeedbackScore_Specified: boolean;
    procedure SetMaximumItemCount(Index: Integer; const AInteger: Integer);
    function  MaximumItemCount_Specified(Index: Integer): boolean;
    procedure SetMinimumFeedbackScore(Index: Integer; const AInteger: Integer);
    function  MinimumFeedbackScore_Specified(Index: Integer): boolean;
  published
    property MaximumItemCount:     Integer  Index (IS_OPTN) read FMaximumItemCount write SetMaximumItemCount stored MaximumItemCount_Specified;
    property MinimumFeedbackScore: Integer  Index (IS_OPTN) read FMinimumFeedbackScore write SetMinimumFeedbackScore stored MinimumFeedbackScore_Specified;
  end;



  // ************************************************************************ //
  // XML       : MaximumUnpaidItemStrikesInfoType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumUnpaidItemStrikesInfoType = class(TRemotable)
  private
    FCount: Integer;
    FCount_Specified: boolean;
    FPeriod: PeriodCodeType;
    FPeriod_Specified: boolean;
    procedure SetCount(Index: Integer; const AInteger: Integer);
    function  Count_Specified(Index: Integer): boolean;
    procedure SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
    function  Period_Specified(Index: Integer): boolean;
  published
    property Count:  Integer         Index (IS_OPTN) read FCount write SetCount stored Count_Specified;
    property Period: PeriodCodeType  Index (IS_OPTN) read FPeriod write SetPeriod stored Period_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerProtectionDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerProtectionDetailsType = class(TRemotable)
  private
    FBuyerProtectionSource: BuyerProtectionSourceCodeType;
    FBuyerProtectionSource_Specified: boolean;
    FBuyerProtectionStatus: BuyerProtectionCodeType;
    FBuyerProtectionStatus_Specified: boolean;
    procedure SetBuyerProtectionSource(Index: Integer; const ABuyerProtectionSourceCodeType: BuyerProtectionSourceCodeType);
    function  BuyerProtectionSource_Specified(Index: Integer): boolean;
    procedure SetBuyerProtectionStatus(Index: Integer; const ABuyerProtectionCodeType: BuyerProtectionCodeType);
    function  BuyerProtectionStatus_Specified(Index: Integer): boolean;
  published
    property BuyerProtectionSource: BuyerProtectionSourceCodeType  Index (IS_OPTN) read FBuyerProtectionSource write SetBuyerProtectionSource stored BuyerProtectionSource_Specified;
    property BuyerProtectionStatus: BuyerProtectionCodeType        Index (IS_OPTN) read FBuyerProtectionStatus write SetBuyerProtectionStatus stored BuyerProtectionStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerRequirementDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerRequirementDetailsType = class(TRemotable)
  private
    FShipToRegistrationCountry: Boolean;
    FShipToRegistrationCountry_Specified: boolean;
    FZeroFeedbackScore: Boolean;
    FZeroFeedbackScore_Specified: boolean;
    FMaximumItemRequirements: MaximumItemRequirementsType;
    FMaximumItemRequirements_Specified: boolean;
    FMaximumUnpaidItemStrikesInfo: MaximumUnpaidItemStrikesInfoType;
    FMaximumUnpaidItemStrikesInfo_Specified: boolean;
    procedure SetShipToRegistrationCountry(Index: Integer; const ABoolean: Boolean);
    function  ShipToRegistrationCountry_Specified(Index: Integer): boolean;
    procedure SetZeroFeedbackScore(Index: Integer; const ABoolean: Boolean);
    function  ZeroFeedbackScore_Specified(Index: Integer): boolean;
    procedure SetMaximumItemRequirements(Index: Integer; const AMaximumItemRequirementsType: MaximumItemRequirementsType);
    function  MaximumItemRequirements_Specified(Index: Integer): boolean;
    procedure SetMaximumUnpaidItemStrikesInfo(Index: Integer; const AMaximumUnpaidItemStrikesInfoType: MaximumUnpaidItemStrikesInfoType);
    function  MaximumUnpaidItemStrikesInfo_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShipToRegistrationCountry:    Boolean                           Index (IS_OPTN) read FShipToRegistrationCountry write SetShipToRegistrationCountry stored ShipToRegistrationCountry_Specified;
    property ZeroFeedbackScore:            Boolean                           Index (IS_OPTN) read FZeroFeedbackScore write SetZeroFeedbackScore stored ZeroFeedbackScore_Specified;
    property MaximumItemRequirements:      MaximumItemRequirementsType       Index (IS_OPTN) read FMaximumItemRequirements write SetMaximumItemRequirements stored MaximumItemRequirements_Specified;
    property MaximumUnpaidItemStrikesInfo: MaximumUnpaidItemStrikesInfoType  Index (IS_OPTN) read FMaximumUnpaidItemStrikesInfo write SetMaximumUnpaidItemStrikesInfo stored MaximumUnpaidItemStrikesInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerRoleMetricsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerRoleMetricsType = class(TRemotable)
  private
    FPositiveFeedbackLeftCount: Integer;
    FPositiveFeedbackLeftCount_Specified: boolean;
    FNegativeFeedbackLeftCount: Integer;
    FNegativeFeedbackLeftCount_Specified: boolean;
    FNeutralFeedbackLeftCount: Integer;
    FNeutralFeedbackLeftCount_Specified: boolean;
    FFeedbackLeftPercent: Single;
    FFeedbackLeftPercent_Specified: boolean;
    procedure SetPositiveFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  PositiveFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetNegativeFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  NegativeFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetNeutralFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  NeutralFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetFeedbackLeftPercent(Index: Integer; const ASingle: Single);
    function  FeedbackLeftPercent_Specified(Index: Integer): boolean;
  published
    property PositiveFeedbackLeftCount: Integer  Index (IS_OPTN) read FPositiveFeedbackLeftCount write SetPositiveFeedbackLeftCount stored PositiveFeedbackLeftCount_Specified;
    property NegativeFeedbackLeftCount: Integer  Index (IS_OPTN) read FNegativeFeedbackLeftCount write SetNegativeFeedbackLeftCount stored NegativeFeedbackLeftCount_Specified;
    property NeutralFeedbackLeftCount:  Integer  Index (IS_OPTN) read FNeutralFeedbackLeftCount write SetNeutralFeedbackLeftCount stored NeutralFeedbackLeftCount_Specified;
    property FeedbackLeftPercent:       Single   Index (IS_OPTN) read FFeedbackLeftPercent write SetFeedbackLeftPercent stored FeedbackLeftPercent_Specified;
  end;



  // ************************************************************************ //
  // XML       : DiscountProfileType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DiscountProfileType = class(TRemotable)
  private
    FDiscountProfileID: string;
    FDiscountProfileID_Specified: boolean;
    FDiscountProfileName: string;
    FDiscountProfileName_Specified: boolean;
    FEachAdditionalAmount: AmountType;
    FEachAdditionalAmount_Specified: boolean;
    FEachAdditionalAmountOff: AmountType;
    FEachAdditionalAmountOff_Specified: boolean;
    FEachAdditionalPercentOff: Single;
    FEachAdditionalPercentOff_Specified: boolean;
    FWeightOff: MeasureType;
    FWeightOff_Specified: boolean;
    FMappedDiscountProfileID: string;
    FMappedDiscountProfileID_Specified: boolean;
    procedure SetDiscountProfileID(Index: Integer; const Astring: string);
    function  DiscountProfileID_Specified(Index: Integer): boolean;
    procedure SetDiscountProfileName(Index: Integer; const Astring: string);
    function  DiscountProfileName_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalAmount(Index: Integer; const AAmountType: AmountType);
    function  EachAdditionalAmount_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalAmountOff(Index: Integer; const AAmountType: AmountType);
    function  EachAdditionalAmountOff_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalPercentOff(Index: Integer; const ASingle: Single);
    function  EachAdditionalPercentOff_Specified(Index: Integer): boolean;
    procedure SetWeightOff(Index: Integer; const AMeasureType: MeasureType);
    function  WeightOff_Specified(Index: Integer): boolean;
    procedure SetMappedDiscountProfileID(Index: Integer; const Astring: string);
    function  MappedDiscountProfileID_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DiscountProfileID:        string       Index (IS_OPTN) read FDiscountProfileID write SetDiscountProfileID stored DiscountProfileID_Specified;
    property DiscountProfileName:      string       Index (IS_OPTN) read FDiscountProfileName write SetDiscountProfileName stored DiscountProfileName_Specified;
    property EachAdditionalAmount:     AmountType   Index (IS_OPTN) read FEachAdditionalAmount write SetEachAdditionalAmount stored EachAdditionalAmount_Specified;
    property EachAdditionalAmountOff:  AmountType   Index (IS_OPTN) read FEachAdditionalAmountOff write SetEachAdditionalAmountOff stored EachAdditionalAmountOff_Specified;
    property EachAdditionalPercentOff: Single       Index (IS_OPTN) read FEachAdditionalPercentOff write SetEachAdditionalPercentOff stored EachAdditionalPercentOff_Specified;
    property WeightOff:                MeasureType  Index (IS_OPTN) read FWeightOff write SetWeightOff stored WeightOff_Specified;
    property MappedDiscountProfileID:  string       Index (IS_OPTN) read FMappedDiscountProfileID write SetMappedDiscountProfileID stored MappedDiscountProfileID_Specified;
  end;



  // ************************************************************************ //
  // XML       : VATDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VATDetailsType = class(TRemotable)
  private
    FBusinessSeller: Boolean;
    FBusinessSeller_Specified: boolean;
    FRestrictedToBusiness: Boolean;
    FRestrictedToBusiness_Specified: boolean;
    FVATPercent: Single;
    FVATPercent_Specified: boolean;
    FVATSite: string;
    FVATSite_Specified: boolean;
    FVATID: string;
    FVATID_Specified: boolean;
    procedure SetBusinessSeller(Index: Integer; const ABoolean: Boolean);
    function  BusinessSeller_Specified(Index: Integer): boolean;
    procedure SetRestrictedToBusiness(Index: Integer; const ABoolean: Boolean);
    function  RestrictedToBusiness_Specified(Index: Integer): boolean;
    procedure SetVATPercent(Index: Integer; const ASingle: Single);
    function  VATPercent_Specified(Index: Integer): boolean;
    procedure SetVATSite(Index: Integer; const Astring: string);
    function  VATSite_Specified(Index: Integer): boolean;
    procedure SetVATID(Index: Integer; const Astring: string);
    function  VATID_Specified(Index: Integer): boolean;
  published
    property BusinessSeller:       Boolean  Index (IS_OPTN) read FBusinessSeller write SetBusinessSeller stored BusinessSeller_Specified;
    property RestrictedToBusiness: Boolean  Index (IS_OPTN) read FRestrictedToBusiness write SetRestrictedToBusiness stored RestrictedToBusiness_Specified;
    property VATPercent:           Single   Index (IS_OPTN) read FVATPercent write SetVATPercent stored VATPercent_Specified;
    property VATSite:              string   Index (IS_OPTN) read FVATSite write SetVATSite stored VATSite_Specified;
    property VATID:                string   Index (IS_OPTN) read FVATID write SetVATID stored VATID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SalesTaxType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SalesTaxType = class(TRemotable)
  private
    FSalesTaxPercent: Single;
    FSalesTaxPercent_Specified: boolean;
    FSalesTaxState: string;
    FSalesTaxState_Specified: boolean;
    FShippingIncludedInTax: Boolean;
    FShippingIncludedInTax_Specified: boolean;
    FSalesTaxAmount: AmountType;
    FSalesTaxAmount_Specified: boolean;
    procedure SetSalesTaxPercent(Index: Integer; const ASingle: Single);
    function  SalesTaxPercent_Specified(Index: Integer): boolean;
    procedure SetSalesTaxState(Index: Integer; const Astring: string);
    function  SalesTaxState_Specified(Index: Integer): boolean;
    procedure SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
    function  ShippingIncludedInTax_Specified(Index: Integer): boolean;
    procedure SetSalesTaxAmount(Index: Integer; const AAmountType: AmountType);
    function  SalesTaxAmount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SalesTaxPercent:       Single      Index (IS_OPTN) read FSalesTaxPercent write SetSalesTaxPercent stored SalesTaxPercent_Specified;
    property SalesTaxState:         string      Index (IS_OPTN) read FSalesTaxState write SetSalesTaxState stored SalesTaxState_Specified;
    property ShippingIncludedInTax: Boolean     Index (IS_OPTN) read FShippingIncludedInTax write SetShippingIncludedInTax stored ShippingIncludedInTax_Specified;
    property SalesTaxAmount:        AmountType  Index (IS_OPTN) read FSalesTaxAmount write SetSalesTaxAmount stored SalesTaxAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : CharityType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityType = class(TRemotable)
  private
    FCharityName: string;
    FCharityName_Specified: boolean;
    FCharityNumber: Integer;
    FCharityNumber_Specified: boolean;
    FDonationPercent: Single;
    FDonationPercent_Specified: boolean;
    FCharityID: string;
    FCharityID_Specified: boolean;
    FMission: string;
    FMission_Specified: boolean;
    FLogoURL: string;
    FLogoURL_Specified: boolean;
    FStatus: CharityStatusCodeType;
    FStatus_Specified: boolean;
    FCharityListing: Boolean;
    FCharityListing_Specified: boolean;
    procedure SetCharityName(Index: Integer; const Astring: string);
    function  CharityName_Specified(Index: Integer): boolean;
    procedure SetCharityNumber(Index: Integer; const AInteger: Integer);
    function  CharityNumber_Specified(Index: Integer): boolean;
    procedure SetDonationPercent(Index: Integer; const ASingle: Single);
    function  DonationPercent_Specified(Index: Integer): boolean;
    procedure SetCharityID(Index: Integer; const Astring: string);
    function  CharityID_Specified(Index: Integer): boolean;
    procedure SetMission(Index: Integer; const Astring: string);
    function  Mission_Specified(Index: Integer): boolean;
    procedure SetLogoURL(Index: Integer; const Astring: string);
    function  LogoURL_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ACharityStatusCodeType: CharityStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetCharityListing(Index: Integer; const ABoolean: Boolean);
    function  CharityListing_Specified(Index: Integer): boolean;
  published
    property CharityName:     string                 Index (IS_OPTN) read FCharityName write SetCharityName stored CharityName_Specified;
    property CharityNumber:   Integer                Index (IS_OPTN) read FCharityNumber write SetCharityNumber stored CharityNumber_Specified;
    property DonationPercent: Single                 Index (IS_OPTN) read FDonationPercent write SetDonationPercent stored DonationPercent_Specified;
    property CharityID:       string                 Index (IS_OPTN) read FCharityID write SetCharityID stored CharityID_Specified;
    property Mission:         string                 Index (IS_OPTN) read FMission write SetMission stored Mission_Specified;
    property LogoURL:         string                 Index (IS_OPTN) read FLogoURL write SetLogoURL stored LogoURL_Specified;
    property Status:          CharityStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property CharityListing:  Boolean                Index (IS_OPTN) read FCharityListing write SetCharityListing stored CharityListing_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerAutoSecondChanceOfferType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerAutoSecondChanceOfferType = class(TRemotable)
  private
    FSecondChanceOfferCondition: SellingManagerAutoSecondChanceOfferTypeCodeType;
    FSecondChanceOfferCondition_Specified: boolean;
    FAmount: AmountType;
    FAmount_Specified: boolean;
    FProfitPercent: Single;
    FProfitPercent_Specified: boolean;
    FDuration: SecondChanceOfferDurationCodeType;
    FDuration_Specified: boolean;
    FListingHoldInventoryLevel: Integer;
    FListingHoldInventoryLevel_Specified: boolean;
    procedure SetSecondChanceOfferCondition(Index: Integer; const ASellingManagerAutoSecondChanceOfferTypeCodeType: SellingManagerAutoSecondChanceOfferTypeCodeType);
    function  SecondChanceOfferCondition_Specified(Index: Integer): boolean;
    procedure SetAmount(Index: Integer; const AAmountType: AmountType);
    function  Amount_Specified(Index: Integer): boolean;
    procedure SetProfitPercent(Index: Integer; const ASingle: Single);
    function  ProfitPercent_Specified(Index: Integer): boolean;
    procedure SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
    function  Duration_Specified(Index: Integer): boolean;
    procedure SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
    function  ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SecondChanceOfferCondition: SellingManagerAutoSecondChanceOfferTypeCodeType  Index (IS_OPTN) read FSecondChanceOfferCondition write SetSecondChanceOfferCondition stored SecondChanceOfferCondition_Specified;
    property Amount:                     AmountType                                       Index (IS_OPTN) read FAmount write SetAmount stored Amount_Specified;
    property ProfitPercent:              Single                                           Index (IS_OPTN) read FProfitPercent write SetProfitPercent stored ProfitPercent_Specified;
    property Duration:                   SecondChanceOfferDurationCodeType                Index (IS_OPTN) read FDuration write SetDuration stored Duration_Specified;
    property ListingHoldInventoryLevel:  Integer                                          Index (IS_OPTN) read FListingHoldInventoryLevel write SetListingHoldInventoryLevel stored ListingHoldInventoryLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : TaxJurisdictionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxJurisdictionType = class(TRemotable)
  private
    FJurisdictionID: string;
    FJurisdictionID_Specified: boolean;
    FSalesTaxPercent: Single;
    FSalesTaxPercent_Specified: boolean;
    FShippingIncludedInTax: Boolean;
    FShippingIncludedInTax_Specified: boolean;
    FJurisdictionName: string;
    FJurisdictionName_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    procedure SetJurisdictionID(Index: Integer; const Astring: string);
    function  JurisdictionID_Specified(Index: Integer): boolean;
    procedure SetSalesTaxPercent(Index: Integer; const ASingle: Single);
    function  SalesTaxPercent_Specified(Index: Integer): boolean;
    procedure SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
    function  ShippingIncludedInTax_Specified(Index: Integer): boolean;
    procedure SetJurisdictionName(Index: Integer; const Astring: string);
    function  JurisdictionName_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property JurisdictionID:        string       Index (IS_OPTN) read FJurisdictionID write SetJurisdictionID stored JurisdictionID_Specified;
    property SalesTaxPercent:       Single       Index (IS_OPTN) read FSalesTaxPercent write SetSalesTaxPercent stored SalesTaxPercent_Specified;
    property ShippingIncludedInTax: Boolean      Index (IS_OPTN) read FShippingIncludedInTax write SetShippingIncludedInTax stored ShippingIncludedInTax_Specified;
    property JurisdictionName:      string       Index (IS_OPTN) read FJurisdictionName write SetJurisdictionName stored JurisdictionName_Specified;
    property DetailVersion:         string       Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:            TXSDateTime  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListingStartPriceDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingStartPriceDetailsType = class(TRemotable)
  private
    FDescription: string;
    FDescription_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FStartPrice: AmountType;
    FStartPrice_Specified: boolean;
    FDetailVersion: string;
    FDetailVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FMinBuyItNowPricePercent: Single;
    FMinBuyItNowPricePercent_Specified: boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetStartPrice(Index: Integer; const AAmountType: AmountType);
    function  StartPrice_Specified(Index: Integer): boolean;
    procedure SetDetailVersion(Index: Integer; const Astring: string);
    function  DetailVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetMinBuyItNowPricePercent(Index: Integer; const ASingle: Single);
    function  MinBuyItNowPricePercent_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Description:             string               Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property ListingType:             ListingTypeCodeType  Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property StartPrice:              AmountType           Index (IS_OPTN) read FStartPrice write SetStartPrice stored StartPrice_Specified;
    property DetailVersion:           string               Index (IS_OPTN) read FDetailVersion write SetDetailVersion stored DetailVersion_Specified;
    property UpdateTime:              TXSDateTime          Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property MinBuyItNowPricePercent: Single               Index (IS_OPTN) read FMinBuyItNowPricePercent write SetMinBuyItNowPricePercent stored MinBuyItNowPricePercent_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerFeeDiscountDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerFeeDiscountDashboardType = class(TRemotable)
  private
    FPercent: Single;
    FPercent_Specified: boolean;
    procedure SetPercent(Index: Integer; const ASingle: Single);
    function  Percent_Specified(Index: Integer): boolean;
  published
    property Percent: Single  Index (IS_OPTN) read FPercent write SetPercent stored Percent_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerRoleMetricsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerRoleMetricsType = class(TRemotable)
  private
    FPositiveFeedbackLeftCount: Integer;
    FPositiveFeedbackLeftCount_Specified: boolean;
    FNegativeFeedbackLeftCount: Integer;
    FNegativeFeedbackLeftCount_Specified: boolean;
    FNeutralFeedbackLeftCount: Integer;
    FNeutralFeedbackLeftCount_Specified: boolean;
    FFeedbackLeftPercent: Single;
    FFeedbackLeftPercent_Specified: boolean;
    FRepeatBuyerCount: Integer;
    FRepeatBuyerCount_Specified: boolean;
    FRepeatBuyerPercent: Single;
    FRepeatBuyerPercent_Specified: boolean;
    FUniqueBuyerCount: Integer;
    FUniqueBuyerCount_Specified: boolean;
    FTransactionPercent: Single;
    FTransactionPercent_Specified: boolean;
    FCrossBorderTransactionCount: Integer;
    FCrossBorderTransactionCount_Specified: boolean;
    FCrossBorderTransactionPercent: Single;
    FCrossBorderTransactionPercent_Specified: boolean;
    procedure SetPositiveFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  PositiveFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetNegativeFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  NegativeFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetNeutralFeedbackLeftCount(Index: Integer; const AInteger: Integer);
    function  NeutralFeedbackLeftCount_Specified(Index: Integer): boolean;
    procedure SetFeedbackLeftPercent(Index: Integer; const ASingle: Single);
    function  FeedbackLeftPercent_Specified(Index: Integer): boolean;
    procedure SetRepeatBuyerCount(Index: Integer; const AInteger: Integer);
    function  RepeatBuyerCount_Specified(Index: Integer): boolean;
    procedure SetRepeatBuyerPercent(Index: Integer; const ASingle: Single);
    function  RepeatBuyerPercent_Specified(Index: Integer): boolean;
    procedure SetUniqueBuyerCount(Index: Integer; const AInteger: Integer);
    function  UniqueBuyerCount_Specified(Index: Integer): boolean;
    procedure SetTransactionPercent(Index: Integer; const ASingle: Single);
    function  TransactionPercent_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTransactionCount(Index: Integer; const AInteger: Integer);
    function  CrossBorderTransactionCount_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTransactionPercent(Index: Integer; const ASingle: Single);
    function  CrossBorderTransactionPercent_Specified(Index: Integer): boolean;
  published
    property PositiveFeedbackLeftCount:     Integer  Index (IS_OPTN) read FPositiveFeedbackLeftCount write SetPositiveFeedbackLeftCount stored PositiveFeedbackLeftCount_Specified;
    property NegativeFeedbackLeftCount:     Integer  Index (IS_OPTN) read FNegativeFeedbackLeftCount write SetNegativeFeedbackLeftCount stored NegativeFeedbackLeftCount_Specified;
    property NeutralFeedbackLeftCount:      Integer  Index (IS_OPTN) read FNeutralFeedbackLeftCount write SetNeutralFeedbackLeftCount stored NeutralFeedbackLeftCount_Specified;
    property FeedbackLeftPercent:           Single   Index (IS_OPTN) read FFeedbackLeftPercent write SetFeedbackLeftPercent stored FeedbackLeftPercent_Specified;
    property RepeatBuyerCount:              Integer  Index (IS_OPTN) read FRepeatBuyerCount write SetRepeatBuyerCount stored RepeatBuyerCount_Specified;
    property RepeatBuyerPercent:            Single   Index (IS_OPTN) read FRepeatBuyerPercent write SetRepeatBuyerPercent stored RepeatBuyerPercent_Specified;
    property UniqueBuyerCount:              Integer  Index (IS_OPTN) read FUniqueBuyerCount write SetUniqueBuyerCount stored UniqueBuyerCount_Specified;
    property TransactionPercent:            Single   Index (IS_OPTN) read FTransactionPercent write SetTransactionPercent stored TransactionPercent_Specified;
    property CrossBorderTransactionCount:   Integer  Index (IS_OPTN) read FCrossBorderTransactionCount write SetCrossBorderTransactionCount stored CrossBorderTransactionCount_Specified;
    property CrossBorderTransactionPercent: Single   Index (IS_OPTN) read FCrossBorderTransactionPercent write SetCrossBorderTransactionPercent stored CrossBorderTransactionPercent_Specified;
  end;



  // ************************************************************************ //
  // XML       : VATRateType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VATRateType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FVATPercent: Single;
    FVATPercent_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetVATPercent(Index: Integer; const ASingle: Single);
    function  VATPercent_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  published
    property ItemID:          ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property VATPercent:      Single      Index (IS_OPTN) read FVATPercent write SetVATPercent stored VATPercent_Specified;
    property OrderLineItemID: string      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerTemplateDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerTemplateDetailsType = class(TRemotable)
  private
    FSaleTemplateID: string;
    FSaleTemplateID_Specified: boolean;
    FSaleTemplateName: string;
    FSaleTemplateName_Specified: boolean;
    FSuccessPercent: Single;
    FSuccessPercent_Specified: boolean;
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FTemplate: ItemType;
    FTemplate_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const Astring: string);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateName(Index: Integer; const Astring: string);
    function  SaleTemplateName_Specified(Index: Integer): boolean;
    procedure SetSuccessPercent(Index: Integer; const ASingle: Single);
    function  SuccessPercent_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetTemplate(Index: Integer; const AItemType: ItemType);
    function  Template_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property SaleTemplateID:               string                            Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property SaleTemplateName:             string                            Index (IS_OPTN) read FSaleTemplateName write SetSaleTemplateName stored SaleTemplateName_Specified;
    property SuccessPercent:               Single                            Index (IS_OPTN) read FSuccessPercent write SetSuccessPercent stored SuccessPercent_Specified;
    property SellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property Template:                     ItemType                          Index (IS_OPTN) read FTemplate write SetTemplate stored Template_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellingManagerProductInventoryStatusType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerProductInventoryStatusType = class(TRemotable)
  private
    FQuantityScheduled: Integer;
    FQuantityScheduled_Specified: boolean;
    FQuantityActive: Integer;
    FQuantityActive_Specified: boolean;
    FQuantitySold: Integer;
    FQuantitySold_Specified: boolean;
    FQuantityUnsold: Integer;
    FQuantityUnsold_Specified: boolean;
    FSuccessPercent: Single;
    FSuccessPercent_Specified: boolean;
    FAverageSellingPrice: AmountType;
    FAverageSellingPrice_Specified: boolean;
    procedure SetQuantityScheduled(Index: Integer; const AInteger: Integer);
    function  QuantityScheduled_Specified(Index: Integer): boolean;
    procedure SetQuantityActive(Index: Integer; const AInteger: Integer);
    function  QuantityActive_Specified(Index: Integer): boolean;
    procedure SetQuantitySold(Index: Integer; const AInteger: Integer);
    function  QuantitySold_Specified(Index: Integer): boolean;
    procedure SetQuantityUnsold(Index: Integer; const AInteger: Integer);
    function  QuantityUnsold_Specified(Index: Integer): boolean;
    procedure SetSuccessPercent(Index: Integer; const ASingle: Single);
    function  SuccessPercent_Specified(Index: Integer): boolean;
    procedure SetAverageSellingPrice(Index: Integer; const AAmountType: AmountType);
    function  AverageSellingPrice_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property QuantityScheduled:   Integer     Index (IS_OPTN) read FQuantityScheduled write SetQuantityScheduled stored QuantityScheduled_Specified;
    property QuantityActive:      Integer     Index (IS_OPTN) read FQuantityActive write SetQuantityActive stored QuantityActive_Specified;
    property QuantitySold:        Integer     Index (IS_OPTN) read FQuantitySold write SetQuantitySold stored QuantitySold_Specified;
    property QuantityUnsold:      Integer     Index (IS_OPTN) read FQuantityUnsold write SetQuantityUnsold stored QuantityUnsold_Specified;
    property SuccessPercent:      Single      Index (IS_OPTN) read FSuccessPercent write SetSuccessPercent stored SuccessPercent_Specified;
    property AverageSellingPrice: AmountType  Index (IS_OPTN) read FAverageSellingPrice write SetAverageSellingPrice stored AverageSellingPrice_Specified;
  end;



  // ************************************************************************ //
  // XML       : TaxIdentifierType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxIdentifierType = class(TRemotable)
  private
    FType_: ValueTypeCodeType;
    FType__Specified: boolean;
    FID: string;
    FID_Specified: boolean;
    FAttribute: Array_Of_TaxIdentifierAttributeType;
    FAttribute_Specified: boolean;
    procedure SetType_(Index: Integer; const AValueTypeCodeType: ValueTypeCodeType);
    function  Type__Specified(Index: Integer): boolean;
    procedure SetID(Index: Integer; const Astring: string);
    function  ID_Specified(Index: Integer): boolean;
    procedure SetAttribute(Index: Integer; const AArray_Of_TaxIdentifierAttributeType: Array_Of_TaxIdentifierAttributeType);
    function  Attribute_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Type_:     ValueTypeCodeType                    Index (IS_OPTN) read FType_ write SetType_ stored Type__Specified;
    property ID:        string                               Index (IS_OPTN) read FID write SetID stored ID_Specified;
    property Attribute: Array_Of_TaxIdentifierAttributeType  Index (IS_OPTN or IS_UNBD) read FAttribute write SetAttribute stored Attribute_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculatedHandlingDiscountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedHandlingDiscountType = class(TRemotable)
  private
    FDiscountName: HandlingNameCodeType;
    FDiscountName_Specified: boolean;
    FOrderHandlingAmount: AmountType;
    FOrderHandlingAmount_Specified: boolean;
    FEachAdditionalAmount: AmountType;
    FEachAdditionalAmount_Specified: boolean;
    FEachAdditionalOffAmount: AmountType;
    FEachAdditionalOffAmount_Specified: boolean;
    FEachAdditionalPercentOff: Single;
    FEachAdditionalPercentOff_Specified: boolean;
    procedure SetDiscountName(Index: Integer; const AHandlingNameCodeType: HandlingNameCodeType);
    function  DiscountName_Specified(Index: Integer): boolean;
    procedure SetOrderHandlingAmount(Index: Integer; const AAmountType: AmountType);
    function  OrderHandlingAmount_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalAmount(Index: Integer; const AAmountType: AmountType);
    function  EachAdditionalAmount_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalOffAmount(Index: Integer; const AAmountType: AmountType);
    function  EachAdditionalOffAmount_Specified(Index: Integer): boolean;
    procedure SetEachAdditionalPercentOff(Index: Integer; const ASingle: Single);
    function  EachAdditionalPercentOff_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DiscountName:             HandlingNameCodeType  Index (IS_OPTN) read FDiscountName write SetDiscountName stored DiscountName_Specified;
    property OrderHandlingAmount:      AmountType            Index (IS_OPTN) read FOrderHandlingAmount write SetOrderHandlingAmount stored OrderHandlingAmount_Specified;
    property EachAdditionalAmount:     AmountType            Index (IS_OPTN) read FEachAdditionalAmount write SetEachAdditionalAmount stored EachAdditionalAmount_Specified;
    property EachAdditionalOffAmount:  AmountType            Index (IS_OPTN) read FEachAdditionalOffAmount write SetEachAdditionalOffAmount stored EachAdditionalOffAmount_Specified;
    property EachAdditionalPercentOff: Single                Index (IS_OPTN) read FEachAdditionalPercentOff write SetEachAdditionalPercentOff stored EachAdditionalPercentOff_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculatedShippingDiscountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingDiscountType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FDiscountName_Specified: boolean;
    FDiscountProfile: Array_Of_DiscountProfileType;
    FDiscountProfile_Specified: boolean;
    procedure SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
    function  DiscountName_Specified(Index: Integer): boolean;
    procedure SetDiscountProfile(Index: Integer; const AArray_Of_DiscountProfileType: Array_Of_DiscountProfileType);
    function  DiscountProfile_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DiscountName:    DiscountNameCodeType          Index (IS_OPTN) read FDiscountName write SetDiscountName stored DiscountName_Specified;
    property DiscountProfile: Array_Of_DiscountProfileType  Index (IS_OPTN or IS_UNBD) read FDiscountProfile write SetDiscountProfile stored DiscountProfile_Specified;
  end;



  // ************************************************************************ //
  // XML       : FlatShippingDiscountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatShippingDiscountType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FDiscountName_Specified: boolean;
    FDiscountProfile: Array_Of_DiscountProfileType;
    FDiscountProfile_Specified: boolean;
    procedure SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
    function  DiscountName_Specified(Index: Integer): boolean;
    procedure SetDiscountProfile(Index: Integer; const AArray_Of_DiscountProfileType: Array_Of_DiscountProfileType);
    function  DiscountProfile_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DiscountName:    DiscountNameCodeType          Index (IS_OPTN) read FDiscountName write SetDiscountName stored DiscountName_Specified;
    property DiscountProfile: Array_Of_DiscountProfileType  Index (IS_OPTN or IS_UNBD) read FDiscountProfile write SetDiscountProfile stored DiscountProfile_Specified;
  end;



  // ************************************************************************ //
  // XML       : PromotionalShippingDiscountDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalShippingDiscountDetailsType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FDiscountName_Specified: boolean;
    FShippingCost: AmountType;
    FShippingCost_Specified: boolean;
    FOrderAmount: AmountType;
    FOrderAmount_Specified: boolean;
    FItemCount: Integer;
    FItemCount_Specified: boolean;
    procedure SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
    function  DiscountName_Specified(Index: Integer): boolean;
    procedure SetShippingCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingCost_Specified(Index: Integer): boolean;
    procedure SetOrderAmount(Index: Integer; const AAmountType: AmountType);
    function  OrderAmount_Specified(Index: Integer): boolean;
    procedure SetItemCount(Index: Integer; const AInteger: Integer);
    function  ItemCount_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DiscountName: DiscountNameCodeType  Index (IS_OPTN) read FDiscountName write SetDiscountName stored DiscountName_Specified;
    property ShippingCost: AmountType            Index (IS_OPTN) read FShippingCost write SetShippingCost stored ShippingCost_Specified;
    property OrderAmount:  AmountType            Index (IS_OPTN) read FOrderAmount write SetOrderAmount stored OrderAmount_Specified;
    property ItemCount:    Integer               Index (IS_OPTN) read FItemCount write SetItemCount stored ItemCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerSatisfactionDashboardType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerSatisfactionDashboardType = class(TRemotable)
  private
    FStatus: BuyerSatisfactionStatusCodeType;
    FStatus_Specified: boolean;
    FAlert: Array_Of_SellerDashboardAlertType;
    FAlert_Specified: boolean;
    procedure SetStatus(Index: Integer; const ABuyerSatisfactionStatusCodeType: BuyerSatisfactionStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Status: BuyerSatisfactionStatusCodeType    Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property Alert:  Array_Of_SellerDashboardAlertType  Index (IS_OPTN or IS_UNBD) read FAlert write SetAlert stored Alert_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerDashboardAlertType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerDashboardAlertType = class(TRemotable)
  private
    FSeverity: SellerDashboardAlertSeverityCodeType;
    FSeverity_Specified: boolean;
    FText: string;
    FText_Specified: boolean;
    procedure SetSeverity(Index: Integer; const ASellerDashboardAlertSeverityCodeType: SellerDashboardAlertSeverityCodeType);
    function  Severity_Specified(Index: Integer): boolean;
    procedure SetText(Index: Integer; const Astring: string);
    function  Text_Specified(Index: Integer): boolean;
  published
    property Severity: SellerDashboardAlertSeverityCodeType  Index (IS_OPTN) read FSeverity write SetSeverity stored Severity_Specified;
    property Text:     string                                Index (IS_OPTN) read FText write SetText stored Text_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuyerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerType = class(TRemotable)
  private
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FBuyerTaxIdentifier: Array_Of_TaxIdentifierType;
    FBuyerTaxIdentifier_Specified: boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetBuyerTaxIdentifier(Index: Integer; const AArray_Of_TaxIdentifierType: Array_Of_TaxIdentifierType);
    function  BuyerTaxIdentifier_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShippingAddress:    AddressType                 Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property BuyerTaxIdentifier: Array_Of_TaxIdentifierType  Index (IS_OPTN or IS_UNBD) read FBuyerTaxIdentifier write SetBuyerTaxIdentifier stored BuyerTaxIdentifier_Specified;
  end;



  // ************************************************************************ //
  // XML       : NonProfitAddressType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NonProfitAddressType = class(TRemotable)
  private
    FAddressLine1: string;
    FAddressLine1_Specified: boolean;
    FAddressLine2: string;
    FAddressLine2_Specified: boolean;
    FCity: string;
    FCity_Specified: boolean;
    FState: string;
    FState_Specified: boolean;
    FZipCode: string;
    FZipCode_Specified: boolean;
    FLatitude: TXSDecimal;
    FLatitude_Specified: boolean;
    FLongitude: TXSDecimal;
    FLongitude_Specified: boolean;
    FAddressType: AddressTypeCodeType;
    FAddressType_Specified: boolean;
    procedure SetAddressLine1(Index: Integer; const Astring: string);
    function  AddressLine1_Specified(Index: Integer): boolean;
    procedure SetAddressLine2(Index: Integer; const Astring: string);
    function  AddressLine2_Specified(Index: Integer): boolean;
    procedure SetCity(Index: Integer; const Astring: string);
    function  City_Specified(Index: Integer): boolean;
    procedure SetState(Index: Integer; const Astring: string);
    function  State_Specified(Index: Integer): boolean;
    procedure SetZipCode(Index: Integer; const Astring: string);
    function  ZipCode_Specified(Index: Integer): boolean;
    procedure SetLatitude(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Latitude_Specified(Index: Integer): boolean;
    procedure SetLongitude(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Longitude_Specified(Index: Integer): boolean;
    procedure SetAddressType(Index: Integer; const AAddressTypeCodeType: AddressTypeCodeType);
    function  AddressType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AddressLine1: string               Index (IS_OPTN) read FAddressLine1 write SetAddressLine1 stored AddressLine1_Specified;
    property AddressLine2: string               Index (IS_OPTN) read FAddressLine2 write SetAddressLine2 stored AddressLine2_Specified;
    property City:         string               Index (IS_OPTN) read FCity write SetCity stored City_Specified;
    property State:        string               Index (IS_OPTN) read FState write SetState stored State_Specified;
    property ZipCode:      string               Index (IS_OPTN) read FZipCode write SetZipCode stored ZipCode_Specified;
    property Latitude:     TXSDecimal           Index (IS_OPTN) read FLatitude write SetLatitude stored Latitude_Specified;
    property Longitude:    TXSDecimal           Index (IS_OPTN) read FLongitude write SetLongitude stored Longitude_Specified;
    property AddressType:  AddressTypeCodeType  Index (IS_OPTN) read FAddressType write SetAddressType stored AddressType_Specified;
  end;



  // ************************************************************************ //
  // XML       : TransactionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TransactionType = class(TRemotable)
  private
    FAmountPaid: AmountType;
    FAmountPaid_Specified: boolean;
    FAdjustmentAmount: AmountType;
    FAdjustmentAmount_Specified: boolean;
    FConvertedAdjustmentAmount: AmountType;
    FConvertedAdjustmentAmount_Specified: boolean;
    FBuyer: UserType;
    FBuyer_Specified: boolean;
    FShippingDetails: ShippingDetailsType;
    FShippingDetails_Specified: boolean;
    FConvertedAmountPaid: AmountType;
    FConvertedAmountPaid_Specified: boolean;
    FConvertedTransactionPrice: AmountType;
    FConvertedTransactionPrice_Specified: boolean;
    FCreatedDate: TXSDateTime;
    FCreatedDate_Specified: boolean;
    FDepositType: DepositTypeCodeType;
    FDepositType_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    FQuantityPurchased: Integer;
    FQuantityPurchased_Specified: boolean;
    FStatus: TransactionStatusType;
    FStatus_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FTransactionPrice: AmountType;
    FTransactionPrice_Specified: boolean;
    FBestOfferSale: Boolean;
    FBestOfferSale_Specified: boolean;
    FVATPercent: TXSDecimal;
    FVATPercent_Specified: boolean;
    FExternalTransaction: Array_Of_ExternalTransactionType;
    FExternalTransaction_Specified: boolean;
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FShippingServiceSelected: ShippingServiceOptionsType;
    FShippingServiceSelected_Specified: boolean;
    FBuyerMessage: string;
    FBuyerMessage_Specified: boolean;
    FDutchAuctionBid: AmountType;
    FDutchAuctionBid_Specified: boolean;
    FBuyerPaidStatus: PaidStatusCodeType;
    FBuyerPaidStatus_Specified: boolean;
    FSellerPaidStatus: PaidStatusCodeType;
    FSellerPaidStatus_Specified: boolean;
    FPaidTime: TXSDateTime;
    FPaidTime_Specified: boolean;
    FShippedTime: TXSDateTime;
    FShippedTime_Specified: boolean;
    FTotalPrice: AmountType;
    FTotalPrice_Specified: boolean;
    FFeedbackLeft: FeedbackInfoType;
    FFeedbackLeft_Specified: boolean;
    FFeedbackReceived: FeedbackInfoType;
    FFeedbackReceived_Specified: boolean;
    FContainingOrder: OrderType;
    FContainingOrder_Specified: boolean;
    FFinalValueFee: AmountType;
    FFinalValueFee_Specified: boolean;
    FListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType;
    FListingCheckoutRedirectPreference_Specified: boolean;
    FRefundArray: RefundArrayType;
    FRefundArray_Specified: boolean;
    FTransactionSiteID: SiteCodeType;
    FTransactionSiteID_Specified: boolean;
    FPlatform_: TransactionPlatformCodeType;
    FPlatform__Specified: boolean;
    FCartID: string;
    FCartID_Specified: boolean;
    FSellerContactBuyerByEmail: Boolean;
    FSellerContactBuyerByEmail_Specified: boolean;
    FPayPalEmailAddress: string;
    FPayPalEmailAddress_Specified: boolean;
    FPaisaPayID: string;
    FPaisaPayID_Specified: boolean;
    FBuyerGuaranteePrice: AmountType;
    FBuyerGuaranteePrice_Specified: boolean;
    FVariation: VariationType;
    FVariation_Specified: boolean;
    FBuyerCheckoutMessage: string;
    FBuyerCheckoutMessage_Specified: boolean;
    FTotalTransactionPrice: AmountType;
    FTotalTransactionPrice_Specified: boolean;
    FTaxes: TaxesType;
    FTaxes_Specified: boolean;
    FBundlePurchase: Boolean;
    FBundlePurchase_Specified: boolean;
    FActualShippingCost: AmountType;
    FActualShippingCost_Specified: boolean;
    FActualHandlingCost: AmountType;
    FActualHandlingCost_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    FeBayPaymentID: string;
    FeBayPaymentID_Specified: boolean;
    FPaymentHoldDetails: PaymentHoldDetailType;
    FPaymentHoldDetails_Specified: boolean;
    FSellerDiscounts: SellerDiscountsType;
    FSellerDiscounts_Specified: boolean;
    FRefundAmount: AmountType;
    FRefundAmount_Specified: boolean;
    FRefundStatus: string;
    FRefundStatus_Specified: boolean;
    FCodiceFiscale: string;
    FCodiceFiscale_Specified: boolean;
    FIsMultiLegShipping: Boolean;
    FIsMultiLegShipping_Specified: boolean;
    FMultiLegShippingDetails: MultiLegShippingDetailsType;
    FMultiLegShippingDetails_Specified: boolean;
    FInvoiceSentTime: TXSDateTime;
    FInvoiceSentTime_Specified: boolean;
    FUnpaidItem: UnpaidItemType;
    FUnpaidItem_Specified: boolean;
    FIntangibleItem: Boolean;
    FIntangibleItem_Specified: boolean;
    FMonetaryDetails: PaymentsInformationType;
    FMonetaryDetails_Specified: boolean;
    FPickupDetails: PickupDetailsType;
    FPickupDetails_Specified: boolean;
    FPickupMethodSelected: PickupMethodSelectedType;
    FPickupMethodSelected_Specified: boolean;
    FShippingConvenienceCharge: AmountType;
    FShippingConvenienceCharge_Specified: boolean;
    FLogisticsPlanType: string;
    FLogisticsPlanType_Specified: boolean;
    FBuyerPackageEnclosures: BuyerPackageEnclosuresType;
    FBuyerPackageEnclosures_Specified: boolean;
    FInventoryReservationID: string;
    FInventoryReservationID_Specified: boolean;
    FExtendedOrderID: string;
    FExtendedOrderID_Specified: boolean;
    FeBayPlusTransaction: Boolean;
    FeBayPlusTransaction_Specified: boolean;
    FGiftSummary: GiftSummaryType;
    FGiftSummary_Specified: boolean;
    FDigitalDeliverySelected: DigitalDeliverySelectedType;
    FDigitalDeliverySelected_Specified: boolean;
    FGift: Boolean;
    FGift_Specified: boolean;
    FGuaranteedShipping: Boolean;
    FGuaranteedShipping_Specified: boolean;
    FGuaranteedDelivery: Boolean;
    FGuaranteedDelivery_Specified: boolean;
    FeBayCollectAndRemitTax: Boolean;
    FeBayCollectAndRemitTax_Specified: boolean;
    FeBayCollectAndRemitTaxes: TaxesType;
    FeBayCollectAndRemitTaxes_Specified: boolean;
    procedure SetAmountPaid(Index: Integer; const AAmountType: AmountType);
    function  AmountPaid_Specified(Index: Integer): boolean;
    procedure SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  AdjustmentAmount_Specified(Index: Integer): boolean;
    procedure SetConvertedAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  ConvertedAdjustmentAmount_Specified(Index: Integer): boolean;
    procedure SetBuyer(Index: Integer; const AUserType: UserType);
    function  Buyer_Specified(Index: Integer): boolean;
    procedure SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
    function  ShippingDetails_Specified(Index: Integer): boolean;
    procedure SetConvertedAmountPaid(Index: Integer; const AAmountType: AmountType);
    function  ConvertedAmountPaid_Specified(Index: Integer): boolean;
    procedure SetConvertedTransactionPrice(Index: Integer; const AAmountType: AmountType);
    function  ConvertedTransactionPrice_Specified(Index: Integer): boolean;
    procedure SetCreatedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreatedDate_Specified(Index: Integer): boolean;
    procedure SetDepositType(Index: Integer; const ADepositTypeCodeType: DepositTypeCodeType);
    function  DepositType_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetQuantityPurchased(Index: Integer; const AInteger: Integer);
    function  QuantityPurchased_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ATransactionStatusType: TransactionStatusType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetTransactionPrice(Index: Integer; const AAmountType: AmountType);
    function  TransactionPrice_Specified(Index: Integer): boolean;
    procedure SetBestOfferSale(Index: Integer; const ABoolean: Boolean);
    function  BestOfferSale_Specified(Index: Integer): boolean;
    procedure SetVATPercent(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  VATPercent_Specified(Index: Integer): boolean;
    procedure SetExternalTransaction(Index: Integer; const AArray_Of_ExternalTransactionType: Array_Of_ExternalTransactionType);
    function  ExternalTransaction_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetShippingServiceSelected(Index: Integer; const AShippingServiceOptionsType: ShippingServiceOptionsType);
    function  ShippingServiceSelected_Specified(Index: Integer): boolean;
    procedure SetBuyerMessage(Index: Integer; const Astring: string);
    function  BuyerMessage_Specified(Index: Integer): boolean;
    procedure SetDutchAuctionBid(Index: Integer; const AAmountType: AmountType);
    function  DutchAuctionBid_Specified(Index: Integer): boolean;
    procedure SetBuyerPaidStatus(Index: Integer; const APaidStatusCodeType: PaidStatusCodeType);
    function  BuyerPaidStatus_Specified(Index: Integer): boolean;
    procedure SetSellerPaidStatus(Index: Integer; const APaidStatusCodeType: PaidStatusCodeType);
    function  SellerPaidStatus_Specified(Index: Integer): boolean;
    procedure SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PaidTime_Specified(Index: Integer): boolean;
    procedure SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippedTime_Specified(Index: Integer): boolean;
    procedure SetTotalPrice(Index: Integer; const AAmountType: AmountType);
    function  TotalPrice_Specified(Index: Integer): boolean;
    procedure SetFeedbackLeft(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
    function  FeedbackLeft_Specified(Index: Integer): boolean;
    procedure SetFeedbackReceived(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
    function  FeedbackReceived_Specified(Index: Integer): boolean;
    procedure SetContainingOrder(Index: Integer; const AOrderType: OrderType);
    function  ContainingOrder_Specified(Index: Integer): boolean;
    procedure SetFinalValueFee(Index: Integer; const AAmountType: AmountType);
    function  FinalValueFee_Specified(Index: Integer): boolean;
    procedure SetListingCheckoutRedirectPreference(Index: Integer; const AListingCheckoutRedirectPreferenceType: ListingCheckoutRedirectPreferenceType);
    function  ListingCheckoutRedirectPreference_Specified(Index: Integer): boolean;
    procedure SetRefundArray(Index: Integer; const ARefundArrayType: RefundArrayType);
    function  RefundArray_Specified(Index: Integer): boolean;
    procedure SetTransactionSiteID(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  TransactionSiteID_Specified(Index: Integer): boolean;
    procedure SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
    function  Platform__Specified(Index: Integer): boolean;
    procedure SetCartID(Index: Integer; const Astring: string);
    function  CartID_Specified(Index: Integer): boolean;
    procedure SetSellerContactBuyerByEmail(Index: Integer; const ABoolean: Boolean);
    function  SellerContactBuyerByEmail_Specified(Index: Integer): boolean;
    procedure SetPayPalEmailAddress(Index: Integer; const Astring: string);
    function  PayPalEmailAddress_Specified(Index: Integer): boolean;
    procedure SetPaisaPayID(Index: Integer; const Astring: string);
    function  PaisaPayID_Specified(Index: Integer): boolean;
    procedure SetBuyerGuaranteePrice(Index: Integer; const AAmountType: AmountType);
    function  BuyerGuaranteePrice_Specified(Index: Integer): boolean;
    procedure SetVariation(Index: Integer; const AVariationType: VariationType);
    function  Variation_Specified(Index: Integer): boolean;
    procedure SetBuyerCheckoutMessage(Index: Integer; const Astring: string);
    function  BuyerCheckoutMessage_Specified(Index: Integer): boolean;
    procedure SetTotalTransactionPrice(Index: Integer; const AAmountType: AmountType);
    function  TotalTransactionPrice_Specified(Index: Integer): boolean;
    procedure SetTaxes(Index: Integer; const ATaxesType: TaxesType);
    function  Taxes_Specified(Index: Integer): boolean;
    procedure SetBundlePurchase(Index: Integer; const ABoolean: Boolean);
    function  BundlePurchase_Specified(Index: Integer): boolean;
    procedure SetActualShippingCost(Index: Integer; const AAmountType: AmountType);
    function  ActualShippingCost_Specified(Index: Integer): boolean;
    procedure SetActualHandlingCost(Index: Integer; const AAmountType: AmountType);
    function  ActualHandlingCost_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
    procedure SeteBayPaymentID(Index: Integer; const Astring: string);
    function  eBayPaymentID_Specified(Index: Integer): boolean;
    procedure SetPaymentHoldDetails(Index: Integer; const APaymentHoldDetailType: PaymentHoldDetailType);
    function  PaymentHoldDetails_Specified(Index: Integer): boolean;
    procedure SetSellerDiscounts(Index: Integer; const ASellerDiscountsType: SellerDiscountsType);
    function  SellerDiscounts_Specified(Index: Integer): boolean;
    procedure SetRefundAmount(Index: Integer; const AAmountType: AmountType);
    function  RefundAmount_Specified(Index: Integer): boolean;
    procedure SetRefundStatus(Index: Integer; const Astring: string);
    function  RefundStatus_Specified(Index: Integer): boolean;
    procedure SetCodiceFiscale(Index: Integer; const Astring: string);
    function  CodiceFiscale_Specified(Index: Integer): boolean;
    procedure SetIsMultiLegShipping(Index: Integer; const ABoolean: Boolean);
    function  IsMultiLegShipping_Specified(Index: Integer): boolean;
    procedure SetMultiLegShippingDetails(Index: Integer; const AMultiLegShippingDetailsType: MultiLegShippingDetailsType);
    function  MultiLegShippingDetails_Specified(Index: Integer): boolean;
    procedure SetInvoiceSentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InvoiceSentTime_Specified(Index: Integer): boolean;
    procedure SetUnpaidItem(Index: Integer; const AUnpaidItemType: UnpaidItemType);
    function  UnpaidItem_Specified(Index: Integer): boolean;
    procedure SetIntangibleItem(Index: Integer; const ABoolean: Boolean);
    function  IntangibleItem_Specified(Index: Integer): boolean;
    procedure SetMonetaryDetails(Index: Integer; const APaymentsInformationType: PaymentsInformationType);
    function  MonetaryDetails_Specified(Index: Integer): boolean;
    procedure SetPickupDetails(Index: Integer; const APickupDetailsType: PickupDetailsType);
    function  PickupDetails_Specified(Index: Integer): boolean;
    procedure SetPickupMethodSelected(Index: Integer; const APickupMethodSelectedType: PickupMethodSelectedType);
    function  PickupMethodSelected_Specified(Index: Integer): boolean;
    procedure SetShippingConvenienceCharge(Index: Integer; const AAmountType: AmountType);
    function  ShippingConvenienceCharge_Specified(Index: Integer): boolean;
    procedure SetLogisticsPlanType(Index: Integer; const Astring: string);
    function  LogisticsPlanType_Specified(Index: Integer): boolean;
    procedure SetBuyerPackageEnclosures(Index: Integer; const ABuyerPackageEnclosuresType: BuyerPackageEnclosuresType);
    function  BuyerPackageEnclosures_Specified(Index: Integer): boolean;
    procedure SetInventoryReservationID(Index: Integer; const Astring: string);
    function  InventoryReservationID_Specified(Index: Integer): boolean;
    procedure SetExtendedOrderID(Index: Integer; const Astring: string);
    function  ExtendedOrderID_Specified(Index: Integer): boolean;
    procedure SeteBayPlusTransaction(Index: Integer; const ABoolean: Boolean);
    function  eBayPlusTransaction_Specified(Index: Integer): boolean;
    procedure SetGiftSummary(Index: Integer; const AGiftSummaryType: GiftSummaryType);
    function  GiftSummary_Specified(Index: Integer): boolean;
    procedure SetDigitalDeliverySelected(Index: Integer; const ADigitalDeliverySelectedType: DigitalDeliverySelectedType);
    function  DigitalDeliverySelected_Specified(Index: Integer): boolean;
    procedure SetGift(Index: Integer; const ABoolean: Boolean);
    function  Gift_Specified(Index: Integer): boolean;
    procedure SetGuaranteedShipping(Index: Integer; const ABoolean: Boolean);
    function  GuaranteedShipping_Specified(Index: Integer): boolean;
    procedure SetGuaranteedDelivery(Index: Integer; const ABoolean: Boolean);
    function  GuaranteedDelivery_Specified(Index: Integer): boolean;
    procedure SeteBayCollectAndRemitTax(Index: Integer; const ABoolean: Boolean);
    function  eBayCollectAndRemitTax_Specified(Index: Integer): boolean;
    procedure SeteBayCollectAndRemitTaxes(Index: Integer; const ATaxesType: TaxesType);
    function  eBayCollectAndRemitTaxes_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AmountPaid:                        AmountType                             Index (IS_OPTN) read FAmountPaid write SetAmountPaid stored AmountPaid_Specified;
    property AdjustmentAmount:                  AmountType                             Index (IS_OPTN) read FAdjustmentAmount write SetAdjustmentAmount stored AdjustmentAmount_Specified;
    property ConvertedAdjustmentAmount:         AmountType                             Index (IS_OPTN) read FConvertedAdjustmentAmount write SetConvertedAdjustmentAmount stored ConvertedAdjustmentAmount_Specified;
    property Buyer:                             UserType                               Index (IS_OPTN) read FBuyer write SetBuyer stored Buyer_Specified;
    property ShippingDetails:                   ShippingDetailsType                    Index (IS_OPTN) read FShippingDetails write SetShippingDetails stored ShippingDetails_Specified;
    property ConvertedAmountPaid:               AmountType                             Index (IS_OPTN) read FConvertedAmountPaid write SetConvertedAmountPaid stored ConvertedAmountPaid_Specified;
    property ConvertedTransactionPrice:         AmountType                             Index (IS_OPTN) read FConvertedTransactionPrice write SetConvertedTransactionPrice stored ConvertedTransactionPrice_Specified;
    property CreatedDate:                       TXSDateTime                            Index (IS_OPTN) read FCreatedDate write SetCreatedDate stored CreatedDate_Specified;
    property DepositType:                       DepositTypeCodeType                    Index (IS_OPTN) read FDepositType write SetDepositType stored DepositType_Specified;
    property Item:                              ItemType                               Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property QuantityPurchased:                 Integer                                Index (IS_OPTN) read FQuantityPurchased write SetQuantityPurchased stored QuantityPurchased_Specified;
    property Status:                            TransactionStatusType                  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property TransactionID:                     string                                 Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property TransactionPrice:                  AmountType                             Index (IS_OPTN) read FTransactionPrice write SetTransactionPrice stored TransactionPrice_Specified;
    property BestOfferSale:                     Boolean                                Index (IS_OPTN) read FBestOfferSale write SetBestOfferSale stored BestOfferSale_Specified;
    property VATPercent:                        TXSDecimal                             Index (IS_OPTN) read FVATPercent write SetVATPercent stored VATPercent_Specified;
    property ExternalTransaction:               Array_Of_ExternalTransactionType       Index (IS_OPTN or IS_UNBD) read FExternalTransaction write SetExternalTransaction stored ExternalTransaction_Specified;
    property SellingManagerProductDetails:      SellingManagerProductDetailsType       Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property ShippingServiceSelected:           ShippingServiceOptionsType             Index (IS_OPTN) read FShippingServiceSelected write SetShippingServiceSelected stored ShippingServiceSelected_Specified;
    property BuyerMessage:                      string                                 Index (IS_OPTN) read FBuyerMessage write SetBuyerMessage stored BuyerMessage_Specified;
    property DutchAuctionBid:                   AmountType                             Index (IS_OPTN) read FDutchAuctionBid write SetDutchAuctionBid stored DutchAuctionBid_Specified;
    property BuyerPaidStatus:                   PaidStatusCodeType                     Index (IS_OPTN) read FBuyerPaidStatus write SetBuyerPaidStatus stored BuyerPaidStatus_Specified;
    property SellerPaidStatus:                  PaidStatusCodeType                     Index (IS_OPTN) read FSellerPaidStatus write SetSellerPaidStatus stored SellerPaidStatus_Specified;
    property PaidTime:                          TXSDateTime                            Index (IS_OPTN) read FPaidTime write SetPaidTime stored PaidTime_Specified;
    property ShippedTime:                       TXSDateTime                            Index (IS_OPTN) read FShippedTime write SetShippedTime stored ShippedTime_Specified;
    property TotalPrice:                        AmountType                             Index (IS_OPTN) read FTotalPrice write SetTotalPrice stored TotalPrice_Specified;
    property FeedbackLeft:                      FeedbackInfoType                       Index (IS_OPTN) read FFeedbackLeft write SetFeedbackLeft stored FeedbackLeft_Specified;
    property FeedbackReceived:                  FeedbackInfoType                       Index (IS_OPTN) read FFeedbackReceived write SetFeedbackReceived stored FeedbackReceived_Specified;
    property ContainingOrder:                   OrderType                              Index (IS_OPTN) read FContainingOrder write SetContainingOrder stored ContainingOrder_Specified;
    property FinalValueFee:                     AmountType                             Index (IS_OPTN) read FFinalValueFee write SetFinalValueFee stored FinalValueFee_Specified;
    property ListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType  Index (IS_OPTN) read FListingCheckoutRedirectPreference write SetListingCheckoutRedirectPreference stored ListingCheckoutRedirectPreference_Specified;
    property RefundArray:                       RefundArrayType                        Index (IS_OPTN) read FRefundArray write SetRefundArray stored RefundArray_Specified;
    property TransactionSiteID:                 SiteCodeType                           Index (IS_OPTN) read FTransactionSiteID write SetTransactionSiteID stored TransactionSiteID_Specified;
    property Platform_:                         TransactionPlatformCodeType            Index (IS_OPTN) read FPlatform_ write SetPlatform_ stored Platform__Specified;
    property CartID:                            string                                 Index (IS_OPTN) read FCartID write SetCartID stored CartID_Specified;
    property SellerContactBuyerByEmail:         Boolean                                Index (IS_OPTN) read FSellerContactBuyerByEmail write SetSellerContactBuyerByEmail stored SellerContactBuyerByEmail_Specified;
    property PayPalEmailAddress:                string                                 Index (IS_OPTN) read FPayPalEmailAddress write SetPayPalEmailAddress stored PayPalEmailAddress_Specified;
    property PaisaPayID:                        string                                 Index (IS_OPTN) read FPaisaPayID write SetPaisaPayID stored PaisaPayID_Specified;
    property BuyerGuaranteePrice:               AmountType                             Index (IS_OPTN) read FBuyerGuaranteePrice write SetBuyerGuaranteePrice stored BuyerGuaranteePrice_Specified;
    property Variation:                         VariationType                          Index (IS_OPTN) read FVariation write SetVariation stored Variation_Specified;
    property BuyerCheckoutMessage:              string                                 Index (IS_OPTN) read FBuyerCheckoutMessage write SetBuyerCheckoutMessage stored BuyerCheckoutMessage_Specified;
    property TotalTransactionPrice:             AmountType                             Index (IS_OPTN) read FTotalTransactionPrice write SetTotalTransactionPrice stored TotalTransactionPrice_Specified;
    property Taxes:                             TaxesType                              Index (IS_OPTN) read FTaxes write SetTaxes stored Taxes_Specified;
    property BundlePurchase:                    Boolean                                Index (IS_OPTN) read FBundlePurchase write SetBundlePurchase stored BundlePurchase_Specified;
    property ActualShippingCost:                AmountType                             Index (IS_OPTN) read FActualShippingCost write SetActualShippingCost stored ActualShippingCost_Specified;
    property ActualHandlingCost:                AmountType                             Index (IS_OPTN) read FActualHandlingCost write SetActualHandlingCost stored ActualHandlingCost_Specified;
    property OrderLineItemID:                   string                                 Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
    property eBayPaymentID:                     string                                 Index (IS_OPTN) read FeBayPaymentID write SeteBayPaymentID stored eBayPaymentID_Specified;
    property PaymentHoldDetails:                PaymentHoldDetailType                  Index (IS_OPTN) read FPaymentHoldDetails write SetPaymentHoldDetails stored PaymentHoldDetails_Specified;
    property SellerDiscounts:                   SellerDiscountsType                    Index (IS_OPTN) read FSellerDiscounts write SetSellerDiscounts stored SellerDiscounts_Specified;
    property RefundAmount:                      AmountType                             Index (IS_OPTN) read FRefundAmount write SetRefundAmount stored RefundAmount_Specified;
    property RefundStatus:                      string                                 Index (IS_OPTN) read FRefundStatus write SetRefundStatus stored RefundStatus_Specified;
    property CodiceFiscale:                     string                                 Index (IS_OPTN) read FCodiceFiscale write SetCodiceFiscale stored CodiceFiscale_Specified;
    property IsMultiLegShipping:                Boolean                                Index (IS_OPTN) read FIsMultiLegShipping write SetIsMultiLegShipping stored IsMultiLegShipping_Specified;
    property MultiLegShippingDetails:           MultiLegShippingDetailsType            Index (IS_OPTN) read FMultiLegShippingDetails write SetMultiLegShippingDetails stored MultiLegShippingDetails_Specified;
    property InvoiceSentTime:                   TXSDateTime                            Index (IS_OPTN) read FInvoiceSentTime write SetInvoiceSentTime stored InvoiceSentTime_Specified;
    property UnpaidItem:                        UnpaidItemType                         Index (IS_OPTN) read FUnpaidItem write SetUnpaidItem stored UnpaidItem_Specified;
    property IntangibleItem:                    Boolean                                Index (IS_OPTN) read FIntangibleItem write SetIntangibleItem stored IntangibleItem_Specified;
    property MonetaryDetails:                   PaymentsInformationType                Index (IS_OPTN) read FMonetaryDetails write SetMonetaryDetails stored MonetaryDetails_Specified;
    property PickupDetails:                     PickupDetailsType                      Index (IS_OPTN) read FPickupDetails write SetPickupDetails stored PickupDetails_Specified;
    property PickupMethodSelected:              PickupMethodSelectedType               Index (IS_OPTN) read FPickupMethodSelected write SetPickupMethodSelected stored PickupMethodSelected_Specified;
    property ShippingConvenienceCharge:         AmountType                             Index (IS_OPTN) read FShippingConvenienceCharge write SetShippingConvenienceCharge stored ShippingConvenienceCharge_Specified;
    property LogisticsPlanType:                 string                                 Index (IS_OPTN) read FLogisticsPlanType write SetLogisticsPlanType stored LogisticsPlanType_Specified;
    property BuyerPackageEnclosures:            BuyerPackageEnclosuresType             Index (IS_OPTN) read FBuyerPackageEnclosures write SetBuyerPackageEnclosures stored BuyerPackageEnclosures_Specified;
    property InventoryReservationID:            string                                 Index (IS_OPTN) read FInventoryReservationID write SetInventoryReservationID stored InventoryReservationID_Specified;
    property ExtendedOrderID:                   string                                 Index (IS_OPTN) read FExtendedOrderID write SetExtendedOrderID stored ExtendedOrderID_Specified;
    property eBayPlusTransaction:               Boolean                                Index (IS_OPTN) read FeBayPlusTransaction write SeteBayPlusTransaction stored eBayPlusTransaction_Specified;
    property GiftSummary:                       GiftSummaryType                        Index (IS_OPTN) read FGiftSummary write SetGiftSummary stored GiftSummary_Specified;
    property DigitalDeliverySelected:           DigitalDeliverySelectedType            Index (IS_OPTN) read FDigitalDeliverySelected write SetDigitalDeliverySelected stored DigitalDeliverySelected_Specified;
    property Gift:                              Boolean                                Index (IS_OPTN) read FGift write SetGift stored Gift_Specified;
    property GuaranteedShipping:                Boolean                                Index (IS_OPTN) read FGuaranteedShipping write SetGuaranteedShipping stored GuaranteedShipping_Specified;
    property GuaranteedDelivery:                Boolean                                Index (IS_OPTN) read FGuaranteedDelivery write SetGuaranteedDelivery stored GuaranteedDelivery_Specified;
    property eBayCollectAndRemitTax:            Boolean                                Index (IS_OPTN) read FeBayCollectAndRemitTax write SeteBayCollectAndRemitTax stored eBayCollectAndRemitTax_Specified;
    property eBayCollectAndRemitTaxes:          TaxesType                              Index (IS_OPTN) read FeBayCollectAndRemitTaxes write SeteBayCollectAndRemitTaxes stored eBayCollectAndRemitTaxes_Specified;
  end;



  // ************************************************************************ //
  // XML       : ErrorParameterType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ErrorParameterType = class(TRemotable)
  private
    FParamID: string;
    FParamID_Specified: boolean;
    FValue: string;
    FValue_Specified: boolean;
    procedure SetParamID(Index: Integer; const Astring: string);
    function  ParamID_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const Astring: string);
    function  Value_Specified(Index: Integer): boolean;
  published
    property ParamID: string  Index (IS_ATTR or IS_OPTN) read FParamID write SetParamID stored ParamID_Specified;
    property Value:   string  Index (IS_OPTN) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : MeasureType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MeasureType = class(TRemotable)
  private
    FText: TXSDecimal;
    Funit_: string;
    Funit__Specified: boolean;
    FmeasurementSystem: MeasurementSystemCodeType;
    FmeasurementSystem_Specified: boolean;
    procedure Setunit_(Index: Integer; const Astring: string);
    function  unit__Specified(Index: Integer): boolean;
    procedure SetmeasurementSystem(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
    function  measurementSystem_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Text:              TXSDecimal                 Index (IS_TEXT) read FText write FText;
    property unit_:             string                     Index (IS_ATTR or IS_OPTN) read Funit_ write Setunit_ stored unit__Specified;
    property measurementSystem: MeasurementSystemCodeType  Index (IS_ATTR or IS_OPTN) read FmeasurementSystem write SetmeasurementSystem stored measurementSystem_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculatedShippingRateType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingRateType = class(TRemotable)
  private
    FOriginatingPostalCode: string;
    FOriginatingPostalCode_Specified: boolean;
    FMeasurementUnit: MeasurementSystemCodeType;
    FMeasurementUnit_Specified: boolean;
    FPackagingHandlingCosts: AmountType;
    FPackagingHandlingCosts_Specified: boolean;
    FShippingIrregular: Boolean;
    FShippingIrregular_Specified: boolean;
    FInternationalPackagingHandlingCosts: AmountType;
    FInternationalPackagingHandlingCosts_Specified: boolean;
    procedure SetOriginatingPostalCode(Index: Integer; const Astring: string);
    function  OriginatingPostalCode_Specified(Index: Integer): boolean;
    procedure SetMeasurementUnit(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
    function  MeasurementUnit_Specified(Index: Integer): boolean;
    procedure SetPackagingHandlingCosts(Index: Integer; const AAmountType: AmountType);
    function  PackagingHandlingCosts_Specified(Index: Integer): boolean;
    procedure SetShippingIrregular(Index: Integer; const ABoolean: Boolean);
    function  ShippingIrregular_Specified(Index: Integer): boolean;
    procedure SetInternationalPackagingHandlingCosts(Index: Integer; const AAmountType: AmountType);
    function  InternationalPackagingHandlingCosts_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property OriginatingPostalCode:               string                     Index (IS_OPTN) read FOriginatingPostalCode write SetOriginatingPostalCode stored OriginatingPostalCode_Specified;
    property MeasurementUnit:                     MeasurementSystemCodeType  Index (IS_OPTN) read FMeasurementUnit write SetMeasurementUnit stored MeasurementUnit_Specified;
    property PackagingHandlingCosts:              AmountType                 Index (IS_OPTN) read FPackagingHandlingCosts write SetPackagingHandlingCosts stored PackagingHandlingCosts_Specified;
    property ShippingIrregular:                   Boolean                    Index (IS_OPTN) read FShippingIrregular write SetShippingIrregular stored ShippingIrregular_Specified;
    property InternationalPackagingHandlingCosts: AmountType                 Index (IS_OPTN) read FInternationalPackagingHandlingCosts write SetInternationalPackagingHandlingCosts stored InternationalPackagingHandlingCosts_Specified;
  end;



  // ************************************************************************ //
  // XML       : ShipPackageDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShipPackageDetailsType = class(TRemotable)
  private
    FMeasurementUnit: MeasurementSystemCodeType;
    FMeasurementUnit_Specified: boolean;
    FPackageDepth: MeasureType;
    FPackageDepth_Specified: boolean;
    FPackageLength: MeasureType;
    FPackageLength_Specified: boolean;
    FPackageWidth: MeasureType;
    FPackageWidth_Specified: boolean;
    FShippingIrregular: Boolean;
    FShippingIrregular_Specified: boolean;
    FShippingPackage: ShippingPackageCodeType;
    FShippingPackage_Specified: boolean;
    FWeightMajor: MeasureType;
    FWeightMajor_Specified: boolean;
    FWeightMinor: MeasureType;
    FWeightMinor_Specified: boolean;
    procedure SetMeasurementUnit(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
    function  MeasurementUnit_Specified(Index: Integer): boolean;
    procedure SetPackageDepth(Index: Integer; const AMeasureType: MeasureType);
    function  PackageDepth_Specified(Index: Integer): boolean;
    procedure SetPackageLength(Index: Integer; const AMeasureType: MeasureType);
    function  PackageLength_Specified(Index: Integer): boolean;
    procedure SetPackageWidth(Index: Integer; const AMeasureType: MeasureType);
    function  PackageWidth_Specified(Index: Integer): boolean;
    procedure SetShippingIrregular(Index: Integer; const ABoolean: Boolean);
    function  ShippingIrregular_Specified(Index: Integer): boolean;
    procedure SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
    function  ShippingPackage_Specified(Index: Integer): boolean;
    procedure SetWeightMajor(Index: Integer; const AMeasureType: MeasureType);
    function  WeightMajor_Specified(Index: Integer): boolean;
    procedure SetWeightMinor(Index: Integer; const AMeasureType: MeasureType);
    function  WeightMinor_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MeasurementUnit:   MeasurementSystemCodeType  Index (IS_OPTN) read FMeasurementUnit write SetMeasurementUnit stored MeasurementUnit_Specified;
    property PackageDepth:      MeasureType                Index (IS_OPTN) read FPackageDepth write SetPackageDepth stored PackageDepth_Specified;
    property PackageLength:     MeasureType                Index (IS_OPTN) read FPackageLength write SetPackageLength stored PackageLength_Specified;
    property PackageWidth:      MeasureType                Index (IS_OPTN) read FPackageWidth write SetPackageWidth stored PackageWidth_Specified;
    property ShippingIrregular: Boolean                    Index (IS_OPTN) read FShippingIrregular write SetShippingIrregular stored ShippingIrregular_Specified;
    property ShippingPackage:   ShippingPackageCodeType    Index (IS_OPTN) read FShippingPackage write SetShippingPackage stored ShippingPackage_Specified;
    property WeightMajor:       MeasureType                Index (IS_OPTN) read FWeightMajor write SetWeightMajor stored WeightMajor_Specified;
    property WeightMinor:       MeasureType                Index (IS_OPTN) read FWeightMinor write SetWeightMinor stored WeightMinor_Specified;
  end;



  // ************************************************************************ //
  // XML       : AdditionalAccountType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdditionalAccountType = class(TRemotable)
  private
    FBalance: AmountType;
    FBalance_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FAccountCode: string;
    FAccountCode_Specified: boolean;
    procedure SetBalance(Index: Integer; const AAmountType: AmountType);
    function  Balance_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetAccountCode(Index: Integer; const Astring: string);
    function  AccountCode_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Balance:     AmountType        Index (IS_OPTN) read FBalance write SetBalance stored Balance_Specified;
    property Currency:    CurrencyCodeType  Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property AccountCode: string            Index (IS_OPTN) read FAccountCode write SetAccountCode stored AccountCode_Specified;
  end;



  // ************************************************************************ //
  // XML       : UserType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserType = class(TRemotable)
  private
    FAboutMePage: Boolean;
    FAboutMePage_Specified: boolean;
    FEIASToken: string;
    FEIASToken_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FFeedbackScore: Integer;
    FFeedbackScore_Specified: boolean;
    FUniqueNegativeFeedbackCount: Integer;
    FUniqueNegativeFeedbackCount_Specified: boolean;
    FUniquePositiveFeedbackCount: Integer;
    FUniquePositiveFeedbackCount_Specified: boolean;
    FPositiveFeedbackPercent: Single;
    FPositiveFeedbackPercent_Specified: boolean;
    FFeedbackPrivate: Boolean;
    FFeedbackPrivate_Specified: boolean;
    FFeedbackRatingStar: FeedbackRatingStarCodeType;
    FFeedbackRatingStar_Specified: boolean;
    FIDVerified: Boolean;
    FIDVerified_Specified: boolean;
    FeBayGoodStanding: Boolean;
    FeBayGoodStanding_Specified: boolean;
    FNewUser: Boolean;
    FNewUser_Specified: boolean;
    FRegistrationAddress: AddressType;
    FRegistrationAddress_Specified: boolean;
    FRegistrationDate: TXSDateTime;
    FRegistrationDate_Specified: boolean;
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FStatus: UserStatusCodeType;
    FStatus_Specified: boolean;
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FUserIDChanged: Boolean;
    FUserIDChanged_Specified: boolean;
    FUserIDLastChanged: TXSDateTime;
    FUserIDLastChanged_Specified: boolean;
    FVATStatus: VATStatusCodeType;
    FVATStatus_Specified: boolean;
    FBuyerInfo: BuyerType;
    FBuyerInfo_Specified: boolean;
    FSellerInfo: SellerType;
    FSellerInfo_Specified: boolean;
    FBusinessRole: BusinessRoleType;
    FBusinessRole_Specified: boolean;
    FCharityAffiliations: CharityAffiliationsType;
    FCharityAffiliations_Specified: boolean;
    FPayPalAccountLevel: PayPalAccountLevelCodeType;
    FPayPalAccountLevel_Specified: boolean;
    FPayPalAccountType: PayPalAccountTypeCodeType;
    FPayPalAccountType_Specified: boolean;
    FPayPalAccountStatus: PayPalAccountStatusCodeType;
    FPayPalAccountStatus_Specified: boolean;
    FUserSubscription: Array_Of_EBaySubscriptionTypeCodeType;
    FUserSubscription_Specified: boolean;
    FSiteVerified: Boolean;
    FSiteVerified_Specified: boolean;
    FSkypeID: SellerExcludeShipToLocationPreferencesType;
    FSkypeID_Specified: boolean;
    FeBayWikiReadOnly: Boolean;
    FeBayWikiReadOnly_Specified: boolean;
    FTUVLevel: Integer;
    FTUVLevel_Specified: boolean;
    FVATID: string;
    FVATID_Specified: boolean;
    FSellerPaymentMethod: SellerPaymentMethodCodeType;
    FSellerPaymentMethod_Specified: boolean;
    FBiddingSummary: BiddingSummaryType;
    FBiddingSummary_Specified: boolean;
    FUserAnonymized: Boolean;
    FUserAnonymized_Specified: boolean;
    FUniqueNeutralFeedbackCount: Integer;
    FUniqueNeutralFeedbackCount_Specified: boolean;
    FEnterpriseSeller: Boolean;
    FEnterpriseSeller_Specified: boolean;
    FBillingEmail: string;
    FBillingEmail_Specified: boolean;
    FQualifiesForSelling: Boolean;
    FQualifiesForSelling_Specified: boolean;
    FStaticAlias: string;
    FStaticAlias_Specified: boolean;
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FMembership: MembershipDetailsType;
    FMembership_Specified: boolean;
    FUserFirstName: string;
    FUserFirstName_Specified: boolean;
    FUserLastName: string;
    FUserLastName_Specified: boolean;
    procedure SetAboutMePage(Index: Integer; const ABoolean: Boolean);
    function  AboutMePage_Specified(Index: Integer): boolean;
    procedure SetEIASToken(Index: Integer; const Astring: string);
    function  EIASToken_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetFeedbackScore(Index: Integer; const AInteger: Integer);
    function  FeedbackScore_Specified(Index: Integer): boolean;
    procedure SetUniqueNegativeFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniqueNegativeFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetUniquePositiveFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniquePositiveFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetPositiveFeedbackPercent(Index: Integer; const ASingle: Single);
    function  PositiveFeedbackPercent_Specified(Index: Integer): boolean;
    procedure SetFeedbackPrivate(Index: Integer; const ABoolean: Boolean);
    function  FeedbackPrivate_Specified(Index: Integer): boolean;
    procedure SetFeedbackRatingStar(Index: Integer; const AFeedbackRatingStarCodeType: FeedbackRatingStarCodeType);
    function  FeedbackRatingStar_Specified(Index: Integer): boolean;
    procedure SetIDVerified(Index: Integer; const ABoolean: Boolean);
    function  IDVerified_Specified(Index: Integer): boolean;
    procedure SeteBayGoodStanding(Index: Integer; const ABoolean: Boolean);
    function  eBayGoodStanding_Specified(Index: Integer): boolean;
    procedure SetNewUser(Index: Integer; const ABoolean: Boolean);
    function  NewUser_Specified(Index: Integer): boolean;
    procedure SetRegistrationAddress(Index: Integer; const AAddressType: AddressType);
    function  RegistrationAddress_Specified(Index: Integer): boolean;
    procedure SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RegistrationDate_Specified(Index: Integer): boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AUserStatusCodeType: UserStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetUserIDChanged(Index: Integer; const ABoolean: Boolean);
    function  UserIDChanged_Specified(Index: Integer): boolean;
    procedure SetUserIDLastChanged(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UserIDLastChanged_Specified(Index: Integer): boolean;
    procedure SetVATStatus(Index: Integer; const AVATStatusCodeType: VATStatusCodeType);
    function  VATStatus_Specified(Index: Integer): boolean;
    procedure SetBuyerInfo(Index: Integer; const ABuyerType: BuyerType);
    function  BuyerInfo_Specified(Index: Integer): boolean;
    procedure SetSellerInfo(Index: Integer; const ASellerType: SellerType);
    function  SellerInfo_Specified(Index: Integer): boolean;
    procedure SetBusinessRole(Index: Integer; const ABusinessRoleType: BusinessRoleType);
    function  BusinessRole_Specified(Index: Integer): boolean;
    procedure SetCharityAffiliations(Index: Integer; const ACharityAffiliationsType: CharityAffiliationsType);
    function  CharityAffiliations_Specified(Index: Integer): boolean;
    procedure SetPayPalAccountLevel(Index: Integer; const APayPalAccountLevelCodeType: PayPalAccountLevelCodeType);
    function  PayPalAccountLevel_Specified(Index: Integer): boolean;
    procedure SetPayPalAccountType(Index: Integer; const APayPalAccountTypeCodeType: PayPalAccountTypeCodeType);
    function  PayPalAccountType_Specified(Index: Integer): boolean;
    procedure SetPayPalAccountStatus(Index: Integer; const APayPalAccountStatusCodeType: PayPalAccountStatusCodeType);
    function  PayPalAccountStatus_Specified(Index: Integer): boolean;
    procedure SetUserSubscription(Index: Integer; const AArray_Of_EBaySubscriptionTypeCodeType: Array_Of_EBaySubscriptionTypeCodeType);
    function  UserSubscription_Specified(Index: Integer): boolean;
    procedure SetSiteVerified(Index: Integer; const ABoolean: Boolean);
    function  SiteVerified_Specified(Index: Integer): boolean;
    procedure SetSkypeID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  SkypeID_Specified(Index: Integer): boolean;
    procedure SeteBayWikiReadOnly(Index: Integer; const ABoolean: Boolean);
    function  eBayWikiReadOnly_Specified(Index: Integer): boolean;
    procedure SetTUVLevel(Index: Integer; const AInteger: Integer);
    function  TUVLevel_Specified(Index: Integer): boolean;
    procedure SetVATID(Index: Integer; const Astring: string);
    function  VATID_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
    function  SellerPaymentMethod_Specified(Index: Integer): boolean;
    procedure SetBiddingSummary(Index: Integer; const ABiddingSummaryType: BiddingSummaryType);
    function  BiddingSummary_Specified(Index: Integer): boolean;
    procedure SetUserAnonymized(Index: Integer; const ABoolean: Boolean);
    function  UserAnonymized_Specified(Index: Integer): boolean;
    procedure SetUniqueNeutralFeedbackCount(Index: Integer; const AInteger: Integer);
    function  UniqueNeutralFeedbackCount_Specified(Index: Integer): boolean;
    procedure SetEnterpriseSeller(Index: Integer; const ABoolean: Boolean);
    function  EnterpriseSeller_Specified(Index: Integer): boolean;
    procedure SetBillingEmail(Index: Integer; const Astring: string);
    function  BillingEmail_Specified(Index: Integer): boolean;
    procedure SetQualifiesForSelling(Index: Integer; const ABoolean: Boolean);
    function  QualifiesForSelling_Specified(Index: Integer): boolean;
    procedure SetStaticAlias(Index: Integer; const Astring: string);
    function  StaticAlias_Specified(Index: Integer): boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetMembership(Index: Integer; const AMembershipDetailsType: MembershipDetailsType);
    function  Membership_Specified(Index: Integer): boolean;
    procedure SetUserFirstName(Index: Integer; const Astring: string);
    function  UserFirstName_Specified(Index: Integer): boolean;
    procedure SetUserLastName(Index: Integer; const Astring: string);
    function  UserLastName_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AboutMePage:                 Boolean                                     Index (IS_OPTN) read FAboutMePage write SetAboutMePage stored AboutMePage_Specified;
    property EIASToken:                   string                                      Index (IS_OPTN) read FEIASToken write SetEIASToken stored EIASToken_Specified;
    property Email:                       string                                      Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
    property FeedbackScore:               Integer                                     Index (IS_OPTN) read FFeedbackScore write SetFeedbackScore stored FeedbackScore_Specified;
    property UniqueNegativeFeedbackCount: Integer                                     Index (IS_OPTN) read FUniqueNegativeFeedbackCount write SetUniqueNegativeFeedbackCount stored UniqueNegativeFeedbackCount_Specified;
    property UniquePositiveFeedbackCount: Integer                                     Index (IS_OPTN) read FUniquePositiveFeedbackCount write SetUniquePositiveFeedbackCount stored UniquePositiveFeedbackCount_Specified;
    property PositiveFeedbackPercent:     Single                                      Index (IS_OPTN) read FPositiveFeedbackPercent write SetPositiveFeedbackPercent stored PositiveFeedbackPercent_Specified;
    property FeedbackPrivate:             Boolean                                     Index (IS_OPTN) read FFeedbackPrivate write SetFeedbackPrivate stored FeedbackPrivate_Specified;
    property FeedbackRatingStar:          FeedbackRatingStarCodeType                  Index (IS_OPTN) read FFeedbackRatingStar write SetFeedbackRatingStar stored FeedbackRatingStar_Specified;
    property IDVerified:                  Boolean                                     Index (IS_OPTN) read FIDVerified write SetIDVerified stored IDVerified_Specified;
    property eBayGoodStanding:            Boolean                                     Index (IS_OPTN) read FeBayGoodStanding write SeteBayGoodStanding stored eBayGoodStanding_Specified;
    property NewUser:                     Boolean                                     Index (IS_OPTN) read FNewUser write SetNewUser stored NewUser_Specified;
    property RegistrationAddress:         AddressType                                 Index (IS_OPTN) read FRegistrationAddress write SetRegistrationAddress stored RegistrationAddress_Specified;
    property RegistrationDate:            TXSDateTime                                 Index (IS_OPTN) read FRegistrationDate write SetRegistrationDate stored RegistrationDate_Specified;
    property Site:                        SiteCodeType                                Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property Status:                      UserStatusCodeType                          Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property UserID:                      UserIDType                                  Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property UserIDChanged:               Boolean                                     Index (IS_OPTN) read FUserIDChanged write SetUserIDChanged stored UserIDChanged_Specified;
    property UserIDLastChanged:           TXSDateTime                                 Index (IS_OPTN) read FUserIDLastChanged write SetUserIDLastChanged stored UserIDLastChanged_Specified;
    property VATStatus:                   VATStatusCodeType                           Index (IS_OPTN) read FVATStatus write SetVATStatus stored VATStatus_Specified;
    property BuyerInfo:                   BuyerType                                   Index (IS_OPTN) read FBuyerInfo write SetBuyerInfo stored BuyerInfo_Specified;
    property SellerInfo:                  SellerType                                  Index (IS_OPTN) read FSellerInfo write SetSellerInfo stored SellerInfo_Specified;
    property BusinessRole:                BusinessRoleType                            Index (IS_OPTN) read FBusinessRole write SetBusinessRole stored BusinessRole_Specified;
    property CharityAffiliations:         CharityAffiliationsType                     Index (IS_OPTN) read FCharityAffiliations write SetCharityAffiliations stored CharityAffiliations_Specified;
    property PayPalAccountLevel:          PayPalAccountLevelCodeType                  Index (IS_OPTN) read FPayPalAccountLevel write SetPayPalAccountLevel stored PayPalAccountLevel_Specified;
    property PayPalAccountType:           PayPalAccountTypeCodeType                   Index (IS_OPTN) read FPayPalAccountType write SetPayPalAccountType stored PayPalAccountType_Specified;
    property PayPalAccountStatus:         PayPalAccountStatusCodeType                 Index (IS_OPTN) read FPayPalAccountStatus write SetPayPalAccountStatus stored PayPalAccountStatus_Specified;
    property UserSubscription:            Array_Of_EBaySubscriptionTypeCodeType       Index (IS_OPTN or IS_UNBD) read FUserSubscription write SetUserSubscription stored UserSubscription_Specified;
    property SiteVerified:                Boolean                                     Index (IS_OPTN) read FSiteVerified write SetSiteVerified stored SiteVerified_Specified;
    property SkypeID:                     SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FSkypeID write SetSkypeID stored SkypeID_Specified;
    property eBayWikiReadOnly:            Boolean                                     Index (IS_OPTN) read FeBayWikiReadOnly write SeteBayWikiReadOnly stored eBayWikiReadOnly_Specified;
    property TUVLevel:                    Integer                                     Index (IS_OPTN) read FTUVLevel write SetTUVLevel stored TUVLevel_Specified;
    property VATID:                       string                                      Index (IS_OPTN) read FVATID write SetVATID stored VATID_Specified;
    property SellerPaymentMethod:         SellerPaymentMethodCodeType                 Index (IS_OPTN) read FSellerPaymentMethod write SetSellerPaymentMethod stored SellerPaymentMethod_Specified;
    property BiddingSummary:              BiddingSummaryType                          Index (IS_OPTN) read FBiddingSummary write SetBiddingSummary stored BiddingSummary_Specified;
    property UserAnonymized:              Boolean                                     Index (IS_OPTN) read FUserAnonymized write SetUserAnonymized stored UserAnonymized_Specified;
    property UniqueNeutralFeedbackCount:  Integer                                     Index (IS_OPTN) read FUniqueNeutralFeedbackCount write SetUniqueNeutralFeedbackCount stored UniqueNeutralFeedbackCount_Specified;
    property EnterpriseSeller:            Boolean                                     Index (IS_OPTN) read FEnterpriseSeller write SetEnterpriseSeller stored EnterpriseSeller_Specified;
    property BillingEmail:                string                                      Index (IS_OPTN) read FBillingEmail write SetBillingEmail stored BillingEmail_Specified;
    property QualifiesForSelling:         Boolean                                     Index (IS_OPTN) read FQualifiesForSelling write SetQualifiesForSelling stored QualifiesForSelling_Specified;
    property StaticAlias:                 string                                      Index (IS_OPTN) read FStaticAlias write SetStaticAlias stored StaticAlias_Specified;
    property ShippingAddress:             AddressType                                 Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property Membership:                  MembershipDetailsType                       Index (IS_OPTN) read FMembership write SetMembership stored Membership_Specified;
    property UserFirstName:               string                                      Index (IS_OPTN) read FUserFirstName write SetUserFirstName stored UserFirstName_Specified;
    property UserLastName:                string                                      Index (IS_OPTN) read FUserLastName write SetUserLastName stored UserLastName_Specified;
  end;



  // ************************************************************************ //
  // XML       : AccountSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AccountSummaryType = class(TRemotable)
  private
    FAccountState: AccountStateCodeType;
    FAccountState_Specified: boolean;
    FInvoicePayment: AmountType;
    FInvoicePayment_Specified: boolean;
    FInvoiceCredit: AmountType;
    FInvoiceCredit_Specified: boolean;
    FInvoiceNewFee: AmountType;
    FInvoiceNewFee_Specified: boolean;
    FAdditionalAccount: Array_Of_AdditionalAccountType;
    FAdditionalAccount_Specified: boolean;
    FAmountPastDue: AmountType;
    FAmountPastDue_Specified: boolean;
    FBankAccountInfo: string;
    FBankAccountInfo_Specified: boolean;
    FBankModifyDate: TXSDateTime;
    FBankModifyDate_Specified: boolean;
    FBillingCycleDate: Integer;
    FBillingCycleDate_Specified: boolean;
    FCreditCardExpiration: TXSDateTime;
    FCreditCardExpiration_Specified: boolean;
    FCreditCardInfo: string;
    FCreditCardInfo_Specified: boolean;
    FCreditCardModifyDate: TXSDateTime;
    FCreditCardModifyDate_Specified: boolean;
    FCurrentBalance: AmountType;
    FCurrentBalance_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FInvoiceBalance: AmountType;
    FInvoiceBalance_Specified: boolean;
    FInvoiceDate: TXSDateTime;
    FInvoiceDate_Specified: boolean;
    FLastAmountPaid: AmountType;
    FLastAmountPaid_Specified: boolean;
    FLastPaymentDate: TXSDateTime;
    FLastPaymentDate_Specified: boolean;
    FPastDue: Boolean;
    FPastDue_Specified: boolean;
    FPaymentMethod: SellerPaymentMethodCodeType;
    FPaymentMethod_Specified: boolean;
    procedure SetAccountState(Index: Integer; const AAccountStateCodeType: AccountStateCodeType);
    function  AccountState_Specified(Index: Integer): boolean;
    procedure SetInvoicePayment(Index: Integer; const AAmountType: AmountType);
    function  InvoicePayment_Specified(Index: Integer): boolean;
    procedure SetInvoiceCredit(Index: Integer; const AAmountType: AmountType);
    function  InvoiceCredit_Specified(Index: Integer): boolean;
    procedure SetInvoiceNewFee(Index: Integer; const AAmountType: AmountType);
    function  InvoiceNewFee_Specified(Index: Integer): boolean;
    procedure SetAdditionalAccount(Index: Integer; const AArray_Of_AdditionalAccountType: Array_Of_AdditionalAccountType);
    function  AdditionalAccount_Specified(Index: Integer): boolean;
    procedure SetAmountPastDue(Index: Integer; const AAmountType: AmountType);
    function  AmountPastDue_Specified(Index: Integer): boolean;
    procedure SetBankAccountInfo(Index: Integer; const Astring: string);
    function  BankAccountInfo_Specified(Index: Integer): boolean;
    procedure SetBankModifyDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  BankModifyDate_Specified(Index: Integer): boolean;
    procedure SetBillingCycleDate(Index: Integer; const AInteger: Integer);
    function  BillingCycleDate_Specified(Index: Integer): boolean;
    procedure SetCreditCardExpiration(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreditCardExpiration_Specified(Index: Integer): boolean;
    procedure SetCreditCardInfo(Index: Integer; const Astring: string);
    function  CreditCardInfo_Specified(Index: Integer): boolean;
    procedure SetCreditCardModifyDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreditCardModifyDate_Specified(Index: Integer): boolean;
    procedure SetCurrentBalance(Index: Integer; const AAmountType: AmountType);
    function  CurrentBalance_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetInvoiceBalance(Index: Integer; const AAmountType: AmountType);
    function  InvoiceBalance_Specified(Index: Integer): boolean;
    procedure SetInvoiceDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InvoiceDate_Specified(Index: Integer): boolean;
    procedure SetLastAmountPaid(Index: Integer; const AAmountType: AmountType);
    function  LastAmountPaid_Specified(Index: Integer): boolean;
    procedure SetLastPaymentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastPaymentDate_Specified(Index: Integer): boolean;
    procedure SetPastDue(Index: Integer; const ABoolean: Boolean);
    function  PastDue_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccountState:         AccountStateCodeType            Index (IS_OPTN) read FAccountState write SetAccountState stored AccountState_Specified;
    property InvoicePayment:       AmountType                      Index (IS_OPTN) read FInvoicePayment write SetInvoicePayment stored InvoicePayment_Specified;
    property InvoiceCredit:        AmountType                      Index (IS_OPTN) read FInvoiceCredit write SetInvoiceCredit stored InvoiceCredit_Specified;
    property InvoiceNewFee:        AmountType                      Index (IS_OPTN) read FInvoiceNewFee write SetInvoiceNewFee stored InvoiceNewFee_Specified;
    property AdditionalAccount:    Array_Of_AdditionalAccountType  Index (IS_OPTN or IS_UNBD) read FAdditionalAccount write SetAdditionalAccount stored AdditionalAccount_Specified;
    property AmountPastDue:        AmountType                      Index (IS_OPTN) read FAmountPastDue write SetAmountPastDue stored AmountPastDue_Specified;
    property BankAccountInfo:      string                          Index (IS_OPTN) read FBankAccountInfo write SetBankAccountInfo stored BankAccountInfo_Specified;
    property BankModifyDate:       TXSDateTime                     Index (IS_OPTN) read FBankModifyDate write SetBankModifyDate stored BankModifyDate_Specified;
    property BillingCycleDate:     Integer                         Index (IS_OPTN) read FBillingCycleDate write SetBillingCycleDate stored BillingCycleDate_Specified;
    property CreditCardExpiration: TXSDateTime                     Index (IS_OPTN) read FCreditCardExpiration write SetCreditCardExpiration stored CreditCardExpiration_Specified;
    property CreditCardInfo:       string                          Index (IS_OPTN) read FCreditCardInfo write SetCreditCardInfo stored CreditCardInfo_Specified;
    property CreditCardModifyDate: TXSDateTime                     Index (IS_OPTN) read FCreditCardModifyDate write SetCreditCardModifyDate stored CreditCardModifyDate_Specified;
    property CurrentBalance:       AmountType                      Index (IS_OPTN) read FCurrentBalance write SetCurrentBalance stored CurrentBalance_Specified;
    property Email:                string                          Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
    property InvoiceBalance:       AmountType                      Index (IS_OPTN) read FInvoiceBalance write SetInvoiceBalance stored InvoiceBalance_Specified;
    property InvoiceDate:          TXSDateTime                     Index (IS_OPTN) read FInvoiceDate write SetInvoiceDate stored InvoiceDate_Specified;
    property LastAmountPaid:       AmountType                      Index (IS_OPTN) read FLastAmountPaid write SetLastAmountPaid stored LastAmountPaid_Specified;
    property LastPaymentDate:      TXSDateTime                     Index (IS_OPTN) read FLastPaymentDate write SetLastPaymentDate stored LastPaymentDate_Specified;
    property PastDue:              Boolean                         Index (IS_OPTN) read FPastDue write SetPastDue stored PastDue_Specified;
    property PaymentMethod:        SellerPaymentMethodCodeType     Index (IS_OPTN) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerType = class(TRemotable)
  private
    FPaisaPayStatus: Integer;
    FPaisaPayStatus_Specified: boolean;
    FAllowPaymentEdit: Boolean;
    FBillingCurrency: CurrencyCodeType;
    FBillingCurrency_Specified: boolean;
    FCheckoutEnabled: Boolean;
    FCIPBankAccountStored: Boolean;
    FGoodStanding: Boolean;
    FMerchandizingPref: MerchandizingPrefCodeType;
    FMerchandizingPref_Specified: boolean;
    FQualifiesForB2BVAT: Boolean;
    FSellerGuaranteeLevel: SellerGuaranteeLevelCodeType;
    FSellerGuaranteeLevel_Specified: boolean;
    FSellerLevel: SellerLevelCodeType;
    FSellerLevel_Specified: boolean;
    FSellerPaymentAddress: AddressType;
    FSellerPaymentAddress_Specified: boolean;
    FSchedulingInfo: SchedulingInfoType;
    FSchedulingInfo_Specified: boolean;
    FStoreOwner: Boolean;
    FStoreURL: string;
    FStoreURL_Specified: boolean;
    FSellerBusinessType: SellerBusinessCodeType;
    FSellerBusinessType_Specified: boolean;
    FRegisteredBusinessSeller: Boolean;
    FRegisteredBusinessSeller_Specified: boolean;
    FStoreSite: SiteCodeType;
    FStoreSite_Specified: boolean;
    FPaymentMethod: SellerPaymentMethodCodeType;
    FPaymentMethod_Specified: boolean;
    FProStoresPreference: ProStoresCheckoutPreferenceType;
    FProStoresPreference_Specified: boolean;
    FCharityRegistered: Boolean;
    FCharityRegistered_Specified: boolean;
    FSafePaymentExempt: Boolean;
    FSafePaymentExempt_Specified: boolean;
    FPaisaPayEscrowEMIStatus: Integer;
    FPaisaPayEscrowEMIStatus_Specified: boolean;
    FCharityAffiliationDetails: CharityAffiliationDetailsType;
    FCharityAffiliationDetails_Specified: boolean;
    FTransactionPercent: Single;
    FTransactionPercent_Specified: boolean;
    FIntegratedMerchantCreditCardInfo: IntegratedMerchantCreditCardInfoType;
    FIntegratedMerchantCreditCardInfo_Specified: boolean;
    FFeatureEligibility: FeatureEligibilityType;
    FFeatureEligibility_Specified: boolean;
    FTopRatedSeller: Boolean;
    FTopRatedSeller_Specified: boolean;
    FTopRatedSellerDetails: TopRatedSellerDetailsType;
    FTopRatedSellerDetails_Specified: boolean;
    FRecoupmentPolicyConsent: RecoupmentPolicyConsentType;
    FRecoupmentPolicyConsent_Specified: boolean;
    FDomesticRateTable: Boolean;
    FDomesticRateTable_Specified: boolean;
    FInternationalRateTable: Boolean;
    FInternationalRateTable_Specified: boolean;
    FSellereBayPaymentProcessStatus: SellereBayPaymentProcessStatusCodeType;
    FSellereBayPaymentProcessStatus_Specified: boolean;
    FSellereBayPaymentProcessConsent: SellereBayPaymentProcessConsentCodeType;
    FSellereBayPaymentProcessConsent_Specified: boolean;
    procedure SetPaisaPayStatus(Index: Integer; const AInteger: Integer);
    function  PaisaPayStatus_Specified(Index: Integer): boolean;
    procedure SetBillingCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  BillingCurrency_Specified(Index: Integer): boolean;
    procedure SetMerchandizingPref(Index: Integer; const AMerchandizingPrefCodeType: MerchandizingPrefCodeType);
    function  MerchandizingPref_Specified(Index: Integer): boolean;
    procedure SetSellerGuaranteeLevel(Index: Integer; const ASellerGuaranteeLevelCodeType: SellerGuaranteeLevelCodeType);
    function  SellerGuaranteeLevel_Specified(Index: Integer): boolean;
    procedure SetSellerLevel(Index: Integer; const ASellerLevelCodeType: SellerLevelCodeType);
    function  SellerLevel_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentAddress(Index: Integer; const AAddressType: AddressType);
    function  SellerPaymentAddress_Specified(Index: Integer): boolean;
    procedure SetSchedulingInfo(Index: Integer; const ASchedulingInfoType: SchedulingInfoType);
    function  SchedulingInfo_Specified(Index: Integer): boolean;
    procedure SetStoreURL(Index: Integer; const Astring: string);
    function  StoreURL_Specified(Index: Integer): boolean;
    procedure SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
    function  SellerBusinessType_Specified(Index: Integer): boolean;
    procedure SetRegisteredBusinessSeller(Index: Integer; const ABoolean: Boolean);
    function  RegisteredBusinessSeller_Specified(Index: Integer): boolean;
    procedure SetStoreSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  StoreSite_Specified(Index: Integer): boolean;
    procedure SetPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
    function  PaymentMethod_Specified(Index: Integer): boolean;
    procedure SetProStoresPreference(Index: Integer; const AProStoresCheckoutPreferenceType: ProStoresCheckoutPreferenceType);
    function  ProStoresPreference_Specified(Index: Integer): boolean;
    procedure SetCharityRegistered(Index: Integer; const ABoolean: Boolean);
    function  CharityRegistered_Specified(Index: Integer): boolean;
    procedure SetSafePaymentExempt(Index: Integer; const ABoolean: Boolean);
    function  SafePaymentExempt_Specified(Index: Integer): boolean;
    procedure SetPaisaPayEscrowEMIStatus(Index: Integer; const AInteger: Integer);
    function  PaisaPayEscrowEMIStatus_Specified(Index: Integer): boolean;
    procedure SetCharityAffiliationDetails(Index: Integer; const ACharityAffiliationDetailsType: CharityAffiliationDetailsType);
    function  CharityAffiliationDetails_Specified(Index: Integer): boolean;
    procedure SetTransactionPercent(Index: Integer; const ASingle: Single);
    function  TransactionPercent_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardInfo(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
    function  IntegratedMerchantCreditCardInfo_Specified(Index: Integer): boolean;
    procedure SetFeatureEligibility(Index: Integer; const AFeatureEligibilityType: FeatureEligibilityType);
    function  FeatureEligibility_Specified(Index: Integer): boolean;
    procedure SetTopRatedSeller(Index: Integer; const ABoolean: Boolean);
    function  TopRatedSeller_Specified(Index: Integer): boolean;
    procedure SetTopRatedSellerDetails(Index: Integer; const ATopRatedSellerDetailsType: TopRatedSellerDetailsType);
    function  TopRatedSellerDetails_Specified(Index: Integer): boolean;
    procedure SetRecoupmentPolicyConsent(Index: Integer; const ARecoupmentPolicyConsentType: RecoupmentPolicyConsentType);
    function  RecoupmentPolicyConsent_Specified(Index: Integer): boolean;
    procedure SetDomesticRateTable(Index: Integer; const ABoolean: Boolean);
    function  DomesticRateTable_Specified(Index: Integer): boolean;
    procedure SetInternationalRateTable(Index: Integer; const ABoolean: Boolean);
    function  InternationalRateTable_Specified(Index: Integer): boolean;
    procedure SetSellereBayPaymentProcessStatus(Index: Integer; const ASellereBayPaymentProcessStatusCodeType: SellereBayPaymentProcessStatusCodeType);
    function  SellereBayPaymentProcessStatus_Specified(Index: Integer): boolean;
    procedure SetSellereBayPaymentProcessConsent(Index: Integer; const ASellereBayPaymentProcessConsentCodeType: SellereBayPaymentProcessConsentCodeType);
    function  SellereBayPaymentProcessConsent_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property PaisaPayStatus:                   Integer                                  Index (IS_OPTN) read FPaisaPayStatus write SetPaisaPayStatus stored PaisaPayStatus_Specified;
    property AllowPaymentEdit:                 Boolean                                  read FAllowPaymentEdit write FAllowPaymentEdit;
    property BillingCurrency:                  CurrencyCodeType                         Index (IS_OPTN) read FBillingCurrency write SetBillingCurrency stored BillingCurrency_Specified;
    property CheckoutEnabled:                  Boolean                                  read FCheckoutEnabled write FCheckoutEnabled;
    property CIPBankAccountStored:             Boolean                                  read FCIPBankAccountStored write FCIPBankAccountStored;
    property GoodStanding:                     Boolean                                  read FGoodStanding write FGoodStanding;
    property MerchandizingPref:                MerchandizingPrefCodeType                Index (IS_OPTN) read FMerchandizingPref write SetMerchandizingPref stored MerchandizingPref_Specified;
    property QualifiesForB2BVAT:               Boolean                                  read FQualifiesForB2BVAT write FQualifiesForB2BVAT;
    property SellerGuaranteeLevel:             SellerGuaranteeLevelCodeType             Index (IS_OPTN) read FSellerGuaranteeLevel write SetSellerGuaranteeLevel stored SellerGuaranteeLevel_Specified;
    property SellerLevel:                      SellerLevelCodeType                      Index (IS_OPTN) read FSellerLevel write SetSellerLevel stored SellerLevel_Specified;
    property SellerPaymentAddress:             AddressType                              Index (IS_OPTN) read FSellerPaymentAddress write SetSellerPaymentAddress stored SellerPaymentAddress_Specified;
    property SchedulingInfo:                   SchedulingInfoType                       Index (IS_OPTN) read FSchedulingInfo write SetSchedulingInfo stored SchedulingInfo_Specified;
    property StoreOwner:                       Boolean                                  read FStoreOwner write FStoreOwner;
    property StoreURL:                         string                                   Index (IS_OPTN) read FStoreURL write SetStoreURL stored StoreURL_Specified;
    property SellerBusinessType:               SellerBusinessCodeType                   Index (IS_OPTN) read FSellerBusinessType write SetSellerBusinessType stored SellerBusinessType_Specified;
    property RegisteredBusinessSeller:         Boolean                                  Index (IS_OPTN) read FRegisteredBusinessSeller write SetRegisteredBusinessSeller stored RegisteredBusinessSeller_Specified;
    property StoreSite:                        SiteCodeType                             Index (IS_OPTN) read FStoreSite write SetStoreSite stored StoreSite_Specified;
    property PaymentMethod:                    SellerPaymentMethodCodeType              Index (IS_OPTN) read FPaymentMethod write SetPaymentMethod stored PaymentMethod_Specified;
    property ProStoresPreference:              ProStoresCheckoutPreferenceType          Index (IS_OPTN) read FProStoresPreference write SetProStoresPreference stored ProStoresPreference_Specified;
    property CharityRegistered:                Boolean                                  Index (IS_OPTN) read FCharityRegistered write SetCharityRegistered stored CharityRegistered_Specified;
    property SafePaymentExempt:                Boolean                                  Index (IS_OPTN) read FSafePaymentExempt write SetSafePaymentExempt stored SafePaymentExempt_Specified;
    property PaisaPayEscrowEMIStatus:          Integer                                  Index (IS_OPTN) read FPaisaPayEscrowEMIStatus write SetPaisaPayEscrowEMIStatus stored PaisaPayEscrowEMIStatus_Specified;
    property CharityAffiliationDetails:        CharityAffiliationDetailsType            Index (IS_OPTN) read FCharityAffiliationDetails write SetCharityAffiliationDetails stored CharityAffiliationDetails_Specified;
    property TransactionPercent:               Single                                   Index (IS_OPTN) read FTransactionPercent write SetTransactionPercent stored TransactionPercent_Specified;
    property IntegratedMerchantCreditCardInfo: IntegratedMerchantCreditCardInfoType     Index (IS_OPTN) read FIntegratedMerchantCreditCardInfo write SetIntegratedMerchantCreditCardInfo stored IntegratedMerchantCreditCardInfo_Specified;
    property FeatureEligibility:               FeatureEligibilityType                   Index (IS_OPTN) read FFeatureEligibility write SetFeatureEligibility stored FeatureEligibility_Specified;
    property TopRatedSeller:                   Boolean                                  Index (IS_OPTN) read FTopRatedSeller write SetTopRatedSeller stored TopRatedSeller_Specified;
    property TopRatedSellerDetails:            TopRatedSellerDetailsType                Index (IS_OPTN) read FTopRatedSellerDetails write SetTopRatedSellerDetails stored TopRatedSellerDetails_Specified;
    property RecoupmentPolicyConsent:          RecoupmentPolicyConsentType              Index (IS_OPTN) read FRecoupmentPolicyConsent write SetRecoupmentPolicyConsent stored RecoupmentPolicyConsent_Specified;
    property DomesticRateTable:                Boolean                                  Index (IS_OPTN) read FDomesticRateTable write SetDomesticRateTable stored DomesticRateTable_Specified;
    property InternationalRateTable:           Boolean                                  Index (IS_OPTN) read FInternationalRateTable write SetInternationalRateTable stored InternationalRateTable_Specified;
    property SellereBayPaymentProcessStatus:   SellereBayPaymentProcessStatusCodeType   Index (IS_OPTN) read FSellereBayPaymentProcessStatus write SetSellereBayPaymentProcessStatus stored SellereBayPaymentProcessStatus_Specified;
    property SellereBayPaymentProcessConsent:  SellereBayPaymentProcessConsentCodeType  Index (IS_OPTN) read FSellereBayPaymentProcessConsent write SetSellereBayPaymentProcessConsent stored SellereBayPaymentProcessConsent_Specified;
  end;



  // ************************************************************************ //
  // XML       : QuantityType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  QuantityType = class(TRemotable)
  private
    FText: TXSDecimal;
    Funit_: string;
    Funit__Specified: boolean;
    procedure Setunit_(Index: Integer; const Astring: string);
    function  unit__Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Text:  TXSDecimal  Index (IS_TEXT) read FText write FText;
    property unit_: string      Index (IS_ATTR or IS_OPTN) read Funit_ write Setunit_ stored unit__Specified;
  end;



  // ************************************************************************ //
  // XML       : AccountEntryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AccountEntryType = class(TRemotable)
  private
    FAccountDetailsEntryType: AccountDetailEntryCodeType;
    FAccountDetailsEntryType_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FBalance: AmountType;
    FBalance_Specified: boolean;
    FDate: TXSDateTime;
    FDate_Specified: boolean;
    FGrossDetailAmount: AmountType;
    FGrossDetailAmount_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FMemo: string;
    FMemo_Specified: boolean;
    FConversionRate: AmountType;
    FConversionRate_Specified: boolean;
    FNetDetailAmount: AmountType;
    FNetDetailAmount_Specified: boolean;
    FRefNumber: string;
    FRefNumber_Specified: boolean;
    FVATPercent: TXSDecimal;
    FVATPercent_Specified: boolean;
    FTitle: string;
    FTitle_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FReceivedTopRatedDiscount: Boolean;
    FReceivedTopRatedDiscount_Specified: boolean;
    FOrderId: string;
    FOrderId_Specified: boolean;
    procedure SetAccountDetailsEntryType(Index: Integer; const AAccountDetailEntryCodeType: AccountDetailEntryCodeType);
    function  AccountDetailsEntryType_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetBalance(Index: Integer; const AAmountType: AmountType);
    function  Balance_Specified(Index: Integer): boolean;
    procedure SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Date_Specified(Index: Integer): boolean;
    procedure SetGrossDetailAmount(Index: Integer; const AAmountType: AmountType);
    function  GrossDetailAmount_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMemo(Index: Integer; const Astring: string);
    function  Memo_Specified(Index: Integer): boolean;
    procedure SetConversionRate(Index: Integer; const AAmountType: AmountType);
    function  ConversionRate_Specified(Index: Integer): boolean;
    procedure SetNetDetailAmount(Index: Integer; const AAmountType: AmountType);
    function  NetDetailAmount_Specified(Index: Integer): boolean;
    procedure SetRefNumber(Index: Integer; const Astring: string);
    function  RefNumber_Specified(Index: Integer): boolean;
    procedure SetVATPercent(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  VATPercent_Specified(Index: Integer): boolean;
    procedure SetTitle(Index: Integer; const Astring: string);
    function  Title_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetReceivedTopRatedDiscount(Index: Integer; const ABoolean: Boolean);
    function  ReceivedTopRatedDiscount_Specified(Index: Integer): boolean;
    procedure SetOrderId(Index: Integer; const Astring: string);
    function  OrderId_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AccountDetailsEntryType:  AccountDetailEntryCodeType  Index (IS_OPTN) read FAccountDetailsEntryType write SetAccountDetailsEntryType stored AccountDetailsEntryType_Specified;
    property Description:              string                      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property Balance:                  AmountType                  Index (IS_OPTN) read FBalance write SetBalance stored Balance_Specified;
    property Date:                     TXSDateTime                 Index (IS_OPTN) read FDate write SetDate stored Date_Specified;
    property GrossDetailAmount:        AmountType                  Index (IS_OPTN) read FGrossDetailAmount write SetGrossDetailAmount stored GrossDetailAmount_Specified;
    property ItemID:                   ItemIDType                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Memo:                     string                      Index (IS_OPTN) read FMemo write SetMemo stored Memo_Specified;
    property ConversionRate:           AmountType                  Index (IS_OPTN) read FConversionRate write SetConversionRate stored ConversionRate_Specified;
    property NetDetailAmount:          AmountType                  Index (IS_OPTN) read FNetDetailAmount write SetNetDetailAmount stored NetDetailAmount_Specified;
    property RefNumber:                string                      Index (IS_OPTN) read FRefNumber write SetRefNumber stored RefNumber_Specified;
    property VATPercent:               TXSDecimal                  Index (IS_OPTN) read FVATPercent write SetVATPercent stored VATPercent_Specified;
    property Title:                    string                      Index (IS_OPTN) read FTitle write SetTitle stored Title_Specified;
    property OrderLineItemID:          string                      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
    property TransactionID:            string                      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property ReceivedTopRatedDiscount: Boolean                     Index (IS_OPTN) read FReceivedTopRatedDiscount write SetReceivedTopRatedDiscount stored ReceivedTopRatedDiscount_Specified;
    property OrderId:                  string                      Index (IS_OPTN) read FOrderId write SetOrderId stored OrderId_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderResponseContainerType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderResponseContainerType = class(TRemotable)
  private
    FCorrelationID: string;
    FCorrelationID_Specified: boolean;
    FAck: AckCodeType;
    FAck_Specified: boolean;
    procedure SetCorrelationID(Index: Integer; const Astring: string);
    function  CorrelationID_Specified(Index: Integer): boolean;
    procedure SetAck(Index: Integer; const AAckCodeType: AckCodeType);
    function  Ack_Specified(Index: Integer): boolean;
  published
    property CorrelationID: string       Index (IS_OPTN) read FCorrelationID write SetCorrelationID stored CorrelationID_Specified;
    property Ack:           AckCodeType  Index (IS_OPTN) read FAck write SetAck stored Ack_Specified;
  end;



  // ************************************************************************ //
  // XML       : AbstractResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AbstractResponseType = class(TRemotable)
  private
    FTimestamp: TXSDateTime;
    FTimestamp_Specified: boolean;
    FAck: AckCodeType;
    FAck_Specified: boolean;
    FCorrelationID: string;
    FCorrelationID_Specified: boolean;
    FErrors: Array_Of_ErrorType;
    FErrors_Specified: boolean;
    FMessage_: string;
    FMessage__Specified: boolean;
    FVersion: string;
    FVersion_Specified: boolean;
    FBuild: string;
    FBuild_Specified: boolean;
    FNotificationEventName: string;
    FNotificationEventName_Specified: boolean;
    FDuplicateInvocationDetails: DuplicateInvocationDetailsType;
    FDuplicateInvocationDetails_Specified: boolean;
    FRecipientUserID: string;
    FRecipientUserID_Specified: boolean;
    FEIASToken: string;
    FEIASToken_Specified: boolean;
    FNotificationSignature: string;
    FNotificationSignature_Specified: boolean;
    FHardExpirationWarning: string;
    FHardExpirationWarning_Specified: boolean;
    FBotBlock: BotBlockResponseType;
    FBotBlock_Specified: boolean;
    FExternalUserData: string;
    FExternalUserData_Specified: boolean;
    procedure SetTimestamp(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Timestamp_Specified(Index: Integer): boolean;
    procedure SetAck(Index: Integer; const AAckCodeType: AckCodeType);
    function  Ack_Specified(Index: Integer): boolean;
    procedure SetCorrelationID(Index: Integer; const Astring: string);
    function  CorrelationID_Specified(Index: Integer): boolean;
    procedure SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
    function  Errors_Specified(Index: Integer): boolean;
    procedure SetMessage_(Index: Integer; const Astring: string);
    function  Message__Specified(Index: Integer): boolean;
    procedure SetVersion(Index: Integer; const Astring: string);
    function  Version_Specified(Index: Integer): boolean;
    procedure SetBuild(Index: Integer; const Astring: string);
    function  Build_Specified(Index: Integer): boolean;
    procedure SetNotificationEventName(Index: Integer; const Astring: string);
    function  NotificationEventName_Specified(Index: Integer): boolean;
    procedure SetDuplicateInvocationDetails(Index: Integer; const ADuplicateInvocationDetailsType: DuplicateInvocationDetailsType);
    function  DuplicateInvocationDetails_Specified(Index: Integer): boolean;
    procedure SetRecipientUserID(Index: Integer; const Astring: string);
    function  RecipientUserID_Specified(Index: Integer): boolean;
    procedure SetEIASToken(Index: Integer; const Astring: string);
    function  EIASToken_Specified(Index: Integer): boolean;
    procedure SetNotificationSignature(Index: Integer; const Astring: string);
    function  NotificationSignature_Specified(Index: Integer): boolean;
    procedure SetHardExpirationWarning(Index: Integer; const Astring: string);
    function  HardExpirationWarning_Specified(Index: Integer): boolean;
    procedure SetBotBlock(Index: Integer; const ABotBlockResponseType: BotBlockResponseType);
    function  BotBlock_Specified(Index: Integer): boolean;
    procedure SetExternalUserData(Index: Integer; const Astring: string);
    function  ExternalUserData_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Timestamp:                  TXSDateTime                     Index (IS_OPTN) read FTimestamp write SetTimestamp stored Timestamp_Specified;
    property Ack:                        AckCodeType                     Index (IS_OPTN) read FAck write SetAck stored Ack_Specified;
    property CorrelationID:              string                          Index (IS_OPTN) read FCorrelationID write SetCorrelationID stored CorrelationID_Specified;
    property Errors:                     Array_Of_ErrorType              Index (IS_OPTN or IS_UNBD) read FErrors write SetErrors stored Errors_Specified;
    property Message_:                   string                          Index (IS_OPTN) read FMessage_ write SetMessage_ stored Message__Specified;
    property Version:                    string                          Index (IS_OPTN) read FVersion write SetVersion stored Version_Specified;
    property Build:                      string                          Index (IS_OPTN) read FBuild write SetBuild stored Build_Specified;
    property NotificationEventName:      string                          Index (IS_OPTN) read FNotificationEventName write SetNotificationEventName stored NotificationEventName_Specified;
    property DuplicateInvocationDetails: DuplicateInvocationDetailsType  Index (IS_OPTN) read FDuplicateInvocationDetails write SetDuplicateInvocationDetails stored DuplicateInvocationDetails_Specified;
    property RecipientUserID:            string                          Index (IS_OPTN) read FRecipientUserID write SetRecipientUserID stored RecipientUserID_Specified;
    property EIASToken:                  string                          Index (IS_OPTN) read FEIASToken write SetEIASToken stored EIASToken_Specified;
    property NotificationSignature:      string                          Index (IS_OPTN) read FNotificationSignature write SetNotificationSignature stored NotificationSignature_Specified;
    property HardExpirationWarning:      string                          Index (IS_OPTN) read FHardExpirationWarning write SetHardExpirationWarning stored HardExpirationWarning_Specified;
    property BotBlock:                   BotBlockResponseType            Index (IS_OPTN) read FBotBlock write SetBotBlock stored BotBlock_Specified;
    property ExternalUserData:           string                          Index (IS_OPTN) read FExternalUserData write SetExternalUserData stored ExternalUserData_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerReverseDisputeResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SellerReverseDisputeResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SellerReverseDisputeResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SellerReverseDisputeResponse = class(SellerReverseDisputeResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SaveItemToSellingManagerTemplateResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SaveItemToSellingManagerTemplateResponseType = class(AbstractResponseType)
  private
    FTemplateID: Int64;
    FTemplateID_Specified: boolean;
    procedure SetTemplateID(Index: Integer; const AInt64: Int64);
    function  TemplateID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property TemplateID: Int64  Index (IS_OPTN) read FTemplateID write SetTemplateID stored TemplateID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SaveItemToSellingManagerTemplateResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SaveItemToSellingManagerTemplateResponse = class(SaveItemToSellingManagerTemplateResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerTemplateResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerTemplateResponseType = class(AbstractResponseType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FVerifyOnly: Boolean;
    FVerifyOnly_Specified: boolean;
    FSaleTemplateName: string;
    FSaleTemplateName_Specified: boolean;
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
    function  VerifyOnly_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateName(Index: Integer; const Astring: string);
    function  SaleTemplateName_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SaleTemplateID:               Int64                             Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property Fees:                         FeesType                          Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:                   string                            Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:                  string                            Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property VerifyOnly:                   Boolean                           Index (IS_OPTN) read FVerifyOnly write SetVerifyOnly stored VerifyOnly_Specified;
    property SaleTemplateName:             string                            Index (IS_OPTN) read FSaleTemplateName write SetSaleTemplateName stored SaleTemplateName_Specified;
    property SellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerTemplateResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerTemplateResponse = class(ReviseSellingManagerTemplateResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerSaleRecordResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerSaleRecordResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerSaleRecordResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerSaleRecordResponse = class(ReviseSellingManagerSaleRecordResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RevokeTokenResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RevokeTokenResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : RevokeTokenResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RevokeTokenResponse = class(RevokeTokenResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ItemsCanceledEventType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemsCanceledEventType = class(AbstractResponseType)
  private
    FCanceledItemIDArray: ItemIDArrayType;
    FCanceledItemIDArray_Specified: boolean;
    FEligibleForRelist: Boolean;
    FEligibleForRelist_Specified: boolean;
    FSellerID: UserIDType;
    FSellerID_Specified: boolean;
    procedure SetCanceledItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  CanceledItemIDArray_Specified(Index: Integer): boolean;
    procedure SetEligibleForRelist(Index: Integer; const ABoolean: Boolean);
    function  EligibleForRelist_Specified(Index: Integer): boolean;
    procedure SetSellerID(Index: Integer; const AUserIDType: UserIDType);
    function  SellerID_Specified(Index: Integer): boolean;
  published
    property CanceledItemIDArray: ItemIDArrayType  Index (IS_OPTN) read FCanceledItemIDArray write SetCanceledItemIDArray stored CanceledItemIDArray_Specified;
    property EligibleForRelist:   Boolean          Index (IS_OPTN) read FEligibleForRelist write SetEligibleForRelist stored EligibleForRelist_Specified;
    property SellerID:            UserIDType       Index (IS_OPTN) read FSellerID write SetSellerID stored SellerID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemsCanceledEvent, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemsCanceledEvent = class(ItemsCanceledEventType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleResponseType = class(AbstractResponseType)
  private
    FStatus: PromotionalSaleStatusCodeType;
    FStatus_Specified: boolean;
    FPromotionalSaleID: Int64;
    FPromotionalSaleID_Specified: boolean;
    procedure SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
    function  PromotionalSaleID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property Status:            PromotionalSaleStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property PromotionalSaleID: Int64                          Index (IS_OPTN) read FPromotionalSaleID write SetPromotionalSaleID stored PromotionalSaleID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleResponse = class(SetPromotionalSaleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetNotificationPreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetNotificationPreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetNotificationPreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetNotificationPreferencesResponse = class(SetNotificationPreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SendInvoiceResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SendInvoiceResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SendInvoiceResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SendInvoiceResponse = class(SendInvoiceResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetMessagePreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetMessagePreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetMessagePreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetMessagePreferencesResponse = class(SetMessagePreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseCheckoutStatusResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseCheckoutStatusResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseCheckoutStatusResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseCheckoutStatusResponse = class(ReviseCheckoutStatusResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseFixedPriceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseFixedPriceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SKU:                    SKUType                          Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseFixedPriceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseFixedPriceItemResponse = class(ReviseFixedPriceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesFoldersResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesFoldersResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesFoldersResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesFoldersResponse = class(ReviseMyMessagesFoldersResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerProductResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerProductResponseType = class(AbstractResponseType)
  private
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerProductResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerProductResponse = class(ReviseSellingManagerProductResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerInventoryFolderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerInventoryFolderResponseType = class(AbstractResponseType)
  private
    FFolder: SellingManagerFolderDetailsType;
    FFolder_Specified: boolean;
    procedure SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
    function  Folder_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Folder: SellingManagerFolderDetailsType  Index (IS_OPTN) read FFolder write SetFolder stored Folder_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerInventoryFolderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerInventoryFolderResponse = class(ReviseSellingManagerInventoryFolderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseInventoryStatusResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseInventoryStatusResponseType = class(AbstractResponseType)
  private
    FInventoryStatus: Array_Of_InventoryStatusType;
    FInventoryStatus_Specified: boolean;
    FFees: Array_Of_InventoryFeesType;
    FFees_Specified: boolean;
    procedure SetInventoryStatus(Index: Integer; const AArray_Of_InventoryStatusType: Array_Of_InventoryStatusType);
    function  InventoryStatus_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AArray_Of_InventoryFeesType: Array_Of_InventoryFeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property InventoryStatus: Array_Of_InventoryStatusType  Index (IS_OPTN or IS_UNBD) read FInventoryStatus write SetInventoryStatus stored InventoryStatus_Specified;
    property Fees:            Array_Of_InventoryFeesType    Index (IS_OPTN or IS_UNBD) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseInventoryStatusResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseInventoryStatusResponse = class(ReviseInventoryStatusResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesResponse = class(ReviseMyMessagesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FVerifyOnly: Boolean;
    FVerifyOnly_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
    function  VerifyOnly_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property VerifyOnly:             Boolean                          Index (IS_OPTN) read FVerifyOnly write SetVerifyOnly stored VerifyOnly_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseItemResponse = class(ReviseItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UploadSiteHostedPicturesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  UploadSiteHostedPicturesResponseType = class(AbstractResponseType)
  private
    FPictureSystemVersion: Integer;
    FPictureSystemVersion_Specified: boolean;
    FSiteHostedPictureDetails: SiteHostedPictureDetailsType;
    FSiteHostedPictureDetails_Specified: boolean;
    procedure SetPictureSystemVersion(Index: Integer; const AInteger: Integer);
    function  PictureSystemVersion_Specified(Index: Integer): boolean;
    procedure SetSiteHostedPictureDetails(Index: Integer; const ASiteHostedPictureDetailsType: SiteHostedPictureDetailsType);
    function  SiteHostedPictureDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureSystemVersion:     Integer                       Index (IS_OPTN) read FPictureSystemVersion write SetPictureSystemVersion stored PictureSystemVersion_Specified;
    property SiteHostedPictureDetails: SiteHostedPictureDetailsType  Index (IS_OPTN) read FSiteHostedPictureDetails write SetSiteHostedPictureDetails stored SiteHostedPictureDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : UploadSiteHostedPicturesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  UploadSiteHostedPicturesResponse = class(UploadSiteHostedPicturesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValidateTestUserRegistrationResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateTestUserRegistrationResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : ValidateTestUserRegistrationResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateTestUserRegistrationResponse = class(ValidateTestUserRegistrationResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValidateChallengeInputResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateChallengeInputResponseType = class(AbstractResponseType)
  private
    FValidToken: Boolean;
    FValidToken_Specified: boolean;
    procedure SetValidToken(Index: Integer; const ABoolean: Boolean);
    function  ValidToken_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ValidToken: Boolean  Index (IS_OPTN) read FValidToken write SetValidToken stored ValidToken_Specified;
  end;



  // ************************************************************************ //
  // XML       : ValidateChallengeInputResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateChallengeInputResponse = class(ValidateChallengeInputResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserPreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserPreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserPreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserPreferencesResponse = class(SetUserPreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddSecondChanceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddSecondChanceItemResponseType = class(AbstractResponseType)
  private
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime: TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:   TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddSecondChanceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddSecondChanceItemResponse = class(VerifyAddSecondChanceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FExpressListing: Boolean;
    FExpressListing_Specified: boolean;
    FExpressItemRequirements: ExpressItemRequirementsType;
    FExpressItemRequirements_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetExpressListing(Index: Integer; const ABoolean: Boolean);
    function  ExpressListing_Specified(Index: Integer): boolean;
    procedure SetExpressItemRequirements(Index: Integer; const AExpressItemRequirementsType: ExpressItemRequirementsType);
    function  ExpressItemRequirements_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                  ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Fees:                    FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property ExpressListing:          Boolean                          Index (IS_OPTN) read FExpressListing write SetExpressListing stored ExpressListing_Specified;
    property ExpressItemRequirements: ExpressItemRequirementsType      Index (IS_OPTN) read FExpressItemRequirements write SetExpressItemRequirements stored ExpressItemRequirements_Specified;
    property CategoryID:              string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:             string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:          Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:      ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations:  ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddItemResponse = class(VerifyAddItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyRelistItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyRelistItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyRelistItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyRelistItemResponse = class(VerifyRelistItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VeROReportItemsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VeROReportItemsResponseType = class(AbstractResponseType)
  private
    FVeROReportPacketID: Int64;
    FVeROReportPacketID_Specified: boolean;
    FVeROReportPacketStatus: VeROReportPacketStatusCodeType;
    FVeROReportPacketStatus_Specified: boolean;
    procedure SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
    function  VeROReportPacketID_Specified(Index: Integer): boolean;
    procedure SetVeROReportPacketStatus(Index: Integer; const AVeROReportPacketStatusCodeType: VeROReportPacketStatusCodeType);
    function  VeROReportPacketStatus_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property VeROReportPacketID:     Int64                           Index (IS_OPTN) read FVeROReportPacketID write SetVeROReportPacketID stored VeROReportPacketID_Specified;
    property VeROReportPacketStatus: VeROReportPacketStatusCodeType  Index (IS_OPTN) read FVeROReportPacketStatus write SetVeROReportPacketStatus stored VeROReportPacketStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : VeROReportItemsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VeROReportItemsResponse = class(VeROReportItemsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddFixedPriceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddFixedPriceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FExpressListing: Boolean;
    FExpressListing_Specified: boolean;
    FExpressItemRequirements: ExpressItemRequirementsType;
    FExpressItemRequirements_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetExpressListing(Index: Integer; const ABoolean: Boolean);
    function  ExpressListing_Specified(Index: Integer): boolean;
    procedure SetExpressItemRequirements(Index: Integer; const AExpressItemRequirementsType: ExpressItemRequirementsType);
    function  ExpressItemRequirements_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                  ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SKU:                     SKUType                          Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property Fees:                    FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property ExpressListing:          Boolean                          Index (IS_OPTN) read FExpressListing write SetExpressListing stored ExpressListing_Specified;
    property ExpressItemRequirements: ExpressItemRequirementsType      Index (IS_OPTN) read FExpressItemRequirements write SetExpressItemRequirements stored ExpressItemRequirements_Specified;
    property CategoryID:              string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:             string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:          Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ListingRecommendations:  ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddFixedPriceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddFixedPriceItemResponse = class(VerifyAddFixedPriceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserNotesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserNotesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserNotesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserNotesResponse = class(SetUserNotesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerTemplateAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerTemplateAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerTemplateAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerTemplateAutomationRuleResponse = class(SetSellingManagerTemplateAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreResponse = class(SetStoreResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetShippingDiscountProfilesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetShippingDiscountProfilesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetShippingDiscountProfilesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetShippingDiscountProfilesResponse = class(SetShippingDiscountProfilesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerItemAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerItemAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerItemAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerItemAutomationRuleResponse = class(SetSellingManagerItemAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleListingsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleListingsResponseType = class(AbstractResponseType)
  private
    FStatus: PromotionalSaleStatusCodeType;
    FStatus_Specified: boolean;
    procedure SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property Status: PromotionalSaleStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleListingsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleListingsResponse = class(SetPromotionalSaleListingsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerFeedbackOptionsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerFeedbackOptionsResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerFeedbackOptionsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerFeedbackOptionsResponse = class(SetSellingManagerFeedbackOptionsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStorePreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStorePreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetStorePreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStorePreferencesResponse = class(SetStorePreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetTaxTableResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetTaxTableResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : SetTaxTableResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetTaxTableResponse = class(SetTaxTableResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreCustomPageResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCustomPageResponseType = class(AbstractResponseType)
  private
    FCustomPage: StoreCustomPageType;
    FCustomPage_Specified: boolean;
    procedure SetCustomPage(Index: Integer; const AStoreCustomPageType: StoreCustomPageType);
    function  CustomPage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPage: StoreCustomPageType  Index (IS_OPTN) read FCustomPage write SetCustomPage stored CustomPage_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStoreCustomPageResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCustomPageResponse = class(SetStoreCustomPageResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreCategoriesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCategoriesResponseType = class(AbstractResponseType)
  private
    FTaskID: Int64;
    FTaskID_Specified: boolean;
    FStatus: TaskStatusCodeType;
    FStatus_Specified: boolean;
    FCustomCategory: StoreCustomCategoryArrayType;
    FCustomCategory_Specified: boolean;
    procedure SetTaskID(Index: Integer; const AInt64: Int64);
    function  TaskID_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const ATaskStatusCodeType: TaskStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetCustomCategory(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
    function  CustomCategory_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TaskID:         Int64                         Index (IS_OPTN) read FTaskID write SetTaskID stored TaskID_Specified;
    property Status:         TaskStatusCodeType            Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property CustomCategory: StoreCustomCategoryArrayType  Index (IS_OPTN) read FCustomCategory write SetCustomCategory stored CustomCategory_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStoreCategoriesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCategoriesResponse = class(SetStoreCategoriesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoryFeaturesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryFeaturesResponseType = class(AbstractResponseType)
  private
    FCategoryVersion: string;
    FCategoryVersion_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FCategory: Array_Of_CategoryFeatureType;
    FCategory_Specified: boolean;
    FSiteDefaults: SiteDefaultsType;
    FSiteDefaults_Specified: boolean;
    FFeatureDefinitions: FeatureDefinitionsType;
    FFeatureDefinitions_Specified: boolean;
    procedure SetCategoryVersion(Index: Integer; const Astring: string);
    function  CategoryVersion_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetCategory(Index: Integer; const AArray_Of_CategoryFeatureType: Array_Of_CategoryFeatureType);
    function  Category_Specified(Index: Integer): boolean;
    procedure SetSiteDefaults(Index: Integer; const ASiteDefaultsType: SiteDefaultsType);
    function  SiteDefaults_Specified(Index: Integer): boolean;
    procedure SetFeatureDefinitions(Index: Integer; const AFeatureDefinitionsType: FeatureDefinitionsType);
    function  FeatureDefinitions_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryVersion:    string                        Index (IS_OPTN) read FCategoryVersion write SetCategoryVersion stored CategoryVersion_Specified;
    property UpdateTime:         TXSDateTime                   Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property Category:           Array_Of_CategoryFeatureType  Index (IS_OPTN or IS_UNBD) read FCategory write SetCategory stored Category_Specified;
    property SiteDefaults:       SiteDefaultsType              Index (IS_OPTN) read FSiteDefaults write SetSiteDefaults stored SiteDefaults_Specified;
    property FeatureDefinitions: FeatureDefinitionsType        Index (IS_OPTN) read FFeatureDefinitions write SetFeatureDefinitions stored FeatureDefinitions_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoryFeaturesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryFeaturesResponse = class(GetCategoryFeaturesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetBidderListResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetBidderListResponseType = class(AbstractResponseType)
  private
    FBidder: UserType;
    FBidder_Specified: boolean;
    FBidItemArray: ItemArrayType;
    FBidItemArray_Specified: boolean;
    procedure SetBidder(Index: Integer; const AUserType: UserType);
    function  Bidder_Specified(Index: Integer): boolean;
    procedure SetBidItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
    function  BidItemArray_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Bidder:       UserType       Index (IS_OPTN) read FBidder write SetBidder stored Bidder_Specified;
    property BidItemArray: ItemArrayType  Index (IS_OPTN) read FBidItemArray write SetBidItemArray stored BidItemArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetBidderListResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetBidderListResponse = class(GetBidderListResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoriesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoriesResponseType = class(AbstractResponseType)
  private
    FCategoryArray: CategoryArrayType;
    FCategoryArray_Specified: boolean;
    FCategoryCount: Integer;
    FCategoryCount_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FCategoryVersion: string;
    FCategoryVersion_Specified: boolean;
    FReservePriceAllowed: Boolean;
    FReservePriceAllowed_Specified: boolean;
    FMinimumReservePrice: Double;
    FMinimumReservePrice_Specified: boolean;
    FReduceReserveAllowed: Boolean;
    FReduceReserveAllowed_Specified: boolean;
    procedure SetCategoryArray(Index: Integer; const ACategoryArrayType: CategoryArrayType);
    function  CategoryArray_Specified(Index: Integer): boolean;
    procedure SetCategoryCount(Index: Integer; const AInteger: Integer);
    function  CategoryCount_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetCategoryVersion(Index: Integer; const Astring: string);
    function  CategoryVersion_Specified(Index: Integer): boolean;
    procedure SetReservePriceAllowed(Index: Integer; const ABoolean: Boolean);
    function  ReservePriceAllowed_Specified(Index: Integer): boolean;
    procedure SetMinimumReservePrice(Index: Integer; const ADouble: Double);
    function  MinimumReservePrice_Specified(Index: Integer): boolean;
    procedure SetReduceReserveAllowed(Index: Integer; const ABoolean: Boolean);
    function  ReduceReserveAllowed_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryArray:        CategoryArrayType  Index (IS_OPTN) read FCategoryArray write SetCategoryArray stored CategoryArray_Specified;
    property CategoryCount:        Integer            Index (IS_OPTN) read FCategoryCount write SetCategoryCount stored CategoryCount_Specified;
    property UpdateTime:           TXSDateTime        Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property CategoryVersion:      string             Index (IS_OPTN) read FCategoryVersion write SetCategoryVersion stored CategoryVersion_Specified;
    property ReservePriceAllowed:  Boolean            Index (IS_OPTN) read FReservePriceAllowed write SetReservePriceAllowed stored ReservePriceAllowed_Specified;
    property MinimumReservePrice:  Double             Index (IS_OPTN) read FMinimumReservePrice write SetMinimumReservePrice stored MinimumReservePrice_Specified;
    property ReduceReserveAllowed: Boolean            Index (IS_OPTN) read FReduceReserveAllowed write SetReduceReserveAllowed stored ReduceReserveAllowed_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoriesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoriesResponse = class(GetCategoriesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerListResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerListResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreItems: Boolean;
    FHasMoreItems_Specified: boolean;
    FItemArray: ItemArrayType;
    FItemArray_Specified: boolean;
    FItemsPerPage: Integer;
    FItemsPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FReturnedItemCountActual: Integer;
    FReturnedItemCountActual_Specified: boolean;
    FSeller: UserType;
    FSeller_Specified: boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
    function  HasMoreItems_Specified(Index: Integer): boolean;
    procedure SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
    function  ItemArray_Specified(Index: Integer): boolean;
    procedure SetItemsPerPage(Index: Integer; const AInteger: Integer);
    function  ItemsPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetReturnedItemCountActual(Index: Integer; const AInteger: Integer);
    function  ReturnedItemCountActual_Specified(Index: Integer): boolean;
    procedure SetSeller(Index: Integer; const AUserType: UserType);
    function  Seller_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult:        PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreItems:            Boolean               Index (IS_OPTN) read FHasMoreItems write SetHasMoreItems stored HasMoreItems_Specified;
    property ItemArray:               ItemArrayType         Index (IS_OPTN) read FItemArray write SetItemArray stored ItemArray_Specified;
    property ItemsPerPage:            Integer               Index (IS_OPTN) read FItemsPerPage write SetItemsPerPage stored ItemsPerPage_Specified;
    property PageNumber:              Integer               Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property ReturnedItemCountActual: Integer               Index (IS_OPTN) read FReturnedItemCountActual write SetReturnedItemCountActual stored ReturnedItemCountActual_Specified;
    property Seller:                  UserType              Index (IS_OPTN) read FSeller write SetSeller stored Seller_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerListResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerListResponse = class(GetSellerListResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerEventsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerEventsResponseType = class(AbstractResponseType)
  private
    FTimeTo: TXSDateTime;
    FTimeTo_Specified: boolean;
    FItemArray: ItemArrayType;
    FItemArray_Specified: boolean;
    procedure SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeTo_Specified(Index: Integer): boolean;
    procedure SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
    function  ItemArray_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TimeTo:    TXSDateTime    Index (IS_OPTN) read FTimeTo write SetTimeTo stored TimeTo_Specified;
    property ItemArray: ItemArrayType  Index (IS_OPTN) read FItemArray write SetItemArray stored ItemArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerEventsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerEventsResponse = class(GetSellerEventsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetChallengeTokenResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetChallengeTokenResponseType = class(AbstractResponseType)
  private
    FChallengeToken: string;
    FChallengeToken_Specified: boolean;
    FImageChallengeURL: string;
    FImageChallengeURL_Specified: boolean;
    FAudioChallengeURL: string;
    FAudioChallengeURL_Specified: boolean;
    procedure SetChallengeToken(Index: Integer; const Astring: string);
    function  ChallengeToken_Specified(Index: Integer): boolean;
    procedure SetImageChallengeURL(Index: Integer; const Astring: string);
    function  ImageChallengeURL_Specified(Index: Integer): boolean;
    procedure SetAudioChallengeURL(Index: Integer; const Astring: string);
    function  AudioChallengeURL_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ChallengeToken:    string  Index (IS_OPTN) read FChallengeToken write SetChallengeToken stored ChallengeToken_Specified;
    property ImageChallengeURL: string  Index (IS_OPTN) read FImageChallengeURL write SetImageChallengeURL stored ImageChallengeURL_Specified;
    property AudioChallengeURL: string  Index (IS_OPTN) read FAudioChallengeURL write SetAudioChallengeURL stored AudioChallengeURL_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetChallengeTokenResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetChallengeTokenResponse = class(GetChallengeTokenResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCharitiesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCharitiesResponseType = class(AbstractResponseType)
  private
    FCharity: Array_Of_CharityInfoType;
    FCharity_Specified: boolean;
    procedure SetCharity(Index: Integer; const AArray_Of_CharityInfoType: Array_Of_CharityInfoType);
    function  Charity_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Charity: Array_Of_CharityInfoType  Index (IS_OPTN or IS_UNBD) read FCharity write SetCharity stored Charity_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCharitiesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCharitiesResponse = class(GetCharitiesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategorySpecificsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategorySpecificsResponseType = class(AbstractResponseType)
  private
    FRecommendations: Array_Of_RecommendationsType;
    FRecommendations_Specified: boolean;
    FTaskReferenceID: string;
    FTaskReferenceID_Specified: boolean;
    FFileReferenceID: string;
    FFileReferenceID_Specified: boolean;
    procedure SetRecommendations(Index: Integer; const AArray_Of_RecommendationsType: Array_Of_RecommendationsType);
    function  Recommendations_Specified(Index: Integer): boolean;
    procedure SetTaskReferenceID(Index: Integer; const Astring: string);
    function  TaskReferenceID_Specified(Index: Integer): boolean;
    procedure SetFileReferenceID(Index: Integer; const Astring: string);
    function  FileReferenceID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Recommendations: Array_Of_RecommendationsType  Index (IS_OPTN or IS_UNBD) read FRecommendations write SetRecommendations stored Recommendations_Specified;
    property TaskReferenceID: string                        Index (IS_OPTN) read FTaskReferenceID write SetTaskReferenceID stored TaskReferenceID_Specified;
    property FileReferenceID: string                        Index (IS_OPTN) read FFileReferenceID write SetFileReferenceID stored FileReferenceID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategorySpecificsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategorySpecificsResponse = class(GetCategorySpecificsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoryMappingsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryMappingsResponseType = class(AbstractResponseType)
  private
    FCategoryMapping: Array_Of_CategoryMappingType;
    FCategoryMapping_Specified: boolean;
    FCategoryVersion: string;
    FCategoryVersion_Specified: boolean;
    procedure SetCategoryMapping(Index: Integer; const AArray_Of_CategoryMappingType: Array_Of_CategoryMappingType);
    function  CategoryMapping_Specified(Index: Integer): boolean;
    procedure SetCategoryVersion(Index: Integer; const Astring: string);
    function  CategoryVersion_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryMapping: Array_Of_CategoryMappingType  Index (IS_OPTN or IS_UNBD) read FCategoryMapping write SetCategoryMapping stored CategoryMapping_Specified;
    property CategoryVersion: string                        Index (IS_OPTN) read FCategoryVersion write SetCategoryVersion stored CategoryVersion_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoryMappingsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryMappingsResponse = class(GetCategoryMappingsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAdFormatLeadsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAdFormatLeadsResponseType = class(AbstractResponseType)
  private
    FAdFormatLead: Array_Of_AdFormatLeadType;
    FAdFormatLead_Specified: boolean;
    FAdFormatLeadCount: Integer;
    FAdFormatLeadCount_Specified: boolean;
    procedure SetAdFormatLead(Index: Integer; const AArray_Of_AdFormatLeadType: Array_Of_AdFormatLeadType);
    function  AdFormatLead_Specified(Index: Integer): boolean;
    procedure SetAdFormatLeadCount(Index: Integer; const AInteger: Integer);
    function  AdFormatLeadCount_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AdFormatLead:      Array_Of_AdFormatLeadType  Index (IS_OPTN or IS_UNBD) read FAdFormatLead write SetAdFormatLead stored AdFormatLead_Specified;
    property AdFormatLeadCount: Integer                    Index (IS_OPTN) read FAdFormatLeadCount write SetAdFormatLeadCount stored AdFormatLeadCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAdFormatLeadsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAdFormatLeadsResponse = class(GetAdFormatLeadsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAccountResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAccountResponseType = class(AbstractResponseType)
  private
    FAccountID: string;
    FAccountID_Specified: boolean;
    FAccountSummary: AccountSummaryType;
    FAccountSummary_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FAccountEntries: AccountEntriesType;
    FAccountEntries_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreEntries: Boolean;
    FHasMoreEntries_Specified: boolean;
    FEntriesPerPage: Integer;
    FEntriesPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    procedure SetAccountID(Index: Integer; const Astring: string);
    function  AccountID_Specified(Index: Integer): boolean;
    procedure SetAccountSummary(Index: Integer; const AAccountSummaryType: AccountSummaryType);
    function  AccountSummary_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetAccountEntries(Index: Integer; const AAccountEntriesType: AccountEntriesType);
    function  AccountEntries_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreEntries(Index: Integer; const ABoolean: Boolean);
    function  HasMoreEntries_Specified(Index: Integer): boolean;
    procedure SetEntriesPerPage(Index: Integer; const AInteger: Integer);
    function  EntriesPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AccountID:        string                Index (IS_OPTN) read FAccountID write SetAccountID stored AccountID_Specified;
    property AccountSummary:   AccountSummaryType    Index (IS_OPTN) read FAccountSummary write SetAccountSummary stored AccountSummary_Specified;
    property Currency:         CurrencyCodeType      Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property AccountEntries:   AccountEntriesType    Index (IS_OPTN) read FAccountEntries write SetAccountEntries stored AccountEntries_Specified;
    property PaginationResult: PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreEntries:   Boolean               Index (IS_OPTN) read FHasMoreEntries write SetHasMoreEntries stored HasMoreEntries_Specified;
    property EntriesPerPage:   Integer               Index (IS_OPTN) read FEntriesPerPage write SetEntriesPerPage stored EntriesPerPage_Specified;
    property PageNumber:       Integer               Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAccountResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAccountResponse = class(GetAccountResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetShippingDiscountProfilesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetShippingDiscountProfilesResponseType = class(AbstractResponseType)
  private
    FCurrencyID: CurrencyCodeType;
    FCurrencyID_Specified: boolean;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FFlatShippingDiscount_Specified: boolean;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FCalculatedShippingDiscount_Specified: boolean;
    FPromotionalShippingDiscount: Boolean;
    FPromotionalShippingDiscount_Specified: boolean;
    FCalculatedHandlingDiscount: CalculatedHandlingDiscountType;
    FCalculatedHandlingDiscount_Specified: boolean;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
    FPromotionalShippingDiscountDetails_Specified: boolean;
    FShippingInsurance: ShippingInsuranceType;
    FShippingInsurance_Specified: boolean;
    FInternationalShippingInsurance: ShippingInsuranceType;
    FInternationalShippingInsurance_Specified: boolean;
    FCombinedDuration: CombinedPaymentPeriodCodeType;
    FCombinedDuration_Specified: boolean;
    procedure SetCurrencyID(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  CurrencyID_Specified(Index: Integer): boolean;
    procedure SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
    function  FlatShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
    function  CalculatedShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
    function  PromotionalShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetCalculatedHandlingDiscount(Index: Integer; const ACalculatedHandlingDiscountType: CalculatedHandlingDiscountType);
    function  CalculatedHandlingDiscount_Specified(Index: Integer): boolean;
    procedure SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
    function  PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
    procedure SetShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
    function  ShippingInsurance_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
    function  InternationalShippingInsurance_Specified(Index: Integer): boolean;
    procedure SetCombinedDuration(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
    function  CombinedDuration_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CurrencyID:                         CurrencyCodeType                        Index (IS_OPTN) read FCurrencyID write SetCurrencyID stored CurrencyID_Specified;
    property FlatShippingDiscount:               FlatShippingDiscountType                Index (IS_OPTN) read FFlatShippingDiscount write SetFlatShippingDiscount stored FlatShippingDiscount_Specified;
    property CalculatedShippingDiscount:         CalculatedShippingDiscountType          Index (IS_OPTN) read FCalculatedShippingDiscount write SetCalculatedShippingDiscount stored CalculatedShippingDiscount_Specified;
    property PromotionalShippingDiscount:        Boolean                                 Index (IS_OPTN) read FPromotionalShippingDiscount write SetPromotionalShippingDiscount stored PromotionalShippingDiscount_Specified;
    property CalculatedHandlingDiscount:         CalculatedHandlingDiscountType          Index (IS_OPTN) read FCalculatedHandlingDiscount write SetCalculatedHandlingDiscount stored CalculatedHandlingDiscount_Specified;
    property PromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType  Index (IS_OPTN) read FPromotionalShippingDiscountDetails write SetPromotionalShippingDiscountDetails stored PromotionalShippingDiscountDetails_Specified;
    property ShippingInsurance:                  ShippingInsuranceType                   Index (IS_OPTN) read FShippingInsurance write SetShippingInsurance stored ShippingInsurance_Specified;
    property InternationalShippingInsurance:     ShippingInsuranceType                   Index (IS_OPTN) read FInternationalShippingInsurance write SetInternationalShippingInsurance stored InternationalShippingInsurance_Specified;
    property CombinedDuration:                   CombinedPaymentPeriodCodeType           Index (IS_OPTN) read FCombinedDuration write SetCombinedDuration stored CombinedDuration_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetShippingDiscountProfilesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetShippingDiscountProfilesResponse = class(GetShippingDiscountProfilesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RespondToBestOfferResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToBestOfferResponseType = class(AbstractResponseType)
  private
    FRespondToBestOffer: BestOfferArrayType;
    FRespondToBestOffer_Specified: boolean;
    procedure SetRespondToBestOffer(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
    function  RespondToBestOffer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RespondToBestOffer: BestOfferArrayType  Index (IS_OPTN) read FRespondToBestOffer write SetRespondToBestOffer stored RespondToBestOffer_Specified;
  end;



  // ************************************************************************ //
  // XML       : RespondToBestOfferResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToBestOfferResponse = class(RespondToBestOfferResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetBestOffersResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetBestOffersResponseType = class(AbstractResponseType)
  private
    FBestOfferArray: BestOfferArrayType;
    FBestOfferArray_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    FItemBestOffersArray: ItemBestOffersArrayType;
    FItemBestOffersArray_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetBestOfferArray(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
    function  BestOfferArray_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetItemBestOffersArray(Index: Integer; const AItemBestOffersArrayType: ItemBestOffersArrayType);
    function  ItemBestOffersArray_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BestOfferArray:      BestOfferArrayType       Index (IS_OPTN) read FBestOfferArray write SetBestOfferArray stored BestOfferArray_Specified;
    property Item:                ItemType                 Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property ItemBestOffersArray: ItemBestOffersArrayType  Index (IS_OPTN) read FItemBestOffersArray write SetItemBestOffersArray stored ItemBestOffersArray_Specified;
    property PageNumber:          Integer                  Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property PaginationResult:    PaginationResultType     Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetBestOffersResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetBestOffersResponse = class(GetBestOffersResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAllBiddersResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAllBiddersResponseType = class(AbstractResponseType)
  private
    FBidArray: OfferArrayType;
    FBidArray_Specified: boolean;
    FHighBidder: UserIDType;
    FHighBidder_Specified: boolean;
    FHighestBid: AmountType;
    FHighestBid_Specified: boolean;
    FListingStatus: ListingStatusCodeType;
    FListingStatus_Specified: boolean;
    procedure SetBidArray(Index: Integer; const AOfferArrayType: OfferArrayType);
    function  BidArray_Specified(Index: Integer): boolean;
    procedure SetHighBidder(Index: Integer; const AUserIDType: UserIDType);
    function  HighBidder_Specified(Index: Integer): boolean;
    procedure SetHighestBid(Index: Integer; const AAmountType: AmountType);
    function  HighestBid_Specified(Index: Integer): boolean;
    procedure SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
    function  ListingStatus_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidArray:      OfferArrayType         Index (IS_OPTN) read FBidArray write SetBidArray stored BidArray_Specified;
    property HighBidder:    UserIDType             Index (IS_OPTN) read FHighBidder write SetHighBidder stored HighBidder_Specified;
    property HighestBid:    AmountType             Index (IS_OPTN) read FHighestBid write SetHighestBid stored HighestBid_Specified;
    property ListingStatus: ListingStatusCodeType  Index (IS_OPTN) read FListingStatus write SetListingStatus stored ListingStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAllBiddersResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAllBiddersResponse = class(GetAllBiddersResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetApiAccessRulesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetApiAccessRulesResponseType = class(AbstractResponseType)
  private
    FApiAccessRule: Array_Of_ApiAccessRuleType;
    FApiAccessRule_Specified: boolean;
    procedure SetApiAccessRule(Index: Integer; const AArray_Of_ApiAccessRuleType: Array_Of_ApiAccessRuleType);
    function  ApiAccessRule_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApiAccessRule: Array_Of_ApiAccessRuleType  Index (IS_OPTN or IS_UNBD) read FApiAccessRule write SetApiAccessRule stored ApiAccessRule_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetApiAccessRulesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetApiAccessRulesResponse = class(GetApiAccessRulesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMemberMessagesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMemberMessagesResponseType = class(AbstractResponseType)
  private
    FMemberMessage: MemberMessageExchangeArrayType;
    FMemberMessage_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreItems: Boolean;
    FHasMoreItems_Specified: boolean;
    procedure SetMemberMessage(Index: Integer; const AMemberMessageExchangeArrayType: MemberMessageExchangeArrayType);
    function  MemberMessage_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
    function  HasMoreItems_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property MemberMessage:    MemberMessageExchangeArrayType  Index (IS_OPTN) read FMemberMessage write SetMemberMessage stored MemberMessage_Specified;
    property PaginationResult: PaginationResultType            Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreItems:     Boolean                         Index (IS_OPTN) read FHasMoreItems write SetHasMoreItems stored HasMoreItems_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMemberMessagesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMemberMessagesResponse = class(GetMemberMessagesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemsAwaitingFeedbackResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemsAwaitingFeedbackResponseType = class(AbstractResponseType)
  private
    FItemsAwaitingFeedback: PaginatedTransactionArrayType;
    FItemsAwaitingFeedback_Specified: boolean;
    procedure SetItemsAwaitingFeedback(Index: Integer; const APaginatedTransactionArrayType: PaginatedTransactionArrayType);
    function  ItemsAwaitingFeedback_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemsAwaitingFeedback: PaginatedTransactionArrayType  Index (IS_OPTN) read FItemsAwaitingFeedback write SetItemsAwaitingFeedback stored ItemsAwaitingFeedback_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemsAwaitingFeedbackResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemsAwaitingFeedbackResponse = class(GetItemsAwaitingFeedbackResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemTransactionsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemTransactionsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreTransactions: Boolean;
    FHasMoreTransactions_Specified: boolean;
    FTransactionsPerPage: Integer;
    FTransactionsPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FReturnedTransactionCountActual: Integer;
    FReturnedTransactionCountActual_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    FTransactionArray: TransactionArrayType;
    FTransactionArray_Specified: boolean;
    FPayPalPreferred: Boolean;
    FPayPalPreferred_Specified: boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreTransactions(Index: Integer; const ABoolean: Boolean);
    function  HasMoreTransactions_Specified(Index: Integer): boolean;
    procedure SetTransactionsPerPage(Index: Integer; const AInteger: Integer);
    function  TransactionsPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetReturnedTransactionCountActual(Index: Integer; const AInteger: Integer);
    function  ReturnedTransactionCountActual_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
    function  TransactionArray_Specified(Index: Integer): boolean;
    procedure SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
    function  PayPalPreferred_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult:               PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreTransactions:            Boolean               Index (IS_OPTN) read FHasMoreTransactions write SetHasMoreTransactions stored HasMoreTransactions_Specified;
    property TransactionsPerPage:            Integer               Index (IS_OPTN) read FTransactionsPerPage write SetTransactionsPerPage stored TransactionsPerPage_Specified;
    property PageNumber:                     Integer               Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property ReturnedTransactionCountActual: Integer               Index (IS_OPTN) read FReturnedTransactionCountActual write SetReturnedTransactionCountActual stored ReturnedTransactionCountActual_Specified;
    property Item:                           ItemType              Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property TransactionArray:               TransactionArrayType  Index (IS_OPTN) read FTransactionArray write SetTransactionArray stored TransactionArray_Specified;
    property PayPalPreferred:                Boolean               Index (IS_OPTN) read FPayPalPreferred write SetPayPalPreferred stored PayPalPreferred_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemTransactionsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemTransactionsResponse = class(GetItemTransactionsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerTransactionsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerTransactionsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreTransactions: Boolean;
    FHasMoreTransactions_Specified: boolean;
    FTransactionsPerPage: Integer;
    FTransactionsPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FReturnedTransactionCountActual: Integer;
    FReturnedTransactionCountActual_Specified: boolean;
    FSeller: UserType;
    FSeller_Specified: boolean;
    FTransactionArray: TransactionArrayType;
    FTransactionArray_Specified: boolean;
    FPayPalPreferred: Boolean;
    FPayPalPreferred_Specified: boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreTransactions(Index: Integer; const ABoolean: Boolean);
    function  HasMoreTransactions_Specified(Index: Integer): boolean;
    procedure SetTransactionsPerPage(Index: Integer; const AInteger: Integer);
    function  TransactionsPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetReturnedTransactionCountActual(Index: Integer; const AInteger: Integer);
    function  ReturnedTransactionCountActual_Specified(Index: Integer): boolean;
    procedure SetSeller(Index: Integer; const AUserType: UserType);
    function  Seller_Specified(Index: Integer): boolean;
    procedure SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
    function  TransactionArray_Specified(Index: Integer): boolean;
    procedure SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
    function  PayPalPreferred_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult:               PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreTransactions:            Boolean               Index (IS_OPTN) read FHasMoreTransactions write SetHasMoreTransactions stored HasMoreTransactions_Specified;
    property TransactionsPerPage:            Integer               Index (IS_OPTN) read FTransactionsPerPage write SetTransactionsPerPage stored TransactionsPerPage_Specified;
    property PageNumber:                     Integer               Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property ReturnedTransactionCountActual: Integer               Index (IS_OPTN) read FReturnedTransactionCountActual write SetReturnedTransactionCountActual stored ReturnedTransactionCountActual_Specified;
    property Seller:                         UserType              Index (IS_OPTN) read FSeller write SetSeller stored Seller_Specified;
    property TransactionArray:               TransactionArrayType  Index (IS_OPTN) read FTransactionArray write SetTransactionArray stored TransactionArray_Specified;
    property PayPalPreferred:                Boolean               Index (IS_OPTN) read FPayPalPreferred write SetPayPalPreferred stored PayPalPreferred_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerTransactionsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerTransactionsResponse = class(GetSellerTransactionsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayBuyingResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayBuyingResponseType = class(AbstractResponseType)
  private
    FBuyingSummary: BuyingSummaryType;
    FBuyingSummary_Specified: boolean;
    FWatchList: PaginatedItemArrayType;
    FWatchList_Specified: boolean;
    FBidList: PaginatedItemArrayType;
    FBidList_Specified: boolean;
    FBestOfferList: PaginatedItemArrayType;
    FBestOfferList_Specified: boolean;
    FWonList: PaginatedOrderTransactionArrayType;
    FWonList_Specified: boolean;
    FLostList: PaginatedItemArrayType;
    FLostList_Specified: boolean;
    FFavoriteSearches: MyeBayFavoriteSearchListType;
    FFavoriteSearches_Specified: boolean;
    FFavoriteSellers: MyeBayFavoriteSellerListType;
    FFavoriteSellers_Specified: boolean;
    FSecondChanceOffer: ItemArrayType;
    FSecondChanceOffer_Specified: boolean;
    FBidAssistantList: BidGroupArrayType;
    FBidAssistantList_Specified: boolean;
    FDeletedFromWonList: PaginatedOrderTransactionArrayType;
    FDeletedFromWonList_Specified: boolean;
    FDeletedFromLostList: PaginatedItemArrayType;
    FDeletedFromLostList_Specified: boolean;
    FUserDefinedList: Array_Of_UserDefinedListType;
    FUserDefinedList_Specified: boolean;
    procedure SetBuyingSummary(Index: Integer; const ABuyingSummaryType: BuyingSummaryType);
    function  BuyingSummary_Specified(Index: Integer): boolean;
    procedure SetWatchList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  WatchList_Specified(Index: Integer): boolean;
    procedure SetBidList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  BidList_Specified(Index: Integer): boolean;
    procedure SetBestOfferList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  BestOfferList_Specified(Index: Integer): boolean;
    procedure SetWonList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
    function  WonList_Specified(Index: Integer): boolean;
    procedure SetLostList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  LostList_Specified(Index: Integer): boolean;
    procedure SetFavoriteSearches(Index: Integer; const AMyeBayFavoriteSearchListType: MyeBayFavoriteSearchListType);
    function  FavoriteSearches_Specified(Index: Integer): boolean;
    procedure SetFavoriteSellers(Index: Integer; const AMyeBayFavoriteSellerListType: MyeBayFavoriteSellerListType);
    function  FavoriteSellers_Specified(Index: Integer): boolean;
    procedure SetSecondChanceOffer(Index: Integer; const AItemArrayType: ItemArrayType);
    function  SecondChanceOffer_Specified(Index: Integer): boolean;
    procedure SetBidAssistantList(Index: Integer; const ABidGroupArrayType: BidGroupArrayType);
    function  BidAssistantList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromWonList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
    function  DeletedFromWonList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromLostList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  DeletedFromLostList_Specified(Index: Integer): boolean;
    procedure SetUserDefinedList(Index: Integer; const AArray_Of_UserDefinedListType: Array_Of_UserDefinedListType);
    function  UserDefinedList_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingSummary:       BuyingSummaryType                   Index (IS_OPTN) read FBuyingSummary write SetBuyingSummary stored BuyingSummary_Specified;
    property WatchList:           PaginatedItemArrayType              Index (IS_OPTN) read FWatchList write SetWatchList stored WatchList_Specified;
    property BidList:             PaginatedItemArrayType              Index (IS_OPTN) read FBidList write SetBidList stored BidList_Specified;
    property BestOfferList:       PaginatedItemArrayType              Index (IS_OPTN) read FBestOfferList write SetBestOfferList stored BestOfferList_Specified;
    property WonList:             PaginatedOrderTransactionArrayType  Index (IS_OPTN) read FWonList write SetWonList stored WonList_Specified;
    property LostList:            PaginatedItemArrayType              Index (IS_OPTN) read FLostList write SetLostList stored LostList_Specified;
    property FavoriteSearches:    MyeBayFavoriteSearchListType        Index (IS_OPTN) read FFavoriteSearches write SetFavoriteSearches stored FavoriteSearches_Specified;
    property FavoriteSellers:     MyeBayFavoriteSellerListType        Index (IS_OPTN) read FFavoriteSellers write SetFavoriteSellers stored FavoriteSellers_Specified;
    property SecondChanceOffer:   ItemArrayType                       Index (IS_OPTN or IS_UNBD) read FSecondChanceOffer write SetSecondChanceOffer stored SecondChanceOffer_Specified;
    property BidAssistantList:    BidGroupArrayType                   Index (IS_OPTN) read FBidAssistantList write SetBidAssistantList stored BidAssistantList_Specified;
    property DeletedFromWonList:  PaginatedOrderTransactionArrayType  Index (IS_OPTN) read FDeletedFromWonList write SetDeletedFromWonList stored DeletedFromWonList_Specified;
    property DeletedFromLostList: PaginatedItemArrayType              Index (IS_OPTN) read FDeletedFromLostList write SetDeletedFromLostList stored DeletedFromLostList_Specified;
    property UserDefinedList:     Array_Of_UserDefinedListType        Index (IS_OPTN or IS_UNBD) read FUserDefinedList write SetUserDefinedList stored UserDefinedList_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayBuyingResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayBuyingResponse = class(GetMyeBayBuyingResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMessagePreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMessagePreferencesResponseType = class(AbstractResponseType)
  private
    FASQPreferences: ASQPreferencesType;
    FASQPreferences_Specified: boolean;
    procedure SetASQPreferences(Index: Integer; const AASQPreferencesType: ASQPreferencesType);
    function  ASQPreferences_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ASQPreferences: ASQPreferencesType  Index (IS_OPTN) read FASQPreferences write SetASQPreferences stored ASQPreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMessagePreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMessagePreferencesResponse = class(GetMessagePreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyMessagesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyMessagesResponseType = class(AbstractResponseType)
  private
    FSummary: MyMessagesSummaryType;
    FSummary_Specified: boolean;
    FAlerts: MyMessagesAlertArrayType;
    FAlerts_Specified: boolean;
    FMessages: MyMessagesMessageArrayType;
    FMessages_Specified: boolean;
    procedure SetSummary(Index: Integer; const AMyMessagesSummaryType: MyMessagesSummaryType);
    function  Summary_Specified(Index: Integer): boolean;
    procedure SetAlerts(Index: Integer; const AMyMessagesAlertArrayType: MyMessagesAlertArrayType);
    function  Alerts_Specified(Index: Integer): boolean;
    procedure SetMessages(Index: Integer; const AMyMessagesMessageArrayType: MyMessagesMessageArrayType);
    function  Messages_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Summary:  MyMessagesSummaryType       Index (IS_OPTN) read FSummary write SetSummary stored Summary_Specified;
    property Alerts:   MyMessagesAlertArrayType    Index (IS_OPTN) read FAlerts write SetAlerts stored Alerts_Specified;
    property Messages: MyMessagesMessageArrayType  Index (IS_OPTN) read FMessages write SetMessages stored Messages_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyMessagesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyMessagesResponse = class(GetMyMessagesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetDescriptionTemplatesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetDescriptionTemplatesResponseType = class(AbstractResponseType)
  private
    FDescriptionTemplate: Array_Of_DescriptionTemplateType;
    FDescriptionTemplate_Specified: boolean;
    FLayoutTotal: Integer;
    FLayoutTotal_Specified: boolean;
    FObsoleteLayoutID: NumberOfPolicyViolationsDetailsType;
    FObsoleteLayoutID_Specified: boolean;
    FObsoleteThemeID: NumberOfPolicyViolationsDetailsType;
    FObsoleteThemeID_Specified: boolean;
    FThemeGroup: Array_Of_ThemeGroupType;
    FThemeGroup_Specified: boolean;
    FThemeTotal: Integer;
    FThemeTotal_Specified: boolean;
    procedure SetDescriptionTemplate(Index: Integer; const AArray_Of_DescriptionTemplateType: Array_Of_DescriptionTemplateType);
    function  DescriptionTemplate_Specified(Index: Integer): boolean;
    procedure SetLayoutTotal(Index: Integer; const AInteger: Integer);
    function  LayoutTotal_Specified(Index: Integer): boolean;
    procedure SetObsoleteLayoutID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  ObsoleteLayoutID_Specified(Index: Integer): boolean;
    procedure SetObsoleteThemeID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
    function  ObsoleteThemeID_Specified(Index: Integer): boolean;
    procedure SetThemeGroup(Index: Integer; const AArray_Of_ThemeGroupType: Array_Of_ThemeGroupType);
    function  ThemeGroup_Specified(Index: Integer): boolean;
    procedure SetThemeTotal(Index: Integer; const AInteger: Integer);
    function  ThemeTotal_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DescriptionTemplate: Array_Of_DescriptionTemplateType     Index (IS_OPTN or IS_UNBD) read FDescriptionTemplate write SetDescriptionTemplate stored DescriptionTemplate_Specified;
    property LayoutTotal:         Integer                              Index (IS_OPTN) read FLayoutTotal write SetLayoutTotal stored LayoutTotal_Specified;
    property ObsoleteLayoutID:    NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FObsoleteLayoutID write SetObsoleteLayoutID stored ObsoleteLayoutID_Specified;
    property ObsoleteThemeID:     NumberOfPolicyViolationsDetailsType  Index (IS_OPTN or IS_UNBD) read FObsoleteThemeID write SetObsoleteThemeID stored ObsoleteThemeID_Specified;
    property ThemeGroup:          Array_Of_ThemeGroupType              Index (IS_OPTN or IS_UNBD) read FThemeGroup write SetThemeGroup stored ThemeGroup_Specified;
    property ThemeTotal:          Integer                              Index (IS_OPTN) read FThemeTotal write SetThemeTotal stored ThemeTotal_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetDescriptionTemplatesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetDescriptionTemplatesResponse = class(GetDescriptionTemplatesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetDisputeResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetDisputeResponseType = class(AbstractResponseType)
  private
    FDispute: DisputeType;
    FDispute_Specified: boolean;
    procedure SetDispute(Index: Integer; const ADisputeType: DisputeType);
    function  Dispute_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Dispute: DisputeType  Index (IS_OPTN) read FDispute write SetDispute stored Dispute_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetDisputeResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetDisputeResponse = class(GetDisputeResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetClientAlertsAuthTokenResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetClientAlertsAuthTokenResponseType = class(AbstractResponseType)
  private
    FClientAlertsAuthToken: string;
    FClientAlertsAuthToken_Specified: boolean;
    FHardExpirationTime: TXSDateTime;
    FHardExpirationTime_Specified: boolean;
    procedure SetClientAlertsAuthToken(Index: Integer; const Astring: string);
    function  ClientAlertsAuthToken_Specified(Index: Integer): boolean;
    procedure SetHardExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  HardExpirationTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ClientAlertsAuthToken: string       Index (IS_OPTN) read FClientAlertsAuthToken write SetClientAlertsAuthToken stored ClientAlertsAuthToken_Specified;
    property HardExpirationTime:    TXSDateTime  Index (IS_OPTN) read FHardExpirationTime write SetHardExpirationTime stored HardExpirationTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetClientAlertsAuthTokenResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetClientAlertsAuthTokenResponse = class(GetClientAlertsAuthTokenResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetContextualKeywordsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetContextualKeywordsResponseType = class(AbstractResponseType)
  private
    FContextSearchAsset: Array_Of_ContextSearchAssetType;
    FContextSearchAsset_Specified: boolean;
    procedure SetContextSearchAsset(Index: Integer; const AArray_Of_ContextSearchAssetType: Array_Of_ContextSearchAssetType);
    function  ContextSearchAsset_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ContextSearchAsset: Array_Of_ContextSearchAssetType  Index (IS_OPTN or IS_UNBD) read FContextSearchAsset write SetContextSearchAsset stored ContextSearchAsset_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetContextualKeywordsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetContextualKeywordsResponse = class(GetContextualKeywordsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemResponseType = class(AbstractResponseType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemResponse = class(GetItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemShippingResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemShippingResponseType = class(AbstractResponseType)
  private
    FShippingDetails: ShippingDetailsType;
    FShippingDetails_Specified: boolean;
    FPickUpInStoreDetails: PickupInStoreDetailsType;
    FPickUpInStoreDetails_Specified: boolean;
    procedure SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
    function  ShippingDetails_Specified(Index: Integer): boolean;
    procedure SetPickUpInStoreDetails(Index: Integer; const APickupInStoreDetailsType: PickupInStoreDetailsType);
    function  PickUpInStoreDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ShippingDetails:      ShippingDetailsType       Index (IS_OPTN) read FShippingDetails write SetShippingDetails stored ShippingDetails_Specified;
    property PickUpInStoreDetails: PickupInStoreDetailsType  Index (IS_OPTN) read FPickUpInStoreDetails write SetPickUpInStoreDetails stored PickUpInStoreDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemShippingResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemShippingResponse = class(GetItemShippingResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetFeedbackResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetFeedbackResponseType = class(AbstractResponseType)
  private
    FFeedbackDetailArray: FeedbackDetailArrayType;
    FFeedbackDetailArray_Specified: boolean;
    FFeedbackDetailItemTotal: Integer;
    FFeedbackDetailItemTotal_Specified: boolean;
    FFeedbackSummary: FeedbackSummaryType;
    FFeedbackSummary_Specified: boolean;
    FFeedbackScore: Integer;
    FFeedbackScore_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FEntriesPerPage: Integer;
    FEntriesPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    procedure SetFeedbackDetailArray(Index: Integer; const AFeedbackDetailArrayType: FeedbackDetailArrayType);
    function  FeedbackDetailArray_Specified(Index: Integer): boolean;
    procedure SetFeedbackDetailItemTotal(Index: Integer; const AInteger: Integer);
    function  FeedbackDetailItemTotal_Specified(Index: Integer): boolean;
    procedure SetFeedbackSummary(Index: Integer; const AFeedbackSummaryType: FeedbackSummaryType);
    function  FeedbackSummary_Specified(Index: Integer): boolean;
    procedure SetFeedbackScore(Index: Integer; const AInteger: Integer);
    function  FeedbackScore_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetEntriesPerPage(Index: Integer; const AInteger: Integer);
    function  EntriesPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property FeedbackDetailArray:     FeedbackDetailArrayType  Index (IS_OPTN) read FFeedbackDetailArray write SetFeedbackDetailArray stored FeedbackDetailArray_Specified;
    property FeedbackDetailItemTotal: Integer                  Index (IS_OPTN) read FFeedbackDetailItemTotal write SetFeedbackDetailItemTotal stored FeedbackDetailItemTotal_Specified;
    property FeedbackSummary:         FeedbackSummaryType      Index (IS_OPTN) read FFeedbackSummary write SetFeedbackSummary stored FeedbackSummary_Specified;
    property FeedbackScore:           Integer                  Index (IS_OPTN) read FFeedbackScore write SetFeedbackScore stored FeedbackScore_Specified;
    property PaginationResult:        PaginationResultType     Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property EntriesPerPage:          Integer                  Index (IS_OPTN) read FEntriesPerPage write SetEntriesPerPage stored EntriesPerPage_Specified;
    property PageNumber:              Integer                  Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetFeedbackResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetFeedbackResponse = class(GetFeedbackResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageRTQResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageRTQResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageRTQResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageRTQResponse = class(AddMemberMessageRTQResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderResponseType = class(AbstractResponseType)
  private
    FAddMemberMessagesAAQToBidderResponseContainer: Array_Of_AddMemberMessagesAAQToBidderResponseContainerType;
    FAddMemberMessagesAAQToBidderResponseContainer_Specified: boolean;
    procedure SetAddMemberMessagesAAQToBidderResponseContainer(Index: Integer; const AArray_Of_AddMemberMessagesAAQToBidderResponseContainerType: Array_Of_AddMemberMessagesAAQToBidderResponseContainerType);
    function  AddMemberMessagesAAQToBidderResponseContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AddMemberMessagesAAQToBidderResponseContainer: Array_Of_AddMemberMessagesAAQToBidderResponseContainerType  Index (IS_OPTN or IS_UNBD) read FAddMemberMessagesAAQToBidderResponseContainer write SetAddMemberMessagesAAQToBidderResponseContainer stored AddMemberMessagesAAQToBidderResponseContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderResponse = class(AddMemberMessagesAAQToBidderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemsResponseType = class(AbstractResponseType)
  private
    FAddItemResponseContainer: Array_Of_AddItemResponseContainerType;
    FAddItemResponseContainer_Specified: boolean;
    procedure SetAddItemResponseContainer(Index: Integer; const AArray_Of_AddItemResponseContainerType: Array_Of_AddItemResponseContainerType);
    function  AddItemResponseContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AddItemResponseContainer: Array_Of_AddItemResponseContainerType  Index (IS_OPTN or IS_UNBD) read FAddItemResponseContainer write SetAddItemResponseContainer stored AddItemResponseContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemsResponse = class(AddItemsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageAAQToPartnerResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageAAQToPartnerResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerResponse = class(AddMemberMessageAAQToPartnerResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerInventoryFolderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerInventoryFolderResponseType = class(AbstractResponseType)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FolderID: Int64  Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerInventoryFolderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerInventoryFolderResponse = class(AddSellingManagerInventoryFolderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSecondChanceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSecondChanceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:    ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime: TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:   TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSecondChanceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSecondChanceItemResponse = class(AddSecondChanceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddOrderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddOrderResponseType = class(AbstractResponseType)
  private
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FCreatedTime: TXSDateTime;
    FCreatedTime_Specified: boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreatedTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderID:     OrderIDType  Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property CreatedTime: TXSDateTime  Index (IS_OPTN) read FCreatedTime write SetCreatedTime stored CreatedTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddOrderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddOrderResponse = class(AddOrderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserDisputesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserDisputesResponseType = class(AbstractResponseType)
  private
    FStartingDisputeID: DisputeIDType;
    FStartingDisputeID_Specified: boolean;
    FEndingDisputeID: DisputeIDType;
    FEndingDisputeID_Specified: boolean;
    FDisputeArray: DisputeArrayType;
    FDisputeArray_Specified: boolean;
    FItemsPerPage: Integer;
    FItemsPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FDisputeFilterCount: Array_Of_DisputeFilterCountType;
    FDisputeFilterCount_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetStartingDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  StartingDisputeID_Specified(Index: Integer): boolean;
    procedure SetEndingDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  EndingDisputeID_Specified(Index: Integer): boolean;
    procedure SetDisputeArray(Index: Integer; const ADisputeArrayType: DisputeArrayType);
    function  DisputeArray_Specified(Index: Integer): boolean;
    procedure SetItemsPerPage(Index: Integer; const AInteger: Integer);
    function  ItemsPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetDisputeFilterCount(Index: Integer; const AArray_Of_DisputeFilterCountType: Array_Of_DisputeFilterCountType);
    function  DisputeFilterCount_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartingDisputeID:  DisputeIDType                    Index (IS_OPTN) read FStartingDisputeID write SetStartingDisputeID stored StartingDisputeID_Specified;
    property EndingDisputeID:    DisputeIDType                    Index (IS_OPTN) read FEndingDisputeID write SetEndingDisputeID stored EndingDisputeID_Specified;
    property DisputeArray:       DisputeArrayType                 Index (IS_OPTN) read FDisputeArray write SetDisputeArray stored DisputeArray_Specified;
    property ItemsPerPage:       Integer                          Index (IS_OPTN) read FItemsPerPage write SetItemsPerPage stored ItemsPerPage_Specified;
    property PageNumber:         Integer                          Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property DisputeFilterCount: Array_Of_DisputeFilterCountType  Index (IS_OPTN or IS_UNBD) read FDisputeFilterCount write SetDisputeFilterCount stored DisputeFilterCount_Specified;
    property PaginationResult:   PaginationResultType             Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserDisputesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserDisputesResponse = class(GetUserDisputesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponseType = class(AbstractResponseType)
  private
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DisputeID: DisputeIDType  Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponse = class(AddDisputeResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : NotificationMessageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationMessageType = class(AbstractResponseType)
  private
    FMessageBody: string;
    FMessageBody_Specified: boolean;
    FEIAS: string;
    FEIAS_Specified: boolean;
    procedure SetMessageBody(Index: Integer; const Astring: string);
    function  MessageBody_Specified(Index: Integer): boolean;
    procedure SetEIAS(Index: Integer; const Astring: string);
    function  EIAS_Specified(Index: Integer): boolean;
  published
    property MessageBody: string  Index (IS_OPTN) read FMessageBody write SetMessageBody stored MessageBody_Specified;
    property EIAS:        string  Index (IS_OPTN) read FEIAS write SetEIAS stored EIAS_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationMessage, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationMessage = class(NotificationMessageType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryResponseType = class(AbstractResponseType)
  private
    FInventoryCountLastCalculatedDate: TXSDateTime;
    FInventoryCountLastCalculatedDate_Specified: boolean;
    FSellingManagerProduct: Array_Of_SellingManagerProductType;
    FSellingManagerProduct_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetInventoryCountLastCalculatedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InventoryCountLastCalculatedDate_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProduct(Index: Integer; const AArray_Of_SellingManagerProductType: Array_Of_SellingManagerProductType);
    function  SellingManagerProduct_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property InventoryCountLastCalculatedDate: TXSDateTime                         Index (IS_OPTN) read FInventoryCountLastCalculatedDate write SetInventoryCountLastCalculatedDate stored InventoryCountLastCalculatedDate_Specified;
    property SellingManagerProduct:            Array_Of_SellingManagerProductType  Index (IS_OPTN or IS_UNBD) read FSellingManagerProduct write SetSellingManagerProduct stored SellingManagerProduct_Specified;
    property PaginationResult:                 PaginationResultType                Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryResponse = class(GetSellingManagerInventoryResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerItemAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerItemAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerItemAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerItemAutomationRuleResponse = class(GetSellingManagerItemAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSaleRecordResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSaleRecordResponseType = class(AbstractResponseType)
  private
    FSellingManagerSoldOrder: SellingManagerSoldOrderType;
    FSellingManagerSoldOrder_Specified: boolean;
    procedure SetSellingManagerSoldOrder(Index: Integer; const ASellingManagerSoldOrderType: SellingManagerSoldOrderType);
    function  SellingManagerSoldOrder_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerSoldOrder: SellingManagerSoldOrderType  Index (IS_OPTN) read FSellingManagerSoldOrder write SetSellingManagerSoldOrder stored SellingManagerSoldOrder_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSaleRecordResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSaleRecordResponse = class(GetSellingManagerSaleRecordResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryFolderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryFolderResponseType = class(AbstractResponseType)
  private
    FFolder: SellingManagerFolderDetailsType;
    FFolder_Specified: boolean;
    procedure SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
    function  Folder_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Folder: SellingManagerFolderDetailsType  Index (IS_OPTN) read FFolder write SetFolder stored Folder_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryFolderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryFolderResponse = class(GetSellingManagerInventoryFolderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerEmailLogResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerEmailLogResponseType = class(AbstractResponseType)
  private
    FEmailLog: Array_Of_SellingManagerEmailLogType;
    FEmailLog_Specified: boolean;
    procedure SetEmailLog(Index: Integer; const AArray_Of_SellingManagerEmailLogType: Array_Of_SellingManagerEmailLogType);
    function  EmailLog_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EmailLog: Array_Of_SellingManagerEmailLogType  Index (IS_OPTN or IS_UNBD) read FEmailLog write SetEmailLog stored EmailLog_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerEmailLogResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerEmailLogResponse = class(GetSellingManagerEmailLogResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerAlertsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerAlertsResponseType = class(AbstractResponseType)
  private
    FAlert: Array_Of_SellingManagerAlertType;
    FAlert_Specified: boolean;
    procedure SetAlert(Index: Integer; const AArray_Of_SellingManagerAlertType: Array_Of_SellingManagerAlertType);
    function  Alert_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Alert: Array_Of_SellingManagerAlertType  Index (IS_OPTN or IS_UNBD) read FAlert write SetAlert stored Alert_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerAlertsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerAlertsResponse = class(GetSellingManagerAlertsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreCategoryUpdateStatusResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusResponseType = class(AbstractResponseType)
  private
    FStatus: TaskStatusCodeType;
    FStatus_Specified: boolean;
    procedure SetStatus(Index: Integer; const ATaskStatusCodeType: TaskStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property Status: TaskStatusCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreCategoryUpdateStatusResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusResponse = class(GetStoreCategoryUpdateStatusResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreResponseType = class(AbstractResponseType)
  private
    FStore: StoreType;
    FStore_Specified: boolean;
    procedure SetStore(Index: Integer; const AStoreType: StoreType);
    function  Store_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Store: StoreType  Index (IS_OPTN) read FStore write SetStore stored Store_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreResponse = class(GetStoreResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSoldListingsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSoldListingsResponseType = class(AbstractResponseType)
  private
    FSaleRecord: Array_Of_SellingManagerSoldOrderType;
    FSaleRecord_Specified: boolean;
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    procedure SetSaleRecord(Index: Integer; const AArray_Of_SellingManagerSoldOrderType: Array_Of_SellingManagerSoldOrderType);
    function  SaleRecord_Specified(Index: Integer): boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SaleRecord:       Array_Of_SellingManagerSoldOrderType  Index (IS_OPTN or IS_UNBD) read FSaleRecord write SetSaleRecord stored SaleRecord_Specified;
    property PaginationResult: PaginationResultType                  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSoldListingsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSoldListingsResponse = class(GetSellingManagerSoldListingsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplateAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplateAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplateAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplateAutomationRuleResponse = class(GetSellingManagerTemplateAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSessionIDResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSessionIDResponseType = class(AbstractResponseType)
  private
    FSessionID: string;
    FSessionID_Specified: boolean;
    procedure SetSessionID(Index: Integer; const Astring: string);
    function  SessionID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SessionID: string  Index (IS_OPTN) read FSessionID write SetSessionID stored SessionID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSessionIDResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSessionIDResponse = class(GetSessionIDResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplatesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplatesResponseType = class(AbstractResponseType)
  private
    FSellingManagerTemplateDetailsArray: SellingManagerTemplateDetailsArrayType;
    FSellingManagerTemplateDetailsArray_Specified: boolean;
    procedure SetSellingManagerTemplateDetailsArray(Index: Integer; const ASellingManagerTemplateDetailsArrayType: SellingManagerTemplateDetailsArrayType);
    function  SellingManagerTemplateDetailsArray_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerTemplateDetailsArray: SellingManagerTemplateDetailsArrayType  Index (IS_OPTN) read FSellingManagerTemplateDetailsArray write SetSellingManagerTemplateDetailsArray stored SellingManagerTemplateDetailsArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplatesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplatesResponse = class(GetSellingManagerTemplatesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetNotificationPreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationPreferencesResponseType = class(AbstractResponseType)
  private
    FApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType;
    FApplicationDeliveryPreferences_Specified: boolean;
    FDeliveryURLName: string;
    FDeliveryURLName_Specified: boolean;
    FUserDeliveryPreferenceArray: NotificationEnableArrayType;
    FUserDeliveryPreferenceArray_Specified: boolean;
    FUserData: NotificationUserDataType;
    FUserData_Specified: boolean;
    FEventProperty: Array_Of_NotificationEventPropertyType;
    FEventProperty_Specified: boolean;
    procedure SetApplicationDeliveryPreferences(Index: Integer; const AApplicationDeliveryPreferencesType: ApplicationDeliveryPreferencesType);
    function  ApplicationDeliveryPreferences_Specified(Index: Integer): boolean;
    procedure SetDeliveryURLName(Index: Integer; const Astring: string);
    function  DeliveryURLName_Specified(Index: Integer): boolean;
    procedure SetUserDeliveryPreferenceArray(Index: Integer; const ANotificationEnableArrayType: NotificationEnableArrayType);
    function  UserDeliveryPreferenceArray_Specified(Index: Integer): boolean;
    procedure SetUserData(Index: Integer; const ANotificationUserDataType: NotificationUserDataType);
    function  UserData_Specified(Index: Integer): boolean;
    procedure SetEventProperty(Index: Integer; const AArray_Of_NotificationEventPropertyType: Array_Of_NotificationEventPropertyType);
    function  EventProperty_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType      Index (IS_OPTN) read FApplicationDeliveryPreferences write SetApplicationDeliveryPreferences stored ApplicationDeliveryPreferences_Specified;
    property DeliveryURLName:                string                                  Index (IS_OPTN) read FDeliveryURLName write SetDeliveryURLName stored DeliveryURLName_Specified;
    property UserDeliveryPreferenceArray:    NotificationEnableArrayType             Index (IS_OPTN) read FUserDeliveryPreferenceArray write SetUserDeliveryPreferenceArray stored UserDeliveryPreferenceArray_Specified;
    property UserData:                       NotificationUserDataType                Index (IS_OPTN) read FUserData write SetUserData stored UserData_Specified;
    property EventProperty:                  Array_Of_NotificationEventPropertyType  Index (IS_OPTN or IS_UNBD) read FEventProperty write SetEventProperty stored EventProperty_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetNotificationPreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationPreferencesResponse = class(GetNotificationPreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetNotificationsUsageResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationsUsageResponseType = class(AbstractResponseType)
  private
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FNotificationDetailsArray: NotificationDetailsArrayType;
    FNotificationDetailsArray_Specified: boolean;
    FMarkUpMarkDownHistory: MarkUpMarkDownHistoryType;
    FMarkUpMarkDownHistory_Specified: boolean;
    FNotificationStatistics: NotificationStatisticsType;
    FNotificationStatistics_Specified: boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetNotificationDetailsArray(Index: Integer; const ANotificationDetailsArrayType: NotificationDetailsArrayType);
    function  NotificationDetailsArray_Specified(Index: Integer): boolean;
    procedure SetMarkUpMarkDownHistory(Index: Integer; const AMarkUpMarkDownHistoryType: MarkUpMarkDownHistoryType);
    function  MarkUpMarkDownHistory_Specified(Index: Integer): boolean;
    procedure SetNotificationStatistics(Index: Integer; const ANotificationStatisticsType: NotificationStatisticsType);
    function  NotificationStatistics_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime:                TXSDateTime                   Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                  TXSDateTime                   Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property NotificationDetailsArray: NotificationDetailsArrayType  Index (IS_OPTN) read FNotificationDetailsArray write SetNotificationDetailsArray stored NotificationDetailsArray_Specified;
    property MarkUpMarkDownHistory:    MarkUpMarkDownHistoryType     Index (IS_OPTN) read FMarkUpMarkDownHistory write SetMarkUpMarkDownHistory stored MarkUpMarkDownHistory_Specified;
    property NotificationStatistics:   NotificationStatisticsType    Index (IS_OPTN) read FNotificationStatistics write SetNotificationStatistics stored NotificationStatistics_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetNotificationsUsageResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationsUsageResponse = class(GetNotificationsUsageResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBaySellingResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBaySellingResponseType = class(AbstractResponseType)
  private
    FSellingSummary: SellingSummaryType;
    FSellingSummary_Specified: boolean;
    FScheduledList: PaginatedItemArrayType;
    FScheduledList_Specified: boolean;
    FActiveList: PaginatedItemArrayType;
    FActiveList_Specified: boolean;
    FSoldList: PaginatedOrderTransactionArrayType;
    FSoldList_Specified: boolean;
    FUnsoldList: PaginatedItemArrayType;
    FUnsoldList_Specified: boolean;
    FSummary: MyeBaySellingSummaryType;
    FSummary_Specified: boolean;
    FBidList: PaginatedItemArrayType;
    FBidList_Specified: boolean;
    FDeletedFromSoldList: PaginatedOrderTransactionArrayType;
    FDeletedFromSoldList_Specified: boolean;
    FDeletedFromUnsoldList: PaginatedItemArrayType;
    FDeletedFromUnsoldList_Specified: boolean;
    procedure SetSellingSummary(Index: Integer; const ASellingSummaryType: SellingSummaryType);
    function  SellingSummary_Specified(Index: Integer): boolean;
    procedure SetScheduledList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  ScheduledList_Specified(Index: Integer): boolean;
    procedure SetActiveList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  ActiveList_Specified(Index: Integer): boolean;
    procedure SetSoldList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
    function  SoldList_Specified(Index: Integer): boolean;
    procedure SetUnsoldList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  UnsoldList_Specified(Index: Integer): boolean;
    procedure SetSummary(Index: Integer; const AMyeBaySellingSummaryType: MyeBaySellingSummaryType);
    function  Summary_Specified(Index: Integer): boolean;
    procedure SetBidList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  BidList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromSoldList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
    function  DeletedFromSoldList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromUnsoldList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
    function  DeletedFromUnsoldList_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingSummary:        SellingSummaryType                  Index (IS_OPTN) read FSellingSummary write SetSellingSummary stored SellingSummary_Specified;
    property ScheduledList:         PaginatedItemArrayType              Index (IS_OPTN) read FScheduledList write SetScheduledList stored ScheduledList_Specified;
    property ActiveList:            PaginatedItemArrayType              Index (IS_OPTN) read FActiveList write SetActiveList stored ActiveList_Specified;
    property SoldList:              PaginatedOrderTransactionArrayType  Index (IS_OPTN) read FSoldList write SetSoldList stored SoldList_Specified;
    property UnsoldList:            PaginatedItemArrayType              Index (IS_OPTN) read FUnsoldList write SetUnsoldList stored UnsoldList_Specified;
    property Summary:               MyeBaySellingSummaryType            Index (IS_OPTN) read FSummary write SetSummary stored Summary_Specified;
    property BidList:               PaginatedItemArrayType              Index (IS_OPTN) read FBidList write SetBidList stored BidList_Specified;
    property DeletedFromSoldList:   PaginatedOrderTransactionArrayType  Index (IS_OPTN) read FDeletedFromSoldList write SetDeletedFromSoldList stored DeletedFromSoldList_Specified;
    property DeletedFromUnsoldList: PaginatedItemArrayType              Index (IS_OPTN) read FDeletedFromUnsoldList write SetDeletedFromUnsoldList stored DeletedFromUnsoldList_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBaySellingResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBaySellingResponse = class(GetMyeBaySellingResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayRemindersResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayRemindersResponseType = class(AbstractResponseType)
  private
    FBuyingReminders: RemindersType;
    FBuyingReminders_Specified: boolean;
    FSellingReminders: RemindersType;
    FSellingReminders_Specified: boolean;
    procedure SetBuyingReminders(Index: Integer; const ARemindersType: RemindersType);
    function  BuyingReminders_Specified(Index: Integer): boolean;
    procedure SetSellingReminders(Index: Integer; const ARemindersType: RemindersType);
    function  SellingReminders_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingReminders:  RemindersType  Index (IS_OPTN) read FBuyingReminders write SetBuyingReminders stored BuyingReminders_Specified;
    property SellingReminders: RemindersType  Index (IS_OPTN) read FSellingReminders write SetSellingReminders stored SellingReminders_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayRemindersResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayRemindersResponse = class(GetMyeBayRemindersResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerDashboardResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerDashboardResponseType = class(AbstractResponseType)
  private
    FSearchStanding: SearchStandingDashboardType;
    FSearchStanding_Specified: boolean;
    FSellerFeeDiscount: SellerFeeDiscountDashboardType;
    FSellerFeeDiscount_Specified: boolean;
    FPowerSellerStatus: PowerSellerDashboardType;
    FPowerSellerStatus_Specified: boolean;
    FPolicyCompliance: PolicyComplianceDashboardType;
    FPolicyCompliance_Specified: boolean;
    FBuyerSatisfaction: BuyerSatisfactionDashboardType;
    FBuyerSatisfaction_Specified: boolean;
    FSellerAccount: SellerAccountDashboardType;
    FSellerAccount_Specified: boolean;
    FPerformance: Array_Of_PerformanceDashboardType;
    FPerformance_Specified: boolean;
    procedure SetSearchStanding(Index: Integer; const ASearchStandingDashboardType: SearchStandingDashboardType);
    function  SearchStanding_Specified(Index: Integer): boolean;
    procedure SetSellerFeeDiscount(Index: Integer; const ASellerFeeDiscountDashboardType: SellerFeeDiscountDashboardType);
    function  SellerFeeDiscount_Specified(Index: Integer): boolean;
    procedure SetPowerSellerStatus(Index: Integer; const APowerSellerDashboardType: PowerSellerDashboardType);
    function  PowerSellerStatus_Specified(Index: Integer): boolean;
    procedure SetPolicyCompliance(Index: Integer; const APolicyComplianceDashboardType: PolicyComplianceDashboardType);
    function  PolicyCompliance_Specified(Index: Integer): boolean;
    procedure SetBuyerSatisfaction(Index: Integer; const ABuyerSatisfactionDashboardType: BuyerSatisfactionDashboardType);
    function  BuyerSatisfaction_Specified(Index: Integer): boolean;
    procedure SetSellerAccount(Index: Integer; const ASellerAccountDashboardType: SellerAccountDashboardType);
    function  SellerAccount_Specified(Index: Integer): boolean;
    procedure SetPerformance(Index: Integer; const AArray_Of_PerformanceDashboardType: Array_Of_PerformanceDashboardType);
    function  Performance_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SearchStanding:    SearchStandingDashboardType        Index (IS_OPTN) read FSearchStanding write SetSearchStanding stored SearchStanding_Specified;
    property SellerFeeDiscount: SellerFeeDiscountDashboardType     Index (IS_OPTN) read FSellerFeeDiscount write SetSellerFeeDiscount stored SellerFeeDiscount_Specified;
    property PowerSellerStatus: PowerSellerDashboardType           Index (IS_OPTN) read FPowerSellerStatus write SetPowerSellerStatus stored PowerSellerStatus_Specified;
    property PolicyCompliance:  PolicyComplianceDashboardType      Index (IS_OPTN) read FPolicyCompliance write SetPolicyCompliance stored PolicyCompliance_Specified;
    property BuyerSatisfaction: BuyerSatisfactionDashboardType     Index (IS_OPTN) read FBuyerSatisfaction write SetBuyerSatisfaction stored BuyerSatisfaction_Specified;
    property SellerAccount:     SellerAccountDashboardType         Index (IS_OPTN) read FSellerAccount write SetSellerAccount stored SellerAccount_Specified;
    property Performance:       Array_Of_PerformanceDashboardType  Index (IS_OPTN or IS_UNBD) read FPerformance write SetPerformance stored Performance_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerDashboardResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerDashboardResponse = class(GetSellerDashboardResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetOrderTransactionsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrderTransactionsResponseType = class(AbstractResponseType)
  private
    FOrderArray: OrderArrayType;
    FOrderArray_Specified: boolean;
    procedure SetOrderArray(Index: Integer; const AOrderArrayType: OrderArrayType);
    function  OrderArray_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderArray: OrderArrayType  Index (IS_OPTN) read FOrderArray write SetOrderArray stored OrderArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetOrderTransactionsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrderTransactionsResponse = class(GetOrderTransactionsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetPromotionalSaleDetailsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetPromotionalSaleDetailsResponseType = class(AbstractResponseType)
  private
    FPromotionalSaleDetails: PromotionalSaleArrayType;
    FPromotionalSaleDetails_Specified: boolean;
    procedure SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleArrayType: PromotionalSaleArrayType);
    function  PromotionalSaleDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PromotionalSaleDetails: PromotionalSaleArrayType  Index (IS_OPTN) read FPromotionalSaleDetails write SetPromotionalSaleDetails stored PromotionalSaleDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetPromotionalSaleDetailsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetPromotionalSaleDetailsResponse = class(GetPromotionalSaleDetailsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetOrdersResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrdersResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreOrders: Boolean;
    FHasMoreOrders_Specified: boolean;
    FOrderArray: OrderArrayType;
    FOrderArray_Specified: boolean;
    FOrdersPerPage: Integer;
    FOrdersPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FReturnedOrderCountActual: Integer;
    FReturnedOrderCountActual_Specified: boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreOrders(Index: Integer; const ABoolean: Boolean);
    function  HasMoreOrders_Specified(Index: Integer): boolean;
    procedure SetOrderArray(Index: Integer; const AOrderArrayType: OrderArrayType);
    function  OrderArray_Specified(Index: Integer): boolean;
    procedure SetOrdersPerPage(Index: Integer; const AInteger: Integer);
    function  OrdersPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetReturnedOrderCountActual(Index: Integer; const AInteger: Integer);
    function  ReturnedOrderCountActual_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult:         PaginationResultType  Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreOrders:            Boolean               Index (IS_OPTN) read FHasMoreOrders write SetHasMoreOrders stored HasMoreOrders_Specified;
    property OrderArray:               OrderArrayType        Index (IS_OPTN) read FOrderArray write SetOrderArray stored OrderArray_Specified;
    property OrdersPerPage:            Integer               Index (IS_OPTN) read FOrdersPerPage write SetOrdersPerPage stored OrdersPerPage_Specified;
    property PageNumber:               Integer               Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property ReturnedOrderCountActual: Integer               Index (IS_OPTN) read FReturnedOrderCountActual write SetReturnedOrderCountActual stored ReturnedOrderCountActual_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetOrdersResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrdersResponse = class(GetOrdersResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreCustomPageResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCustomPageResponseType = class(AbstractResponseType)
  private
    FCustomPageArray: StoreCustomPageArrayType;
    FCustomPageArray_Specified: boolean;
    procedure SetCustomPageArray(Index: Integer; const AStoreCustomPageArrayType: StoreCustomPageArrayType);
    function  CustomPageArray_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPageArray: StoreCustomPageArrayType  Index (IS_OPTN) read FCustomPageArray write SetCustomPageArray stored CustomPageArray_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreCustomPageResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCustomPageResponse = class(GetStoreCustomPageResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayDetailsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayDetailsResponseType = class(AbstractResponseType)
  private
    FCountryDetails: Array_Of_CountryDetailsType;
    FCountryDetails_Specified: boolean;
    FCurrencyDetails: Array_Of_CurrencyDetailsType;
    FCurrencyDetails_Specified: boolean;
    FDispatchTimeMaxDetails: Array_Of_DispatchTimeMaxDetailsType;
    FDispatchTimeMaxDetails_Specified: boolean;
    FPaymentOptionDetails: Array_Of_PaymentOptionDetailsType;
    FPaymentOptionDetails_Specified: boolean;
    FRegionDetails: Array_Of_RegionDetailsType;
    FRegionDetails_Specified: boolean;
    FShippingLocationDetails: Array_Of_ShippingLocationDetailsType;
    FShippingLocationDetails_Specified: boolean;
    FShippingServiceDetails: Array_Of_ShippingServiceDetailsType;
    FShippingServiceDetails_Specified: boolean;
    FSiteDetails: Array_Of_SiteDetailsType;
    FSiteDetails_Specified: boolean;
    FTaxJurisdiction: TaxTableType;
    FTaxJurisdiction_Specified: boolean;
    FURLDetails: Array_Of_URLDetailsType;
    FURLDetails_Specified: boolean;
    FTimeZoneDetails: Array_Of_TimeZoneDetailsType;
    FTimeZoneDetails_Specified: boolean;
    FItemSpecificDetails: Array_Of_ItemSpecificDetailsType;
    FItemSpecificDetails_Specified: boolean;
    FUnitOfMeasurementDetails: Array_Of_UnitOfMeasurementDetailsType;
    FUnitOfMeasurementDetails_Specified: boolean;
    FRegionOfOriginDetails: Array_Of_RegionOfOriginDetailsType;
    FRegionOfOriginDetails_Specified: boolean;
    FShippingPackageDetails: Array_Of_ShippingPackageDetailsType;
    FShippingPackageDetails_Specified: boolean;
    FShippingCarrierDetails: Array_Of_ShippingCarrierDetailsType;
    FShippingCarrierDetails_Specified: boolean;
    FReturnPolicyDetails: ReturnPolicyDetailsType;
    FReturnPolicyDetails_Specified: boolean;
    FInternationalReturnPolicyDetails: ReturnPolicyDetailsType;
    FInternationalReturnPolicyDetails_Specified: boolean;
    FListingStartPriceDetails: Array_Of_ListingStartPriceDetailsType;
    FListingStartPriceDetails_Specified: boolean;
    FBuyerRequirementDetails: Array_Of_SiteBuyerRequirementDetailsType;
    FBuyerRequirementDetails_Specified: boolean;
    FListingFeatureDetails: Array_Of_ListingFeatureDetailsType;
    FListingFeatureDetails_Specified: boolean;
    FVariationDetails: VariationDetailsType;
    FVariationDetails_Specified: boolean;
    FExcludeShippingLocationDetails: Array_Of_ExcludeShippingLocationDetailsType;
    FExcludeShippingLocationDetails_Specified: boolean;
    FUpdateTime: TXSDateTime;
    FUpdateTime_Specified: boolean;
    FRecoupmentPolicyDetails: Array_Of_RecoupmentPolicyDetailsType;
    FRecoupmentPolicyDetails_Specified: boolean;
    FShippingCategoryDetails: Array_Of_ShippingCategoryDetailsType;
    FShippingCategoryDetails_Specified: boolean;
    FProductDetails: ProductDetailsType;
    FProductDetails_Specified: boolean;
    procedure SetCountryDetails(Index: Integer; const AArray_Of_CountryDetailsType: Array_Of_CountryDetailsType);
    function  CountryDetails_Specified(Index: Integer): boolean;
    procedure SetCurrencyDetails(Index: Integer; const AArray_Of_CurrencyDetailsType: Array_Of_CurrencyDetailsType);
    function  CurrencyDetails_Specified(Index: Integer): boolean;
    procedure SetDispatchTimeMaxDetails(Index: Integer; const AArray_Of_DispatchTimeMaxDetailsType: Array_Of_DispatchTimeMaxDetailsType);
    function  DispatchTimeMaxDetails_Specified(Index: Integer): boolean;
    procedure SetPaymentOptionDetails(Index: Integer; const AArray_Of_PaymentOptionDetailsType: Array_Of_PaymentOptionDetailsType);
    function  PaymentOptionDetails_Specified(Index: Integer): boolean;
    procedure SetRegionDetails(Index: Integer; const AArray_Of_RegionDetailsType: Array_Of_RegionDetailsType);
    function  RegionDetails_Specified(Index: Integer): boolean;
    procedure SetShippingLocationDetails(Index: Integer; const AArray_Of_ShippingLocationDetailsType: Array_Of_ShippingLocationDetailsType);
    function  ShippingLocationDetails_Specified(Index: Integer): boolean;
    procedure SetShippingServiceDetails(Index: Integer; const AArray_Of_ShippingServiceDetailsType: Array_Of_ShippingServiceDetailsType);
    function  ShippingServiceDetails_Specified(Index: Integer): boolean;
    procedure SetSiteDetails(Index: Integer; const AArray_Of_SiteDetailsType: Array_Of_SiteDetailsType);
    function  SiteDetails_Specified(Index: Integer): boolean;
    procedure SetTaxJurisdiction(Index: Integer; const ATaxTableType: TaxTableType);
    function  TaxJurisdiction_Specified(Index: Integer): boolean;
    procedure SetURLDetails(Index: Integer; const AArray_Of_URLDetailsType: Array_Of_URLDetailsType);
    function  URLDetails_Specified(Index: Integer): boolean;
    procedure SetTimeZoneDetails(Index: Integer; const AArray_Of_TimeZoneDetailsType: Array_Of_TimeZoneDetailsType);
    function  TimeZoneDetails_Specified(Index: Integer): boolean;
    procedure SetItemSpecificDetails(Index: Integer; const AArray_Of_ItemSpecificDetailsType: Array_Of_ItemSpecificDetailsType);
    function  ItemSpecificDetails_Specified(Index: Integer): boolean;
    procedure SetUnitOfMeasurementDetails(Index: Integer; const AArray_Of_UnitOfMeasurementDetailsType: Array_Of_UnitOfMeasurementDetailsType);
    function  UnitOfMeasurementDetails_Specified(Index: Integer): boolean;
    procedure SetRegionOfOriginDetails(Index: Integer; const AArray_Of_RegionOfOriginDetailsType: Array_Of_RegionOfOriginDetailsType);
    function  RegionOfOriginDetails_Specified(Index: Integer): boolean;
    procedure SetShippingPackageDetails(Index: Integer; const AArray_Of_ShippingPackageDetailsType: Array_Of_ShippingPackageDetailsType);
    function  ShippingPackageDetails_Specified(Index: Integer): boolean;
    procedure SetShippingCarrierDetails(Index: Integer; const AArray_Of_ShippingCarrierDetailsType: Array_Of_ShippingCarrierDetailsType);
    function  ShippingCarrierDetails_Specified(Index: Integer): boolean;
    procedure SetReturnPolicyDetails(Index: Integer; const AReturnPolicyDetailsType: ReturnPolicyDetailsType);
    function  ReturnPolicyDetails_Specified(Index: Integer): boolean;
    procedure SetInternationalReturnPolicyDetails(Index: Integer; const AReturnPolicyDetailsType: ReturnPolicyDetailsType);
    function  InternationalReturnPolicyDetails_Specified(Index: Integer): boolean;
    procedure SetListingStartPriceDetails(Index: Integer; const AArray_Of_ListingStartPriceDetailsType: Array_Of_ListingStartPriceDetailsType);
    function  ListingStartPriceDetails_Specified(Index: Integer): boolean;
    procedure SetBuyerRequirementDetails(Index: Integer; const AArray_Of_SiteBuyerRequirementDetailsType: Array_Of_SiteBuyerRequirementDetailsType);
    function  BuyerRequirementDetails_Specified(Index: Integer): boolean;
    procedure SetListingFeatureDetails(Index: Integer; const AArray_Of_ListingFeatureDetailsType: Array_Of_ListingFeatureDetailsType);
    function  ListingFeatureDetails_Specified(Index: Integer): boolean;
    procedure SetVariationDetails(Index: Integer; const AVariationDetailsType: VariationDetailsType);
    function  VariationDetails_Specified(Index: Integer): boolean;
    procedure SetExcludeShippingLocationDetails(Index: Integer; const AArray_Of_ExcludeShippingLocationDetailsType: Array_Of_ExcludeShippingLocationDetailsType);
    function  ExcludeShippingLocationDetails_Specified(Index: Integer): boolean;
    procedure SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  UpdateTime_Specified(Index: Integer): boolean;
    procedure SetRecoupmentPolicyDetails(Index: Integer; const AArray_Of_RecoupmentPolicyDetailsType: Array_Of_RecoupmentPolicyDetailsType);
    function  RecoupmentPolicyDetails_Specified(Index: Integer): boolean;
    procedure SetShippingCategoryDetails(Index: Integer; const AArray_Of_ShippingCategoryDetailsType: Array_Of_ShippingCategoryDetailsType);
    function  ShippingCategoryDetails_Specified(Index: Integer): boolean;
    procedure SetProductDetails(Index: Integer; const AProductDetailsType: ProductDetailsType);
    function  ProductDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CountryDetails:                   Array_Of_CountryDetailsType                  Index (IS_OPTN or IS_UNBD) read FCountryDetails write SetCountryDetails stored CountryDetails_Specified;
    property CurrencyDetails:                  Array_Of_CurrencyDetailsType                 Index (IS_OPTN or IS_UNBD) read FCurrencyDetails write SetCurrencyDetails stored CurrencyDetails_Specified;
    property DispatchTimeMaxDetails:           Array_Of_DispatchTimeMaxDetailsType          Index (IS_OPTN or IS_UNBD) read FDispatchTimeMaxDetails write SetDispatchTimeMaxDetails stored DispatchTimeMaxDetails_Specified;
    property PaymentOptionDetails:             Array_Of_PaymentOptionDetailsType            Index (IS_OPTN or IS_UNBD) read FPaymentOptionDetails write SetPaymentOptionDetails stored PaymentOptionDetails_Specified;
    property RegionDetails:                    Array_Of_RegionDetailsType                   Index (IS_OPTN or IS_UNBD) read FRegionDetails write SetRegionDetails stored RegionDetails_Specified;
    property ShippingLocationDetails:          Array_Of_ShippingLocationDetailsType         Index (IS_OPTN or IS_UNBD) read FShippingLocationDetails write SetShippingLocationDetails stored ShippingLocationDetails_Specified;
    property ShippingServiceDetails:           Array_Of_ShippingServiceDetailsType          Index (IS_OPTN or IS_UNBD) read FShippingServiceDetails write SetShippingServiceDetails stored ShippingServiceDetails_Specified;
    property SiteDetails:                      Array_Of_SiteDetailsType                     Index (IS_OPTN or IS_UNBD) read FSiteDetails write SetSiteDetails stored SiteDetails_Specified;
    property TaxJurisdiction:                  TaxTableType                                 Index (IS_OPTN or IS_UNBD) read FTaxJurisdiction write SetTaxJurisdiction stored TaxJurisdiction_Specified;
    property URLDetails:                       Array_Of_URLDetailsType                      Index (IS_OPTN or IS_UNBD) read FURLDetails write SetURLDetails stored URLDetails_Specified;
    property TimeZoneDetails:                  Array_Of_TimeZoneDetailsType                 Index (IS_OPTN or IS_UNBD) read FTimeZoneDetails write SetTimeZoneDetails stored TimeZoneDetails_Specified;
    property ItemSpecificDetails:              Array_Of_ItemSpecificDetailsType             Index (IS_OPTN or IS_UNBD) read FItemSpecificDetails write SetItemSpecificDetails stored ItemSpecificDetails_Specified;
    property UnitOfMeasurementDetails:         Array_Of_UnitOfMeasurementDetailsType        Index (IS_OPTN or IS_UNBD) read FUnitOfMeasurementDetails write SetUnitOfMeasurementDetails stored UnitOfMeasurementDetails_Specified;
    property RegionOfOriginDetails:            Array_Of_RegionOfOriginDetailsType           Index (IS_OPTN or IS_UNBD) read FRegionOfOriginDetails write SetRegionOfOriginDetails stored RegionOfOriginDetails_Specified;
    property ShippingPackageDetails:           Array_Of_ShippingPackageDetailsType          Index (IS_OPTN or IS_UNBD) read FShippingPackageDetails write SetShippingPackageDetails stored ShippingPackageDetails_Specified;
    property ShippingCarrierDetails:           Array_Of_ShippingCarrierDetailsType          Index (IS_OPTN or IS_UNBD) read FShippingCarrierDetails write SetShippingCarrierDetails stored ShippingCarrierDetails_Specified;
    property ReturnPolicyDetails:              ReturnPolicyDetailsType                      Index (IS_OPTN) read FReturnPolicyDetails write SetReturnPolicyDetails stored ReturnPolicyDetails_Specified;
    property InternationalReturnPolicyDetails: ReturnPolicyDetailsType                      Index (IS_OPTN) read FInternationalReturnPolicyDetails write SetInternationalReturnPolicyDetails stored InternationalReturnPolicyDetails_Specified;
    property ListingStartPriceDetails:         Array_Of_ListingStartPriceDetailsType        Index (IS_OPTN or IS_UNBD) read FListingStartPriceDetails write SetListingStartPriceDetails stored ListingStartPriceDetails_Specified;
    property BuyerRequirementDetails:          Array_Of_SiteBuyerRequirementDetailsType     Index (IS_OPTN or IS_UNBD) read FBuyerRequirementDetails write SetBuyerRequirementDetails stored BuyerRequirementDetails_Specified;
    property ListingFeatureDetails:            Array_Of_ListingFeatureDetailsType           Index (IS_OPTN or IS_UNBD) read FListingFeatureDetails write SetListingFeatureDetails stored ListingFeatureDetails_Specified;
    property VariationDetails:                 VariationDetailsType                         Index (IS_OPTN) read FVariationDetails write SetVariationDetails stored VariationDetails_Specified;
    property ExcludeShippingLocationDetails:   Array_Of_ExcludeShippingLocationDetailsType  Index (IS_OPTN or IS_UNBD) read FExcludeShippingLocationDetails write SetExcludeShippingLocationDetails stored ExcludeShippingLocationDetails_Specified;
    property UpdateTime:                       TXSDateTime                                  Index (IS_OPTN) read FUpdateTime write SetUpdateTime stored UpdateTime_Specified;
    property RecoupmentPolicyDetails:          Array_Of_RecoupmentPolicyDetailsType         Index (IS_OPTN or IS_UNBD) read FRecoupmentPolicyDetails write SetRecoupmentPolicyDetails stored RecoupmentPolicyDetails_Specified;
    property ShippingCategoryDetails:          Array_Of_ShippingCategoryDetailsType         Index (IS_OPTN or IS_UNBD) read FShippingCategoryDetails write SetShippingCategoryDetails stored ShippingCategoryDetails_Specified;
    property ProductDetails:                   ProductDetailsType                           Index (IS_OPTN) read FProductDetails write SetProductDetails stored ProductDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : GeteBayDetailsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayDetailsResponse = class(GeteBayDetailsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RelistItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RelistItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : RelistItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RelistItemResponse = class(RelistItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RelistFixedPriceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RelistFixedPriceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SKU:                    SKUType                          Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : RelistFixedPriceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RelistFixedPriceItemResponse = class(RelistFixedPriceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RemoveFromWatchListResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RemoveFromWatchListResponseType = class(AbstractResponseType)
  private
    FWatchListCount: Integer;
    FWatchListCount_Specified: boolean;
    FWatchListMaximum: Integer;
    FWatchListMaximum_Specified: boolean;
    procedure SetWatchListCount(Index: Integer; const AInteger: Integer);
    function  WatchListCount_Specified(Index: Integer): boolean;
    procedure SetWatchListMaximum(Index: Integer; const AInteger: Integer);
    function  WatchListMaximum_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property WatchListCount:   Integer  Index (IS_OPTN) read FWatchListCount write SetWatchListCount stored WatchListCount_Specified;
    property WatchListMaximum: Integer  Index (IS_OPTN) read FWatchListMaximum write SetWatchListMaximum stored WatchListMaximum_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoveFromWatchListResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RemoveFromWatchListResponse = class(RemoveFromWatchListResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RespondToFeedbackResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToFeedbackResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : RespondToFeedbackResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToFeedbackResponse = class(RespondToFeedbackResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LeaveFeedbackResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  LeaveFeedbackResponseType = class(AbstractResponseType)
  private
    FFeedbackID: string;
    FFeedbackID_Specified: boolean;
    procedure SetFeedbackID(Index: Integer; const Astring: string);
    function  FeedbackID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FeedbackID: string  Index (IS_OPTN) read FFeedbackID write SetFeedbackID stored FeedbackID_Specified;
  end;



  // ************************************************************************ //
  // XML       : LeaveFeedbackResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  LeaveFeedbackResponse = class(LeaveFeedbackResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayOfficialTimeResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayOfficialTimeResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayOfficialTimeResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayOfficialTimeResponse = class(GeteBayOfficialTimeResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PlaceOfferResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  PlaceOfferResponseType = class(AbstractResponseType)
  private
    FSellingStatus: SellingStatusType;
    FSellingStatus_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FBestOffer: BestOfferType;
    FBestOffer_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
    function  SellingStatus_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetBestOffer(Index: Integer; const ABestOfferType: BestOfferType);
    function  BestOffer_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingStatus:   SellingStatusType  Index (IS_OPTN) read FSellingStatus write SetSellingStatus stored SellingStatus_Specified;
    property TransactionID:   string             Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property BestOffer:       BestOfferType      Index (IS_OPTN) read FBestOffer write SetBestOffer stored BestOffer_Specified;
    property OrderLineItemID: string             Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : PlaceOfferResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  PlaceOfferResponse = class(PlaceOfferResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MoveSellingManagerInventoryFolderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  MoveSellingManagerInventoryFolderResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : MoveSellingManagerInventoryFolderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  MoveSellingManagerInventoryFolderResponse = class(MoveSellingManagerInventoryFolderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetTokenStatusResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetTokenStatusResponseType = class(AbstractResponseType)
  private
    FTokenStatus: TokenStatusType;
    FTokenStatus_Specified: boolean;
    procedure SetTokenStatus(Index: Integer; const ATokenStatusType: TokenStatusType);
    function  TokenStatus_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TokenStatus: TokenStatusType  Index (IS_OPTN) read FTokenStatus write SetTokenStatus stored TokenStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetTokenStatusResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetTokenStatusResponse = class(GetTokenStatusResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetTaxTableResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetTaxTableResponseType = class(AbstractResponseType)
  private
    FLastUpdateTime: TXSDateTime;
    FLastUpdateTime_Specified: boolean;
    FTaxTable: TaxTableType;
    FTaxTable_Specified: boolean;
    procedure SetLastUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastUpdateTime_Specified(Index: Integer): boolean;
    procedure SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
    function  TaxTable_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property LastUpdateTime: TXSDateTime   Index (IS_OPTN) read FLastUpdateTime write SetLastUpdateTime stored LastUpdateTime_Specified;
    property TaxTable:       TaxTableType  Index (IS_OPTN) read FTaxTable write SetTaxTable stored TaxTable_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetTaxTableResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetTaxTableResponse = class(GetTaxTableResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserResponseType = class(AbstractResponseType)
  private
    FUser: UserType;
    FUser_Specified: boolean;
    procedure SetUser(Index: Integer; const AUserType: UserType);
    function  User_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property User: UserType  Index (IS_OPTN) read FUser write SetUser stored User_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserResponse = class(GetUserResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserContactDetailsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserContactDetailsResponseType = class(AbstractResponseType)
  private
    FUserID: string;
    FUserID_Specified: boolean;
    FContactAddress: AddressType;
    FContactAddress_Specified: boolean;
    FRegistrationDate: TXSDateTime;
    FRegistrationDate_Specified: boolean;
    procedure SetUserID(Index: Integer; const Astring: string);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetContactAddress(Index: Integer; const AAddressType: AddressType);
    function  ContactAddress_Specified(Index: Integer): boolean;
    procedure SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RegistrationDate_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID:           string       Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property ContactAddress:   AddressType  Index (IS_OPTN) read FContactAddress write SetContactAddress stored ContactAddress_Specified;
    property RegistrationDate: TXSDateTime  Index (IS_OPTN) read FRegistrationDate write SetRegistrationDate stored RegistrationDate_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserContactDetailsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserContactDetailsResponse = class(GetUserContactDetailsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreOptionsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreOptionsResponseType = class(AbstractResponseType)
  private
    FBasicThemeArray: StoreThemeArrayType;
    FBasicThemeArray_Specified: boolean;
    FAdvancedThemeArray: StoreThemeArrayType;
    FAdvancedThemeArray_Specified: boolean;
    FLogoArray: StoreLogoArrayType;
    FLogoArray_Specified: boolean;
    FSubscriptionArray: StoreSubscriptionArrayType;
    FSubscriptionArray_Specified: boolean;
    FMaxCategories: Integer;
    FMaxCategories_Specified: boolean;
    FMaxCategoryLevels: Integer;
    FMaxCategoryLevels_Specified: boolean;
    procedure SetBasicThemeArray(Index: Integer; const AStoreThemeArrayType: StoreThemeArrayType);
    function  BasicThemeArray_Specified(Index: Integer): boolean;
    procedure SetAdvancedThemeArray(Index: Integer; const AStoreThemeArrayType: StoreThemeArrayType);
    function  AdvancedThemeArray_Specified(Index: Integer): boolean;
    procedure SetLogoArray(Index: Integer; const AStoreLogoArrayType: StoreLogoArrayType);
    function  LogoArray_Specified(Index: Integer): boolean;
    procedure SetSubscriptionArray(Index: Integer; const AStoreSubscriptionArrayType: StoreSubscriptionArrayType);
    function  SubscriptionArray_Specified(Index: Integer): boolean;
    procedure SetMaxCategories(Index: Integer; const AInteger: Integer);
    function  MaxCategories_Specified(Index: Integer): boolean;
    procedure SetMaxCategoryLevels(Index: Integer; const AInteger: Integer);
    function  MaxCategoryLevels_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BasicThemeArray:    StoreThemeArrayType         Index (IS_OPTN) read FBasicThemeArray write SetBasicThemeArray stored BasicThemeArray_Specified;
    property AdvancedThemeArray: StoreThemeArrayType         Index (IS_OPTN) read FAdvancedThemeArray write SetAdvancedThemeArray stored AdvancedThemeArray_Specified;
    property LogoArray:          StoreLogoArrayType          Index (IS_OPTN) read FLogoArray write SetLogoArray stored LogoArray_Specified;
    property SubscriptionArray:  StoreSubscriptionArrayType  Index (IS_OPTN) read FSubscriptionArray write SetSubscriptionArray stored SubscriptionArray_Specified;
    property MaxCategories:      Integer                     Index (IS_OPTN) read FMaxCategories write SetMaxCategories stored MaxCategories_Specified;
    property MaxCategoryLevels:  Integer                     Index (IS_OPTN) read FMaxCategoryLevels write SetMaxCategoryLevels stored MaxCategoryLevels_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreOptionsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreOptionsResponse = class(GetStoreOptionsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSuggestedCategoriesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSuggestedCategoriesResponseType = class(AbstractResponseType)
  private
    FSuggestedCategoryArray: SuggestedCategoryArrayType;
    FSuggestedCategoryArray_Specified: boolean;
    FCategoryCount: Integer;
    FCategoryCount_Specified: boolean;
    procedure SetSuggestedCategoryArray(Index: Integer; const ASuggestedCategoryArrayType: SuggestedCategoryArrayType);
    function  SuggestedCategoryArray_Specified(Index: Integer): boolean;
    procedure SetCategoryCount(Index: Integer; const AInteger: Integer);
    function  CategoryCount_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SuggestedCategoryArray: SuggestedCategoryArrayType  Index (IS_OPTN) read FSuggestedCategoryArray write SetSuggestedCategoryArray stored SuggestedCategoryArray_Specified;
    property CategoryCount:          Integer                     Index (IS_OPTN) read FCategoryCount write SetCategoryCount stored CategoryCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSuggestedCategoriesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSuggestedCategoriesResponse = class(GetSuggestedCategoriesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStorePreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStorePreferencesResponseType = class(AbstractResponseType)
  private
    FStorePreferences: StorePreferencesType;
    FStorePreferences_Specified: boolean;
    procedure SetStorePreferences(Index: Integer; const AStorePreferencesType: StorePreferencesType);
    function  StorePreferences_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StorePreferences: StorePreferencesType  Index (IS_OPTN) read FStorePreferences write SetStorePreferences stored StorePreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStorePreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStorePreferencesResponse = class(GetStorePreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetVeROReasonCodeDetailsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReasonCodeDetailsResponseType = class(AbstractResponseType)
  private
    FVeROReasonCodeDetails: VeROReasonCodeDetailsType;
    FVeROReasonCodeDetails_Specified: boolean;
    procedure SetVeROReasonCodeDetails(Index: Integer; const AVeROReasonCodeDetailsType: VeROReasonCodeDetailsType);
    function  VeROReasonCodeDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property VeROReasonCodeDetails: VeROReasonCodeDetailsType  Index (IS_OPTN) read FVeROReasonCodeDetails write SetVeROReasonCodeDetails stored VeROReasonCodeDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetVeROReasonCodeDetailsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReasonCodeDetailsResponse = class(GetVeROReasonCodeDetailsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetVeROReportStatusResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReportStatusResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FPaginationResult_Specified: boolean;
    FHasMoreItems: Boolean;
    FHasMoreItems_Specified: boolean;
    FItemsPerPage: Integer;
    FItemsPerPage_Specified: boolean;
    FPageNumber: Integer;
    FPageNumber_Specified: boolean;
    FVeROReportPacketID: Int64;
    FVeROReportPacketID_Specified: boolean;
    FVeROReportPacketStatus: VeROReportPacketStatusCodeType;
    FVeROReportPacketStatus_Specified: boolean;
    FReportedItemDetails: VeROReportedItemDetailsType;
    FReportedItemDetails_Specified: boolean;
    procedure SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
    function  PaginationResult_Specified(Index: Integer): boolean;
    procedure SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
    function  HasMoreItems_Specified(Index: Integer): boolean;
    procedure SetItemsPerPage(Index: Integer; const AInteger: Integer);
    function  ItemsPerPage_Specified(Index: Integer): boolean;
    procedure SetPageNumber(Index: Integer; const AInteger: Integer);
    function  PageNumber_Specified(Index: Integer): boolean;
    procedure SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
    function  VeROReportPacketID_Specified(Index: Integer): boolean;
    procedure SetVeROReportPacketStatus(Index: Integer; const AVeROReportPacketStatusCodeType: VeROReportPacketStatusCodeType);
    function  VeROReportPacketStatus_Specified(Index: Integer): boolean;
    procedure SetReportedItemDetails(Index: Integer; const AVeROReportedItemDetailsType: VeROReportedItemDetailsType);
    function  ReportedItemDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult:       PaginationResultType            Index (IS_OPTN) read FPaginationResult write SetPaginationResult stored PaginationResult_Specified;
    property HasMoreItems:           Boolean                         Index (IS_OPTN) read FHasMoreItems write SetHasMoreItems stored HasMoreItems_Specified;
    property ItemsPerPage:           Integer                         Index (IS_OPTN) read FItemsPerPage write SetItemsPerPage stored ItemsPerPage_Specified;
    property PageNumber:             Integer                         Index (IS_OPTN) read FPageNumber write SetPageNumber stored PageNumber_Specified;
    property VeROReportPacketID:     Int64                           Index (IS_OPTN) read FVeROReportPacketID write SetVeROReportPacketID stored VeROReportPacketID_Specified;
    property VeROReportPacketStatus: VeROReportPacketStatusCodeType  Index (IS_OPTN) read FVeROReportPacketStatus write SetVeROReportPacketStatus stored VeROReportPacketStatus_Specified;
    property ReportedItemDetails:    VeROReportedItemDetailsType     Index (IS_OPTN) read FReportedItemDetails write SetReportedItemDetails stored ReportedItemDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetVeROReportStatusResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReportStatusResponse = class(GetVeROReportStatusResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserPreferencesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserPreferencesResponseType = class(AbstractResponseType)
  private
    FBidderNoticePreferences: BidderNoticePreferencesType;
    FBidderNoticePreferences_Specified: boolean;
    FCombinedPaymentPreferences: CombinedPaymentPreferencesType;
    FCombinedPaymentPreferences_Specified: boolean;
    FCrossPromotionPreferences: CrossPromotionPreferencesType;
    FCrossPromotionPreferences_Specified: boolean;
    FSellerPaymentPreferences: SellerPaymentPreferencesType;
    FSellerPaymentPreferences_Specified: boolean;
    FSellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType;
    FSellerFavoriteItemPreferences_Specified: boolean;
    FEndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType;
    FEndOfAuctionEmailPreferences_Specified: boolean;
    FEmailShipmentTrackingNumberPreference: Boolean;
    FEmailShipmentTrackingNumberPreference_Specified: boolean;
    FRequiredShipPhoneNumberPreference: Boolean;
    FRequiredShipPhoneNumberPreference_Specified: boolean;
    FProStoresPreference: ProStoresCheckoutPreferenceType;
    FProStoresPreference_Specified: boolean;
    FUnpaidItemAssistancePreferences: UnpaidItemAssistancePreferencesType;
    FUnpaidItemAssistancePreferences_Specified: boolean;
    FSellerExcludeShipToLocationPreferences: SellerExcludeShipToLocationPreferencesType;
    FSellerExcludeShipToLocationPreferences_Specified: boolean;
    FPurchaseReminderEmailPreferences: PurchaseReminderEmailPreferencesType;
    FPurchaseReminderEmailPreferences_Specified: boolean;
    FSellerThirdPartyCheckoutDisabled: Boolean;
    FSellerThirdPartyCheckoutDisabled_Specified: boolean;
    FSellerProfilePreferences: SellerProfilePreferencesType;
    FSellerProfilePreferences_Specified: boolean;
    FSellerReturnPreferences: SellerReturnPreferencesType;
    FSellerReturnPreferences_Specified: boolean;
    FOfferGlobalShippingProgramPreference: Boolean;
    FOfferGlobalShippingProgramPreference_Specified: boolean;
    FDispatchCutoffTimePreference: DispatchCutoffTimePreferencesType;
    FDispatchCutoffTimePreference_Specified: boolean;
    FGlobalShippingProgramListingPreference: Boolean;
    FGlobalShippingProgramListingPreference_Specified: boolean;
    FOverrideGSPServiceWithIntlServicePreference: Boolean;
    FOverrideGSPServiceWithIntlServicePreference_Specified: boolean;
    FPickupDropoffSellerPreference: Boolean;
    FPickupDropoffSellerPreference_Specified: boolean;
    FOutOfStockControlPreference: Boolean;
    FOutOfStockControlPreference_Specified: boolean;
    FeBayPLUSPreference: Array_Of_eBayPLUSPreferenceType;
    FeBayPLUSPreference_Specified: boolean;
    procedure SetBidderNoticePreferences(Index: Integer; const ABidderNoticePreferencesType: BidderNoticePreferencesType);
    function  BidderNoticePreferences_Specified(Index: Integer): boolean;
    procedure SetCombinedPaymentPreferences(Index: Integer; const ACombinedPaymentPreferencesType: CombinedPaymentPreferencesType);
    function  CombinedPaymentPreferences_Specified(Index: Integer): boolean;
    procedure SetCrossPromotionPreferences(Index: Integer; const ACrossPromotionPreferencesType: CrossPromotionPreferencesType);
    function  CrossPromotionPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentPreferences(Index: Integer; const ASellerPaymentPreferencesType: SellerPaymentPreferencesType);
    function  SellerPaymentPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerFavoriteItemPreferences(Index: Integer; const ASellerFavoriteItemPreferencesType: SellerFavoriteItemPreferencesType);
    function  SellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
    procedure SetEndOfAuctionEmailPreferences(Index: Integer; const AEndOfAuctionEmailPreferencesType: EndOfAuctionEmailPreferencesType);
    function  EndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  EmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
    procedure SetRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  RequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
    procedure SetProStoresPreference(Index: Integer; const AProStoresCheckoutPreferenceType: ProStoresCheckoutPreferenceType);
    function  ProStoresPreference_Specified(Index: Integer): boolean;
    procedure SetUnpaidItemAssistancePreferences(Index: Integer; const AUnpaidItemAssistancePreferencesType: UnpaidItemAssistancePreferencesType);
    function  UnpaidItemAssistancePreferences_Specified(Index: Integer): boolean;
    procedure SetSellerExcludeShipToLocationPreferences(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  SellerExcludeShipToLocationPreferences_Specified(Index: Integer): boolean;
    procedure SetPurchaseReminderEmailPreferences(Index: Integer; const APurchaseReminderEmailPreferencesType: PurchaseReminderEmailPreferencesType);
    function  PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerThirdPartyCheckoutDisabled(Index: Integer; const ABoolean: Boolean);
    function  SellerThirdPartyCheckoutDisabled_Specified(Index: Integer): boolean;
    procedure SetSellerProfilePreferences(Index: Integer; const ASellerProfilePreferencesType: SellerProfilePreferencesType);
    function  SellerProfilePreferences_Specified(Index: Integer): boolean;
    procedure SetSellerReturnPreferences(Index: Integer; const ASellerReturnPreferencesType: SellerReturnPreferencesType);
    function  SellerReturnPreferences_Specified(Index: Integer): boolean;
    procedure SetOfferGlobalShippingProgramPreference(Index: Integer; const ABoolean: Boolean);
    function  OfferGlobalShippingProgramPreference_Specified(Index: Integer): boolean;
    procedure SetDispatchCutoffTimePreference(Index: Integer; const ADispatchCutoffTimePreferencesType: DispatchCutoffTimePreferencesType);
    function  DispatchCutoffTimePreference_Specified(Index: Integer): boolean;
    procedure SetGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
    function  GlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
    procedure SetOverrideGSPServiceWithIntlServicePreference(Index: Integer; const ABoolean: Boolean);
    function  OverrideGSPServiceWithIntlServicePreference_Specified(Index: Integer): boolean;
    procedure SetPickupDropoffSellerPreference(Index: Integer; const ABoolean: Boolean);
    function  PickupDropoffSellerPreference_Specified(Index: Integer): boolean;
    procedure SetOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
    function  OutOfStockControlPreference_Specified(Index: Integer): boolean;
    procedure SeteBayPLUSPreference(Index: Integer; const AArray_Of_eBayPLUSPreferenceType: Array_Of_eBayPLUSPreferenceType);
    function  eBayPLUSPreference_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderNoticePreferences:                     BidderNoticePreferencesType                 Index (IS_OPTN) read FBidderNoticePreferences write SetBidderNoticePreferences stored BidderNoticePreferences_Specified;
    property CombinedPaymentPreferences:                  CombinedPaymentPreferencesType              Index (IS_OPTN) read FCombinedPaymentPreferences write SetCombinedPaymentPreferences stored CombinedPaymentPreferences_Specified;
    property CrossPromotionPreferences:                   CrossPromotionPreferencesType               Index (IS_OPTN) read FCrossPromotionPreferences write SetCrossPromotionPreferences stored CrossPromotionPreferences_Specified;
    property SellerPaymentPreferences:                    SellerPaymentPreferencesType                Index (IS_OPTN) read FSellerPaymentPreferences write SetSellerPaymentPreferences stored SellerPaymentPreferences_Specified;
    property SellerFavoriteItemPreferences:               SellerFavoriteItemPreferencesType           Index (IS_OPTN) read FSellerFavoriteItemPreferences write SetSellerFavoriteItemPreferences stored SellerFavoriteItemPreferences_Specified;
    property EndOfAuctionEmailPreferences:                EndOfAuctionEmailPreferencesType            Index (IS_OPTN) read FEndOfAuctionEmailPreferences write SetEndOfAuctionEmailPreferences stored EndOfAuctionEmailPreferences_Specified;
    property EmailShipmentTrackingNumberPreference:       Boolean                                     Index (IS_OPTN) read FEmailShipmentTrackingNumberPreference write SetEmailShipmentTrackingNumberPreference stored EmailShipmentTrackingNumberPreference_Specified;
    property RequiredShipPhoneNumberPreference:           Boolean                                     Index (IS_OPTN) read FRequiredShipPhoneNumberPreference write SetRequiredShipPhoneNumberPreference stored RequiredShipPhoneNumberPreference_Specified;
    property ProStoresPreference:                         ProStoresCheckoutPreferenceType             Index (IS_OPTN) read FProStoresPreference write SetProStoresPreference stored ProStoresPreference_Specified;
    property UnpaidItemAssistancePreferences:             UnpaidItemAssistancePreferencesType         Index (IS_OPTN) read FUnpaidItemAssistancePreferences write SetUnpaidItemAssistancePreferences stored UnpaidItemAssistancePreferences_Specified;
    property SellerExcludeShipToLocationPreferences:      SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN) read FSellerExcludeShipToLocationPreferences write SetSellerExcludeShipToLocationPreferences stored SellerExcludeShipToLocationPreferences_Specified;
    property PurchaseReminderEmailPreferences:            PurchaseReminderEmailPreferencesType        Index (IS_OPTN) read FPurchaseReminderEmailPreferences write SetPurchaseReminderEmailPreferences stored PurchaseReminderEmailPreferences_Specified;
    property SellerThirdPartyCheckoutDisabled:            Boolean                                     Index (IS_OPTN) read FSellerThirdPartyCheckoutDisabled write SetSellerThirdPartyCheckoutDisabled stored SellerThirdPartyCheckoutDisabled_Specified;
    property SellerProfilePreferences:                    SellerProfilePreferencesType                Index (IS_OPTN) read FSellerProfilePreferences write SetSellerProfilePreferences stored SellerProfilePreferences_Specified;
    property SellerReturnPreferences:                     SellerReturnPreferencesType                 Index (IS_OPTN) read FSellerReturnPreferences write SetSellerReturnPreferences stored SellerReturnPreferences_Specified;
    property OfferGlobalShippingProgramPreference:        Boolean                                     Index (IS_OPTN) read FOfferGlobalShippingProgramPreference write SetOfferGlobalShippingProgramPreference stored OfferGlobalShippingProgramPreference_Specified;
    property DispatchCutoffTimePreference:                DispatchCutoffTimePreferencesType           Index (IS_OPTN) read FDispatchCutoffTimePreference write SetDispatchCutoffTimePreference stored DispatchCutoffTimePreference_Specified;
    property GlobalShippingProgramListingPreference:      Boolean                                     Index (IS_OPTN) read FGlobalShippingProgramListingPreference write SetGlobalShippingProgramListingPreference stored GlobalShippingProgramListingPreference_Specified;
    property OverrideGSPServiceWithIntlServicePreference: Boolean                                     Index (IS_OPTN) read FOverrideGSPServiceWithIntlServicePreference write SetOverrideGSPServiceWithIntlServicePreference stored OverrideGSPServiceWithIntlServicePreference_Specified;
    property PickupDropoffSellerPreference:               Boolean                                     Index (IS_OPTN) read FPickupDropoffSellerPreference write SetPickupDropoffSellerPreference stored PickupDropoffSellerPreference_Specified;
    property OutOfStockControlPreference:                 Boolean                                     Index (IS_OPTN) read FOutOfStockControlPreference write SetOutOfStockControlPreference stored OutOfStockControlPreference_Specified;
    property eBayPLUSPreference:                          Array_Of_eBayPLUSPreferenceType             Index (IS_OPTN or IS_UNBD) read FeBayPLUSPreference write SeteBayPLUSPreference stored eBayPLUSPreference_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserPreferencesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserPreferencesResponse = class(GetUserPreferencesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CompleteSaleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  CompleteSaleResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : CompleteSaleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  CompleteSaleResponse = class(CompleteSaleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConfirmIdentityResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ConfirmIdentityResponseType = class(AbstractResponseType)
  private
    FUserID: string;
    FUserID_Specified: boolean;
    procedure SetUserID(Index: Integer; const Astring: string);
    function  UserID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property UserID: string  Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConfirmIdentityResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ConfirmIdentityResponse = class(ConfirmIdentityResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteMyMessagesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteMyMessagesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteMyMessagesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteMyMessagesResponse = class(DeleteMyMessagesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerInventoryFolderResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerInventoryFolderResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerInventoryFolderResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerInventoryFolderResponse = class(DeleteSellingManagerInventoryFolderResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddToItemDescriptionResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddToItemDescriptionResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : AddToItemDescriptionResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddToItemDescriptionResponse = class(AddToItemDescriptionResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerProductResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerProductResponseType = class(AbstractResponseType)
  private
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerProductResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerProductResponse = class(AddSellingManagerProductResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerTemplateResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerTemplateResponseType = class(AbstractResponseType)
  private
    FCategoryID: Int64;
    FCategoryID_Specified: boolean;
    FCategory2ID: Int64;
    FCategory2ID_Specified: boolean;
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FSaleTemplateGroupID: Int64;
    FSaleTemplateGroupID_Specified: boolean;
    FSaleTemplateName: string;
    FSaleTemplateName_Specified: boolean;
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const AInt64: Int64);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const AInt64: Int64);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateGroupID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateGroupID_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateName(Index: Integer; const Astring: string);
    function  SaleTemplateName_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID:                   Int64                             Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:                  Int64                             Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property SaleTemplateID:               Int64                             Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property SaleTemplateGroupID:          Int64                             Index (IS_OPTN) read FSaleTemplateGroupID write SetSaleTemplateGroupID stored SaleTemplateGroupID_Specified;
    property SaleTemplateName:             string                            Index (IS_OPTN) read FSaleTemplateName write SetSaleTemplateName stored SaleTemplateName_Specified;
    property SellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property Fees:                         FeesType                          Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerTemplateResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerTemplateResponse = class(AddSellingManagerTemplateResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddTransactionConfirmationItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddTransactionConfirmationItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:    ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime: TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:   TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddTransactionConfirmationItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddTransactionConfirmationItemResponse = class(AddTransactionConfirmationItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddToWatchListResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddToWatchListResponseType = class(AbstractResponseType)
  private
    FWatchListCount: Integer;
    FWatchListCount_Specified: boolean;
    FWatchListMaximum: Integer;
    FWatchListMaximum_Specified: boolean;
    procedure SetWatchListCount(Index: Integer; const AInteger: Integer);
    function  WatchListCount_Specified(Index: Integer): boolean;
    procedure SetWatchListMaximum(Index: Integer; const AInteger: Integer);
    function  WatchListMaximum_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property WatchListCount:   Integer  Index (IS_OPTN) read FWatchListCount write SetWatchListCount stored WatchListCount_Specified;
    property WatchListMaximum: Integer  Index (IS_OPTN) read FWatchListMaximum write SetWatchListMaximum stored WatchListMaximum_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddToWatchListResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddToWatchListResponse = class(AddToWatchListResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemResponseType = class(AbstractResponseType)
  private
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EndTime: TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemResponse = class(EndItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndFixedPriceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndFixedPriceItemResponseType = class(AbstractResponseType)
  private
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EndTime: TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property SKU:     SKUType      Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndFixedPriceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndFixedPriceItemResponse = class(EndFixedPriceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndItemsResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemsResponseType = class(AbstractResponseType)
  private
    FEndItemResponseContainer: Array_Of_EndItemResponseContainerType;
    FEndItemResponseContainer_Specified: boolean;
    procedure SetEndItemResponseContainer(Index: Integer; const AArray_Of_EndItemResponseContainerType: Array_Of_EndItemResponseContainerType);
    function  EndItemResponseContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EndItemResponseContainer: Array_Of_EndItemResponseContainerType  Index (IS_OPTN or IS_UNBD) read FEndItemResponseContainer write SetEndItemResponseContainer stored EndItemResponseContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndItemsResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemsResponse = class(EndItemsResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExtendSiteHostedPicturesResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ExtendSiteHostedPicturesResponseType = class(AbstractResponseType)
  private
    FPictureURL: Array_Of_anyURI;
    FPictureURL_Specified: boolean;
    procedure SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  PictureURL_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PictureURL: Array_Of_anyURI  Index (IS_OPTN or IS_UNBD) read FPictureURL write SetPictureURL stored PictureURL_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExtendSiteHostedPicturesResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ExtendSiteHostedPicturesResponse = class(ExtendSiteHostedPicturesResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FetchTokenResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  FetchTokenResponseType = class(AbstractResponseType)
  private
    FeBayAuthToken: string;
    FeBayAuthToken_Specified: boolean;
    FHardExpirationTime: TXSDateTime;
    FHardExpirationTime_Specified: boolean;
    FRESTToken: string;
    FRESTToken_Specified: boolean;
    procedure SeteBayAuthToken(Index: Integer; const Astring: string);
    function  eBayAuthToken_Specified(Index: Integer): boolean;
    procedure SetHardExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  HardExpirationTime_Specified(Index: Integer): boolean;
    procedure SetRESTToken(Index: Integer; const Astring: string);
    function  RESTToken_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property eBayAuthToken:      string       Index (IS_OPTN) read FeBayAuthToken write SeteBayAuthToken stored eBayAuthToken_Specified;
    property HardExpirationTime: TXSDateTime  Index (IS_OPTN) read FHardExpirationTime write SetHardExpirationTime stored HardExpirationTime_Specified;
    property RESTToken:          string       Index (IS_OPTN) read FRESTToken write SetRESTToken stored RESTToken_Specified;
  end;



  // ************************************************************************ //
  // XML       : FetchTokenResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  FetchTokenResponse = class(FetchTokenResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerProductResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerProductResponseType = class(AbstractResponseType)
  private
    FDeletedSellingManagerProductDetails: SellingManagerProductDetailsType;
    FDeletedSellingManagerProductDetails_Specified: boolean;
    procedure SetDeletedSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  DeletedSellingManagerProductDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DeletedSellingManagerProductDetails: SellingManagerProductDetailsType  Index (IS_OPTN) read FDeletedSellingManagerProductDetails write SetDeletedSellingManagerProductDetails stored DeletedSellingManagerProductDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerProductResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerProductResponse = class(DeleteSellingManagerProductResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerItemAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerItemAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerItemAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerItemAutomationRuleResponse = class(DeleteSellingManagerItemAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DisableUnpaidItemAssistanceResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DisableUnpaidItemAssistanceResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : DisableUnpaidItemAssistanceResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DisableUnpaidItemAssistanceResponse = class(DisableUnpaidItemAssistanceResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateResponseType = class(AbstractResponseType)
  private
    FDeletedSaleTemplateID: string;
    FDeletedSaleTemplateID_Specified: boolean;
    FDeletedSaleTemplateName: string;
    FDeletedSaleTemplateName_Specified: boolean;
    procedure SetDeletedSaleTemplateID(Index: Integer; const Astring: string);
    function  DeletedSaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetDeletedSaleTemplateName(Index: Integer; const Astring: string);
    function  DeletedSaleTemplateName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DeletedSaleTemplateID:   string  Index (IS_OPTN) read FDeletedSaleTemplateID write SetDeletedSaleTemplateID stored DeletedSaleTemplateID_Specified;
    property DeletedSaleTemplateName: string  Index (IS_OPTN) read FDeletedSaleTemplateName write SetDeletedSaleTemplateName stored DeletedSaleTemplateName_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateResponse = class(DeleteSellingManagerTemplateResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateAutomationRuleResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateAutomationRuleResponseType = class(AbstractResponseType)
  private
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
    property Fees:                           FeesType                                 Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateAutomationRuleResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateAutomationRuleResponse = class(DeleteSellingManagerTemplateAutomationRuleResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddFixedPriceItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddFixedPriceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SKU:                    SKUType                          Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddFixedPriceItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddFixedPriceItemResponse = class(AddFixedPriceItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemFromSellingManagerTemplateResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemFromSellingManagerTemplateResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:      ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime:   TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:     TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:        FeesType     Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:  string       Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID: string       Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemFromSellingManagerTemplateResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemFromSellingManagerTemplateResponse = class(AddItemFromSellingManagerTemplateResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FFees: FeesType;
    FFees_Specified: boolean;
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FCategory2ID: string;
    FCategory2ID_Specified: boolean;
    FDiscountReason: Array_Of_DiscountReasonCodeType;
    FDiscountReason_Specified: boolean;
    FProductSuggestions: ProductSuggestionsType;
    FProductSuggestions_Specified: boolean;
    FListingRecommendations: ListingRecommendationsType;
    FListingRecommendations_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetFees(Index: Integer; const AFeesType: FeesType);
    function  Fees_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetCategory2ID(Index: Integer; const Astring: string);
    function  Category2ID_Specified(Index: Integer): boolean;
    procedure SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
    function  DiscountReason_Specified(Index: Integer): boolean;
    procedure SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
    function  ProductSuggestions_Specified(Index: Integer): boolean;
    procedure SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
    function  ListingRecommendations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property StartTime:              TXSDateTime                      Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                TXSDateTime                      Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property Fees:                   FeesType                         Index (IS_OPTN) read FFees write SetFees stored Fees_Specified;
    property CategoryID:             string                           Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property Category2ID:            string                           Index (IS_OPTN) read FCategory2ID write SetCategory2ID stored Category2ID_Specified;
    property DiscountReason:         Array_Of_DiscountReasonCodeType  Index (IS_OPTN or IS_UNBD) read FDiscountReason write SetDiscountReason stored DiscountReason_Specified;
    property ProductSuggestions:     ProductSuggestionsType           Index (IS_OPTN) read FProductSuggestions write SetProductSuggestions stored ProductSuggestions_Specified;
    property ListingRecommendations: ListingRecommendationsType       Index (IS_OPTN) read FListingRecommendations write SetListingRecommendations stored ListingRecommendations_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemResponse = class(AddItemResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponseResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponseResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponseResponse, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponseResponse = class(AddDisputeResponseResponseType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ErrorType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ErrorType = class(TRemotable)
  private
    FShortMessage: string;
    FShortMessage_Specified: boolean;
    FLongMessage: string;
    FLongMessage_Specified: boolean;
    FErrorCode: string;
    FErrorCode_Specified: boolean;
    FUserDisplayHint: Boolean;
    FUserDisplayHint_Specified: boolean;
    FSeverityCode: SeverityCodeType;
    FSeverityCode_Specified: boolean;
    FErrorParameters: Array_Of_ErrorParameterType;
    FErrorParameters_Specified: boolean;
    FErrorClassification: ErrorClassificationCodeType;
    FErrorClassification_Specified: boolean;
    procedure SetShortMessage(Index: Integer; const Astring: string);
    function  ShortMessage_Specified(Index: Integer): boolean;
    procedure SetLongMessage(Index: Integer; const Astring: string);
    function  LongMessage_Specified(Index: Integer): boolean;
    procedure SetErrorCode(Index: Integer; const Astring: string);
    function  ErrorCode_Specified(Index: Integer): boolean;
    procedure SetUserDisplayHint(Index: Integer; const ABoolean: Boolean);
    function  UserDisplayHint_Specified(Index: Integer): boolean;
    procedure SetSeverityCode(Index: Integer; const ASeverityCodeType: SeverityCodeType);
    function  SeverityCode_Specified(Index: Integer): boolean;
    procedure SetErrorParameters(Index: Integer; const AArray_Of_ErrorParameterType: Array_Of_ErrorParameterType);
    function  ErrorParameters_Specified(Index: Integer): boolean;
    procedure SetErrorClassification(Index: Integer; const AErrorClassificationCodeType: ErrorClassificationCodeType);
    function  ErrorClassification_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ShortMessage:        string                       Index (IS_OPTN) read FShortMessage write SetShortMessage stored ShortMessage_Specified;
    property LongMessage:         string                       Index (IS_OPTN) read FLongMessage write SetLongMessage stored LongMessage_Specified;
    property ErrorCode:           string                       Index (IS_OPTN) read FErrorCode write SetErrorCode stored ErrorCode_Specified;
    property UserDisplayHint:     Boolean                      Index (IS_OPTN) read FUserDisplayHint write SetUserDisplayHint stored UserDisplayHint_Specified;
    property SeverityCode:        SeverityCodeType             Index (IS_OPTN) read FSeverityCode write SetSeverityCode stored SeverityCode_Specified;
    property ErrorParameters:     Array_Of_ErrorParameterType  Index (IS_OPTN or IS_UNBD) read FErrorParameters write SetErrorParameters stored ErrorParameters_Specified;
    property ErrorClassification: ErrorClassificationCodeType  Index (IS_OPTN) read FErrorClassification write SetErrorClassification stored ErrorClassification_Specified;
  end;

  UUIDType        =  type string;      { "urn:ebay:apis:eBLBaseComponents"[GblSmpl] }


  // ************************************************************************ //
  // XML       : DuplicateInvocationDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DuplicateInvocationDetailsType = class(TRemotable)
  private
    FDuplicateInvocationID: UUIDType;
    FDuplicateInvocationID_Specified: boolean;
    FStatus: InvocationStatusType;
    FStatus_Specified: boolean;
    FInvocationTrackingID: string;
    FInvocationTrackingID_Specified: boolean;
    procedure SetDuplicateInvocationID(Index: Integer; const AUUIDType: UUIDType);
    function  DuplicateInvocationID_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AInvocationStatusType: InvocationStatusType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetInvocationTrackingID(Index: Integer; const Astring: string);
    function  InvocationTrackingID_Specified(Index: Integer): boolean;
  published
    property DuplicateInvocationID: UUIDType              Index (IS_OPTN) read FDuplicateInvocationID write SetDuplicateInvocationID stored DuplicateInvocationID_Specified;
    property Status:                InvocationStatusType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property InvocationTrackingID:  string                Index (IS_OPTN) read FInvocationTrackingID write SetInvocationTrackingID stored InvocationTrackingID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AbstractRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AbstractRequestType = class(TRemotable)
  private
    FDetailLevel: Array_Of_DetailLevelCodeType;
    FDetailLevel_Specified: boolean;
    FErrorLanguage: string;
    FErrorLanguage_Specified: boolean;
    FMessageID: string;
    FMessageID_Specified: boolean;
    FVersion: string;
    FVersion_Specified: boolean;
    FEndUserIP: string;
    FEndUserIP_Specified: boolean;
    FErrorHandling: ErrorHandlingCodeType;
    FErrorHandling_Specified: boolean;
    FInvocationID: UUIDType;
    FInvocationID_Specified: boolean;
    FOutputSelector: SellerExcludeShipToLocationPreferencesType;
    FOutputSelector_Specified: boolean;
    FWarningLevel: WarningLevelCodeType;
    FWarningLevel_Specified: boolean;
    FBotBlock: BotBlockRequestType;
    FBotBlock_Specified: boolean;
    procedure SetDetailLevel(Index: Integer; const AArray_Of_DetailLevelCodeType: Array_Of_DetailLevelCodeType);
    function  DetailLevel_Specified(Index: Integer): boolean;
    procedure SetErrorLanguage(Index: Integer; const Astring: string);
    function  ErrorLanguage_Specified(Index: Integer): boolean;
    procedure SetMessageID(Index: Integer; const Astring: string);
    function  MessageID_Specified(Index: Integer): boolean;
    procedure SetVersion(Index: Integer; const Astring: string);
    function  Version_Specified(Index: Integer): boolean;
    procedure SetEndUserIP(Index: Integer; const Astring: string);
    function  EndUserIP_Specified(Index: Integer): boolean;
    procedure SetErrorHandling(Index: Integer; const AErrorHandlingCodeType: ErrorHandlingCodeType);
    function  ErrorHandling_Specified(Index: Integer): boolean;
    procedure SetInvocationID(Index: Integer; const AUUIDType: UUIDType);
    function  InvocationID_Specified(Index: Integer): boolean;
    procedure SetOutputSelector(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  OutputSelector_Specified(Index: Integer): boolean;
    procedure SetWarningLevel(Index: Integer; const AWarningLevelCodeType: WarningLevelCodeType);
    function  WarningLevel_Specified(Index: Integer): boolean;
    procedure SetBotBlock(Index: Integer; const ABotBlockRequestType: BotBlockRequestType);
    function  BotBlock_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DetailLevel:    Array_Of_DetailLevelCodeType                Index (IS_OPTN or IS_UNBD) read FDetailLevel write SetDetailLevel stored DetailLevel_Specified;
    property ErrorLanguage:  string                                      Index (IS_OPTN) read FErrorLanguage write SetErrorLanguage stored ErrorLanguage_Specified;
    property MessageID:      string                                      Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
    property Version:        string                                      Index (IS_OPTN) read FVersion write SetVersion stored Version_Specified;
    property EndUserIP:      string                                      Index (IS_OPTN) read FEndUserIP write SetEndUserIP stored EndUserIP_Specified;
    property ErrorHandling:  ErrorHandlingCodeType                       Index (IS_OPTN) read FErrorHandling write SetErrorHandling stored ErrorHandling_Specified;
    property InvocationID:   UUIDType                                    Index (IS_OPTN) read FInvocationID write SetInvocationID stored InvocationID_Specified;
    property OutputSelector: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FOutputSelector write SetOutputSelector stored OutputSelector_Specified;
    property WarningLevel:   WarningLevelCodeType                        Index (IS_OPTN) read FWarningLevel write SetWarningLevel stored WarningLevel_Specified;
    property BotBlock:       BotBlockRequestType                         Index (IS_OPTN) read FBotBlock write SetBotBlock stored BotBlock_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerReverseDisputeRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SellerReverseDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    FDisputeResolutionReason: DisputeResolutionReasonCodeType;
    FDisputeResolutionReason_Specified: boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
    procedure SetDisputeResolutionReason(Index: Integer; const ADisputeResolutionReasonCodeType: DisputeResolutionReasonCodeType);
    function  DisputeResolutionReason_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DisputeID:               DisputeIDType                    Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
    property DisputeResolutionReason: DisputeResolutionReasonCodeType  Index (IS_OPTN) read FDisputeResolutionReason write SetDisputeResolutionReason stored DisputeResolutionReason_Specified;
  end;



  // ************************************************************************ //
  // XML       : SellerReverseDisputeRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SellerReverseDisputeRequest = class(SellerReverseDisputeRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SendInvoiceRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SendInvoiceRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FInternationalShippingServiceOptions: Array_Of_InternationalShippingServiceOptionsType;
    FInternationalShippingServiceOptions_Specified: boolean;
    FShippingServiceOptions: Array_Of_ShippingServiceOptionsType;
    FShippingServiceOptions_Specified: boolean;
    FSalesTax: SalesTaxType;
    FSalesTax_Specified: boolean;
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceOption_Specified: boolean;
    FInsuranceFee: AmountType;
    FInsuranceFee_Specified: boolean;
    FPaymentMethods: Array_Of_BuyerPaymentMethodCodeType;
    FPaymentMethods_Specified: boolean;
    FPayPalEmailAddress: string;
    FPayPalEmailAddress_Specified: boolean;
    FCheckoutInstructions: string;
    FCheckoutInstructions_Specified: boolean;
    FEmailCopyToSeller: Boolean;
    FEmailCopyToSeller_Specified: boolean;
    FCODCost: AmountType;
    FCODCost_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    FAdjustmentAmount: AmountType;
    FAdjustmentAmount_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingServiceOptions(Index: Integer; const AArray_Of_InternationalShippingServiceOptionsType: Array_Of_InternationalShippingServiceOptionsType);
    function  InternationalShippingServiceOptions_Specified(Index: Integer): boolean;
    procedure SetShippingServiceOptions(Index: Integer; const AArray_Of_ShippingServiceOptionsType: Array_Of_ShippingServiceOptionsType);
    function  ShippingServiceOptions_Specified(Index: Integer): boolean;
    procedure SetSalesTax(Index: Integer; const ASalesTaxType: SalesTaxType);
    function  SalesTax_Specified(Index: Integer): boolean;
    procedure SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
    function  InsuranceOption_Specified(Index: Integer): boolean;
    procedure SetInsuranceFee(Index: Integer; const AAmountType: AmountType);
    function  InsuranceFee_Specified(Index: Integer): boolean;
    procedure SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
    function  PaymentMethods_Specified(Index: Integer): boolean;
    procedure SetPayPalEmailAddress(Index: Integer; const Astring: string);
    function  PayPalEmailAddress_Specified(Index: Integer): boolean;
    procedure SetCheckoutInstructions(Index: Integer; const Astring: string);
    function  CheckoutInstructions_Specified(Index: Integer): boolean;
    procedure SetEmailCopyToSeller(Index: Integer; const ABoolean: Boolean);
    function  EmailCopyToSeller_Specified(Index: Integer): boolean;
    procedure SetCODCost(Index: Integer; const AAmountType: AmountType);
    function  CODCost_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
    procedure SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  AdjustmentAmount_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                              ItemIDType                                        Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:                       string                                            Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderID:                             OrderIDType                                       Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property InternationalShippingServiceOptions: Array_Of_InternationalShippingServiceOptionsType  Index (IS_OPTN or IS_UNBD) read FInternationalShippingServiceOptions write SetInternationalShippingServiceOptions stored InternationalShippingServiceOptions_Specified;
    property ShippingServiceOptions:              Array_Of_ShippingServiceOptionsType               Index (IS_OPTN or IS_UNBD) read FShippingServiceOptions write SetShippingServiceOptions stored ShippingServiceOptions_Specified;
    property SalesTax:                            SalesTaxType                                      Index (IS_OPTN) read FSalesTax write SetSalesTax stored SalesTax_Specified;
    property InsuranceOption:                     InsuranceOptionCodeType                           Index (IS_OPTN) read FInsuranceOption write SetInsuranceOption stored InsuranceOption_Specified;
    property InsuranceFee:                        AmountType                                        Index (IS_OPTN) read FInsuranceFee write SetInsuranceFee stored InsuranceFee_Specified;
    property PaymentMethods:                      Array_Of_BuyerPaymentMethodCodeType               Index (IS_OPTN or IS_UNBD) read FPaymentMethods write SetPaymentMethods stored PaymentMethods_Specified;
    property PayPalEmailAddress:                  string                                            Index (IS_OPTN) read FPayPalEmailAddress write SetPayPalEmailAddress stored PayPalEmailAddress_Specified;
    property CheckoutInstructions:                string                                            Index (IS_OPTN) read FCheckoutInstructions write SetCheckoutInstructions stored CheckoutInstructions_Specified;
    property EmailCopyToSeller:                   Boolean                                           Index (IS_OPTN) read FEmailCopyToSeller write SetEmailCopyToSeller stored EmailCopyToSeller_Specified;
    property CODCost:                             AmountType                                        Index (IS_OPTN) read FCODCost write SetCODCost stored CODCost_Specified;
    property SKU:                                 SKUType                                           Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property OrderLineItemID:                     string                                            Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
    property AdjustmentAmount:                    AmountType                                        Index (IS_OPTN) read FAdjustmentAmount write SetAdjustmentAmount stored AdjustmentAmount_Specified;
  end;



  // ************************************************************************ //
  // XML       : SendInvoiceRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SendInvoiceRequest = class(SendInvoiceRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerTemplateRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerTemplateRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FProductID: Int64;
    FProductID_Specified: boolean;
    FSaleTemplateName: string;
    FSaleTemplateName_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    FVerifyOnly: Boolean;
    FVerifyOnly_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetProductID(Index: Integer; const AInt64: Int64);
    function  ProductID_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateName(Index: Integer; const Astring: string);
    function  SaleTemplateName_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
    procedure SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
    function  VerifyOnly_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SaleTemplateID:   Int64                                       Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property ProductID:        Int64                                       Index (IS_OPTN) read FProductID write SetProductID stored ProductID_Specified;
    property SaleTemplateName: string                                      Index (IS_OPTN) read FSaleTemplateName write SetSaleTemplateName stored SaleTemplateName_Specified;
    property Item:             ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField:     SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
    property VerifyOnly:       Boolean                                     Index (IS_OPTN) read FVerifyOnly write SetVerifyOnly stored VerifyOnly_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerTemplateRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerTemplateRequest = class(ReviseSellingManagerTemplateRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SaveItemToSellingManagerTemplateRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SaveItemToSellingManagerTemplateRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FProductID: Int64;
    FProductID_Specified: boolean;
    FTemplateName: string;
    FTemplateName_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetProductID(Index: Integer; const AInt64: Int64);
    function  ProductID_Specified(Index: Integer): boolean;
    procedure SetTemplateName(Index: Integer; const Astring: string);
    function  TemplateName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:       ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ProductID:    Int64       Index (IS_OPTN) read FProductID write SetProductID stored ProductID_Specified;
    property TemplateName: string      Index (IS_OPTN) read FTemplateName write SetTemplateName stored TemplateName_Specified;
  end;



  // ************************************************************************ //
  // XML       : SaveItemToSellingManagerTemplateRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SaveItemToSellingManagerTemplateRequest = class(SaveItemToSellingManagerTemplateRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RevokeTokenRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RevokeTokenRequestType = class(AbstractRequestType)
  private
    FUnsubscribeNotification: Boolean;
    FUnsubscribeNotification_Specified: boolean;
    procedure SetUnsubscribeNotification(Index: Integer; const ABoolean: Boolean);
    function  UnsubscribeNotification_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property UnsubscribeNotification: Boolean  Index (IS_OPTN) read FUnsubscribeNotification write SetUnsubscribeNotification stored UnsubscribeNotification_Specified;
  end;



  // ************************************************************************ //
  // XML       : RevokeTokenRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RevokeTokenRequest = class(RevokeTokenRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleRequestType = class(AbstractRequestType)
  private
    FAction: ModifyActionCodeType;
    FAction_Specified: boolean;
    FPromotionalSaleDetails: PromotionalSaleType;
    FPromotionalSaleDetails_Specified: boolean;
    procedure SetAction(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleType: PromotionalSaleType);
    function  PromotionalSaleDetails_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Action:                 ModifyActionCodeType  Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property PromotionalSaleDetails: PromotionalSaleType   Index (IS_OPTN) read FPromotionalSaleDetails write SetPromotionalSaleDetails stored PromotionalSaleDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleRequest = class(SetPromotionalSaleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RemoveFromWatchListRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RemoveFromWatchListRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDArrayType;
    FItemID_Specified: boolean;
    FRemoveAllItems: Boolean;
    FRemoveAllItems_Specified: boolean;
    FVariationKey: Array_Of_VariationKeyType;
    FVariationKey_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetRemoveAllItems(Index: Integer; const ABoolean: Boolean);
    function  RemoveAllItems_Specified(Index: Integer): boolean;
    procedure SetVariationKey(Index: Integer; const AArray_Of_VariationKeyType: Array_Of_VariationKeyType);
    function  VariationKey_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:         ItemIDArrayType            Index (IS_OPTN or IS_UNBD) read FItemID write SetItemID stored ItemID_Specified;
    property RemoveAllItems: Boolean                    Index (IS_OPTN) read FRemoveAllItems write SetRemoveAllItems stored RemoveAllItems_Specified;
    property VariationKey:   Array_Of_VariationKeyType  Index (IS_OPTN or IS_UNBD) read FVariationKey write SetVariationKey stored VariationKey_Specified;
  end;



  // ************************************************************************ //
  // XML       : RemoveFromWatchListRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RemoveFromWatchListRequest = class(RemoveFromWatchListRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddToWatchListRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddToWatchListRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDArrayType;
    FItemID_Specified: boolean;
    FVariationKey: Array_Of_VariationKeyType;
    FVariationKey_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetVariationKey(Index: Integer; const AArray_Of_VariationKeyType: Array_Of_VariationKeyType);
    function  VariationKey_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:       ItemIDArrayType            Index (IS_OPTN or IS_UNBD) read FItemID write SetItemID stored ItemID_Specified;
    property VariationKey: Array_Of_VariationKeyType  Index (IS_OPTN or IS_UNBD) read FVariationKey write SetVariationKey stored VariationKey_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddToWatchListRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddToWatchListRequest = class(AddToWatchListRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleListingsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleListingsRequestType = class(AbstractRequestType)
  private
    FPromotionalSaleID: Int64;
    FPromotionalSaleID_Specified: boolean;
    FAction: ModifyActionCodeType;
    FAction_Specified: boolean;
    FPromotionalSaleItemIDArray: ItemIDArrayType;
    FPromotionalSaleItemIDArray_Specified: boolean;
    FStoreCategoryID: Int64;
    FStoreCategoryID_Specified: boolean;
    FCategoryID: Int64;
    FCategoryID_Specified: boolean;
    FAllFixedPriceItems: Boolean;
    FAllFixedPriceItems_Specified: boolean;
    FAllStoreInventoryItems: Boolean;
    FAllStoreInventoryItems_Specified: boolean;
    FAllAuctionItems: Boolean;
    FAllAuctionItems_Specified: boolean;
    procedure SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
    function  PromotionalSaleID_Specified(Index: Integer): boolean;
    procedure SetAction(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
    function  PromotionalSaleItemIDArray_Specified(Index: Integer): boolean;
    procedure SetStoreCategoryID(Index: Integer; const AInt64: Int64);
    function  StoreCategoryID_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const AInt64: Int64);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetAllFixedPriceItems(Index: Integer; const ABoolean: Boolean);
    function  AllFixedPriceItems_Specified(Index: Integer): boolean;
    procedure SetAllStoreInventoryItems(Index: Integer; const ABoolean: Boolean);
    function  AllStoreInventoryItems_Specified(Index: Integer): boolean;
    procedure SetAllAuctionItems(Index: Integer; const ABoolean: Boolean);
    function  AllAuctionItems_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PromotionalSaleID:          Int64                 Index (IS_OPTN) read FPromotionalSaleID write SetPromotionalSaleID stored PromotionalSaleID_Specified;
    property Action:                     ModifyActionCodeType  Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property PromotionalSaleItemIDArray: ItemIDArrayType       Index (IS_OPTN) read FPromotionalSaleItemIDArray write SetPromotionalSaleItemIDArray stored PromotionalSaleItemIDArray_Specified;
    property StoreCategoryID:            Int64                 Index (IS_OPTN) read FStoreCategoryID write SetStoreCategoryID stored StoreCategoryID_Specified;
    property CategoryID:                 Int64                 Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property AllFixedPriceItems:         Boolean               Index (IS_OPTN) read FAllFixedPriceItems write SetAllFixedPriceItems stored AllFixedPriceItems_Specified;
    property AllStoreInventoryItems:     Boolean               Index (IS_OPTN) read FAllStoreInventoryItems write SetAllStoreInventoryItems stored AllStoreInventoryItems_Specified;
    property AllAuctionItems:            Boolean               Index (IS_OPTN) read FAllAuctionItems write SetAllAuctionItems stored AllAuctionItems_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetPromotionalSaleListingsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetPromotionalSaleListingsRequest = class(SetPromotionalSaleListingsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetNotificationPreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetNotificationPreferencesRequestType = class(AbstractRequestType)
  private
    FApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType;
    FApplicationDeliveryPreferences_Specified: boolean;
    FUserDeliveryPreferenceArray: NotificationEnableArrayType;
    FUserDeliveryPreferenceArray_Specified: boolean;
    FUserData: NotificationUserDataType;
    FUserData_Specified: boolean;
    FEventProperty: Array_Of_NotificationEventPropertyType;
    FEventProperty_Specified: boolean;
    FDeliveryURLName: string;
    FDeliveryURLName_Specified: boolean;
    procedure SetApplicationDeliveryPreferences(Index: Integer; const AApplicationDeliveryPreferencesType: ApplicationDeliveryPreferencesType);
    function  ApplicationDeliveryPreferences_Specified(Index: Integer): boolean;
    procedure SetUserDeliveryPreferenceArray(Index: Integer; const ANotificationEnableArrayType: NotificationEnableArrayType);
    function  UserDeliveryPreferenceArray_Specified(Index: Integer): boolean;
    procedure SetUserData(Index: Integer; const ANotificationUserDataType: NotificationUserDataType);
    function  UserData_Specified(Index: Integer): boolean;
    procedure SetEventProperty(Index: Integer; const AArray_Of_NotificationEventPropertyType: Array_Of_NotificationEventPropertyType);
    function  EventProperty_Specified(Index: Integer): boolean;
    procedure SetDeliveryURLName(Index: Integer; const Astring: string);
    function  DeliveryURLName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType      Index (IS_OPTN) read FApplicationDeliveryPreferences write SetApplicationDeliveryPreferences stored ApplicationDeliveryPreferences_Specified;
    property UserDeliveryPreferenceArray:    NotificationEnableArrayType             Index (IS_OPTN) read FUserDeliveryPreferenceArray write SetUserDeliveryPreferenceArray stored UserDeliveryPreferenceArray_Specified;
    property UserData:                       NotificationUserDataType                Index (IS_OPTN) read FUserData write SetUserData stored UserData_Specified;
    property EventProperty:                  Array_Of_NotificationEventPropertyType  Index (IS_OPTN or IS_UNBD) read FEventProperty write SetEventProperty stored EventProperty_Specified;
    property DeliveryURLName:                string                                  Index (IS_OPTN) read FDeliveryURLName write SetDeliveryURLName stored DeliveryURLName_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetNotificationPreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetNotificationPreferencesRequest = class(SetNotificationPreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetMessagePreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetMessagePreferencesRequestType = class(AbstractRequestType)
  private
    FASQPreferences: ASQPreferencesType;
    FASQPreferences_Specified: boolean;
    procedure SetASQPreferences(Index: Integer; const AASQPreferencesType: ASQPreferencesType);
    function  ASQPreferences_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ASQPreferences: ASQPreferencesType  Index (IS_OPTN) read FASQPreferences write SetASQPreferences stored ASQPreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetMessagePreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetMessagePreferencesRequest = class(SetMessagePreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerSaleRecordRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerSaleRecordRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FSellingManagerSoldOrder: SellingManagerSoldOrderType;
    FSellingManagerSoldOrder_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetSellingManagerSoldOrder(Index: Integer; const ASellingManagerSoldOrderType: SellingManagerSoldOrderType);
    function  SellingManagerSoldOrder_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                  ItemIDType                   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:           string                       Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderID:                 OrderIDType                  Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property SellingManagerSoldOrder: SellingManagerSoldOrderType  Index (IS_OPTN) read FSellingManagerSoldOrder write SetSellingManagerSoldOrder stored SellingManagerSoldOrder_Specified;
    property OrderLineItemID:         string                       Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerSaleRecordRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerSaleRecordRequest = class(ReviseSellingManagerSaleRecordRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseFixedPriceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseFixedPriceItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:         ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseFixedPriceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseFixedPriceItemRequest = class(ReviseFixedPriceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseInventoryStatusRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseInventoryStatusRequestType = class(AbstractRequestType)
  private
    FInventoryStatus: Array_Of_InventoryStatusType;
    FInventoryStatus_Specified: boolean;
    procedure SetInventoryStatus(Index: Integer; const AArray_Of_InventoryStatusType: Array_Of_InventoryStatusType);
    function  InventoryStatus_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property InventoryStatus: Array_Of_InventoryStatusType  Index (IS_OPTN or IS_UNBD) read FInventoryStatus write SetInventoryStatus stored InventoryStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseInventoryStatusRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseInventoryStatusRequest = class(ReviseInventoryStatusRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseCheckoutStatusRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseCheckoutStatusRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FOrderID: string;
    FOrderID_Specified: boolean;
    FAmountPaid: AmountType;
    FAmountPaid_Specified: boolean;
    FPaymentMethodUsed: BuyerPaymentMethodCodeType;
    FPaymentMethodUsed_Specified: boolean;
    FCheckoutStatus: CompleteStatusCodeType;
    FCheckoutStatus_Specified: boolean;
    FShippingService: string;
    FShippingService_Specified: boolean;
    FShippingIncludedInTax: Boolean;
    FShippingIncludedInTax_Specified: boolean;
    FCheckoutMethod: CheckoutMethodCodeType;
    FCheckoutMethod_Specified: boolean;
    FInsuranceType: InsuranceSelectedCodeType;
    FInsuranceType_Specified: boolean;
    FPaymentStatus: RCSPaymentStatusCodeType;
    FPaymentStatus_Specified: boolean;
    FAdjustmentAmount: AmountType;
    FAdjustmentAmount_Specified: boolean;
    FShippingAddress: AddressType;
    FShippingAddress_Specified: boolean;
    FBuyerID: string;
    FBuyerID_Specified: boolean;
    FShippingInsuranceCost: AmountType;
    FShippingInsuranceCost_Specified: boolean;
    FSalesTax: AmountType;
    FSalesTax_Specified: boolean;
    FShippingCost: AmountType;
    FShippingCost_Specified: boolean;
    FEncryptedID: string;
    FEncryptedID_Specified: boolean;
    FExternalTransaction: ExternalTransactionType;
    FExternalTransaction_Specified: boolean;
    FMultipleSellerPaymentID: string;
    FMultipleSellerPaymentID_Specified: boolean;
    FCODCost: AmountType;
    FCODCost_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const Astring: string);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetAmountPaid(Index: Integer; const AAmountType: AmountType);
    function  AmountPaid_Specified(Index: Integer): boolean;
    procedure SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
    function  PaymentMethodUsed_Specified(Index: Integer): boolean;
    procedure SetCheckoutStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
    function  CheckoutStatus_Specified(Index: Integer): boolean;
    procedure SetShippingService(Index: Integer; const Astring: string);
    function  ShippingService_Specified(Index: Integer): boolean;
    procedure SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
    function  ShippingIncludedInTax_Specified(Index: Integer): boolean;
    procedure SetCheckoutMethod(Index: Integer; const ACheckoutMethodCodeType: CheckoutMethodCodeType);
    function  CheckoutMethod_Specified(Index: Integer): boolean;
    procedure SetInsuranceType(Index: Integer; const AInsuranceSelectedCodeType: InsuranceSelectedCodeType);
    function  InsuranceType_Specified(Index: Integer): boolean;
    procedure SetPaymentStatus(Index: Integer; const ARCSPaymentStatusCodeType: RCSPaymentStatusCodeType);
    function  PaymentStatus_Specified(Index: Integer): boolean;
    procedure SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
    function  AdjustmentAmount_Specified(Index: Integer): boolean;
    procedure SetShippingAddress(Index: Integer; const AAddressType: AddressType);
    function  ShippingAddress_Specified(Index: Integer): boolean;
    procedure SetBuyerID(Index: Integer; const Astring: string);
    function  BuyerID_Specified(Index: Integer): boolean;
    procedure SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingInsuranceCost_Specified(Index: Integer): boolean;
    procedure SetSalesTax(Index: Integer; const AAmountType: AmountType);
    function  SalesTax_Specified(Index: Integer): boolean;
    procedure SetShippingCost(Index: Integer; const AAmountType: AmountType);
    function  ShippingCost_Specified(Index: Integer): boolean;
    procedure SetEncryptedID(Index: Integer; const Astring: string);
    function  EncryptedID_Specified(Index: Integer): boolean;
    procedure SetExternalTransaction(Index: Integer; const AExternalTransactionType: ExternalTransactionType);
    function  ExternalTransaction_Specified(Index: Integer): boolean;
    procedure SetMultipleSellerPaymentID(Index: Integer; const Astring: string);
    function  MultipleSellerPaymentID_Specified(Index: Integer): boolean;
    procedure SetCODCost(Index: Integer; const AAmountType: AmountType);
    function  CODCost_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                  ItemIDType                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:           string                      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderID:                 string                      Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property AmountPaid:              AmountType                  Index (IS_OPTN) read FAmountPaid write SetAmountPaid stored AmountPaid_Specified;
    property PaymentMethodUsed:       BuyerPaymentMethodCodeType  Index (IS_OPTN) read FPaymentMethodUsed write SetPaymentMethodUsed stored PaymentMethodUsed_Specified;
    property CheckoutStatus:          CompleteStatusCodeType      Index (IS_OPTN) read FCheckoutStatus write SetCheckoutStatus stored CheckoutStatus_Specified;
    property ShippingService:         string                      Index (IS_OPTN) read FShippingService write SetShippingService stored ShippingService_Specified;
    property ShippingIncludedInTax:   Boolean                     Index (IS_OPTN) read FShippingIncludedInTax write SetShippingIncludedInTax stored ShippingIncludedInTax_Specified;
    property CheckoutMethod:          CheckoutMethodCodeType      Index (IS_OPTN) read FCheckoutMethod write SetCheckoutMethod stored CheckoutMethod_Specified;
    property InsuranceType:           InsuranceSelectedCodeType   Index (IS_OPTN) read FInsuranceType write SetInsuranceType stored InsuranceType_Specified;
    property PaymentStatus:           RCSPaymentStatusCodeType    Index (IS_OPTN) read FPaymentStatus write SetPaymentStatus stored PaymentStatus_Specified;
    property AdjustmentAmount:        AmountType                  Index (IS_OPTN) read FAdjustmentAmount write SetAdjustmentAmount stored AdjustmentAmount_Specified;
    property ShippingAddress:         AddressType                 Index (IS_OPTN) read FShippingAddress write SetShippingAddress stored ShippingAddress_Specified;
    property BuyerID:                 string                      Index (IS_OPTN) read FBuyerID write SetBuyerID stored BuyerID_Specified;
    property ShippingInsuranceCost:   AmountType                  Index (IS_OPTN) read FShippingInsuranceCost write SetShippingInsuranceCost stored ShippingInsuranceCost_Specified;
    property SalesTax:                AmountType                  Index (IS_OPTN) read FSalesTax write SetSalesTax stored SalesTax_Specified;
    property ShippingCost:            AmountType                  Index (IS_OPTN) read FShippingCost write SetShippingCost stored ShippingCost_Specified;
    property EncryptedID:             string                      Index (IS_OPTN) read FEncryptedID write SetEncryptedID stored EncryptedID_Specified;
    property ExternalTransaction:     ExternalTransactionType     Index (IS_OPTN) read FExternalTransaction write SetExternalTransaction stored ExternalTransaction_Specified;
    property MultipleSellerPaymentID: string                      Index (IS_OPTN) read FMultipleSellerPaymentID write SetMultipleSellerPaymentID stored MultipleSellerPaymentID_Specified;
    property CODCost:                 AmountType                  Index (IS_OPTN) read FCODCost write SetCODCost stored CODCost_Specified;
    property OrderLineItemID:         string                      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseCheckoutStatusRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseCheckoutStatusRequest = class(ReviseCheckoutStatusRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerInventoryFolderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerInventoryFolderRequestType = class(AbstractRequestType)
  private
    FFolder: SellingManagerFolderDetailsType;
    FFolder_Specified: boolean;
    procedure SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
    function  Folder_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Folder: SellingManagerFolderDetailsType  Index (IS_OPTN) read FFolder write SetFolder stored Folder_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerInventoryFolderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerInventoryFolderRequest = class(ReviseSellingManagerInventoryFolderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerProductRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerProductRequestType = class(AbstractRequestType)
  private
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FSellingManagerFolderDetails: SellingManagerFolderDetailsType;
    FSellingManagerFolderDetails_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    FSellingManagerProductSpecifics: SellingManagerProductSpecificsType;
    FSellingManagerProductSpecifics_Specified: boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetSellingManagerFolderDetails(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
    function  SellingManagerFolderDetails_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
    function  SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerProductDetails:   SellingManagerProductDetailsType            Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property SellingManagerFolderDetails:    SellingManagerFolderDetailsType             Index (IS_OPTN) read FSellingManagerFolderDetails write SetSellingManagerFolderDetails stored SellingManagerFolderDetails_Specified;
    property DeletedField:                   SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
    property SellingManagerProductSpecifics: SellingManagerProductSpecificsType          Index (IS_OPTN) read FSellingManagerProductSpecifics write SetSellingManagerProductSpecifics stored SellingManagerProductSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseSellingManagerProductRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseSellingManagerProductRequest = class(ReviseSellingManagerProductRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesFoldersRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesFoldersRequestType = class(AbstractRequestType)
  private
    FOperation: MyMessagesFolderOperationCodeType;
    FOperation_Specified: boolean;
    FFolderID: Array_Of_long;
    FFolderID_Specified: boolean;
    FFolderName: SellerExcludeShipToLocationPreferencesType;
    FFolderName_Specified: boolean;
    procedure SetOperation(Index: Integer; const AMyMessagesFolderOperationCodeType: MyMessagesFolderOperationCodeType);
    function  Operation_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AArray_Of_long: Array_Of_long);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetFolderName(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  FolderName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property Operation:  MyMessagesFolderOperationCodeType           Index (IS_OPTN) read FOperation write SetOperation stored Operation_Specified;
    property FolderID:   Array_Of_long                               Index (IS_OPTN or IS_UNBD) read FFolderID write SetFolderID stored FolderID_Specified;
    property FolderName: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FFolderName write SetFolderName stored FolderName_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesFoldersRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesFoldersRequest = class(ReviseMyMessagesFoldersRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    FVerifyOnly: Boolean;
    FVerifyOnly_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
    procedure SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
    function  VerifyOnly_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:         ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
    property VerifyOnly:   Boolean                                     Index (IS_OPTN) read FVerifyOnly write SetVerifyOnly stored VerifyOnly_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseItemRequest = class(ReviseItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesRequestType = class(AbstractRequestType)
  private
    FMessageIDs: MyMessagesMessageIDArrayType;
    FMessageIDs_Specified: boolean;
    FAlertIDs: MyMessagesAlertIDArrayType;
    FAlertIDs_Specified: boolean;
    FRead_: Boolean;
    FRead__Specified: boolean;
    FFlagged: Boolean;
    FFlagged_Specified: boolean;
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    procedure SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
    function  MessageIDs_Specified(Index: Integer): boolean;
    procedure SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
    function  AlertIDs_Specified(Index: Integer): boolean;
    procedure SetRead_(Index: Integer; const ABoolean: Boolean);
    function  Read__Specified(Index: Integer): boolean;
    procedure SetFlagged(Index: Integer; const ABoolean: Boolean);
    function  Flagged_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property MessageIDs: MyMessagesMessageIDArrayType  Index (IS_OPTN) read FMessageIDs write SetMessageIDs stored MessageIDs_Specified;
    property AlertIDs:   MyMessagesAlertIDArrayType    Index (IS_OPTN) read FAlertIDs write SetAlertIDs stored AlertIDs_Specified;
    property Read_:      Boolean                       Index (IS_OPTN) read FRead_ write SetRead_ stored Read__Specified;
    property Flagged:    Boolean                       Index (IS_OPTN) read FFlagged write SetFlagged stored Flagged_Specified;
    property FolderID:   Int64                         Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ReviseMyMessagesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ReviseMyMessagesRequest = class(ReviseMyMessagesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValidateChallengeInputRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateChallengeInputRequestType = class(AbstractRequestType)
  private
    FChallengeToken: string;
    FChallengeToken_Specified: boolean;
    FUserInput: string;
    FUserInput_Specified: boolean;
    FKeepTokenValid: Boolean;
    FKeepTokenValid_Specified: boolean;
    procedure SetChallengeToken(Index: Integer; const Astring: string);
    function  ChallengeToken_Specified(Index: Integer): boolean;
    procedure SetUserInput(Index: Integer; const Astring: string);
    function  UserInput_Specified(Index: Integer): boolean;
    procedure SetKeepTokenValid(Index: Integer; const ABoolean: Boolean);
    function  KeepTokenValid_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ChallengeToken: string   Index (IS_OPTN) read FChallengeToken write SetChallengeToken stored ChallengeToken_Specified;
    property UserInput:      string   Index (IS_OPTN) read FUserInput write SetUserInput stored UserInput_Specified;
    property KeepTokenValid: Boolean  Index (IS_OPTN) read FKeepTokenValid write SetKeepTokenValid stored KeepTokenValid_Specified;
  end;



  // ************************************************************************ //
  // XML       : ValidateChallengeInputRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateChallengeInputRequest = class(ValidateChallengeInputRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ValidateTestUserRegistrationRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateTestUserRegistrationRequestType = class(AbstractRequestType)
  private
    FFeedbackScore: Integer;
    FFeedbackScore_Specified: boolean;
    FRegistrationDate: TXSDateTime;
    FRegistrationDate_Specified: boolean;
    FSubscribeSA: Boolean;
    FSubscribeSA_Specified: boolean;
    FSubscribeSAPro: Boolean;
    FSubscribeSAPro_Specified: boolean;
    FSubscribeSM: Boolean;
    FSubscribeSM_Specified: boolean;
    FSubscribeSMPro: Boolean;
    FSubscribeSMPro_Specified: boolean;
    procedure SetFeedbackScore(Index: Integer; const AInteger: Integer);
    function  FeedbackScore_Specified(Index: Integer): boolean;
    procedure SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  RegistrationDate_Specified(Index: Integer): boolean;
    procedure SetSubscribeSA(Index: Integer; const ABoolean: Boolean);
    function  SubscribeSA_Specified(Index: Integer): boolean;
    procedure SetSubscribeSAPro(Index: Integer; const ABoolean: Boolean);
    function  SubscribeSAPro_Specified(Index: Integer): boolean;
    procedure SetSubscribeSM(Index: Integer; const ABoolean: Boolean);
    function  SubscribeSM_Specified(Index: Integer): boolean;
    procedure SetSubscribeSMPro(Index: Integer; const ABoolean: Boolean);
    function  SubscribeSMPro_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property FeedbackScore:    Integer      Index (IS_OPTN) read FFeedbackScore write SetFeedbackScore stored FeedbackScore_Specified;
    property RegistrationDate: TXSDateTime  Index (IS_OPTN) read FRegistrationDate write SetRegistrationDate stored RegistrationDate_Specified;
    property SubscribeSA:      Boolean      Index (IS_OPTN) read FSubscribeSA write SetSubscribeSA stored SubscribeSA_Specified;
    property SubscribeSAPro:   Boolean      Index (IS_OPTN) read FSubscribeSAPro write SetSubscribeSAPro stored SubscribeSAPro_Specified;
    property SubscribeSM:      Boolean      Index (IS_OPTN) read FSubscribeSM write SetSubscribeSM stored SubscribeSM_Specified;
    property SubscribeSMPro:   Boolean      Index (IS_OPTN) read FSubscribeSMPro write SetSubscribeSMPro stored SubscribeSMPro_Specified;
  end;



  // ************************************************************************ //
  // XML       : ValidateTestUserRegistrationRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ValidateTestUserRegistrationRequest = class(ValidateTestUserRegistrationRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UploadSiteHostedPicturesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  UploadSiteHostedPicturesRequestType = class(AbstractRequestType)
  private
    FPictureName: string;
    FPictureName_Specified: boolean;
    FPictureSystemVersion: Integer;
    FPictureSystemVersion_Specified: boolean;
    FPictureSet: PictureSetCodeType;
    FPictureSet_Specified: boolean;
    FPictureData: Base64BinaryType;
    FPictureData_Specified: boolean;
    FPictureUploadPolicy: PictureUploadPolicyCodeType;
    FPictureUploadPolicy_Specified: boolean;
    FExternalPictureURL: Array_Of_anyURI;
    FExternalPictureURL_Specified: boolean;
    FPictureWatermark: Array_Of_PictureWatermarkCodeType;
    FPictureWatermark_Specified: boolean;
    FExtensionInDays: Integer;
    FExtensionInDays_Specified: boolean;
    procedure SetPictureName(Index: Integer; const Astring: string);
    function  PictureName_Specified(Index: Integer): boolean;
    procedure SetPictureSystemVersion(Index: Integer; const AInteger: Integer);
    function  PictureSystemVersion_Specified(Index: Integer): boolean;
    procedure SetPictureSet(Index: Integer; const APictureSetCodeType: PictureSetCodeType);
    function  PictureSet_Specified(Index: Integer): boolean;
    procedure SetPictureData(Index: Integer; const ABase64BinaryType: Base64BinaryType);
    function  PictureData_Specified(Index: Integer): boolean;
    procedure SetPictureUploadPolicy(Index: Integer; const APictureUploadPolicyCodeType: PictureUploadPolicyCodeType);
    function  PictureUploadPolicy_Specified(Index: Integer): boolean;
    procedure SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  ExternalPictureURL_Specified(Index: Integer): boolean;
    procedure SetPictureWatermark(Index: Integer; const AArray_Of_PictureWatermarkCodeType: Array_Of_PictureWatermarkCodeType);
    function  PictureWatermark_Specified(Index: Integer): boolean;
    procedure SetExtensionInDays(Index: Integer; const AInteger: Integer);
    function  ExtensionInDays_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureName:          string                             Index (IS_OPTN) read FPictureName write SetPictureName stored PictureName_Specified;
    property PictureSystemVersion: Integer                            Index (IS_OPTN) read FPictureSystemVersion write SetPictureSystemVersion stored PictureSystemVersion_Specified;
    property PictureSet:           PictureSetCodeType                 Index (IS_OPTN) read FPictureSet write SetPictureSet stored PictureSet_Specified;
    property PictureData:          Base64BinaryType                   Index (IS_OPTN) read FPictureData write SetPictureData stored PictureData_Specified;
    property PictureUploadPolicy:  PictureUploadPolicyCodeType        Index (IS_OPTN) read FPictureUploadPolicy write SetPictureUploadPolicy stored PictureUploadPolicy_Specified;
    property ExternalPictureURL:   Array_Of_anyURI                    Index (IS_OPTN or IS_UNBD) read FExternalPictureURL write SetExternalPictureURL stored ExternalPictureURL_Specified;
    property PictureWatermark:     Array_Of_PictureWatermarkCodeType  Index (IS_OPTN or IS_UNBD) read FPictureWatermark write SetPictureWatermark stored PictureWatermark_Specified;
    property ExtensionInDays:      Integer                            Index (IS_OPTN) read FExtensionInDays write SetExtensionInDays stored ExtensionInDays_Specified;
  end;



  // ************************************************************************ //
  // XML       : UploadSiteHostedPicturesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  UploadSiteHostedPicturesRequest = class(UploadSiteHostedPicturesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserPreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserPreferencesRequestType = class(AbstractRequestType)
  private
    FBidderNoticePreferences: BidderNoticePreferencesType;
    FBidderNoticePreferences_Specified: boolean;
    FCombinedPaymentPreferences: CombinedPaymentPreferencesType;
    FCombinedPaymentPreferences_Specified: boolean;
    FCrossPromotionPreferences: CrossPromotionPreferencesType;
    FCrossPromotionPreferences_Specified: boolean;
    FSellerPaymentPreferences: SellerPaymentPreferencesType;
    FSellerPaymentPreferences_Specified: boolean;
    FSellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType;
    FSellerFavoriteItemPreferences_Specified: boolean;
    FEndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType;
    FEndOfAuctionEmailPreferences_Specified: boolean;
    FEmailShipmentTrackingNumberPreference: Boolean;
    FEmailShipmentTrackingNumberPreference_Specified: boolean;
    FRequiredShipPhoneNumberPreference: Boolean;
    FRequiredShipPhoneNumberPreference_Specified: boolean;
    FUnpaidItemAssistancePreferences: UnpaidItemAssistancePreferencesType;
    FUnpaidItemAssistancePreferences_Specified: boolean;
    FPurchaseReminderEmailPreferences: PurchaseReminderEmailPreferencesType;
    FPurchaseReminderEmailPreferences_Specified: boolean;
    FSellerThirdPartyCheckoutDisabled: Boolean;
    FSellerThirdPartyCheckoutDisabled_Specified: boolean;
    FDispatchCutoffTimePreference: DispatchCutoffTimePreferencesType;
    FDispatchCutoffTimePreference_Specified: boolean;
    FGlobalShippingProgramListingPreference: Boolean;
    FGlobalShippingProgramListingPreference_Specified: boolean;
    FOverrideGSPserviceWithIntlService: Boolean;
    FOverrideGSPserviceWithIntlService_Specified: boolean;
    FOutOfStockControlPreference: Boolean;
    FOutOfStockControlPreference_Specified: boolean;
    procedure SetBidderNoticePreferences(Index: Integer; const ABidderNoticePreferencesType: BidderNoticePreferencesType);
    function  BidderNoticePreferences_Specified(Index: Integer): boolean;
    procedure SetCombinedPaymentPreferences(Index: Integer; const ACombinedPaymentPreferencesType: CombinedPaymentPreferencesType);
    function  CombinedPaymentPreferences_Specified(Index: Integer): boolean;
    procedure SetCrossPromotionPreferences(Index: Integer; const ACrossPromotionPreferencesType: CrossPromotionPreferencesType);
    function  CrossPromotionPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerPaymentPreferences(Index: Integer; const ASellerPaymentPreferencesType: SellerPaymentPreferencesType);
    function  SellerPaymentPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerFavoriteItemPreferences(Index: Integer; const ASellerFavoriteItemPreferencesType: SellerFavoriteItemPreferencesType);
    function  SellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
    procedure SetEndOfAuctionEmailPreferences(Index: Integer; const AEndOfAuctionEmailPreferencesType: EndOfAuctionEmailPreferencesType);
    function  EndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  EmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
    procedure SetRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  RequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
    procedure SetUnpaidItemAssistancePreferences(Index: Integer; const AUnpaidItemAssistancePreferencesType: UnpaidItemAssistancePreferencesType);
    function  UnpaidItemAssistancePreferences_Specified(Index: Integer): boolean;
    procedure SetPurchaseReminderEmailPreferences(Index: Integer; const APurchaseReminderEmailPreferencesType: PurchaseReminderEmailPreferencesType);
    function  PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetSellerThirdPartyCheckoutDisabled(Index: Integer; const ABoolean: Boolean);
    function  SellerThirdPartyCheckoutDisabled_Specified(Index: Integer): boolean;
    procedure SetDispatchCutoffTimePreference(Index: Integer; const ADispatchCutoffTimePreferencesType: DispatchCutoffTimePreferencesType);
    function  DispatchCutoffTimePreference_Specified(Index: Integer): boolean;
    procedure SetGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
    function  GlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
    procedure SetOverrideGSPserviceWithIntlService(Index: Integer; const ABoolean: Boolean);
    function  OverrideGSPserviceWithIntlService_Specified(Index: Integer): boolean;
    procedure SetOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
    function  OutOfStockControlPreference_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderNoticePreferences:                BidderNoticePreferencesType           Index (IS_OPTN) read FBidderNoticePreferences write SetBidderNoticePreferences stored BidderNoticePreferences_Specified;
    property CombinedPaymentPreferences:             CombinedPaymentPreferencesType        Index (IS_OPTN) read FCombinedPaymentPreferences write SetCombinedPaymentPreferences stored CombinedPaymentPreferences_Specified;
    property CrossPromotionPreferences:              CrossPromotionPreferencesType         Index (IS_OPTN) read FCrossPromotionPreferences write SetCrossPromotionPreferences stored CrossPromotionPreferences_Specified;
    property SellerPaymentPreferences:               SellerPaymentPreferencesType          Index (IS_OPTN) read FSellerPaymentPreferences write SetSellerPaymentPreferences stored SellerPaymentPreferences_Specified;
    property SellerFavoriteItemPreferences:          SellerFavoriteItemPreferencesType     Index (IS_OPTN) read FSellerFavoriteItemPreferences write SetSellerFavoriteItemPreferences stored SellerFavoriteItemPreferences_Specified;
    property EndOfAuctionEmailPreferences:           EndOfAuctionEmailPreferencesType      Index (IS_OPTN) read FEndOfAuctionEmailPreferences write SetEndOfAuctionEmailPreferences stored EndOfAuctionEmailPreferences_Specified;
    property EmailShipmentTrackingNumberPreference:  Boolean                               Index (IS_OPTN) read FEmailShipmentTrackingNumberPreference write SetEmailShipmentTrackingNumberPreference stored EmailShipmentTrackingNumberPreference_Specified;
    property RequiredShipPhoneNumberPreference:      Boolean                               Index (IS_OPTN) read FRequiredShipPhoneNumberPreference write SetRequiredShipPhoneNumberPreference stored RequiredShipPhoneNumberPreference_Specified;
    property UnpaidItemAssistancePreferences:        UnpaidItemAssistancePreferencesType   Index (IS_OPTN) read FUnpaidItemAssistancePreferences write SetUnpaidItemAssistancePreferences stored UnpaidItemAssistancePreferences_Specified;
    property PurchaseReminderEmailPreferences:       PurchaseReminderEmailPreferencesType  Index (IS_OPTN) read FPurchaseReminderEmailPreferences write SetPurchaseReminderEmailPreferences stored PurchaseReminderEmailPreferences_Specified;
    property SellerThirdPartyCheckoutDisabled:       Boolean                               Index (IS_OPTN) read FSellerThirdPartyCheckoutDisabled write SetSellerThirdPartyCheckoutDisabled stored SellerThirdPartyCheckoutDisabled_Specified;
    property DispatchCutoffTimePreference:           DispatchCutoffTimePreferencesType     Index (IS_OPTN) read FDispatchCutoffTimePreference write SetDispatchCutoffTimePreference stored DispatchCutoffTimePreference_Specified;
    property GlobalShippingProgramListingPreference: Boolean                               Index (IS_OPTN) read FGlobalShippingProgramListingPreference write SetGlobalShippingProgramListingPreference stored GlobalShippingProgramListingPreference_Specified;
    property OverrideGSPserviceWithIntlService:      Boolean                               Index (IS_OPTN) read FOverrideGSPserviceWithIntlService write SetOverrideGSPserviceWithIntlService stored OverrideGSPserviceWithIntlService_Specified;
    property OutOfStockControlPreference:            Boolean                               Index (IS_OPTN) read FOutOfStockControlPreference write SetOutOfStockControlPreference stored OutOfStockControlPreference_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetUserPreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserPreferencesRequest = class(SetUserPreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddSecondChanceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddSecondChanceItemRequestType = class(AbstractRequestType)
  private
    FRecipientBidderUserID: UserIDType;
    FRecipientBidderUserID_Specified: boolean;
    FBuyItNowPrice: AmountType;
    FBuyItNowPrice_Specified: boolean;
    FDuration: SecondChanceOfferDurationCodeType;
    FDuration_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSellerMessage: string;
    FSellerMessage_Specified: boolean;
    procedure SetRecipientBidderUserID(Index: Integer; const AUserIDType: UserIDType);
    function  RecipientBidderUserID_Specified(Index: Integer): boolean;
    procedure SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
    function  BuyItNowPrice_Specified(Index: Integer): boolean;
    procedure SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
    function  Duration_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSellerMessage(Index: Integer; const Astring: string);
    function  SellerMessage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientBidderUserID: UserIDType                         Index (IS_OPTN) read FRecipientBidderUserID write SetRecipientBidderUserID stored RecipientBidderUserID_Specified;
    property BuyItNowPrice:         AmountType                         Index (IS_OPTN) read FBuyItNowPrice write SetBuyItNowPrice stored BuyItNowPrice_Specified;
    property Duration:              SecondChanceOfferDurationCodeType  Index (IS_OPTN) read FDuration write SetDuration stored Duration_Specified;
    property ItemID:                ItemIDType                         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SellerMessage:         string                             Index (IS_OPTN) read FSellerMessage write SetSellerMessage stored SellerMessage_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddSecondChanceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddSecondChanceItemRequest = class(VerifyAddSecondChanceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyRelistItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyRelistItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:         ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyRelistItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyRelistItemRequest = class(VerifyRelistItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddItemRequest = class(VerifyAddItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VeROReportItemsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VeROReportItemsRequestType = class(AbstractRequestType)
  private
    FRightsOwnerID: UserIDType;
    FRightsOwnerID_Specified: boolean;
    FReportItems: VeROReportItemsType;
    FReportItems_Specified: boolean;
    procedure SetRightsOwnerID(Index: Integer; const AUserIDType: UserIDType);
    function  RightsOwnerID_Specified(Index: Integer): boolean;
    procedure SetReportItems(Index: Integer; const AVeROReportItemsType: VeROReportItemsType);
    function  ReportItems_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RightsOwnerID: UserIDType           Index (IS_OPTN) read FRightsOwnerID write SetRightsOwnerID stored RightsOwnerID_Specified;
    property ReportItems:   VeROReportItemsType  Index (IS_OPTN) read FReportItems write SetReportItems stored ReportItems_Specified;
  end;



  // ************************************************************************ //
  // XML       : VeROReportItemsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VeROReportItemsRequest = class(VeROReportItemsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : VerifyAddFixedPriceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddFixedPriceItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : VerifyAddFixedPriceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  VerifyAddFixedPriceItemRequest = class(VerifyAddFixedPriceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetShippingDiscountProfilesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetShippingDiscountProfilesRequestType = class(AbstractRequestType)
  private
    FCurrencyID: CurrencyCodeType;
    FCurrencyID_Specified: boolean;
    FCombinedDuration: CombinedPaymentPeriodCodeType;
    FCombinedDuration_Specified: boolean;
    FModifyActionCode: ModifyActionCodeType;
    FModifyActionCode_Specified: boolean;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FFlatShippingDiscount_Specified: boolean;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FCalculatedShippingDiscount_Specified: boolean;
    FCalculatedHandlingDiscount: CalculatedHandlingDiscountType;
    FCalculatedHandlingDiscount_Specified: boolean;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
    FPromotionalShippingDiscountDetails_Specified: boolean;
    FShippingInsurance: ShippingInsuranceType;
    FShippingInsurance_Specified: boolean;
    FInternationalShippingInsurance: ShippingInsuranceType;
    FInternationalShippingInsurance_Specified: boolean;
    procedure SetCurrencyID(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  CurrencyID_Specified(Index: Integer): boolean;
    procedure SetCombinedDuration(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
    function  CombinedDuration_Specified(Index: Integer): boolean;
    procedure SetModifyActionCode(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
    function  ModifyActionCode_Specified(Index: Integer): boolean;
    procedure SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
    function  FlatShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
    function  CalculatedShippingDiscount_Specified(Index: Integer): boolean;
    procedure SetCalculatedHandlingDiscount(Index: Integer; const ACalculatedHandlingDiscountType: CalculatedHandlingDiscountType);
    function  CalculatedHandlingDiscount_Specified(Index: Integer): boolean;
    procedure SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
    function  PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
    procedure SetShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
    function  ShippingInsurance_Specified(Index: Integer): boolean;
    procedure SetInternationalShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
    function  InternationalShippingInsurance_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CurrencyID:                         CurrencyCodeType                        Index (IS_OPTN) read FCurrencyID write SetCurrencyID stored CurrencyID_Specified;
    property CombinedDuration:                   CombinedPaymentPeriodCodeType           Index (IS_OPTN) read FCombinedDuration write SetCombinedDuration stored CombinedDuration_Specified;
    property ModifyActionCode:                   ModifyActionCodeType                    Index (IS_OPTN) read FModifyActionCode write SetModifyActionCode stored ModifyActionCode_Specified;
    property FlatShippingDiscount:               FlatShippingDiscountType                Index (IS_OPTN) read FFlatShippingDiscount write SetFlatShippingDiscount stored FlatShippingDiscount_Specified;
    property CalculatedShippingDiscount:         CalculatedShippingDiscountType          Index (IS_OPTN) read FCalculatedShippingDiscount write SetCalculatedShippingDiscount stored CalculatedShippingDiscount_Specified;
    property CalculatedHandlingDiscount:         CalculatedHandlingDiscountType          Index (IS_OPTN) read FCalculatedHandlingDiscount write SetCalculatedHandlingDiscount stored CalculatedHandlingDiscount_Specified;
    property PromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType  Index (IS_OPTN) read FPromotionalShippingDiscountDetails write SetPromotionalShippingDiscountDetails stored PromotionalShippingDiscountDetails_Specified;
    property ShippingInsurance:                  ShippingInsuranceType                   Index (IS_OPTN) read FShippingInsurance write SetShippingInsurance stored ShippingInsurance_Specified;
    property InternationalShippingInsurance:     ShippingInsuranceType                   Index (IS_OPTN) read FInternationalShippingInsurance write SetInternationalShippingInsurance stored InternationalShippingInsurance_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetShippingDiscountProfilesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetShippingDiscountProfilesRequest = class(SetShippingDiscountProfilesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerTemplateAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerTemplateAutomationRuleRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FAutomatedListingRule: SellingManagerAutoListType;
    FAutomatedListingRule_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
    function  AutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SaleTemplateID:                 Int64                                    Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property AutomatedListingRule:           SellingManagerAutoListType               Index (IS_OPTN) read FAutomatedListingRule write SetAutomatedListingRule stored AutomatedListingRule_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerTemplateAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerTemplateAutomationRuleRequest = class(SetSellingManagerTemplateAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreRequestType = class(AbstractRequestType)
  private
    FStore: StoreType;
    FStore_Specified: boolean;
    procedure SetStore(Index: Integer; const AStoreType: StoreType);
    function  Store_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Store: StoreType  Index (IS_OPTN) read FStore write SetStore stored Store_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStoreRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreRequest = class(SetStoreRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerFeedbackOptionsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerFeedbackOptionsRequestType = class(AbstractRequestType)
  private
    FAutomatedLeaveFeedbackEvent: AutomatedLeaveFeedbackEventCodeType;
    FAutomatedLeaveFeedbackEvent_Specified: boolean;
    FStoredComments: FeedbackCommentArrayType;
    FStoredComments_Specified: boolean;
    procedure SetAutomatedLeaveFeedbackEvent(Index: Integer; const AAutomatedLeaveFeedbackEventCodeType: AutomatedLeaveFeedbackEventCodeType);
    function  AutomatedLeaveFeedbackEvent_Specified(Index: Integer): boolean;
    procedure SetStoredComments(Index: Integer; const AFeedbackCommentArrayType: FeedbackCommentArrayType);
    function  StoredComments_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property AutomatedLeaveFeedbackEvent: AutomatedLeaveFeedbackEventCodeType  Index (IS_OPTN) read FAutomatedLeaveFeedbackEvent write SetAutomatedLeaveFeedbackEvent stored AutomatedLeaveFeedbackEvent_Specified;
    property StoredComments:              FeedbackCommentArrayType             Index (IS_OPTN) read FStoredComments write SetStoredComments stored StoredComments_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerFeedbackOptionsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerFeedbackOptionsRequest = class(SetSellingManagerFeedbackOptionsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerItemAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerItemAutomationRuleRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FAutomatedRelistingRule: SellingManagerAutoRelistType;
    FAutomatedRelistingRule_Specified: boolean;
    FAutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType;
    FAutomatedSecondChanceOfferRule_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
    function  AutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
    function  AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                         ItemIDType                               Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property AutomatedRelistingRule:         SellingManagerAutoRelistType             Index (IS_OPTN) read FAutomatedRelistingRule write SetAutomatedRelistingRule stored AutomatedRelistingRule_Specified;
    property AutomatedSecondChanceOfferRule: SellingManagerAutoSecondChanceOfferType  Index (IS_OPTN) read FAutomatedSecondChanceOfferRule write SetAutomatedSecondChanceOfferRule stored AutomatedSecondChanceOfferRule_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetSellingManagerItemAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetSellingManagerItemAutomationRuleRequest = class(SetSellingManagerItemAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetTaxTableRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetTaxTableRequestType = class(AbstractRequestType)
  private
    FTaxTable: TaxTableType;
    FTaxTable_Specified: boolean;
    procedure SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
    function  TaxTable_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TaxTable: TaxTableType  Index (IS_OPTN) read FTaxTable write SetTaxTable stored TaxTable_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetTaxTableRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetTaxTableRequest = class(SetTaxTableRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStorePreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStorePreferencesRequestType = class(AbstractRequestType)
  private
    FStorePreferences: StorePreferencesType;
    FStorePreferences_Specified: boolean;
    procedure SetStorePreferences(Index: Integer; const AStorePreferencesType: StorePreferencesType);
    function  StorePreferences_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StorePreferences: StorePreferencesType  Index (IS_OPTN) read FStorePreferences write SetStorePreferences stored StorePreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStorePreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStorePreferencesRequest = class(SetStorePreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetUserNotesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserNotesRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FAction: SetUserNotesActionCodeType;
    FAction_Specified: boolean;
    FNoteText: string;
    FNoteText_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FVariationSpecifics: NameValueListArrayType;
    FVariationSpecifics_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetAction(Index: Integer; const ASetUserNotesActionCodeType: SetUserNotesActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetNoteText(Index: Integer; const Astring: string);
    function  NoteText_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:             ItemIDType                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Action:             SetUserNotesActionCodeType  Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property NoteText:           string                      Index (IS_OPTN) read FNoteText write SetNoteText stored NoteText_Specified;
    property TransactionID:      string                      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property VariationSpecifics: NameValueListArrayType      Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
    property SKU:                SKUType                     Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property OrderLineItemID:    string                      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetUserNotesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetUserNotesRequest = class(SetUserNotesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreCategoriesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCategoriesRequestType = class(AbstractRequestType)
  private
    FAction: StoreCategoryUpdateActionCodeType;
    FAction_Specified: boolean;
    FItemDestinationCategoryID: Int64;
    FItemDestinationCategoryID_Specified: boolean;
    FDestinationParentCategoryID: Int64;
    FDestinationParentCategoryID_Specified: boolean;
    FStoreCategories: StoreCustomCategoryArrayType;
    FStoreCategories_Specified: boolean;
    procedure SetAction(Index: Integer; const AStoreCategoryUpdateActionCodeType: StoreCategoryUpdateActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetItemDestinationCategoryID(Index: Integer; const AInt64: Int64);
    function  ItemDestinationCategoryID_Specified(Index: Integer): boolean;
    procedure SetDestinationParentCategoryID(Index: Integer; const AInt64: Int64);
    function  DestinationParentCategoryID_Specified(Index: Integer): boolean;
    procedure SetStoreCategories(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
    function  StoreCategories_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Action:                      StoreCategoryUpdateActionCodeType  Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property ItemDestinationCategoryID:   Int64                              Index (IS_OPTN) read FItemDestinationCategoryID write SetItemDestinationCategoryID stored ItemDestinationCategoryID_Specified;
    property DestinationParentCategoryID: Int64                              Index (IS_OPTN) read FDestinationParentCategoryID write SetDestinationParentCategoryID stored DestinationParentCategoryID_Specified;
    property StoreCategories:             StoreCustomCategoryArrayType       Index (IS_OPTN) read FStoreCategories write SetStoreCategories stored StoreCategories_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStoreCategoriesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCategoriesRequest = class(SetStoreCategoriesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : SetStoreCustomPageRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCustomPageRequestType = class(AbstractRequestType)
  private
    FCustomPage: StoreCustomPageType;
    FCustomPage_Specified: boolean;
    procedure SetCustomPage(Index: Integer; const AStoreCustomPageType: StoreCustomPageType);
    function  CustomPage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPage: StoreCustomPageType  Index (IS_OPTN) read FCustomPage write SetCustomPage stored CustomPage_Specified;
  end;



  // ************************************************************************ //
  // XML       : SetStoreCustomPageRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  SetStoreCustomPageRequest = class(SetStoreCustomPageRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoryFeaturesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryFeaturesRequestType = class(AbstractRequestType)
  private
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FLevelLimit: Integer;
    FLevelLimit_Specified: boolean;
    FViewAllNodes: Boolean;
    FViewAllNodes_Specified: boolean;
    FFeatureID: Array_Of_FeatureIDCodeType;
    FFeatureID_Specified: boolean;
    FAllFeaturesForCategory: Boolean;
    FAllFeaturesForCategory_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetLevelLimit(Index: Integer; const AInteger: Integer);
    function  LevelLimit_Specified(Index: Integer): boolean;
    procedure SetViewAllNodes(Index: Integer; const ABoolean: Boolean);
    function  ViewAllNodes_Specified(Index: Integer): boolean;
    procedure SetFeatureID(Index: Integer; const AArray_Of_FeatureIDCodeType: Array_Of_FeatureIDCodeType);
    function  FeatureID_Specified(Index: Integer): boolean;
    procedure SetAllFeaturesForCategory(Index: Integer; const ABoolean: Boolean);
    function  AllFeaturesForCategory_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property CategoryID:             string                      Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property LevelLimit:             Integer                     Index (IS_OPTN) read FLevelLimit write SetLevelLimit stored LevelLimit_Specified;
    property ViewAllNodes:           Boolean                     Index (IS_OPTN) read FViewAllNodes write SetViewAllNodes stored ViewAllNodes_Specified;
    property FeatureID:              Array_Of_FeatureIDCodeType  Index (IS_OPTN or IS_UNBD) read FFeatureID write SetFeatureID stored FeatureID_Specified;
    property AllFeaturesForCategory: Boolean                     Index (IS_OPTN) read FAllFeaturesForCategory write SetAllFeaturesForCategory stored AllFeaturesForCategory_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoryFeaturesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryFeaturesRequest = class(GetCategoryFeaturesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerListRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerListRequestType = class(AbstractRequestType)
  private
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FMotorsDealerUsers: UserIDArrayType;
    FMotorsDealerUsers_Specified: boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeFrom_Specified: boolean;
    FEndTimeTo: TXSDateTime;
    FEndTimeTo_Specified: boolean;
    FSort: Integer;
    FSort_Specified: boolean;
    FStartTimeFrom: TXSDateTime;
    FStartTimeFrom_Specified: boolean;
    FStartTimeTo: TXSDateTime;
    FStartTimeTo_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FGranularityLevel: GranularityLevelCodeType;
    FGranularityLevel_Specified: boolean;
    FSKUArray: SKUArrayType;
    FSKUArray_Specified: boolean;
    FIncludeWatchCount: Boolean;
    FIncludeWatchCount_Specified: boolean;
    FAdminEndedItemsOnly: Boolean;
    FAdminEndedItemsOnly_Specified: boolean;
    FCategoryID: Integer;
    FCategoryID_Specified: boolean;
    FIncludeVariations: Boolean;
    FIncludeVariations_Specified: boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetMotorsDealerUsers(Index: Integer; const AUserIDArrayType: UserIDArrayType);
    function  MotorsDealerUsers_Specified(Index: Integer): boolean;
    procedure SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeFrom_Specified(Index: Integer): boolean;
    procedure SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeTo_Specified(Index: Integer): boolean;
    procedure SetSort(Index: Integer; const AInteger: Integer);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetStartTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTimeFrom_Specified(Index: Integer): boolean;
    procedure SetStartTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTimeTo_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetGranularityLevel(Index: Integer; const AGranularityLevelCodeType: GranularityLevelCodeType);
    function  GranularityLevel_Specified(Index: Integer): boolean;
    procedure SetSKUArray(Index: Integer; const ASKUArrayType: SKUArrayType);
    function  SKUArray_Specified(Index: Integer): boolean;
    procedure SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeWatchCount_Specified(Index: Integer): boolean;
    procedure SetAdminEndedItemsOnly(Index: Integer; const ABoolean: Boolean);
    function  AdminEndedItemsOnly_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const AInteger: Integer);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetIncludeVariations(Index: Integer; const ABoolean: Boolean);
    function  IncludeVariations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID:              UserIDType                Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property MotorsDealerUsers:   UserIDArrayType           Index (IS_OPTN) read FMotorsDealerUsers write SetMotorsDealerUsers stored MotorsDealerUsers_Specified;
    property EndTimeFrom:         TXSDateTime               Index (IS_OPTN) read FEndTimeFrom write SetEndTimeFrom stored EndTimeFrom_Specified;
    property EndTimeTo:           TXSDateTime               Index (IS_OPTN) read FEndTimeTo write SetEndTimeTo stored EndTimeTo_Specified;
    property Sort:                Integer                   Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property StartTimeFrom:       TXSDateTime               Index (IS_OPTN) read FStartTimeFrom write SetStartTimeFrom stored StartTimeFrom_Specified;
    property StartTimeTo:         TXSDateTime               Index (IS_OPTN) read FStartTimeTo write SetStartTimeTo stored StartTimeTo_Specified;
    property Pagination:          PaginationType            Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property GranularityLevel:    GranularityLevelCodeType  Index (IS_OPTN) read FGranularityLevel write SetGranularityLevel stored GranularityLevel_Specified;
    property SKUArray:            SKUArrayType              Index (IS_OPTN) read FSKUArray write SetSKUArray stored SKUArray_Specified;
    property IncludeWatchCount:   Boolean                   Index (IS_OPTN) read FIncludeWatchCount write SetIncludeWatchCount stored IncludeWatchCount_Specified;
    property AdminEndedItemsOnly: Boolean                   Index (IS_OPTN) read FAdminEndedItemsOnly write SetAdminEndedItemsOnly stored AdminEndedItemsOnly_Specified;
    property CategoryID:          Integer                   Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property IncludeVariations:   Boolean                   Index (IS_OPTN) read FIncludeVariations write SetIncludeVariations stored IncludeVariations_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerListRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerListRequest = class(GetSellerListRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoriesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoriesRequestType = class(AbstractRequestType)
  private
    FCategorySiteID: string;
    FCategorySiteID_Specified: boolean;
    FCategoryParent: SellerExcludeShipToLocationPreferencesType;
    FCategoryParent_Specified: boolean;
    FLevelLimit: Integer;
    FLevelLimit_Specified: boolean;
    FViewAllNodes: Boolean;
    FViewAllNodes_Specified: boolean;
    procedure SetCategorySiteID(Index: Integer; const Astring: string);
    function  CategorySiteID_Specified(Index: Integer): boolean;
    procedure SetCategoryParent(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CategoryParent_Specified(Index: Integer): boolean;
    procedure SetLevelLimit(Index: Integer; const AInteger: Integer);
    function  LevelLimit_Specified(Index: Integer): boolean;
    procedure SetViewAllNodes(Index: Integer; const ABoolean: Boolean);
    function  ViewAllNodes_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property CategorySiteID: string                                      Index (IS_OPTN) read FCategorySiteID write SetCategorySiteID stored CategorySiteID_Specified;
    property CategoryParent: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCategoryParent write SetCategoryParent stored CategoryParent_Specified;
    property LevelLimit:     Integer                                     Index (IS_OPTN) read FLevelLimit write SetLevelLimit stored LevelLimit_Specified;
    property ViewAllNodes:   Boolean                                     Index (IS_OPTN) read FViewAllNodes write SetViewAllNodes stored ViewAllNodes_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoriesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoriesRequest = class(GetCategoriesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetChallengeTokenRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetChallengeTokenRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetChallengeTokenRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetChallengeTokenRequest = class(GetChallengeTokenRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCharitiesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCharitiesRequestType = class(AbstractRequestType)
  private
    FCharityID: string;
    FCharityID_Specified: boolean;
    FCharityName: string;
    FCharityName_Specified: boolean;
    FQuery: string;
    FQuery_Specified: boolean;
    FCharityRegion: Integer;
    FCharityRegion_Specified: boolean;
    FCharityDomain: Integer;
    FCharityDomain_Specified: boolean;
    FIncludeDescription: Boolean;
    FIncludeDescription_Specified: boolean;
    FMatchType: StringMatchCodeType;
    FMatchType_Specified: boolean;
    FFeatured: Boolean;
    FFeatured_Specified: boolean;
    FCampaignID: Int64;
    FCampaignID_Specified: boolean;
    procedure SetCharityID(Index: Integer; const Astring: string);
    function  CharityID_Specified(Index: Integer): boolean;
    procedure SetCharityName(Index: Integer; const Astring: string);
    function  CharityName_Specified(Index: Integer): boolean;
    procedure SetQuery(Index: Integer; const Astring: string);
    function  Query_Specified(Index: Integer): boolean;
    procedure SetCharityRegion(Index: Integer; const AInteger: Integer);
    function  CharityRegion_Specified(Index: Integer): boolean;
    procedure SetCharityDomain(Index: Integer; const AInteger: Integer);
    function  CharityDomain_Specified(Index: Integer): boolean;
    procedure SetIncludeDescription(Index: Integer; const ABoolean: Boolean);
    function  IncludeDescription_Specified(Index: Integer): boolean;
    procedure SetMatchType(Index: Integer; const AStringMatchCodeType: StringMatchCodeType);
    function  MatchType_Specified(Index: Integer): boolean;
    procedure SetFeatured(Index: Integer; const ABoolean: Boolean);
    function  Featured_Specified(Index: Integer): boolean;
    procedure SetCampaignID(Index: Integer; const AInt64: Int64);
    function  CampaignID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property CharityID:          string               Index (IS_OPTN) read FCharityID write SetCharityID stored CharityID_Specified;
    property CharityName:        string               Index (IS_OPTN) read FCharityName write SetCharityName stored CharityName_Specified;
    property Query:              string               Index (IS_OPTN) read FQuery write SetQuery stored Query_Specified;
    property CharityRegion:      Integer              Index (IS_OPTN) read FCharityRegion write SetCharityRegion stored CharityRegion_Specified;
    property CharityDomain:      Integer              Index (IS_OPTN) read FCharityDomain write SetCharityDomain stored CharityDomain_Specified;
    property IncludeDescription: Boolean              Index (IS_OPTN) read FIncludeDescription write SetIncludeDescription stored IncludeDescription_Specified;
    property MatchType:          StringMatchCodeType  Index (IS_OPTN) read FMatchType write SetMatchType stored MatchType_Specified;
    property Featured:           Boolean              Index (IS_OPTN) read FFeatured write SetFeatured stored Featured_Specified;
    property CampaignID:         Int64                Index (IS_OPTN) read FCampaignID write SetCampaignID stored CampaignID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCharitiesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCharitiesRequest = class(GetCharitiesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategoryMappingsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryMappingsRequestType = class(AbstractRequestType)
  private
    FCategoryVersion: string;
    FCategoryVersion_Specified: boolean;
    procedure SetCategoryVersion(Index: Integer; const Astring: string);
    function  CategoryVersion_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property CategoryVersion: string  Index (IS_OPTN) read FCategoryVersion write SetCategoryVersion stored CategoryVersion_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategoryMappingsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategoryMappingsRequest = class(GetCategoryMappingsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetCategorySpecificsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategorySpecificsRequestType = class(AbstractRequestType)
  private
    FCategoryID: SellerExcludeShipToLocationPreferencesType;
    FCategoryID_Specified: boolean;
    FLastUpdateTime: TXSDateTime;
    FLastUpdateTime_Specified: boolean;
    FMaxNames: Integer;
    FMaxNames_Specified: boolean;
    FMaxValuesPerName: Integer;
    FMaxValuesPerName_Specified: boolean;
    FName_: string;
    FName__Specified: boolean;
    FCategorySpecific: Array_Of_CategoryItemSpecificsType;
    FCategorySpecific_Specified: boolean;
    FExcludeRelationships: Boolean;
    FExcludeRelationships_Specified: boolean;
    FIncludeConfidence: Boolean;
    FIncludeConfidence_Specified: boolean;
    FCategorySpecificsFileInfo: Boolean;
    FCategorySpecificsFileInfo_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetLastUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastUpdateTime_Specified(Index: Integer): boolean;
    procedure SetMaxNames(Index: Integer; const AInteger: Integer);
    function  MaxNames_Specified(Index: Integer): boolean;
    procedure SetMaxValuesPerName(Index: Integer; const AInteger: Integer);
    function  MaxValuesPerName_Specified(Index: Integer): boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetCategorySpecific(Index: Integer; const AArray_Of_CategoryItemSpecificsType: Array_Of_CategoryItemSpecificsType);
    function  CategorySpecific_Specified(Index: Integer): boolean;
    procedure SetExcludeRelationships(Index: Integer; const ABoolean: Boolean);
    function  ExcludeRelationships_Specified(Index: Integer): boolean;
    procedure SetIncludeConfidence(Index: Integer; const ABoolean: Boolean);
    function  IncludeConfidence_Specified(Index: Integer): boolean;
    procedure SetCategorySpecificsFileInfo(Index: Integer; const ABoolean: Boolean);
    function  CategorySpecificsFileInfo_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID:                SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property LastUpdateTime:            TXSDateTime                                 Index (IS_OPTN) read FLastUpdateTime write SetLastUpdateTime stored LastUpdateTime_Specified;
    property MaxNames:                  Integer                                     Index (IS_OPTN) read FMaxNames write SetMaxNames stored MaxNames_Specified;
    property MaxValuesPerName:          Integer                                     Index (IS_OPTN) read FMaxValuesPerName write SetMaxValuesPerName stored MaxValuesPerName_Specified;
    property Name_:                     string                                      Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property CategorySpecific:          Array_Of_CategoryItemSpecificsType          Index (IS_OPTN or IS_UNBD) read FCategorySpecific write SetCategorySpecific stored CategorySpecific_Specified;
    property ExcludeRelationships:      Boolean                                     Index (IS_OPTN) read FExcludeRelationships write SetExcludeRelationships stored ExcludeRelationships_Specified;
    property IncludeConfidence:         Boolean                                     Index (IS_OPTN) read FIncludeConfidence write SetIncludeConfidence stored IncludeConfidence_Specified;
    property CategorySpecificsFileInfo: Boolean                                     Index (IS_OPTN) read FCategorySpecificsFileInfo write SetCategorySpecificsFileInfo stored CategorySpecificsFileInfo_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetCategorySpecificsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetCategorySpecificsRequest = class(GetCategorySpecificsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetBidderListRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetBidderListRequestType = class(AbstractRequestType)
  private
    FActiveItemsOnly: Boolean;
    FActiveItemsOnly_Specified: boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeFrom_Specified: boolean;
    FEndTimeTo: TXSDateTime;
    FEndTimeTo_Specified: boolean;
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FGranularityLevel: GranularityLevelCodeType;
    FGranularityLevel_Specified: boolean;
    procedure SetActiveItemsOnly(Index: Integer; const ABoolean: Boolean);
    function  ActiveItemsOnly_Specified(Index: Integer): boolean;
    procedure SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeFrom_Specified(Index: Integer): boolean;
    procedure SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeTo_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetGranularityLevel(Index: Integer; const AGranularityLevelCodeType: GranularityLevelCodeType);
    function  GranularityLevel_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ActiveItemsOnly:  Boolean                   Index (IS_OPTN) read FActiveItemsOnly write SetActiveItemsOnly stored ActiveItemsOnly_Specified;
    property EndTimeFrom:      TXSDateTime               Index (IS_OPTN) read FEndTimeFrom write SetEndTimeFrom stored EndTimeFrom_Specified;
    property EndTimeTo:        TXSDateTime               Index (IS_OPTN) read FEndTimeTo write SetEndTimeTo stored EndTimeTo_Specified;
    property UserID:           UserIDType                Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property GranularityLevel: GranularityLevelCodeType  Index (IS_OPTN) read FGranularityLevel write SetGranularityLevel stored GranularityLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetBidderListRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetBidderListRequest = class(GetBidderListRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAdFormatLeadsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAdFormatLeadsRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FStatus: MessageStatusTypeCodeType;
    FStatus_Specified: boolean;
    FIncludeMemberMessages: Boolean;
    FIncludeMemberMessages_Specified: boolean;
    FStartCreationTime: TXSDateTime;
    FStartCreationTime_Specified: boolean;
    FEndCreationTime: TXSDateTime;
    FEndCreationTime_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetIncludeMemberMessages(Index: Integer; const ABoolean: Boolean);
    function  IncludeMemberMessages_Specified(Index: Integer): boolean;
    procedure SetStartCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartCreationTime_Specified(Index: Integer): boolean;
    procedure SetEndCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndCreationTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                ItemIDType                 Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Status:                MessageStatusTypeCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property IncludeMemberMessages: Boolean                    Index (IS_OPTN) read FIncludeMemberMessages write SetIncludeMemberMessages stored IncludeMemberMessages_Specified;
    property StartCreationTime:     TXSDateTime                Index (IS_OPTN) read FStartCreationTime write SetStartCreationTime stored StartCreationTime_Specified;
    property EndCreationTime:       TXSDateTime                Index (IS_OPTN) read FEndCreationTime write SetEndCreationTime stored EndCreationTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAdFormatLeadsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAdFormatLeadsRequest = class(GetAdFormatLeadsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAllBiddersRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAllBiddersRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FCallMode: GetAllBiddersModeCodeType;
    FCallMode_Specified: boolean;
    FIncludeBiddingSummary: Boolean;
    FIncludeBiddingSummary_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetCallMode(Index: Integer; const AGetAllBiddersModeCodeType: GetAllBiddersModeCodeType);
    function  CallMode_Specified(Index: Integer): boolean;
    procedure SetIncludeBiddingSummary(Index: Integer; const ABoolean: Boolean);
    function  IncludeBiddingSummary_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:                ItemIDType                 Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property CallMode:              GetAllBiddersModeCodeType  Index (IS_OPTN) read FCallMode write SetCallMode stored CallMode_Specified;
    property IncludeBiddingSummary: Boolean                    Index (IS_OPTN) read FIncludeBiddingSummary write SetIncludeBiddingSummary stored IncludeBiddingSummary_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAllBiddersRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAllBiddersRequest = class(GetAllBiddersRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RespondToBestOfferRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToBestOfferRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FBestOfferID: Array_Of_BestOfferIDType;
    FBestOfferID_Specified: boolean;
    FAction: BestOfferActionCodeType;
    FAction_Specified: boolean;
    FSellerResponse: string;
    FSellerResponse_Specified: boolean;
    FCounterOfferPrice: AmountType;
    FCounterOfferPrice_Specified: boolean;
    FCounterOfferQuantity: Integer;
    FCounterOfferQuantity_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetBestOfferID(Index: Integer; const AArray_Of_BestOfferIDType: Array_Of_BestOfferIDType);
    function  BestOfferID_Specified(Index: Integer): boolean;
    procedure SetAction(Index: Integer; const ABestOfferActionCodeType: BestOfferActionCodeType);
    function  Action_Specified(Index: Integer): boolean;
    procedure SetSellerResponse(Index: Integer; const Astring: string);
    function  SellerResponse_Specified(Index: Integer): boolean;
    procedure SetCounterOfferPrice(Index: Integer; const AAmountType: AmountType);
    function  CounterOfferPrice_Specified(Index: Integer): boolean;
    procedure SetCounterOfferQuantity(Index: Integer; const AInteger: Integer);
    function  CounterOfferQuantity_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:               ItemIDType                Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property BestOfferID:          Array_Of_BestOfferIDType  Index (IS_OPTN or IS_UNBD) read FBestOfferID write SetBestOfferID stored BestOfferID_Specified;
    property Action:               BestOfferActionCodeType   Index (IS_OPTN) read FAction write SetAction stored Action_Specified;
    property SellerResponse:       string                    Index (IS_OPTN) read FSellerResponse write SetSellerResponse stored SellerResponse_Specified;
    property CounterOfferPrice:    AmountType                Index (IS_OPTN) read FCounterOfferPrice write SetCounterOfferPrice stored CounterOfferPrice_Specified;
    property CounterOfferQuantity: Integer                   Index (IS_OPTN) read FCounterOfferQuantity write SetCounterOfferQuantity stored CounterOfferQuantity_Specified;
  end;



  // ************************************************************************ //
  // XML       : RespondToBestOfferRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToBestOfferRequest = class(RespondToBestOfferRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetBestOffersRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetBestOffersRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FBestOfferID: BestOfferIDType;
    FBestOfferID_Specified: boolean;
    FBestOfferStatus: BestOfferStatusCodeType;
    FBestOfferStatus_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
    function  BestOfferID_Specified(Index: Integer): boolean;
    procedure SetBestOfferStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
    function  BestOfferStatus_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:          ItemIDType               Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property BestOfferID:     BestOfferIDType          Index (IS_OPTN) read FBestOfferID write SetBestOfferID stored BestOfferID_Specified;
    property BestOfferStatus: BestOfferStatusCodeType  Index (IS_OPTN) read FBestOfferStatus write SetBestOfferStatus stored BestOfferStatus_Specified;
    property Pagination:      PaginationType           Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetBestOffersRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetBestOffersRequest = class(GetBestOffersRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetApiAccessRulesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetApiAccessRulesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetApiAccessRulesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetApiAccessRulesRequest = class(GetApiAccessRulesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMemberMessagesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMemberMessagesRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FMailMessageType: MessageTypeCodeType;
    FMailMessageType_Specified: boolean;
    FMessageStatus: MessageStatusTypeCodeType;
    FMessageStatus_Specified: boolean;
    FDisplayToPublic: Boolean;
    FDisplayToPublic_Specified: boolean;
    FStartCreationTime: TXSDateTime;
    FStartCreationTime_Specified: boolean;
    FEndCreationTime: TXSDateTime;
    FEndCreationTime_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FMemberMessageID: string;
    FMemberMessageID_Specified: boolean;
    FSenderID: UserIDType;
    FSenderID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMailMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
    function  MailMessageType_Specified(Index: Integer): boolean;
    procedure SetMessageStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
    function  MessageStatus_Specified(Index: Integer): boolean;
    procedure SetDisplayToPublic(Index: Integer; const ABoolean: Boolean);
    function  DisplayToPublic_Specified(Index: Integer): boolean;
    procedure SetStartCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartCreationTime_Specified(Index: Integer): boolean;
    procedure SetEndCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndCreationTime_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetMemberMessageID(Index: Integer; const Astring: string);
    function  MemberMessageID_Specified(Index: Integer): boolean;
    procedure SetSenderID(Index: Integer; const AUserIDType: UserIDType);
    function  SenderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:            ItemIDType                 Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property MailMessageType:   MessageTypeCodeType        Index (IS_OPTN) read FMailMessageType write SetMailMessageType stored MailMessageType_Specified;
    property MessageStatus:     MessageStatusTypeCodeType  Index (IS_OPTN) read FMessageStatus write SetMessageStatus stored MessageStatus_Specified;
    property DisplayToPublic:   Boolean                    Index (IS_OPTN) read FDisplayToPublic write SetDisplayToPublic stored DisplayToPublic_Specified;
    property StartCreationTime: TXSDateTime                Index (IS_OPTN) read FStartCreationTime write SetStartCreationTime stored StartCreationTime_Specified;
    property EndCreationTime:   TXSDateTime                Index (IS_OPTN) read FEndCreationTime write SetEndCreationTime stored EndCreationTime_Specified;
    property Pagination:        PaginationType             Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property MemberMessageID:   string                     Index (IS_OPTN) read FMemberMessageID write SetMemberMessageID stored MemberMessageID_Specified;
    property SenderID:          UserIDType                 Index (IS_OPTN) read FSenderID write SetSenderID stored SenderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMemberMessagesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMemberMessagesRequest = class(GetMemberMessagesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMessagePreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMessagePreferencesRequestType = class(AbstractRequestType)
  private
    FSellerID: UserIDType;
    FSellerID_Specified: boolean;
    FIncludeASQPreferences: Boolean;
    FIncludeASQPreferences_Specified: boolean;
    procedure SetSellerID(Index: Integer; const AUserIDType: UserIDType);
    function  SellerID_Specified(Index: Integer): boolean;
    procedure SetIncludeASQPreferences(Index: Integer; const ABoolean: Boolean);
    function  IncludeASQPreferences_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SellerID:              UserIDType  Index (IS_OPTN) read FSellerID write SetSellerID stored SellerID_Specified;
    property IncludeASQPreferences: Boolean     Index (IS_OPTN) read FIncludeASQPreferences write SetIncludeASQPreferences stored IncludeASQPreferences_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMessagePreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMessagePreferencesRequest = class(GetMessagePreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerTransactionsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerTransactionsRequestType = class(AbstractRequestType)
  private
    FModTimeFrom: TXSDateTime;
    FModTimeFrom_Specified: boolean;
    FModTimeTo: TXSDateTime;
    FModTimeTo_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FIncludeFinalValueFee: Boolean;
    FIncludeFinalValueFee_Specified: boolean;
    FIncludeContainingOrder: Boolean;
    FIncludeContainingOrder_Specified: boolean;
    FSKUArray: SKUArrayType;
    FSKUArray_Specified: boolean;
    FPlatform_: TransactionPlatformCodeType;
    FPlatform__Specified: boolean;
    FNumberOfDays: Integer;
    FNumberOfDays_Specified: boolean;
    FInventoryTrackingMethod: InventoryTrackingMethodCodeType;
    FInventoryTrackingMethod_Specified: boolean;
    FIncludeCodiceFiscale: Boolean;
    FIncludeCodiceFiscale_Specified: boolean;
    procedure SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeFrom_Specified(Index: Integer): boolean;
    procedure SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeTo_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
    function  IncludeFinalValueFee_Specified(Index: Integer): boolean;
    procedure SetIncludeContainingOrder(Index: Integer; const ABoolean: Boolean);
    function  IncludeContainingOrder_Specified(Index: Integer): boolean;
    procedure SetSKUArray(Index: Integer; const ASKUArrayType: SKUArrayType);
    function  SKUArray_Specified(Index: Integer): boolean;
    procedure SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
    function  Platform__Specified(Index: Integer): boolean;
    procedure SetNumberOfDays(Index: Integer; const AInteger: Integer);
    function  NumberOfDays_Specified(Index: Integer): boolean;
    procedure SetInventoryTrackingMethod(Index: Integer; const AInventoryTrackingMethodCodeType: InventoryTrackingMethodCodeType);
    function  InventoryTrackingMethod_Specified(Index: Integer): boolean;
    procedure SetIncludeCodiceFiscale(Index: Integer; const ABoolean: Boolean);
    function  IncludeCodiceFiscale_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ModTimeFrom:             TXSDateTime                      Index (IS_OPTN) read FModTimeFrom write SetModTimeFrom stored ModTimeFrom_Specified;
    property ModTimeTo:               TXSDateTime                      Index (IS_OPTN) read FModTimeTo write SetModTimeTo stored ModTimeTo_Specified;
    property Pagination:              PaginationType                   Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property IncludeFinalValueFee:    Boolean                          Index (IS_OPTN) read FIncludeFinalValueFee write SetIncludeFinalValueFee stored IncludeFinalValueFee_Specified;
    property IncludeContainingOrder:  Boolean                          Index (IS_OPTN) read FIncludeContainingOrder write SetIncludeContainingOrder stored IncludeContainingOrder_Specified;
    property SKUArray:                SKUArrayType                     Index (IS_OPTN) read FSKUArray write SetSKUArray stored SKUArray_Specified;
    property Platform_:               TransactionPlatformCodeType      Index (IS_OPTN) read FPlatform_ write SetPlatform_ stored Platform__Specified;
    property NumberOfDays:            Integer                          Index (IS_OPTN) read FNumberOfDays write SetNumberOfDays stored NumberOfDays_Specified;
    property InventoryTrackingMethod: InventoryTrackingMethodCodeType  Index (IS_OPTN) read FInventoryTrackingMethod write SetInventoryTrackingMethod stored InventoryTrackingMethod_Specified;
    property IncludeCodiceFiscale:    Boolean                          Index (IS_OPTN) read FIncludeCodiceFiscale write SetIncludeCodiceFiscale stored IncludeCodiceFiscale_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerTransactionsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerTransactionsRequest = class(GetSellerTransactionsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetOrderTransactionsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrderTransactionsRequestType = class(AbstractRequestType)
  private
    FItemTransactionIDArray: ItemTransactionIDArrayType;
    FItemTransactionIDArray_Specified: boolean;
    FOrderIDArray: OrderIDArrayType;
    FOrderIDArray_Specified: boolean;
    FPlatform_: TransactionPlatformCodeType;
    FPlatform__Specified: boolean;
    FIncludeFinalValueFees: Boolean;
    FIncludeFinalValueFees_Specified: boolean;
    procedure SetItemTransactionIDArray(Index: Integer; const AItemTransactionIDArrayType: ItemTransactionIDArrayType);
    function  ItemTransactionIDArray_Specified(Index: Integer): boolean;
    procedure SetOrderIDArray(Index: Integer; const AOrderIDArrayType: OrderIDArrayType);
    function  OrderIDArray_Specified(Index: Integer): boolean;
    procedure SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
    function  Platform__Specified(Index: Integer): boolean;
    procedure SetIncludeFinalValueFees(Index: Integer; const ABoolean: Boolean);
    function  IncludeFinalValueFees_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemTransactionIDArray: ItemTransactionIDArrayType   Index (IS_OPTN) read FItemTransactionIDArray write SetItemTransactionIDArray stored ItemTransactionIDArray_Specified;
    property OrderIDArray:           OrderIDArrayType             Index (IS_OPTN) read FOrderIDArray write SetOrderIDArray stored OrderIDArray_Specified;
    property Platform_:              TransactionPlatformCodeType  Index (IS_OPTN) read FPlatform_ write SetPlatform_ stored Platform__Specified;
    property IncludeFinalValueFees:  Boolean                      Index (IS_OPTN) read FIncludeFinalValueFees write SetIncludeFinalValueFees stored IncludeFinalValueFees_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetOrderTransactionsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrderTransactionsRequest = class(GetOrderTransactionsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemTransactionsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemTransactionsRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FModTimeFrom: TXSDateTime;
    FModTimeFrom_Specified: boolean;
    FModTimeTo: TXSDateTime;
    FModTimeTo_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FIncludeFinalValueFee: Boolean;
    FIncludeFinalValueFee_Specified: boolean;
    FIncludeContainingOrder: Boolean;
    FIncludeContainingOrder_Specified: boolean;
    FPlatform_: TransactionPlatformCodeType;
    FPlatform__Specified: boolean;
    FNumberOfDays: Integer;
    FNumberOfDays_Specified: boolean;
    FIncludeVariations: Boolean;
    FIncludeVariations_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeFrom_Specified(Index: Integer): boolean;
    procedure SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeTo_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
    function  IncludeFinalValueFee_Specified(Index: Integer): boolean;
    procedure SetIncludeContainingOrder(Index: Integer; const ABoolean: Boolean);
    function  IncludeContainingOrder_Specified(Index: Integer): boolean;
    procedure SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
    function  Platform__Specified(Index: Integer): boolean;
    procedure SetNumberOfDays(Index: Integer; const AInteger: Integer);
    function  NumberOfDays_Specified(Index: Integer): boolean;
    procedure SetIncludeVariations(Index: Integer; const ABoolean: Boolean);
    function  IncludeVariations_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                 ItemIDType                   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ModTimeFrom:            TXSDateTime                  Index (IS_OPTN) read FModTimeFrom write SetModTimeFrom stored ModTimeFrom_Specified;
    property ModTimeTo:              TXSDateTime                  Index (IS_OPTN) read FModTimeTo write SetModTimeTo stored ModTimeTo_Specified;
    property TransactionID:          string                       Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property Pagination:             PaginationType               Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property IncludeFinalValueFee:   Boolean                      Index (IS_OPTN) read FIncludeFinalValueFee write SetIncludeFinalValueFee stored IncludeFinalValueFee_Specified;
    property IncludeContainingOrder: Boolean                      Index (IS_OPTN) read FIncludeContainingOrder write SetIncludeContainingOrder stored IncludeContainingOrder_Specified;
    property Platform_:              TransactionPlatformCodeType  Index (IS_OPTN) read FPlatform_ write SetPlatform_ stored Platform__Specified;
    property NumberOfDays:           Integer                      Index (IS_OPTN) read FNumberOfDays write SetNumberOfDays stored NumberOfDays_Specified;
    property IncludeVariations:      Boolean                      Index (IS_OPTN) read FIncludeVariations write SetIncludeVariations stored IncludeVariations_Specified;
    property OrderLineItemID:        string                       Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemTransactionsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemTransactionsRequest = class(GetItemTransactionsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemsAwaitingFeedbackRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemsAwaitingFeedbackRequestType = class(AbstractRequestType)
  private
    FSort: ItemSortTypeCodeType;
    FSort_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    procedure SetSort(Index: Integer; const AItemSortTypeCodeType: ItemSortTypeCodeType);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Sort:       ItemSortTypeCodeType  Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property Pagination: PaginationType        Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemsAwaitingFeedbackRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemsAwaitingFeedbackRequest = class(GetItemsAwaitingFeedbackRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayBuyingRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayBuyingRequestType = class(AbstractRequestType)
  private
    FWatchList: ItemListCustomizationType;
    FWatchList_Specified: boolean;
    FBidList: ItemListCustomizationType;
    FBidList_Specified: boolean;
    FBestOfferList: ItemListCustomizationType;
    FBestOfferList_Specified: boolean;
    FWonList: ItemListCustomizationType;
    FWonList_Specified: boolean;
    FLostList: ItemListCustomizationType;
    FLostList_Specified: boolean;
    FFavoriteSearches: MyeBaySelectionType;
    FFavoriteSearches_Specified: boolean;
    FFavoriteSellers: MyeBaySelectionType;
    FFavoriteSellers_Specified: boolean;
    FSecondChanceOffer: MyeBaySelectionType;
    FSecondChanceOffer_Specified: boolean;
    FBidAssistantList: BidAssistantListType;
    FBidAssistantList_Specified: boolean;
    FDeletedFromWonList: ItemListCustomizationType;
    FDeletedFromWonList_Specified: boolean;
    FDeletedFromLostList: ItemListCustomizationType;
    FDeletedFromLostList_Specified: boolean;
    FBuyingSummary: ItemListCustomizationType;
    FBuyingSummary_Specified: boolean;
    FUserDefinedLists: MyeBaySelectionType;
    FUserDefinedLists_Specified: boolean;
    FHideVariations: Boolean;
    FHideVariations_Specified: boolean;
    procedure SetWatchList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  WatchList_Specified(Index: Integer): boolean;
    procedure SetBidList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  BidList_Specified(Index: Integer): boolean;
    procedure SetBestOfferList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  BestOfferList_Specified(Index: Integer): boolean;
    procedure SetWonList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  WonList_Specified(Index: Integer): boolean;
    procedure SetLostList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  LostList_Specified(Index: Integer): boolean;
    procedure SetFavoriteSearches(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
    function  FavoriteSearches_Specified(Index: Integer): boolean;
    procedure SetFavoriteSellers(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
    function  FavoriteSellers_Specified(Index: Integer): boolean;
    procedure SetSecondChanceOffer(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
    function  SecondChanceOffer_Specified(Index: Integer): boolean;
    procedure SetBidAssistantList(Index: Integer; const ABidAssistantListType: BidAssistantListType);
    function  BidAssistantList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromWonList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  DeletedFromWonList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromLostList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  DeletedFromLostList_Specified(Index: Integer): boolean;
    procedure SetBuyingSummary(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  BuyingSummary_Specified(Index: Integer): boolean;
    procedure SetUserDefinedLists(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
    function  UserDefinedLists_Specified(Index: Integer): boolean;
    procedure SetHideVariations(Index: Integer; const ABoolean: Boolean);
    function  HideVariations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property WatchList:           ItemListCustomizationType  Index (IS_OPTN) read FWatchList write SetWatchList stored WatchList_Specified;
    property BidList:             ItemListCustomizationType  Index (IS_OPTN) read FBidList write SetBidList stored BidList_Specified;
    property BestOfferList:       ItemListCustomizationType  Index (IS_OPTN) read FBestOfferList write SetBestOfferList stored BestOfferList_Specified;
    property WonList:             ItemListCustomizationType  Index (IS_OPTN) read FWonList write SetWonList stored WonList_Specified;
    property LostList:            ItemListCustomizationType  Index (IS_OPTN) read FLostList write SetLostList stored LostList_Specified;
    property FavoriteSearches:    MyeBaySelectionType        Index (IS_OPTN) read FFavoriteSearches write SetFavoriteSearches stored FavoriteSearches_Specified;
    property FavoriteSellers:     MyeBaySelectionType        Index (IS_OPTN) read FFavoriteSellers write SetFavoriteSellers stored FavoriteSellers_Specified;
    property SecondChanceOffer:   MyeBaySelectionType        Index (IS_OPTN) read FSecondChanceOffer write SetSecondChanceOffer stored SecondChanceOffer_Specified;
    property BidAssistantList:    BidAssistantListType       Index (IS_OPTN) read FBidAssistantList write SetBidAssistantList stored BidAssistantList_Specified;
    property DeletedFromWonList:  ItemListCustomizationType  Index (IS_OPTN) read FDeletedFromWonList write SetDeletedFromWonList stored DeletedFromWonList_Specified;
    property DeletedFromLostList: ItemListCustomizationType  Index (IS_OPTN) read FDeletedFromLostList write SetDeletedFromLostList stored DeletedFromLostList_Specified;
    property BuyingSummary:       ItemListCustomizationType  Index (IS_OPTN) read FBuyingSummary write SetBuyingSummary stored BuyingSummary_Specified;
    property UserDefinedLists:    MyeBaySelectionType        Index (IS_OPTN) read FUserDefinedLists write SetUserDefinedLists stored UserDefinedLists_Specified;
    property HideVariations:      Boolean                    Index (IS_OPTN) read FHideVariations write SetHideVariations stored HideVariations_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayBuyingRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayBuyingRequest = class(GetMyeBayBuyingRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyMessagesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyMessagesRequestType = class(AbstractRequestType)
  private
    FAlertIDs: MyMessagesAlertIDArrayType;
    FAlertIDs_Specified: boolean;
    FMessageIDs: MyMessagesMessageIDArrayType;
    FMessageIDs_Specified: boolean;
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FExternalMessageIDs: MyMessagesExternalMessageIDArrayType;
    FExternalMessageIDs_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FIncludeHighPriorityMessageOnly: Boolean;
    FIncludeHighPriorityMessageOnly_Specified: boolean;
    procedure SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
    function  AlertIDs_Specified(Index: Integer): boolean;
    procedure SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
    function  MessageIDs_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetExternalMessageIDs(Index: Integer; const AMyMessagesExternalMessageIDArrayType: MyMessagesExternalMessageIDArrayType);
    function  ExternalMessageIDs_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetIncludeHighPriorityMessageOnly(Index: Integer; const ABoolean: Boolean);
    function  IncludeHighPriorityMessageOnly_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AlertIDs:                       MyMessagesAlertIDArrayType            Index (IS_OPTN) read FAlertIDs write SetAlertIDs stored AlertIDs_Specified;
    property MessageIDs:                     MyMessagesMessageIDArrayType          Index (IS_OPTN) read FMessageIDs write SetMessageIDs stored MessageIDs_Specified;
    property FolderID:                       Int64                                 Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property StartTime:                      TXSDateTime                           Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:                        TXSDateTime                           Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property ExternalMessageIDs:             MyMessagesExternalMessageIDArrayType  Index (IS_OPTN) read FExternalMessageIDs write SetExternalMessageIDs stored ExternalMessageIDs_Specified;
    property Pagination:                     PaginationType                        Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property IncludeHighPriorityMessageOnly: Boolean                               Index (IS_OPTN) read FIncludeHighPriorityMessageOnly write SetIncludeHighPriorityMessageOnly stored IncludeHighPriorityMessageOnly_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyMessagesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyMessagesRequest = class(GetMyMessagesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetDisputeRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DisputeID: DisputeIDType  Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetDisputeRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetDisputeRequest = class(GetDisputeRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetDescriptionTemplatesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetDescriptionTemplatesRequestType = class(AbstractRequestType)
  private
    FCategoryID: string;
    FCategoryID_Specified: boolean;
    FLastModifiedTime: TXSDateTime;
    FLastModifiedTime_Specified: boolean;
    FMotorVehicles: Boolean;
    FMotorVehicles_Specified: boolean;
    procedure SetCategoryID(Index: Integer; const Astring: string);
    function  CategoryID_Specified(Index: Integer): boolean;
    procedure SetLastModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  LastModifiedTime_Specified(Index: Integer): boolean;
    procedure SetMotorVehicles(Index: Integer; const ABoolean: Boolean);
    function  MotorVehicles_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID:       string       Index (IS_OPTN) read FCategoryID write SetCategoryID stored CategoryID_Specified;
    property LastModifiedTime: TXSDateTime  Index (IS_OPTN) read FLastModifiedTime write SetLastModifiedTime stored LastModifiedTime_Specified;
    property MotorVehicles:    Boolean      Index (IS_OPTN) read FMotorVehicles write SetMotorVehicles stored MotorVehicles_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetDescriptionTemplatesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetDescriptionTemplatesRequest = class(GetDescriptionTemplatesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetClientAlertsAuthTokenRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetClientAlertsAuthTokenRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetClientAlertsAuthTokenRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetClientAlertsAuthTokenRequest = class(GetClientAlertsAuthTokenRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetContextualKeywordsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetContextualKeywordsRequestType = class(AbstractRequestType)
  private
    FURL: string;
    FURL_Specified: boolean;
    FEncoding: string;
    FEncoding_Specified: boolean;
    FCategoryID: SellerExcludeShipToLocationPreferencesType;
    FCategoryID_Specified: boolean;
    procedure SetURL(Index: Integer; const Astring: string);
    function  URL_Specified(Index: Integer): boolean;
    procedure SetEncoding(Index: Integer; const Astring: string);
    function  Encoding_Specified(Index: Integer): boolean;
    procedure SetCategoryID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CategoryID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property URL:        string                                      Index (IS_OPTN) read FURL write SetURL stored URL_Specified;
    property Encoding:   string                                      Index (IS_OPTN) read FEncoding write SetEncoding stored Encoding_Specified;
    property CategoryID: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCategoryID write SetCategoryID stored CategoryID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetContextualKeywordsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetContextualKeywordsRequest = class(GetContextualKeywordsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemShippingRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemShippingRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FQuantitySold: Integer;
    FQuantitySold_Specified: boolean;
    FDestinationPostalCode: string;
    FDestinationPostalCode_Specified: boolean;
    FDestinationCountryCode: CountryCodeType;
    FDestinationCountryCode_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetQuantitySold(Index: Integer; const AInteger: Integer);
    function  QuantitySold_Specified(Index: Integer): boolean;
    procedure SetDestinationPostalCode(Index: Integer; const Astring: string);
    function  DestinationPostalCode_Specified(Index: Integer): boolean;
    procedure SetDestinationCountryCode(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  DestinationCountryCode_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:                 ItemIDType       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property QuantitySold:           Integer          Index (IS_OPTN) read FQuantitySold write SetQuantitySold stored QuantitySold_Specified;
    property DestinationPostalCode:  string           Index (IS_OPTN) read FDestinationPostalCode write SetDestinationPostalCode stored DestinationPostalCode_Specified;
    property DestinationCountryCode: CountryCodeType  Index (IS_OPTN) read FDestinationCountryCode write SetDestinationCountryCode stored DestinationCountryCode_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemShippingRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemShippingRequest = class(GetItemShippingRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PlaceOfferRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  PlaceOfferRequestType = class(AbstractRequestType)
  private
    FOffer: OfferType;
    FOffer_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FBlockOnWarning: Boolean;
    FBlockOnWarning_Specified: boolean;
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
    FAffiliateTrackingDetails_Specified: boolean;
    FVariationSpecifics: NameValueListArrayType;
    FVariationSpecifics_Specified: boolean;
    procedure SetOffer(Index: Integer; const AOfferType: OfferType);
    function  Offer_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetBlockOnWarning(Index: Integer; const ABoolean: Boolean);
    function  BlockOnWarning_Specified(Index: Integer): boolean;
    procedure SetAffiliateTrackingDetails(Index: Integer; const AAffiliateTrackingDetailsType: AffiliateTrackingDetailsType);
    function  AffiliateTrackingDetails_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Offer:                    OfferType                     Index (IS_OPTN) read FOffer write SetOffer stored Offer_Specified;
    property ItemID:                   ItemIDType                    Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property BlockOnWarning:           Boolean                       Index (IS_OPTN) read FBlockOnWarning write SetBlockOnWarning stored BlockOnWarning_Specified;
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType  Index (IS_OPTN) read FAffiliateTrackingDetails write SetAffiliateTrackingDetails stored AffiliateTrackingDetails_Specified;
    property VariationSpecifics:       NameValueListArrayType        Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : PlaceOfferRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  PlaceOfferRequest = class(PlaceOfferRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FIncludeWatchCount: Boolean;
    FIncludeWatchCount_Specified: boolean;
    FIncludeCrossPromotion: Boolean;
    FIncludeCrossPromotion_Specified: boolean;
    FIncludeItemSpecifics: Boolean;
    FIncludeItemSpecifics_Specified: boolean;
    FIncludeTaxTable: Boolean;
    FIncludeTaxTable_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FVariationSKU: SKUType;
    FVariationSKU_Specified: boolean;
    FVariationSpecifics: NameValueListArrayType;
    FVariationSpecifics_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FIncludeItemCompatibilityList: Boolean;
    FIncludeItemCompatibilityList_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeWatchCount_Specified(Index: Integer): boolean;
    procedure SetIncludeCrossPromotion(Index: Integer; const ABoolean: Boolean);
    function  IncludeCrossPromotion_Specified(Index: Integer): boolean;
    procedure SetIncludeItemSpecifics(Index: Integer; const ABoolean: Boolean);
    function  IncludeItemSpecifics_Specified(Index: Integer): boolean;
    procedure SetIncludeTaxTable(Index: Integer; const ABoolean: Boolean);
    function  IncludeTaxTable_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetVariationSKU(Index: Integer; const ASKUType: SKUType);
    function  VariationSKU_Specified(Index: Integer): boolean;
    procedure SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  VariationSpecifics_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetIncludeItemCompatibilityList(Index: Integer; const ABoolean: Boolean);
    function  IncludeItemCompatibilityList_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                       ItemIDType              Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property IncludeWatchCount:            Boolean                 Index (IS_OPTN) read FIncludeWatchCount write SetIncludeWatchCount stored IncludeWatchCount_Specified;
    property IncludeCrossPromotion:        Boolean                 Index (IS_OPTN) read FIncludeCrossPromotion write SetIncludeCrossPromotion stored IncludeCrossPromotion_Specified;
    property IncludeItemSpecifics:         Boolean                 Index (IS_OPTN) read FIncludeItemSpecifics write SetIncludeItemSpecifics stored IncludeItemSpecifics_Specified;
    property IncludeTaxTable:              Boolean                 Index (IS_OPTN) read FIncludeTaxTable write SetIncludeTaxTable stored IncludeTaxTable_Specified;
    property SKU:                          SKUType                 Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property VariationSKU:                 SKUType                 Index (IS_OPTN) read FVariationSKU write SetVariationSKU stored VariationSKU_Specified;
    property VariationSpecifics:           NameValueListArrayType  Index (IS_OPTN) read FVariationSpecifics write SetVariationSpecifics stored VariationSpecifics_Specified;
    property TransactionID:                string                  Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property IncludeItemCompatibilityList: Boolean                 Index (IS_OPTN) read FIncludeItemCompatibilityList write SetIncludeItemCompatibilityList stored IncludeItemCompatibilityList_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetItemRequest = class(GetItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : LeaveFeedbackRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  LeaveFeedbackRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FCommentText: string;
    FCommentText_Specified: boolean;
    FCommentType: CommentTypeCodeType;
    FCommentType_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FTargetUser: UserIDType;
    FTargetUser_Specified: boolean;
    FSellerItemRatingDetailArray: ItemRatingDetailArrayType;
    FSellerItemRatingDetailArray_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    FItemArrivedWithinEDDType: ItemArrivedWithinEDDCodeType;
    FItemArrivedWithinEDDType_Specified: boolean;
    FItemDeliveredWithinEDD: Boolean;
    FItemDeliveredWithinEDD_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetCommentText(Index: Integer; const Astring: string);
    function  CommentText_Specified(Index: Integer): boolean;
    procedure SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
    function  CommentType_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetTargetUser(Index: Integer; const AUserIDType: UserIDType);
    function  TargetUser_Specified(Index: Integer): boolean;
    procedure SetSellerItemRatingDetailArray(Index: Integer; const AItemRatingDetailArrayType: ItemRatingDetailArrayType);
    function  SellerItemRatingDetailArray_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
    procedure SetItemArrivedWithinEDDType(Index: Integer; const AItemArrivedWithinEDDCodeType: ItemArrivedWithinEDDCodeType);
    function  ItemArrivedWithinEDDType_Specified(Index: Integer): boolean;
    procedure SetItemDeliveredWithinEDD(Index: Integer; const ABoolean: Boolean);
    function  ItemDeliveredWithinEDD_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:                      ItemIDType                    Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property CommentText:                 string                        Index (IS_OPTN) read FCommentText write SetCommentText stored CommentText_Specified;
    property CommentType:                 CommentTypeCodeType           Index (IS_OPTN) read FCommentType write SetCommentType stored CommentType_Specified;
    property TransactionID:               string                        Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property TargetUser:                  UserIDType                    Index (IS_OPTN) read FTargetUser write SetTargetUser stored TargetUser_Specified;
    property SellerItemRatingDetailArray: ItemRatingDetailArrayType     Index (IS_OPTN) read FSellerItemRatingDetailArray write SetSellerItemRatingDetailArray stored SellerItemRatingDetailArray_Specified;
    property OrderLineItemID:             string                        Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
    property ItemArrivedWithinEDDType:    ItemArrivedWithinEDDCodeType  Index (IS_OPTN) read FItemArrivedWithinEDDType write SetItemArrivedWithinEDDType stored ItemArrivedWithinEDDType_Specified;
    property ItemDeliveredWithinEDD:      Boolean                       Index (IS_OPTN) read FItemDeliveredWithinEDD write SetItemDeliveredWithinEDD stored ItemDeliveredWithinEDD_Specified;
  end;



  // ************************************************************************ //
  // XML       : LeaveFeedbackRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  LeaveFeedbackRequest = class(LeaveFeedbackRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetFeedbackRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetFeedbackRequestType = class(AbstractRequestType)
  private
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FFeedbackID: string;
    FFeedbackID_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FCommentType: Array_Of_CommentTypeCodeType;
    FCommentType_Specified: boolean;
    FFeedbackType: FeedbackTypeCodeType;
    FFeedbackType_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetFeedbackID(Index: Integer; const Astring: string);
    function  FeedbackID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetCommentType(Index: Integer; const AArray_Of_CommentTypeCodeType: Array_Of_CommentTypeCodeType);
    function  CommentType_Specified(Index: Integer): boolean;
    procedure SetFeedbackType(Index: Integer; const AFeedbackTypeCodeType: FeedbackTypeCodeType);
    function  FeedbackType_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID:          UserIDType                    Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property FeedbackID:      string                        Index (IS_OPTN) read FFeedbackID write SetFeedbackID stored FeedbackID_Specified;
    property ItemID:          ItemIDType                    Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string                        Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property CommentType:     Array_Of_CommentTypeCodeType  Index (IS_OPTN or IS_UNBD) read FCommentType write SetCommentType stored CommentType_Specified;
    property FeedbackType:    FeedbackTypeCodeType          Index (IS_OPTN) read FFeedbackType write SetFeedbackType stored FeedbackType_Specified;
    property Pagination:      PaginationType                Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property OrderLineItemID: string                        Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetFeedbackRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetFeedbackRequest = class(GetFeedbackRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetAccountRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetAccountRequestType = class(AbstractRequestType)
  private
    FAccountHistorySelection: AccountHistorySelectionCodeType;
    FAccountHistorySelection_Specified: boolean;
    FInvoiceDate: TXSDateTime;
    FInvoiceDate_Specified: boolean;
    FBeginDate: TXSDateTime;
    FBeginDate_Specified: boolean;
    FEndDate: TXSDateTime;
    FEndDate_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FExcludeBalance: Boolean;
    FExcludeBalance_Specified: boolean;
    FExcludeSummary: Boolean;
    FExcludeSummary_Specified: boolean;
    FIncludeConversionRate: Boolean;
    FIncludeConversionRate_Specified: boolean;
    FAccountEntrySortType: AccountEntrySortTypeCodeType;
    FAccountEntrySortType_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FOrderID: string;
    FOrderID_Specified: boolean;
    procedure SetAccountHistorySelection(Index: Integer; const AAccountHistorySelectionCodeType: AccountHistorySelectionCodeType);
    function  AccountHistorySelection_Specified(Index: Integer): boolean;
    procedure SetInvoiceDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InvoiceDate_Specified(Index: Integer): boolean;
    procedure SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  BeginDate_Specified(Index: Integer): boolean;
    procedure SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndDate_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetExcludeBalance(Index: Integer; const ABoolean: Boolean);
    function  ExcludeBalance_Specified(Index: Integer): boolean;
    procedure SetExcludeSummary(Index: Integer; const ABoolean: Boolean);
    function  ExcludeSummary_Specified(Index: Integer): boolean;
    procedure SetIncludeConversionRate(Index: Integer; const ABoolean: Boolean);
    function  IncludeConversionRate_Specified(Index: Integer): boolean;
    procedure SetAccountEntrySortType(Index: Integer; const AAccountEntrySortTypeCodeType: AccountEntrySortTypeCodeType);
    function  AccountEntrySortType_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const Astring: string);
    function  OrderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AccountHistorySelection: AccountHistorySelectionCodeType  Index (IS_OPTN) read FAccountHistorySelection write SetAccountHistorySelection stored AccountHistorySelection_Specified;
    property InvoiceDate:             TXSDateTime                      Index (IS_OPTN) read FInvoiceDate write SetInvoiceDate stored InvoiceDate_Specified;
    property BeginDate:               TXSDateTime                      Index (IS_OPTN) read FBeginDate write SetBeginDate stored BeginDate_Specified;
    property EndDate:                 TXSDateTime                      Index (IS_OPTN) read FEndDate write SetEndDate stored EndDate_Specified;
    property Pagination:              PaginationType                   Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property ExcludeBalance:          Boolean                          Index (IS_OPTN) read FExcludeBalance write SetExcludeBalance stored ExcludeBalance_Specified;
    property ExcludeSummary:          Boolean                          Index (IS_OPTN) read FExcludeSummary write SetExcludeSummary stored ExcludeSummary_Specified;
    property IncludeConversionRate:   Boolean                          Index (IS_OPTN) read FIncludeConversionRate write SetIncludeConversionRate stored IncludeConversionRate_Specified;
    property AccountEntrySortType:    AccountEntrySortTypeCodeType     Index (IS_OPTN) read FAccountEntrySortType write SetAccountEntrySortType stored AccountEntrySortType_Specified;
    property Currency:                CurrencyCodeType                 Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property ItemID:                  ItemIDType                       Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property OrderID:                 string                           Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetAccountRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetAccountRequest = class(GetAccountRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderRequestType = class(AbstractRequestType)
  private
    FAddMemberMessagesAAQToBidderRequestContainer: Array_Of_AddMemberMessagesAAQToBidderRequestContainerType;
    FAddMemberMessagesAAQToBidderRequestContainer_Specified: boolean;
    procedure SetAddMemberMessagesAAQToBidderRequestContainer(Index: Integer; const AArray_Of_AddMemberMessagesAAQToBidderRequestContainerType: Array_Of_AddMemberMessagesAAQToBidderRequestContainerType);
    function  AddMemberMessagesAAQToBidderRequestContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AddMemberMessagesAAQToBidderRequestContainer: Array_Of_AddMemberMessagesAAQToBidderRequestContainerType  Index (IS_OPTN or IS_UNBD) read FAddMemberMessagesAAQToBidderRequestContainer write SetAddMemberMessagesAAQToBidderRequestContainer stored AddMemberMessagesAAQToBidderRequestContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessagesAAQToBidderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderRequest = class(AddMemberMessagesAAQToBidderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddOrderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddOrderRequestType = class(AbstractRequestType)
  private
    FOrder: OrderType;
    FOrder_Specified: boolean;
    procedure SetOrder(Index: Integer; const AOrderType: OrderType);
    function  Order_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Order: OrderType  Index (IS_OPTN) read FOrder write SetOrder stored Order_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddOrderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddOrderRequest = class(AddOrderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageRTQRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageRTQRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FMemberMessage: MemberMessageType;
    FMemberMessage_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
    function  MemberMessage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:        ItemIDType         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property MemberMessage: MemberMessageType  Index (IS_OPTN) read FMemberMessage write SetMemberMessage stored MemberMessage_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageRTQRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageRTQRequest = class(AddMemberMessageRTQRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageAAQToPartnerRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FMemberMessage: MemberMessageType;
    FMemberMessage_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
    function  MemberMessage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:        ItemIDType         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property MemberMessage: MemberMessageType  Index (IS_OPTN) read FMemberMessage write SetMemberMessage stored MemberMessage_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddMemberMessageAAQToPartnerRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerRequest = class(AddMemberMessageAAQToPartnerRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerInventoryFolderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerInventoryFolderRequestType = class(AbstractRequestType)
  private
    FFolderName: string;
    FFolderName_Specified: boolean;
    FParentFolderID: Int64;
    FParentFolderID_Specified: boolean;
    FComment: string;
    FComment_Specified: boolean;
    procedure SetFolderName(Index: Integer; const Astring: string);
    function  FolderName_Specified(Index: Integer): boolean;
    procedure SetParentFolderID(Index: Integer; const AInt64: Int64);
    function  ParentFolderID_Specified(Index: Integer): boolean;
    procedure SetComment(Index: Integer; const Astring: string);
    function  Comment_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FolderName:     string  Index (IS_OPTN) read FFolderName write SetFolderName stored FolderName_Specified;
    property ParentFolderID: Int64   Index (IS_OPTN) read FParentFolderID write SetParentFolderID stored ParentFolderID_Specified;
    property Comment:        string  Index (IS_OPTN) read FComment write SetComment stored Comment_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerInventoryFolderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerInventoryFolderRequest = class(AddSellingManagerInventoryFolderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerProductRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerProductRequestType = class(AbstractRequestType)
  private
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FSellingManagerProductDetails_Specified: boolean;
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FSellingManagerProductSpecifics: SellingManagerProductSpecificsType;
    FSellingManagerProductSpecifics_Specified: boolean;
    procedure SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
    function  SellingManagerProductDetails_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
    function  SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingManagerProductDetails:   SellingManagerProductDetailsType    Index (IS_OPTN) read FSellingManagerProductDetails write SetSellingManagerProductDetails stored SellingManagerProductDetails_Specified;
    property FolderID:                       Int64                               Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property SellingManagerProductSpecifics: SellingManagerProductSpecificsType  Index (IS_OPTN) read FSellingManagerProductSpecifics write SetSellingManagerProductSpecifics stored SellingManagerProductSpecifics_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerProductRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerProductRequest = class(AddSellingManagerProductRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddTransactionConfirmationItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddTransactionConfirmationItemRequestType = class(AbstractRequestType)
  private
    FRecipientUserID: UserIDType;
    FVerifyEligibilityOnly: string;
    FRecipientPostalCode: string;
    FRecipientRelationType: RecipientRelationCodeType;
    FNegotiatedPrice: AmountType;
    FListingDuration: SecondChanceOfferDurationCodeType;
    FItemID: ItemIDType;
    FComments: string;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientUserID:       UserIDType                         read FRecipientUserID write FRecipientUserID;
    property VerifyEligibilityOnly: string                             read FVerifyEligibilityOnly write FVerifyEligibilityOnly;
    property RecipientPostalCode:   string                             read FRecipientPostalCode write FRecipientPostalCode;
    property RecipientRelationType: RecipientRelationCodeType          read FRecipientRelationType write FRecipientRelationType;
    property NegotiatedPrice:       AmountType                         read FNegotiatedPrice write FNegotiatedPrice;
    property ListingDuration:       SecondChanceOfferDurationCodeType  read FListingDuration write FListingDuration;
    property ItemID:                ItemIDType                         read FItemID write FItemID;
    property Comments:              string                             read FComments write FComments;
  end;



  // ************************************************************************ //
  // XML       : AddTransactionConfirmationItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddTransactionConfirmationItemRequest = class(AddTransactionConfirmationItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSaleRecordRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSaleRecordRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:          ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string       Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderID:         OrderIDType  Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property OrderLineItemID: string       Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSaleRecordRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSaleRecordRequest = class(GetSellingManagerSaleRecordRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerEmailLogRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerEmailLogRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: Int64;
    FTransactionID_Specified: boolean;
    FOrderID: OrderIDType;
    FOrderID_Specified: boolean;
    FEmailDateRange: TimeRangeType;
    FEmailDateRange_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const AInt64: Int64);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetEmailDateRange(Index: Integer; const ATimeRangeType: TimeRangeType);
    function  EmailDateRange_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:          ItemIDType     Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   Int64          Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderID:         OrderIDType    Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property EmailDateRange:  TimeRangeType  Index (IS_OPTN) read FEmailDateRange write SetEmailDateRange stored EmailDateRange_Specified;
    property OrderLineItemID: string         Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerEmailLogRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerEmailLogRequest = class(GetSellingManagerEmailLogRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreRequestType = class(AbstractRequestType)
  private
    FCategoryStructureOnly: Boolean;
    FCategoryStructureOnly_Specified: boolean;
    FRootCategoryID: Int64;
    FRootCategoryID_Specified: boolean;
    FLevelLimit: Integer;
    FLevelLimit_Specified: boolean;
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    procedure SetCategoryStructureOnly(Index: Integer; const ABoolean: Boolean);
    function  CategoryStructureOnly_Specified(Index: Integer): boolean;
    procedure SetRootCategoryID(Index: Integer; const AInt64: Int64);
    function  RootCategoryID_Specified(Index: Integer): boolean;
    procedure SetLevelLimit(Index: Integer; const AInteger: Integer);
    function  LevelLimit_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property CategoryStructureOnly: Boolean     Index (IS_OPTN) read FCategoryStructureOnly write SetCategoryStructureOnly stored CategoryStructureOnly_Specified;
    property RootCategoryID:        Int64       Index (IS_OPTN) read FRootCategoryID write SetRootCategoryID stored RootCategoryID_Specified;
    property LevelLimit:            Integer     Index (IS_OPTN) read FLevelLimit write SetLevelLimit stored LevelLimit_Specified;
    property UserID:                UserIDType  Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreRequest = class(GetStoreRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerEventsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerEventsRequestType = class(AbstractRequestType)
  private
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FStartTimeFrom: TXSDateTime;
    FStartTimeFrom_Specified: boolean;
    FStartTimeTo: TXSDateTime;
    FStartTimeTo_Specified: boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeFrom_Specified: boolean;
    FEndTimeTo: TXSDateTime;
    FEndTimeTo_Specified: boolean;
    FModTimeFrom: TXSDateTime;
    FModTimeFrom_Specified: boolean;
    FModTimeTo: TXSDateTime;
    FModTimeTo_Specified: boolean;
    FNewItemFilter: Boolean;
    FNewItemFilter_Specified: boolean;
    FIncludeWatchCount: Boolean;
    FIncludeWatchCount_Specified: boolean;
    FIncludeVariationSpecifics: Boolean;
    FIncludeVariationSpecifics_Specified: boolean;
    FHideVariations: Boolean;
    FHideVariations_Specified: boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetStartTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTimeFrom_Specified(Index: Integer): boolean;
    procedure SetStartTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTimeTo_Specified(Index: Integer): boolean;
    procedure SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeFrom_Specified(Index: Integer): boolean;
    procedure SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTimeTo_Specified(Index: Integer): boolean;
    procedure SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeFrom_Specified(Index: Integer): boolean;
    procedure SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeTo_Specified(Index: Integer): boolean;
    procedure SetNewItemFilter(Index: Integer; const ABoolean: Boolean);
    function  NewItemFilter_Specified(Index: Integer): boolean;
    procedure SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
    function  IncludeWatchCount_Specified(Index: Integer): boolean;
    procedure SetIncludeVariationSpecifics(Index: Integer; const ABoolean: Boolean);
    function  IncludeVariationSpecifics_Specified(Index: Integer): boolean;
    procedure SetHideVariations(Index: Integer; const ABoolean: Boolean);
    function  HideVariations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID:                    UserIDType   Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property StartTimeFrom:             TXSDateTime  Index (IS_OPTN) read FStartTimeFrom write SetStartTimeFrom stored StartTimeFrom_Specified;
    property StartTimeTo:               TXSDateTime  Index (IS_OPTN) read FStartTimeTo write SetStartTimeTo stored StartTimeTo_Specified;
    property EndTimeFrom:               TXSDateTime  Index (IS_OPTN) read FEndTimeFrom write SetEndTimeFrom stored EndTimeFrom_Specified;
    property EndTimeTo:                 TXSDateTime  Index (IS_OPTN) read FEndTimeTo write SetEndTimeTo stored EndTimeTo_Specified;
    property ModTimeFrom:               TXSDateTime  Index (IS_OPTN) read FModTimeFrom write SetModTimeFrom stored ModTimeFrom_Specified;
    property ModTimeTo:                 TXSDateTime  Index (IS_OPTN) read FModTimeTo write SetModTimeTo stored ModTimeTo_Specified;
    property NewItemFilter:             Boolean      Index (IS_OPTN) read FNewItemFilter write SetNewItemFilter stored NewItemFilter_Specified;
    property IncludeWatchCount:         Boolean      Index (IS_OPTN) read FIncludeWatchCount write SetIncludeWatchCount stored IncludeWatchCount_Specified;
    property IncludeVariationSpecifics: Boolean      Index (IS_OPTN) read FIncludeVariationSpecifics write SetIncludeVariationSpecifics stored IncludeVariationSpecifics_Specified;
    property HideVariations:            Boolean      Index (IS_OPTN) read FHideVariations write SetHideVariations stored HideVariations_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellerEventsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerEventsRequest = class(GetSellerEventsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RespondToFeedbackRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToFeedbackRequestType = class(AbstractRequestType)
  private
    FFeedbackID: string;
    FFeedbackID_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FTargetUserID: UserIDType;
    FTargetUserID_Specified: boolean;
    FResponseType: FeedbackResponseCodeType;
    FResponseType_Specified: boolean;
    FResponseText: string;
    FResponseText_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetFeedbackID(Index: Integer; const Astring: string);
    function  FeedbackID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetTargetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  TargetUserID_Specified(Index: Integer): boolean;
    procedure SetResponseType(Index: Integer; const AFeedbackResponseCodeType: FeedbackResponseCodeType);
    function  ResponseType_Specified(Index: Integer): boolean;
    procedure SetResponseText(Index: Integer; const Astring: string);
    function  ResponseText_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FeedbackID:      string                    Index (IS_OPTN) read FFeedbackID write SetFeedbackID stored FeedbackID_Specified;
    property ItemID:          ItemIDType                Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string                    Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property TargetUserID:    UserIDType                Index (IS_OPTN) read FTargetUserID write SetTargetUserID stored TargetUserID_Specified;
    property ResponseType:    FeedbackResponseCodeType  Index (IS_OPTN) read FResponseType write SetResponseType stored ResponseType_Specified;
    property ResponseText:    string                    Index (IS_OPTN) read FResponseText write SetResponseText stored ResponseText_Specified;
    property OrderLineItemID: string                    Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : RespondToFeedbackRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RespondToFeedbackRequest = class(RespondToFeedbackRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSecondChanceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSecondChanceItemRequestType = class(AbstractRequestType)
  private
    FRecipientBidderUserID: UserIDType;
    FRecipientBidderUserID_Specified: boolean;
    FBuyItNowPrice: AmountType;
    FBuyItNowPrice_Specified: boolean;
    FDuration: SecondChanceOfferDurationCodeType;
    FDuration_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FSellerMessage: string;
    FSellerMessage_Specified: boolean;
    procedure SetRecipientBidderUserID(Index: Integer; const AUserIDType: UserIDType);
    function  RecipientBidderUserID_Specified(Index: Integer): boolean;
    procedure SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
    function  BuyItNowPrice_Specified(Index: Integer): boolean;
    procedure SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
    function  Duration_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetSellerMessage(Index: Integer; const Astring: string);
    function  SellerMessage_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientBidderUserID: UserIDType                         Index (IS_OPTN) read FRecipientBidderUserID write SetRecipientBidderUserID stored RecipientBidderUserID_Specified;
    property BuyItNowPrice:         AmountType                         Index (IS_OPTN) read FBuyItNowPrice write SetBuyItNowPrice stored BuyItNowPrice_Specified;
    property Duration:              SecondChanceOfferDurationCodeType  Index (IS_OPTN) read FDuration write SetDuration stored Duration_Specified;
    property ItemID:                ItemIDType                         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property SellerMessage:         string                             Index (IS_OPTN) read FSellerMessage write SetSellerMessage stored SellerMessage_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSecondChanceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSecondChanceItemRequest = class(AddSecondChanceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemsRequestType = class(AbstractRequestType)
  private
    FAddItemRequestContainer: Array_Of_AddItemRequestContainerType;
    FAddItemRequestContainer_Specified: boolean;
    procedure SetAddItemRequestContainer(Index: Integer; const AArray_Of_AddItemRequestContainerType: Array_Of_AddItemRequestContainerType);
    function  AddItemRequestContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AddItemRequestContainer: Array_Of_AddItemRequestContainerType  Index (IS_OPTN or IS_UNBD) read FAddItemRequestContainer write SetAddItemRequestContainer stored AddItemRequestContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemsRequest = class(AddItemsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponseRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponseRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    FMessageText: string;
    FMessageText_Specified: boolean;
    FDisputeActivity: DisputeActivityCodeType;
    FDisputeActivity_Specified: boolean;
    FShippingCarrierUsed: string;
    FShippingCarrierUsed_Specified: boolean;
    FShipmentTrackNumber: string;
    FShipmentTrackNumber_Specified: boolean;
    FShippingTime: TXSDateTime;
    FShippingTime_Specified: boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
    procedure SetMessageText(Index: Integer; const Astring: string);
    function  MessageText_Specified(Index: Integer): boolean;
    procedure SetDisputeActivity(Index: Integer; const ADisputeActivityCodeType: DisputeActivityCodeType);
    function  DisputeActivity_Specified(Index: Integer): boolean;
    procedure SetShippingCarrierUsed(Index: Integer; const Astring: string);
    function  ShippingCarrierUsed_Specified(Index: Integer): boolean;
    procedure SetShipmentTrackNumber(Index: Integer; const Astring: string);
    function  ShipmentTrackNumber_Specified(Index: Integer): boolean;
    procedure SetShippingTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ShippingTime_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DisputeID:           DisputeIDType            Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
    property MessageText:         string                   Index (IS_OPTN) read FMessageText write SetMessageText stored MessageText_Specified;
    property DisputeActivity:     DisputeActivityCodeType  Index (IS_OPTN) read FDisputeActivity write SetDisputeActivity stored DisputeActivity_Specified;
    property ShippingCarrierUsed: string                   Index (IS_OPTN) read FShippingCarrierUsed write SetShippingCarrierUsed stored ShippingCarrierUsed_Specified;
    property ShipmentTrackNumber: string                   Index (IS_OPTN) read FShipmentTrackNumber write SetShipmentTrackNumber stored ShipmentTrackNumber_Specified;
    property ShippingTime:        TXSDateTime              Index (IS_OPTN) read FShippingTime write SetShippingTime stored ShippingTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDisputeResponseRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeResponseRequest = class(AddDisputeResponseRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DisableUnpaidItemAssistanceRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DisableUnpaidItemAssistanceRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FDisputeID: DisputeIDType;
    FDisputeID_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
    function  DisputeID_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:          ItemIDType     Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string         Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property DisputeID:       DisputeIDType  Index (IS_OPTN) read FDisputeID write SetDisputeID stored DisputeID_Specified;
    property OrderLineItemID: string         Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DisableUnpaidItemAssistanceRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DisableUnpaidItemAssistanceRequest = class(DisableUnpaidItemAssistanceRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetNotificationsUsageRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationsUsageRequestType = class(AbstractRequestType)
  private
    FStartTime: TXSDateTime;
    FStartTime_Specified: boolean;
    FEndTime: TXSDateTime;
    FEndTime_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    procedure SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  StartTime_Specified(Index: Integer): boolean;
    procedure SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EndTime_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime: TXSDateTime  Index (IS_OPTN) read FStartTime write SetStartTime stored StartTime_Specified;
    property EndTime:   TXSDateTime  Index (IS_OPTN) read FEndTime write SetEndTime stored EndTime_Specified;
    property ItemID:    ItemIDType   Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetNotificationsUsageRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationsUsageRequest = class(GetNotificationsUsageRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetOrdersRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrdersRequestType = class(AbstractRequestType)
  private
    FOrderIDArray: OrderIDArrayType;
    FOrderIDArray_Specified: boolean;
    FCreateTimeFrom: TXSDateTime;
    FCreateTimeFrom_Specified: boolean;
    FCreateTimeTo: TXSDateTime;
    FCreateTimeTo_Specified: boolean;
    FOrderRole: TradingRoleCodeType;
    FOrderRole_Specified: boolean;
    FOrderStatus: OrderStatusCodeType;
    FOrderStatus_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FModTimeFrom: TXSDateTime;
    FModTimeFrom_Specified: boolean;
    FModTimeTo: TXSDateTime;
    FModTimeTo_Specified: boolean;
    FNumberOfDays: Integer;
    FNumberOfDays_Specified: boolean;
    FIncludeFinalValueFee: Boolean;
    FIncludeFinalValueFee_Specified: boolean;
    FSortingOrder: SortOrderCodeType;
    FSortingOrder_Specified: boolean;
    procedure SetOrderIDArray(Index: Integer; const AOrderIDArrayType: OrderIDArrayType);
    function  OrderIDArray_Specified(Index: Integer): boolean;
    procedure SetCreateTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreateTimeFrom_Specified(Index: Integer): boolean;
    procedure SetCreateTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  CreateTimeTo_Specified(Index: Integer): boolean;
    procedure SetOrderRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
    function  OrderRole_Specified(Index: Integer): boolean;
    procedure SetOrderStatus(Index: Integer; const AOrderStatusCodeType: OrderStatusCodeType);
    function  OrderStatus_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeFrom_Specified(Index: Integer): boolean;
    procedure SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeTo_Specified(Index: Integer): boolean;
    procedure SetNumberOfDays(Index: Integer; const AInteger: Integer);
    function  NumberOfDays_Specified(Index: Integer): boolean;
    procedure SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
    function  IncludeFinalValueFee_Specified(Index: Integer): boolean;
    procedure SetSortingOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  SortingOrder_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderIDArray:         OrderIDArrayType     Index (IS_OPTN) read FOrderIDArray write SetOrderIDArray stored OrderIDArray_Specified;
    property CreateTimeFrom:       TXSDateTime          Index (IS_OPTN) read FCreateTimeFrom write SetCreateTimeFrom stored CreateTimeFrom_Specified;
    property CreateTimeTo:         TXSDateTime          Index (IS_OPTN) read FCreateTimeTo write SetCreateTimeTo stored CreateTimeTo_Specified;
    property OrderRole:            TradingRoleCodeType  Index (IS_OPTN) read FOrderRole write SetOrderRole stored OrderRole_Specified;
    property OrderStatus:          OrderStatusCodeType  Index (IS_OPTN) read FOrderStatus write SetOrderStatus stored OrderStatus_Specified;
    property ListingType:          ListingTypeCodeType  Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property Pagination:           PaginationType       Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property ModTimeFrom:          TXSDateTime          Index (IS_OPTN) read FModTimeFrom write SetModTimeFrom stored ModTimeFrom_Specified;
    property ModTimeTo:            TXSDateTime          Index (IS_OPTN) read FModTimeTo write SetModTimeTo stored ModTimeTo_Specified;
    property NumberOfDays:         Integer              Index (IS_OPTN) read FNumberOfDays write SetNumberOfDays stored NumberOfDays_Specified;
    property IncludeFinalValueFee: Boolean              Index (IS_OPTN) read FIncludeFinalValueFee write SetIncludeFinalValueFee stored IncludeFinalValueFee_Specified;
    property SortingOrder:         SortOrderCodeType    Index (IS_OPTN) read FSortingOrder write SetSortingOrder stored SortingOrder_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetOrdersRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetOrdersRequest = class(GetOrdersRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserDisputesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserDisputesRequestType = class(AbstractRequestType)
  private
    FDisputeFilterType: DisputeFilterTypeCodeType;
    FDisputeFilterType_Specified: boolean;
    FDisputeSortType: DisputeSortTypeCodeType;
    FDisputeSortType_Specified: boolean;
    FModTimeFrom: TXSDateTime;
    FModTimeFrom_Specified: boolean;
    FModTimeTo: TXSDateTime;
    FModTimeTo_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    procedure SetDisputeFilterType(Index: Integer; const ADisputeFilterTypeCodeType: DisputeFilterTypeCodeType);
    function  DisputeFilterType_Specified(Index: Integer): boolean;
    procedure SetDisputeSortType(Index: Integer; const ADisputeSortTypeCodeType: DisputeSortTypeCodeType);
    function  DisputeSortType_Specified(Index: Integer): boolean;
    procedure SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeFrom_Specified(Index: Integer): boolean;
    procedure SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTimeTo_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DisputeFilterType: DisputeFilterTypeCodeType  Index (IS_OPTN) read FDisputeFilterType write SetDisputeFilterType stored DisputeFilterType_Specified;
    property DisputeSortType:   DisputeSortTypeCodeType    Index (IS_OPTN) read FDisputeSortType write SetDisputeSortType stored DisputeSortType_Specified;
    property ModTimeFrom:       TXSDateTime                Index (IS_OPTN) read FModTimeFrom write SetModTimeFrom stored ModTimeFrom_Specified;
    property ModTimeTo:         TXSDateTime                Index (IS_OPTN) read FModTimeTo write SetModTimeTo stored ModTimeTo_Specified;
    property Pagination:        PaginationType             Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserDisputesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserDisputesRequest = class(GetUserDisputesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetVeROReportStatusRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReportStatusRequestType = class(AbstractRequestType)
  private
    FVeROReportPacketID: Int64;
    FVeROReportPacketID_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FIncludeReportedItemDetails: Boolean;
    FIncludeReportedItemDetails_Specified: boolean;
    FTimeFrom: TXSDateTime;
    FTimeFrom_Specified: boolean;
    FTimeTo: TXSDateTime;
    FTimeTo_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    procedure SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
    function  VeROReportPacketID_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetIncludeReportedItemDetails(Index: Integer; const ABoolean: Boolean);
    function  IncludeReportedItemDetails_Specified(Index: Integer): boolean;
    procedure SetTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeFrom_Specified(Index: Integer): boolean;
    procedure SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  TimeTo_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property VeROReportPacketID:         Int64           Index (IS_OPTN) read FVeROReportPacketID write SetVeROReportPacketID stored VeROReportPacketID_Specified;
    property ItemID:                     ItemIDType      Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property IncludeReportedItemDetails: Boolean         Index (IS_OPTN) read FIncludeReportedItemDetails write SetIncludeReportedItemDetails stored IncludeReportedItemDetails_Specified;
    property TimeFrom:                   TXSDateTime     Index (IS_OPTN) read FTimeFrom write SetTimeFrom stored TimeFrom_Specified;
    property TimeTo:                     TXSDateTime     Index (IS_OPTN) read FTimeTo write SetTimeTo stored TimeTo_Specified;
    property Pagination:                 PaginationType  Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetVeROReportStatusRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReportStatusRequest = class(GetVeROReportStatusRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemFromSellingManagerTemplateRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemFromSellingManagerTemplateRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FScheduleTime: TXSDateTime;
    FScheduleTime_Specified: boolean;
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetScheduleTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ScheduleTime_Specified(Index: Integer): boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SaleTemplateID: Int64        Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property ScheduleTime:   TXSDateTime  Index (IS_OPTN) read FScheduleTime write SetScheduleTime stored ScheduleTime_Specified;
    property Item:           ItemType     Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemFromSellingManagerTemplateRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemFromSellingManagerTemplateRequest = class(AddItemFromSellingManagerTemplateRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddDisputeRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeExplanation: DisputeExplanationCodeType;
    FDisputeExplanation_Specified: boolean;
    FDisputeReason: DisputeReasonCodeType;
    FDisputeReason_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetDisputeExplanation(Index: Integer; const ADisputeExplanationCodeType: DisputeExplanationCodeType);
    function  DisputeExplanation_Specified(Index: Integer): boolean;
    procedure SetDisputeReason(Index: Integer; const ADisputeReasonCodeType: DisputeReasonCodeType);
    function  DisputeReason_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DisputeExplanation: DisputeExplanationCodeType  Index (IS_OPTN) read FDisputeExplanation write SetDisputeExplanation stored DisputeExplanation_Specified;
    property DisputeReason:      DisputeReasonCodeType       Index (IS_OPTN) read FDisputeReason write SetDisputeReason stored DisputeReason_Specified;
    property ItemID:             ItemIDType                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:      string                      Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property OrderLineItemID:    string                      Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddDisputeRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddDisputeRequest = class(AddDisputeRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryRequestType = class(AbstractRequestType)
  private
    FSort: SellingManagerProductSortCodeType;
    FSort_Specified: boolean;
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FSortOrder: SortOrderCodeType;
    FSortOrder_Specified: boolean;
    FSearch: SellingManagerSearchType;
    FSearch_Specified: boolean;
    FStoreCategoryID: Int64;
    FStoreCategoryID_Specified: boolean;
    FFilter: Array_Of_SellingManagerInventoryPropertyTypeCodeType;
    FFilter_Specified: boolean;
    procedure SetSort(Index: Integer; const ASellingManagerProductSortCodeType: SellingManagerProductSortCodeType);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  SortOrder_Specified(Index: Integer): boolean;
    procedure SetSearch(Index: Integer; const ASellingManagerSearchType: SellingManagerSearchType);
    function  Search_Specified(Index: Integer): boolean;
    procedure SetStoreCategoryID(Index: Integer; const AInt64: Int64);
    function  StoreCategoryID_Specified(Index: Integer): boolean;
    procedure SetFilter(Index: Integer; const AArray_Of_SellingManagerInventoryPropertyTypeCodeType: Array_Of_SellingManagerInventoryPropertyTypeCodeType);
    function  Filter_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Sort:            SellingManagerProductSortCodeType                     Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property FolderID:        Int64                                                 Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property Pagination:      PaginationType                                        Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property SortOrder:       SortOrderCodeType                                     Index (IS_OPTN) read FSortOrder write SetSortOrder stored SortOrder_Specified;
    property Search:          SellingManagerSearchType                              Index (IS_OPTN) read FSearch write SetSearch stored Search_Specified;
    property StoreCategoryID: Int64                                                 Index (IS_OPTN) read FStoreCategoryID write SetStoreCategoryID stored StoreCategoryID_Specified;
    property Filter:          Array_Of_SellingManagerInventoryPropertyTypeCodeType  Index (IS_OPTN or IS_UNBD) read FFilter write SetFilter stored Filter_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryRequest = class(GetSellingManagerInventoryRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryFolderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryFolderRequestType = class(AbstractRequestType)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FMaxDepth: Integer;
    FMaxDepth_Specified: boolean;
    FFullRecursion: Boolean;
    FFullRecursion_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetMaxDepth(Index: Integer; const AInteger: Integer);
    function  MaxDepth_Specified(Index: Integer): boolean;
    procedure SetFullRecursion(Index: Integer; const ABoolean: Boolean);
    function  FullRecursion_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FolderID:      Int64    Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property MaxDepth:      Integer  Index (IS_OPTN) read FMaxDepth write SetMaxDepth stored MaxDepth_Specified;
    property FullRecursion: Boolean  Index (IS_OPTN) read FFullRecursion write SetFullRecursion stored FullRecursion_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerInventoryFolderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerInventoryFolderRequest = class(GetSellingManagerInventoryFolderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerItemAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerItemAutomationRuleRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerItemAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerItemAutomationRuleRequest = class(GetSellingManagerItemAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerAlertsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerAlertsRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerAlertsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerAlertsRequest = class(GetSellingManagerAlertsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreCustomPageRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCustomPageRequestType = class(AbstractRequestType)
  private
    FPageID: Int64;
    FPageID_Specified: boolean;
    procedure SetPageID(Index: Integer; const AInt64: Int64);
    function  PageID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PageID: Int64  Index (IS_OPTN) read FPageID write SetPageID stored PageID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreCustomPageRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCustomPageRequest = class(GetStoreCustomPageRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreCategoryUpdateStatusRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusRequestType = class(AbstractRequestType)
  private
    FTaskID: Int64;
    FTaskID_Specified: boolean;
    procedure SetTaskID(Index: Integer; const AInt64: Int64);
    function  TaskID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property TaskID: Int64  Index (IS_OPTN) read FTaskID write SetTaskID stored TaskID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetStoreCategoryUpdateStatusRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusRequest = class(GetStoreCategoryUpdateStatusRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplateAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplateAutomationRuleRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SaleTemplateID: Int64  Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplateAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplateAutomationRuleRequest = class(GetSellingManagerTemplateAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSoldListingsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSoldListingsRequestType = class(AbstractRequestType)
  private
    FSearch: SellingManagerSearchType;
    FSearch_Specified: boolean;
    FStoreCategoryID: Int64;
    FStoreCategoryID_Specified: boolean;
    FFilter: Array_Of_SellingManagerSoldListingsPropertyTypeCodeType;
    FFilter_Specified: boolean;
    FArchived: Boolean;
    FArchived_Specified: boolean;
    FSort: SellingManagerSoldListingsSortTypeCodeType;
    FSort_Specified: boolean;
    FSortOrder: SortOrderCodeType;
    FSortOrder_Specified: boolean;
    FPagination: PaginationType;
    FPagination_Specified: boolean;
    FSaleDateRange: TimeRangeType;
    FSaleDateRange_Specified: boolean;
    procedure SetSearch(Index: Integer; const ASellingManagerSearchType: SellingManagerSearchType);
    function  Search_Specified(Index: Integer): boolean;
    procedure SetStoreCategoryID(Index: Integer; const AInt64: Int64);
    function  StoreCategoryID_Specified(Index: Integer): boolean;
    procedure SetFilter(Index: Integer; const AArray_Of_SellingManagerSoldListingsPropertyTypeCodeType: Array_Of_SellingManagerSoldListingsPropertyTypeCodeType);
    function  Filter_Specified(Index: Integer): boolean;
    procedure SetArchived(Index: Integer; const ABoolean: Boolean);
    function  Archived_Specified(Index: Integer): boolean;
    procedure SetSort(Index: Integer; const ASellingManagerSoldListingsSortTypeCodeType: SellingManagerSoldListingsSortTypeCodeType);
    function  Sort_Specified(Index: Integer): boolean;
    procedure SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
    function  SortOrder_Specified(Index: Integer): boolean;
    procedure SetPagination(Index: Integer; const APaginationType: PaginationType);
    function  Pagination_Specified(Index: Integer): boolean;
    procedure SetSaleDateRange(Index: Integer; const ATimeRangeType: TimeRangeType);
    function  SaleDateRange_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Search:          SellingManagerSearchType                                 Index (IS_OPTN) read FSearch write SetSearch stored Search_Specified;
    property StoreCategoryID: Int64                                                    Index (IS_OPTN) read FStoreCategoryID write SetStoreCategoryID stored StoreCategoryID_Specified;
    property Filter:          Array_Of_SellingManagerSoldListingsPropertyTypeCodeType  Index (IS_OPTN or IS_UNBD) read FFilter write SetFilter stored Filter_Specified;
    property Archived:        Boolean                                                  Index (IS_OPTN) read FArchived write SetArchived stored Archived_Specified;
    property Sort:            SellingManagerSoldListingsSortTypeCodeType               Index (IS_OPTN) read FSort write SetSort stored Sort_Specified;
    property SortOrder:       SortOrderCodeType                                        Index (IS_OPTN) read FSortOrder write SetSortOrder stored SortOrder_Specified;
    property Pagination:      PaginationType                                           Index (IS_OPTN) read FPagination write SetPagination stored Pagination_Specified;
    property SaleDateRange:   TimeRangeType                                            Index (IS_OPTN) read FSaleDateRange write SetSaleDateRange stored SaleDateRange_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerSoldListingsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerSoldListingsRequest = class(GetSellingManagerSoldListingsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplatesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplatesRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Array_Of_long;
    FSaleTemplateID_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AArray_Of_long: Array_Of_long);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SaleTemplateID: Array_Of_long  Index (IS_OPTN or IS_UNBD) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSellingManagerTemplatesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellingManagerTemplatesRequest = class(GetSellingManagerTemplatesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetShippingDiscountProfilesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetShippingDiscountProfilesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetShippingDiscountProfilesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetShippingDiscountProfilesRequest = class(GetShippingDiscountProfilesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSessionIDRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSessionIDRequestType = class(AbstractRequestType)
  private
    FRuName: string;
    FRuName_Specified: boolean;
    procedure SetRuName(Index: Integer; const Astring: string);
    function  RuName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property RuName: string  Index (IS_OPTN) read FRuName write SetRuName stored RuName_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSessionIDRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSessionIDRequest = class(GetSessionIDRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetNotificationPreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationPreferencesRequestType = class(AbstractRequestType)
  private
    FPreferenceLevel: NotificationRoleCodeType;
    FPreferenceLevel_Specified: boolean;
    procedure SetPreferenceLevel(Index: Integer; const ANotificationRoleCodeType: NotificationRoleCodeType);
    function  PreferenceLevel_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PreferenceLevel: NotificationRoleCodeType  Index (IS_OPTN) read FPreferenceLevel write SetPreferenceLevel stored PreferenceLevel_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetNotificationPreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetNotificationPreferencesRequest = class(GetNotificationPreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBaySellingRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBaySellingRequestType = class(AbstractRequestType)
  private
    FScheduledList: ItemListCustomizationType;
    FScheduledList_Specified: boolean;
    FActiveList: ItemListCustomizationType;
    FActiveList_Specified: boolean;
    FSoldList: ItemListCustomizationType;
    FSoldList_Specified: boolean;
    FUnsoldList: ItemListCustomizationType;
    FUnsoldList_Specified: boolean;
    FBidList: ItemListCustomizationType;
    FBidList_Specified: boolean;
    FDeletedFromSoldList: ItemListCustomizationType;
    FDeletedFromSoldList_Specified: boolean;
    FDeletedFromUnsoldList: ItemListCustomizationType;
    FDeletedFromUnsoldList_Specified: boolean;
    FSellingSummary: ItemListCustomizationType;
    FSellingSummary_Specified: boolean;
    FHideVariations: Boolean;
    FHideVariations_Specified: boolean;
    procedure SetScheduledList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  ScheduledList_Specified(Index: Integer): boolean;
    procedure SetActiveList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  ActiveList_Specified(Index: Integer): boolean;
    procedure SetSoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  SoldList_Specified(Index: Integer): boolean;
    procedure SetUnsoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  UnsoldList_Specified(Index: Integer): boolean;
    procedure SetBidList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  BidList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromSoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  DeletedFromSoldList_Specified(Index: Integer): boolean;
    procedure SetDeletedFromUnsoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  DeletedFromUnsoldList_Specified(Index: Integer): boolean;
    procedure SetSellingSummary(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
    function  SellingSummary_Specified(Index: Integer): boolean;
    procedure SetHideVariations(Index: Integer; const ABoolean: Boolean);
    function  HideVariations_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ScheduledList:         ItemListCustomizationType  Index (IS_OPTN) read FScheduledList write SetScheduledList stored ScheduledList_Specified;
    property ActiveList:            ItemListCustomizationType  Index (IS_OPTN) read FActiveList write SetActiveList stored ActiveList_Specified;
    property SoldList:              ItemListCustomizationType  Index (IS_OPTN) read FSoldList write SetSoldList stored SoldList_Specified;
    property UnsoldList:            ItemListCustomizationType  Index (IS_OPTN) read FUnsoldList write SetUnsoldList stored UnsoldList_Specified;
    property BidList:               ItemListCustomizationType  Index (IS_OPTN) read FBidList write SetBidList stored BidList_Specified;
    property DeletedFromSoldList:   ItemListCustomizationType  Index (IS_OPTN) read FDeletedFromSoldList write SetDeletedFromSoldList stored DeletedFromSoldList_Specified;
    property DeletedFromUnsoldList: ItemListCustomizationType  Index (IS_OPTN) read FDeletedFromUnsoldList write SetDeletedFromUnsoldList stored DeletedFromUnsoldList_Specified;
    property SellingSummary:        ItemListCustomizationType  Index (IS_OPTN) read FSellingSummary write SetSellingSummary stored SellingSummary_Specified;
    property HideVariations:        Boolean                    Index (IS_OPTN) read FHideVariations write SetHideVariations stored HideVariations_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBaySellingRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBaySellingRequest = class(GetMyeBaySellingRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayRemindersRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayRemindersRequestType = class(AbstractRequestType)
  private
    FBuyingReminders: ReminderCustomizationType;
    FBuyingReminders_Specified: boolean;
    FSellingReminders: ReminderCustomizationType;
    FSellingReminders_Specified: boolean;
    procedure SetBuyingReminders(Index: Integer; const AReminderCustomizationType: ReminderCustomizationType);
    function  BuyingReminders_Specified(Index: Integer): boolean;
    procedure SetSellingReminders(Index: Integer; const AReminderCustomizationType: ReminderCustomizationType);
    function  SellingReminders_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingReminders:  ReminderCustomizationType  Index (IS_OPTN) read FBuyingReminders write SetBuyingReminders stored BuyingReminders_Specified;
    property SellingReminders: ReminderCustomizationType  Index (IS_OPTN) read FSellingReminders write SetSellingReminders stored SellingReminders_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetMyeBayRemindersRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetMyeBayRemindersRequest = class(GetMyeBayRemindersRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerDashboardRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerDashboardRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetSellerDashboardRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSellerDashboardRequest = class(GetSellerDashboardRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetPromotionalSaleDetailsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetPromotionalSaleDetailsRequestType = class(AbstractRequestType)
  private
    FPromotionalSaleID: Int64;
    FPromotionalSaleID_Specified: boolean;
    FPromotionalSaleStatus: Array_Of_PromotionalSaleStatusCodeType;
    FPromotionalSaleStatus_Specified: boolean;
    procedure SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
    function  PromotionalSaleID_Specified(Index: Integer): boolean;
    procedure SetPromotionalSaleStatus(Index: Integer; const AArray_Of_PromotionalSaleStatusCodeType: Array_Of_PromotionalSaleStatusCodeType);
    function  PromotionalSaleStatus_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PromotionalSaleID:     Int64                                   Index (IS_OPTN) read FPromotionalSaleID write SetPromotionalSaleID stored PromotionalSaleID_Specified;
    property PromotionalSaleStatus: Array_Of_PromotionalSaleStatusCodeType  Index (IS_OPTN or IS_UNBD) read FPromotionalSaleStatus write SetPromotionalSaleStatus stored PromotionalSaleStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetPromotionalSaleDetailsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetPromotionalSaleDetailsRequest = class(GetPromotionalSaleDetailsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RelistItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RelistItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:         ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
  end;



  // ************************************************************************ //
  // XML       : RelistItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RelistItemRequest = class(RelistItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RelistFixedPriceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  RelistFixedPriceItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FDeletedField: SellerExcludeShipToLocationPreferencesType;
    FDeletedField_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  DeletedField_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:         ItemType                                    Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property DeletedField: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FDeletedField write SetDeletedField stored DeletedField_Specified;
  end;



  // ************************************************************************ //
  // XML       : RelistFixedPriceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  RelistFixedPriceItemRequest = class(RelistFixedPriceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayOfficialTimeRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayOfficialTimeRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayOfficialTimeRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayOfficialTimeRequest = class(GeteBayOfficialTimeRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MoveSellingManagerInventoryFolderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  MoveSellingManagerInventoryFolderRequestType = class(AbstractRequestType)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    FNewParentFolderID: Int64;
    FNewParentFolderID_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
    procedure SetNewParentFolderID(Index: Integer; const AInt64: Int64);
    function  NewParentFolderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FolderID:          Int64  Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
    property NewParentFolderID: Int64  Index (IS_OPTN) read FNewParentFolderID write SetNewParentFolderID stored NewParentFolderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : MoveSellingManagerInventoryFolderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  MoveSellingManagerInventoryFolderRequest = class(MoveSellingManagerInventoryFolderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FUserID: string;
    FUserID_Specified: boolean;
    FIncludeExpressRequirements: Boolean;
    FIncludeExpressRequirements_Specified: boolean;
    FIncludeFeatureEligibility: Boolean;
    FIncludeFeatureEligibility_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const Astring: string);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetIncludeExpressRequirements(Index: Integer; const ABoolean: Boolean);
    function  IncludeExpressRequirements_Specified(Index: Integer): boolean;
    procedure SetIncludeFeatureEligibility(Index: Integer; const ABoolean: Boolean);
    function  IncludeFeatureEligibility_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:                     ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property UserID:                     string      Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property IncludeExpressRequirements: Boolean     Index (IS_OPTN) read FIncludeExpressRequirements write SetIncludeExpressRequirements stored IncludeExpressRequirements_Specified;
    property IncludeFeatureEligibility:  Boolean     Index (IS_OPTN) read FIncludeFeatureEligibility write SetIncludeFeatureEligibility stored IncludeFeatureEligibility_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserRequest = class(GetUserRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetTokenStatusRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetTokenStatusRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetTokenStatusRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetTokenStatusRequest = class(GetTokenStatusRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserContactDetailsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserContactDetailsRequestType = class(AbstractRequestType)
  private
    FItemID: string;
    FItemID_Specified: boolean;
    FContactID: string;
    FContactID_Specified: boolean;
    FRequesterID: string;
    FRequesterID_Specified: boolean;
    procedure SetItemID(Index: Integer; const Astring: string);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetContactID(Index: Integer; const Astring: string);
    function  ContactID_Specified(Index: Integer): boolean;
    procedure SetRequesterID(Index: Integer; const Astring: string);
    function  RequesterID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:      string  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ContactID:   string  Index (IS_OPTN) read FContactID write SetContactID stored ContactID_Specified;
    property RequesterID: string  Index (IS_OPTN) read FRequesterID write SetRequesterID stored RequesterID_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserContactDetailsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserContactDetailsRequest = class(GetUserContactDetailsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreOptionsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreOptionsRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetStoreOptionsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStoreOptionsRequest = class(GetStoreOptionsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetStorePreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetStorePreferencesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetStorePreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetStorePreferencesRequest = class(GetStorePreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetTaxTableRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetTaxTableRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;



  // ************************************************************************ //
  // XML       : GetTaxTableRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetTaxTableRequest = class(GetTaxTableRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetSuggestedCategoriesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetSuggestedCategoriesRequestType = class(AbstractRequestType)
  private
    FQuery: string;
    FQuery_Specified: boolean;
    procedure SetQuery(Index: Integer; const Astring: string);
    function  Query_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property Query: string  Index (IS_OPTN) read FQuery write SetQuery stored Query_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetSuggestedCategoriesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetSuggestedCategoriesRequest = class(GetSuggestedCategoriesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetVeROReasonCodeDetailsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReasonCodeDetailsRequestType = class(AbstractRequestType)
  private
    FReasonCodeID: Int64;
    FReasonCodeID_Specified: boolean;
    FReturnAllSites: Boolean;
    FReturnAllSites_Specified: boolean;
    procedure SetReasonCodeID(Index: Integer; const AInt64: Int64);
    function  ReasonCodeID_Specified(Index: Integer): boolean;
    procedure SetReturnAllSites(Index: Integer; const ABoolean: Boolean);
    function  ReturnAllSites_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ReasonCodeID:   Int64    Index (IS_OPTN) read FReasonCodeID write SetReasonCodeID stored ReasonCodeID_Specified;
    property ReturnAllSites: Boolean  Index (IS_OPTN) read FReturnAllSites write SetReturnAllSites stored ReturnAllSites_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetVeROReasonCodeDetailsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetVeROReasonCodeDetailsRequest = class(GetVeROReasonCodeDetailsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GeteBayDetailsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayDetailsRequestType = class(AbstractRequestType)
  private
    FDetailName: Array_Of_DetailNameCodeType;
    FDetailName_Specified: boolean;
    procedure SetDetailName(Index: Integer; const AArray_Of_DetailNameCodeType: Array_Of_DetailNameCodeType);
    function  DetailName_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property DetailName: Array_Of_DetailNameCodeType  Index (IS_OPTN or IS_UNBD) read FDetailName write SetDetailName stored DetailName_Specified;
  end;



  // ************************************************************************ //
  // XML       : GeteBayDetailsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GeteBayDetailsRequest = class(GeteBayDetailsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GetUserPreferencesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserPreferencesRequestType = class(AbstractRequestType)
  private
    FShowBidderNoticePreferences: Boolean;
    FShowCombinedPaymentPreferences: Boolean;
    FShowCrossPromotionPreferences: Boolean;
    FShowSellerPaymentPreferences: Boolean;
    FShowEndOfAuctionEmailPreferences: Boolean;
    FShowEndOfAuctionEmailPreferences_Specified: boolean;
    FShowSellerFavoriteItemPreferences: Boolean;
    FShowSellerFavoriteItemPreferences_Specified: boolean;
    FShowProStoresPreferences: Boolean;
    FShowProStoresPreferences_Specified: boolean;
    FShowEmailShipmentTrackingNumberPreference: Boolean;
    FShowEmailShipmentTrackingNumberPreference_Specified: boolean;
    FShowRequiredShipPhoneNumberPreference: Boolean;
    FShowRequiredShipPhoneNumberPreference_Specified: boolean;
    FShowSellerExcludeShipToLocationPreference: Boolean;
    FShowSellerExcludeShipToLocationPreference_Specified: boolean;
    FShowUnpaidItemAssistancePreference: Boolean;
    FShowUnpaidItemAssistancePreference_Specified: boolean;
    FShowPurchaseReminderEmailPreferences: Boolean;
    FShowPurchaseReminderEmailPreferences_Specified: boolean;
    FShowUnpaidItemAssistanceExclusionList: Boolean;
    FShowUnpaidItemAssistanceExclusionList_Specified: boolean;
    FShowSellerProfilePreferences: Boolean;
    FShowSellerReturnPreferences: Boolean;
    FShowSellerReturnPreferences_Specified: boolean;
    FShowGlobalShippingProgramPreference: Boolean;
    FShowGlobalShippingProgramPreference_Specified: boolean;
    FShowDispatchCutoffTimePreferences: Boolean;
    FShowDispatchCutoffTimePreferences_Specified: boolean;
    FShowGlobalShippingProgramListingPreference: Boolean;
    FShowGlobalShippingProgramListingPreference_Specified: boolean;
    FShowOverrideGSPServiceWithIntlServicePreference: Boolean;
    FShowOverrideGSPServiceWithIntlServicePreference_Specified: boolean;
    FShowPickupDropoffPreferences: Boolean;
    FShowPickupDropoffPreferences_Specified: boolean;
    FShowOutOfStockControlPreference: Boolean;
    FShowOutOfStockControlPreference_Specified: boolean;
    FShoweBayPLUSPreference: Boolean;
    FShoweBayPLUSPreference_Specified: boolean;
    procedure SetShowEndOfAuctionEmailPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowEndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetShowSellerFavoriteItemPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowSellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
    procedure SetShowProStoresPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowProStoresPreferences_Specified(Index: Integer): boolean;
    procedure SetShowEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowEmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
    procedure SetShowRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowRequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
    procedure SetShowSellerExcludeShipToLocationPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowSellerExcludeShipToLocationPreference_Specified(Index: Integer): boolean;
    procedure SetShowUnpaidItemAssistancePreference(Index: Integer; const ABoolean: Boolean);
    function  ShowUnpaidItemAssistancePreference_Specified(Index: Integer): boolean;
    procedure SetShowPurchaseReminderEmailPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowPurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
    procedure SetShowUnpaidItemAssistanceExclusionList(Index: Integer; const ABoolean: Boolean);
    function  ShowUnpaidItemAssistanceExclusionList_Specified(Index: Integer): boolean;
    procedure SetShowSellerReturnPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowSellerReturnPreferences_Specified(Index: Integer): boolean;
    procedure SetShowGlobalShippingProgramPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowGlobalShippingProgramPreference_Specified(Index: Integer): boolean;
    procedure SetShowDispatchCutoffTimePreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowDispatchCutoffTimePreferences_Specified(Index: Integer): boolean;
    procedure SetShowGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowGlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
    procedure SetShowOverrideGSPServiceWithIntlServicePreference(Index: Integer; const ABoolean: Boolean);
    function  ShowOverrideGSPServiceWithIntlServicePreference_Specified(Index: Integer): boolean;
    procedure SetShowPickupDropoffPreferences(Index: Integer; const ABoolean: Boolean);
    function  ShowPickupDropoffPreferences_Specified(Index: Integer): boolean;
    procedure SetShowOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
    function  ShowOutOfStockControlPreference_Specified(Index: Integer): boolean;
    procedure SetShoweBayPLUSPreference(Index: Integer; const ABoolean: Boolean);
    function  ShoweBayPLUSPreference_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ShowBidderNoticePreferences:                     Boolean  read FShowBidderNoticePreferences write FShowBidderNoticePreferences;
    property ShowCombinedPaymentPreferences:                  Boolean  read FShowCombinedPaymentPreferences write FShowCombinedPaymentPreferences;
    property ShowCrossPromotionPreferences:                   Boolean  read FShowCrossPromotionPreferences write FShowCrossPromotionPreferences;
    property ShowSellerPaymentPreferences:                    Boolean  read FShowSellerPaymentPreferences write FShowSellerPaymentPreferences;
    property ShowEndOfAuctionEmailPreferences:                Boolean  Index (IS_OPTN) read FShowEndOfAuctionEmailPreferences write SetShowEndOfAuctionEmailPreferences stored ShowEndOfAuctionEmailPreferences_Specified;
    property ShowSellerFavoriteItemPreferences:               Boolean  Index (IS_OPTN) read FShowSellerFavoriteItemPreferences write SetShowSellerFavoriteItemPreferences stored ShowSellerFavoriteItemPreferences_Specified;
    property ShowProStoresPreferences:                        Boolean  Index (IS_OPTN) read FShowProStoresPreferences write SetShowProStoresPreferences stored ShowProStoresPreferences_Specified;
    property ShowEmailShipmentTrackingNumberPreference:       Boolean  Index (IS_OPTN) read FShowEmailShipmentTrackingNumberPreference write SetShowEmailShipmentTrackingNumberPreference stored ShowEmailShipmentTrackingNumberPreference_Specified;
    property ShowRequiredShipPhoneNumberPreference:           Boolean  Index (IS_OPTN) read FShowRequiredShipPhoneNumberPreference write SetShowRequiredShipPhoneNumberPreference stored ShowRequiredShipPhoneNumberPreference_Specified;
    property ShowSellerExcludeShipToLocationPreference:       Boolean  Index (IS_OPTN) read FShowSellerExcludeShipToLocationPreference write SetShowSellerExcludeShipToLocationPreference stored ShowSellerExcludeShipToLocationPreference_Specified;
    property ShowUnpaidItemAssistancePreference:              Boolean  Index (IS_OPTN) read FShowUnpaidItemAssistancePreference write SetShowUnpaidItemAssistancePreference stored ShowUnpaidItemAssistancePreference_Specified;
    property ShowPurchaseReminderEmailPreferences:            Boolean  Index (IS_OPTN) read FShowPurchaseReminderEmailPreferences write SetShowPurchaseReminderEmailPreferences stored ShowPurchaseReminderEmailPreferences_Specified;
    property ShowUnpaidItemAssistanceExclusionList:           Boolean  Index (IS_OPTN) read FShowUnpaidItemAssistanceExclusionList write SetShowUnpaidItemAssistanceExclusionList stored ShowUnpaidItemAssistanceExclusionList_Specified;
    property ShowSellerProfilePreferences:                    Boolean  read FShowSellerProfilePreferences write FShowSellerProfilePreferences;
    property ShowSellerReturnPreferences:                     Boolean  Index (IS_OPTN) read FShowSellerReturnPreferences write SetShowSellerReturnPreferences stored ShowSellerReturnPreferences_Specified;
    property ShowGlobalShippingProgramPreference:             Boolean  Index (IS_OPTN) read FShowGlobalShippingProgramPreference write SetShowGlobalShippingProgramPreference stored ShowGlobalShippingProgramPreference_Specified;
    property ShowDispatchCutoffTimePreferences:               Boolean  Index (IS_OPTN) read FShowDispatchCutoffTimePreferences write SetShowDispatchCutoffTimePreferences stored ShowDispatchCutoffTimePreferences_Specified;
    property ShowGlobalShippingProgramListingPreference:      Boolean  Index (IS_OPTN) read FShowGlobalShippingProgramListingPreference write SetShowGlobalShippingProgramListingPreference stored ShowGlobalShippingProgramListingPreference_Specified;
    property ShowOverrideGSPServiceWithIntlServicePreference: Boolean  Index (IS_OPTN) read FShowOverrideGSPServiceWithIntlServicePreference write SetShowOverrideGSPServiceWithIntlServicePreference stored ShowOverrideGSPServiceWithIntlServicePreference_Specified;
    property ShowPickupDropoffPreferences:                    Boolean  Index (IS_OPTN) read FShowPickupDropoffPreferences write SetShowPickupDropoffPreferences stored ShowPickupDropoffPreferences_Specified;
    property ShowOutOfStockControlPreference:                 Boolean  Index (IS_OPTN) read FShowOutOfStockControlPreference write SetShowOutOfStockControlPreference stored ShowOutOfStockControlPreference_Specified;
    property ShoweBayPLUSPreference:                          Boolean  Index (IS_OPTN) read FShoweBayPLUSPreference write SetShoweBayPLUSPreference stored ShoweBayPLUSPreference_Specified;
  end;



  // ************************************************************************ //
  // XML       : GetUserPreferencesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  GetUserPreferencesRequest = class(GetUserPreferencesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConfirmIdentityRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ConfirmIdentityRequestType = class(AbstractRequestType)
  private
    FSessionID: string;
    FSessionID_Specified: boolean;
    procedure SetSessionID(Index: Integer; const Astring: string);
    function  SessionID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SessionID: string  Index (IS_OPTN) read FSessionID write SetSessionID stored SessionID_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConfirmIdentityRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ConfirmIdentityRequest = class(ConfirmIdentityRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerInventoryFolderRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerInventoryFolderRequestType = class(AbstractRequestType)
  private
    FFolderID: Int64;
    FFolderID_Specified: boolean;
    procedure SetFolderID(Index: Integer; const AInt64: Int64);
    function  FolderID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property FolderID: Int64  Index (IS_OPTN) read FFolderID write SetFolderID stored FolderID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerInventoryFolderRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerInventoryFolderRequest = class(DeleteSellingManagerInventoryFolderRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteMyMessagesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteMyMessagesRequestType = class(AbstractRequestType)
  private
    FAlertIDs: MyMessagesAlertIDArrayType;
    FAlertIDs_Specified: boolean;
    FMessageIDs: MyMessagesMessageIDArrayType;
    FMessageIDs_Specified: boolean;
    procedure SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
    function  AlertIDs_Specified(Index: Integer): boolean;
    procedure SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
    function  MessageIDs_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property AlertIDs:   MyMessagesAlertIDArrayType    Index (IS_OPTN) read FAlertIDs write SetAlertIDs stored AlertIDs_Specified;
    property MessageIDs: MyMessagesMessageIDArrayType  Index (IS_OPTN) read FMessageIDs write SetMessageIDs stored MessageIDs_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteMyMessagesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteMyMessagesRequest = class(DeleteMyMessagesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddToItemDescriptionRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddToItemDescriptionRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:      ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property Description: string      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddToItemDescriptionRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddToItemDescriptionRequest = class(AddToItemDescriptionRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerTemplateRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerTemplateRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    FSaleTemplateName: string;
    FSaleTemplateName_Specified: boolean;
    FProductID: Int64;
    FProductID_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
    procedure SetSaleTemplateName(Index: Integer; const Astring: string);
    function  SaleTemplateName_Specified(Index: Integer): boolean;
    procedure SetProductID(Index: Integer; const AInt64: Int64);
    function  ProductID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item:             ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
    property SaleTemplateName: string    Index (IS_OPTN) read FSaleTemplateName write SetSaleTemplateName stored SaleTemplateName_Specified;
    property ProductID:        Int64     Index (IS_OPTN) read FProductID write SetProductID stored ProductID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddSellingManagerTemplateRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddSellingManagerTemplateRequest = class(AddSellingManagerTemplateRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CompleteSaleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  CompleteSaleRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FTransactionID: string;
    FTransactionID_Specified: boolean;
    FFeedbackInfo: FeedbackInfoType;
    FFeedbackInfo_Specified: boolean;
    FShipped: Boolean;
    FShipped_Specified: boolean;
    FPaid: Boolean;
    FPaid_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FShipment: ShipmentType;
    FShipment_Specified: boolean;
    FOrderID: string;
    FOrderID_Specified: boolean;
    FOrderLineItemID: string;
    FOrderLineItemID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetTransactionID(Index: Integer; const Astring: string);
    function  TransactionID_Specified(Index: Integer): boolean;
    procedure SetFeedbackInfo(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
    function  FeedbackInfo_Specified(Index: Integer): boolean;
    procedure SetShipped(Index: Integer; const ABoolean: Boolean);
    function  Shipped_Specified(Index: Integer): boolean;
    procedure SetPaid(Index: Integer; const ABoolean: Boolean);
    function  Paid_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetShipment(Index: Integer; const AShipmentType: ShipmentType);
    function  Shipment_Specified(Index: Integer): boolean;
    procedure SetOrderID(Index: Integer; const Astring: string);
    function  OrderID_Specified(Index: Integer): boolean;
    procedure SetOrderLineItemID(Index: Integer; const Astring: string);
    function  OrderLineItemID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID:          ItemIDType           Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property TransactionID:   string               Index (IS_OPTN) read FTransactionID write SetTransactionID stored TransactionID_Specified;
    property FeedbackInfo:    FeedbackInfoType     Index (IS_OPTN) read FFeedbackInfo write SetFeedbackInfo stored FeedbackInfo_Specified;
    property Shipped:         Boolean              Index (IS_OPTN) read FShipped write SetShipped stored Shipped_Specified;
    property Paid:            Boolean              Index (IS_OPTN) read FPaid write SetPaid stored Paid_Specified;
    property ListingType:     ListingTypeCodeType  Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property Shipment:        ShipmentType         Index (IS_OPTN) read FShipment write SetShipment stored Shipment_Specified;
    property OrderID:         string               Index (IS_OPTN) read FOrderID write SetOrderID stored OrderID_Specified;
    property OrderLineItemID: string               Index (IS_OPTN) read FOrderLineItemID write SetOrderLineItemID stored OrderLineItemID_Specified;
  end;



  // ************************************************************************ //
  // XML       : CompleteSaleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  CompleteSaleRequest = class(CompleteSaleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerItemAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerItemAutomationRuleRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FDeleteAutomatedRelistingRule: Boolean;
    FDeleteAutomatedRelistingRule_Specified: boolean;
    FDeleteAutomatedSecondChanceOfferRule: Boolean;
    FDeleteAutomatedSecondChanceOfferRule_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetDeleteAutomatedRelistingRule(Index: Integer; const ABoolean: Boolean);
    function  DeleteAutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetDeleteAutomatedSecondChanceOfferRule(Index: Integer; const ABoolean: Boolean);
    function  DeleteAutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:                               ItemIDType  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property DeleteAutomatedRelistingRule:         Boolean     Index (IS_OPTN) read FDeleteAutomatedRelistingRule write SetDeleteAutomatedRelistingRule stored DeleteAutomatedRelistingRule_Specified;
    property DeleteAutomatedSecondChanceOfferRule: Boolean     Index (IS_OPTN) read FDeleteAutomatedSecondChanceOfferRule write SetDeleteAutomatedSecondChanceOfferRule stored DeleteAutomatedSecondChanceOfferRule_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerItemAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerItemAutomationRuleRequest = class(DeleteSellingManagerItemAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndItemsRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemsRequestType = class(AbstractRequestType)
  private
    FEndItemRequestContainer: Array_Of_EndItemRequestContainerType;
    FEndItemRequestContainer_Specified: boolean;
    procedure SetEndItemRequestContainer(Index: Integer; const AArray_Of_EndItemRequestContainerType: Array_Of_EndItemRequestContainerType);
    function  EndItemRequestContainer_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EndItemRequestContainer: Array_Of_EndItemRequestContainerType  Index (IS_OPTN or IS_UNBD) read FEndItemRequestContainer write SetEndItemRequestContainer stored EndItemRequestContainer_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndItemsRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemsRequest = class(EndItemsRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FEndingReason: EndReasonCodeType;
    FEndingReason_Specified: boolean;
    FSellerInventoryID: string;
    FSellerInventoryID_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
    function  EndingReason_Specified(Index: Integer): boolean;
    procedure SetSellerInventoryID(Index: Integer; const Astring: string);
    function  SellerInventoryID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:            ItemIDType         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property EndingReason:      EndReasonCodeType  Index (IS_OPTN) read FEndingReason write SetEndingReason stored EndingReason_Specified;
    property SellerInventoryID: string             Index (IS_OPTN) read FSellerInventoryID write SetSellerInventoryID stored SellerInventoryID_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndItemRequest = class(EndItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FetchTokenRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  FetchTokenRequestType = class(AbstractRequestType)
  private
    FSecretID: string;
    FSecretID_Specified: boolean;
    FSessionID: string;
    FSessionID_Specified: boolean;
    procedure SetSecretID(Index: Integer; const Astring: string);
    function  SecretID_Specified(Index: Integer): boolean;
    procedure SetSessionID(Index: Integer; const Astring: string);
    function  SessionID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SecretID:  string  Index (IS_OPTN) read FSecretID write SetSecretID stored SecretID_Specified;
    property SessionID: string  Index (IS_OPTN) read FSessionID write SetSessionID stored SessionID_Specified;
  end;



  // ************************************************************************ //
  // XML       : FetchTokenRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  FetchTokenRequest = class(FetchTokenRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ExtendSiteHostedPicturesRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  ExtendSiteHostedPicturesRequestType = class(AbstractRequestType)
  private
    FPictureURL: Array_Of_anyURI;
    FPictureURL_Specified: boolean;
    FExtensionInDays: Integer;
    FExtensionInDays_Specified: boolean;
    procedure SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
    function  PictureURL_Specified(Index: Integer): boolean;
    procedure SetExtensionInDays(Index: Integer; const AInteger: Integer);
    function  ExtensionInDays_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property PictureURL:      Array_Of_anyURI  Index (IS_OPTN or IS_UNBD) read FPictureURL write SetPictureURL stored PictureURL_Specified;
    property ExtensionInDays: Integer          Index (IS_OPTN) read FExtensionInDays write SetExtensionInDays stored ExtensionInDays_Specified;
  end;



  // ************************************************************************ //
  // XML       : ExtendSiteHostedPicturesRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  ExtendSiteHostedPicturesRequest = class(ExtendSiteHostedPicturesRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerProductRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerProductRequestType = class(AbstractRequestType)
  private
    FProductID: Int64;
    FProductID_Specified: boolean;
    procedure SetProductID(Index: Integer; const AInt64: Int64);
    function  ProductID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ProductID: Int64  Index (IS_OPTN) read FProductID write SetProductID stored ProductID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerProductRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerProductRequest = class(DeleteSellingManagerProductRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SaleTemplateID: Int64  Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateRequest = class(DeleteSellingManagerTemplateRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EndFixedPriceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  EndFixedPriceItemRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FEndingReason: EndReasonCodeType;
    FEndingReason_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
    function  EndingReason_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property ItemID:       ItemIDType         Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property EndingReason: EndReasonCodeType  Index (IS_OPTN) read FEndingReason write SetEndingReason stored EndingReason_Specified;
    property SKU:          SKUType            Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
  end;



  // ************************************************************************ //
  // XML       : EndFixedPriceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  EndFixedPriceItemRequest = class(EndFixedPriceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateAutomationRuleRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateAutomationRuleRequestType = class(AbstractRequestType)
  private
    FSaleTemplateID: Int64;
    FSaleTemplateID_Specified: boolean;
    FDeleteAutomatedListingRule: Boolean;
    FDeleteAutomatedListingRule_Specified: boolean;
    FDeleteAutomatedRelistingRule: Boolean;
    FDeleteAutomatedRelistingRule_Specified: boolean;
    FDeleteAutomatedSecondChanceOfferRule: Boolean;
    FDeleteAutomatedSecondChanceOfferRule_Specified: boolean;
    procedure SetSaleTemplateID(Index: Integer; const AInt64: Int64);
    function  SaleTemplateID_Specified(Index: Integer): boolean;
    procedure SetDeleteAutomatedListingRule(Index: Integer; const ABoolean: Boolean);
    function  DeleteAutomatedListingRule_Specified(Index: Integer): boolean;
    procedure SetDeleteAutomatedRelistingRule(Index: Integer; const ABoolean: Boolean);
    function  DeleteAutomatedRelistingRule_Specified(Index: Integer): boolean;
    procedure SetDeleteAutomatedSecondChanceOfferRule(Index: Integer; const ABoolean: Boolean);
    function  DeleteAutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
  published
    property SaleTemplateID:                       Int64    Index (IS_OPTN) read FSaleTemplateID write SetSaleTemplateID stored SaleTemplateID_Specified;
    property DeleteAutomatedListingRule:           Boolean  Index (IS_OPTN) read FDeleteAutomatedListingRule write SetDeleteAutomatedListingRule stored DeleteAutomatedListingRule_Specified;
    property DeleteAutomatedRelistingRule:         Boolean  Index (IS_OPTN) read FDeleteAutomatedRelistingRule write SetDeleteAutomatedRelistingRule stored DeleteAutomatedRelistingRule_Specified;
    property DeleteAutomatedSecondChanceOfferRule: Boolean  Index (IS_OPTN) read FDeleteAutomatedSecondChanceOfferRule write SetDeleteAutomatedSecondChanceOfferRule stored DeleteAutomatedSecondChanceOfferRule_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeleteSellingManagerTemplateAutomationRuleRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  DeleteSellingManagerTemplateAutomationRuleRequest = class(DeleteSellingManagerTemplateAutomationRuleRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddFixedPriceItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddFixedPriceItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddFixedPriceItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddFixedPriceItemRequest = class(AddFixedPriceItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddItemRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FItem_Specified: boolean;
    procedure SetItem(Index: Integer; const AItemType: ItemType);
    function  Item_Specified(Index: Integer): boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType  Index (IS_OPTN) read FItem write SetItem stored Item_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddItemRequest, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Wrapper
  // ************************************************************************ //
  AddItemRequest = class(AddItemRequestType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BotBlockRequestType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BotBlockRequestType = class(TRemotable)
  private
    FBotBlockToken: string;
    FBotBlockToken_Specified: boolean;
    FBotBlockUserInput: string;
    FBotBlockUserInput_Specified: boolean;
    procedure SetBotBlockToken(Index: Integer; const Astring: string);
    function  BotBlockToken_Specified(Index: Integer): boolean;
    procedure SetBotBlockUserInput(Index: Integer; const Astring: string);
    function  BotBlockUserInput_Specified(Index: Integer): boolean;
  published
    property BotBlockToken:     string  Index (IS_OPTN) read FBotBlockToken write SetBotBlockToken stored BotBlockToken_Specified;
    property BotBlockUserInput: string  Index (IS_OPTN) read FBotBlockUserInput write SetBotBlockUserInput stored BotBlockUserInput_Specified;
  end;



  // ************************************************************************ //
  // XML       : BotBlockResponseType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BotBlockResponseType = class(TRemotable)
  private
    FBotBlockToken: string;
    FBotBlockToken_Specified: boolean;
    FBotBlockUrl: string;
    FBotBlockUrl_Specified: boolean;
    FBotBlockAudioUrl: string;
    FBotBlockAudioUrl_Specified: boolean;
    procedure SetBotBlockToken(Index: Integer; const Astring: string);
    function  BotBlockToken_Specified(Index: Integer): boolean;
    procedure SetBotBlockUrl(Index: Integer; const Astring: string);
    function  BotBlockUrl_Specified(Index: Integer): boolean;
    procedure SetBotBlockAudioUrl(Index: Integer; const Astring: string);
    function  BotBlockAudioUrl_Specified(Index: Integer): boolean;
  published
    property BotBlockToken:    string  Index (IS_OPTN) read FBotBlockToken write SetBotBlockToken stored BotBlockToken_Specified;
    property BotBlockUrl:      string  Index (IS_OPTN) read FBotBlockUrl write SetBotBlockUrl stored BotBlockUrl_Specified;
    property BotBlockAudioUrl: string  Index (IS_OPTN) read FBotBlockAudioUrl write SetBotBlockAudioUrl stored BotBlockAudioUrl_Specified;
  end;



  // ************************************************************************ //
  // XML       : DisputeResolutionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeResolutionType = class(TRemotable)
  private
    FDisputeResolutionRecordType: DisputeResolutionRecordTypeCodeType;
    FDisputeResolutionRecordType_Specified: boolean;
    FDisputeResolutionReason: DisputeResolutionReasonCodeType;
    FDisputeResolutionReason_Specified: boolean;
    FResolutionTime: TXSDateTime;
    FResolutionTime_Specified: boolean;
    procedure SetDisputeResolutionRecordType(Index: Integer; const ADisputeResolutionRecordTypeCodeType: DisputeResolutionRecordTypeCodeType);
    function  DisputeResolutionRecordType_Specified(Index: Integer): boolean;
    procedure SetDisputeResolutionReason(Index: Integer; const ADisputeResolutionReasonCodeType: DisputeResolutionReasonCodeType);
    function  DisputeResolutionReason_Specified(Index: Integer): boolean;
    procedure SetResolutionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ResolutionTime_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property DisputeResolutionRecordType: DisputeResolutionRecordTypeCodeType  Index (IS_OPTN) read FDisputeResolutionRecordType write SetDisputeResolutionRecordType stored DisputeResolutionRecordType_Specified;
    property DisputeResolutionReason:     DisputeResolutionReasonCodeType      Index (IS_OPTN) read FDisputeResolutionReason write SetDisputeResolutionReason stored DisputeResolutionReason_Specified;
    property ResolutionTime:              TXSDateTime                          Index (IS_OPTN) read FResolutionTime write SetResolutionTime stored ResolutionTime_Specified;
  end;



  // ************************************************************************ //
  // XML       : CustomSecurityHeaderType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Header
  // ************************************************************************ //
  CustomSecurityHeaderType = class(TSOAPHeader)
  private
    FeBayAuthToken: string;
    FeBayAuthToken_Specified: boolean;
    FHardExpirationWarning: string;
    FHardExpirationWarning_Specified: boolean;
    FCredentials: UserIdPasswordType;
    FCredentials_Specified: boolean;
    FNotificationSignature: string;
    FNotificationSignature_Specified: boolean;
    procedure SeteBayAuthToken(Index: Integer; const Astring: string);
    function  eBayAuthToken_Specified(Index: Integer): boolean;
    procedure SetHardExpirationWarning(Index: Integer; const Astring: string);
    function  HardExpirationWarning_Specified(Index: Integer): boolean;
    procedure SetCredentials(Index: Integer; const AUserIdPasswordType: UserIdPasswordType);
    function  Credentials_Specified(Index: Integer): boolean;
    procedure SetNotificationSignature(Index: Integer; const Astring: string);
    function  NotificationSignature_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property eBayAuthToken:         string              Index (IS_OPTN) read FeBayAuthToken write SeteBayAuthToken stored eBayAuthToken_Specified;
    property HardExpirationWarning: string              Index (IS_OPTN) read FHardExpirationWarning write SetHardExpirationWarning stored HardExpirationWarning_Specified;
    property Credentials:           UserIdPasswordType  Index (IS_OPTN) read FCredentials write SetCredentials stored Credentials_Specified;
    property NotificationSignature: string              Index (IS_OPTN) read FNotificationSignature write SetNotificationSignature stored NotificationSignature_Specified;
  end;



  // ************************************************************************ //
  // XML       : RequesterCredentials, global, <element>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Info      : Header
  // ************************************************************************ //
  RequesterCredentials = class(CustomSecurityHeaderType)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : UserIdPasswordType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserIdPasswordType = class(TRemotable)
  private
    FAppId: string;
    FAppId_Specified: boolean;
    FDevId: string;
    FDevId_Specified: boolean;
    FAuthCert: string;
    FAuthCert_Specified: boolean;
    FUsername: string;
    FUsername_Specified: boolean;
    FPassword: string;
    FPassword_Specified: boolean;
    procedure SetAppId(Index: Integer; const Astring: string);
    function  AppId_Specified(Index: Integer): boolean;
    procedure SetDevId(Index: Integer; const Astring: string);
    function  DevId_Specified(Index: Integer): boolean;
    procedure SetAuthCert(Index: Integer; const Astring: string);
    function  AuthCert_Specified(Index: Integer): boolean;
    procedure SetUsername(Index: Integer; const Astring: string);
    function  Username_Specified(Index: Integer): boolean;
    procedure SetPassword(Index: Integer; const Astring: string);
    function  Password_Specified(Index: Integer): boolean;
  published
    property AppId:    string  Index (IS_OPTN) read FAppId write SetAppId stored AppId_Specified;
    property DevId:    string  Index (IS_OPTN) read FDevId write SetDevId stored DevId_Specified;
    property AuthCert: string  Index (IS_OPTN) read FAuthCert write SetAuthCert stored AuthCert_Specified;
    property Username: string  Index (IS_OPTN) read FUsername write SetUsername stored Username_Specified;
    property Password: string  Index (IS_OPTN) read FPassword write SetPassword stored Password_Specified;
  end;



  // ************************************************************************ //
  // XML       : DisputeMessageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeMessageType = class(TRemotable)
  private
    FMessageID: Integer;
    FMessageID_Specified: boolean;
    FMessageSource: DisputeMessageSourceCodeType;
    FMessageSource_Specified: boolean;
    FMessageCreationTime: TXSDateTime;
    FMessageCreationTime_Specified: boolean;
    FMessageText: string;
    FMessageText_Specified: boolean;
    procedure SetMessageID(Index: Integer; const AInteger: Integer);
    function  MessageID_Specified(Index: Integer): boolean;
    procedure SetMessageSource(Index: Integer; const ADisputeMessageSourceCodeType: DisputeMessageSourceCodeType);
    function  MessageSource_Specified(Index: Integer): boolean;
    procedure SetMessageCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  MessageCreationTime_Specified(Index: Integer): boolean;
    procedure SetMessageText(Index: Integer; const Astring: string);
    function  MessageText_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property MessageID:           Integer                       Index (IS_OPTN) read FMessageID write SetMessageID stored MessageID_Specified;
    property MessageSource:       DisputeMessageSourceCodeType  Index (IS_OPTN) read FMessageSource write SetMessageSource stored MessageSource_Specified;
    property MessageCreationTime: TXSDateTime                   Index (IS_OPTN) read FMessageCreationTime write SetMessageCreationTime stored MessageCreationTime_Specified;
    property MessageText:         string                        Index (IS_OPTN) read FMessageText write SetMessageText stored MessageText_Specified;
  end;



  // ************************************************************************ //
  // XML       : AdFormatEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdFormatEnabledDefinitionType = class(TRemotable)
  private
  published
  end;

  AttributeArrayType = array of AttributeType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : AttributeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AttributeType = class(TRemotable)
  private
    FattributeID: Integer;
    FattributeID_Specified: boolean;
    FattributeLabel: string;
    FattributeLabel_Specified: boolean;
    FValue: Array_Of_ValType;
    FValue_Specified: boolean;
    procedure SetattributeID(Index: Integer; const AInteger: Integer);
    function  attributeID_Specified(Index: Integer): boolean;
    procedure SetattributeLabel(Index: Integer; const Astring: string);
    function  attributeLabel_Specified(Index: Integer): boolean;
    procedure SetValue(Index: Integer; const AArray_Of_ValType: Array_Of_ValType);
    function  Value_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property attributeID:    Integer           Index (IS_ATTR or IS_OPTN) read FattributeID write SetattributeID stored attributeID_Specified;
    property attributeLabel: string            Index (IS_ATTR or IS_OPTN) read FattributeLabel write SetattributeLabel stored attributeLabel_Specified;
    property Value:          Array_Of_ValType  Index (IS_OPTN or IS_UNBD) read FValue write SetValue stored Value_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeliveryURLDetailType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DeliveryURLDetailType = class(TRemotable)
  private
    FDeliveryURLName: string;
    FDeliveryURLName_Specified: boolean;
    FDeliveryURL: string;
    FDeliveryURL_Specified: boolean;
    FStatus: EnableCodeType;
    FStatus_Specified: boolean;
    procedure SetDeliveryURLName(Index: Integer; const Astring: string);
    function  DeliveryURLName_Specified(Index: Integer): boolean;
    procedure SetDeliveryURL(Index: Integer; const Astring: string);
    function  DeliveryURL_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AEnableCodeType: EnableCodeType);
    function  Status_Specified(Index: Integer): boolean;
  published
    property DeliveryURLName: string          Index (IS_OPTN) read FDeliveryURLName write SetDeliveryURLName stored DeliveryURLName_Specified;
    property DeliveryURL:     string          Index (IS_OPTN) read FDeliveryURL write SetDeliveryURL stored DeliveryURL_Specified;
    property Status:          EnableCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
  end;



  // ************************************************************************ //
  // XML       : NotificationEnableType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationEnableType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FEventType_Specified: boolean;
    FEventEnable: EnableCodeType;
    FEventEnable_Specified: boolean;
    procedure SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
    function  EventType_Specified(Index: Integer): boolean;
    procedure SetEventEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
    function  EventEnable_Specified(Index: Integer): boolean;
  published
    property EventType:   NotificationEventTypeCodeType  Index (IS_OPTN) read FEventType write SetEventType stored EventType_Specified;
    property EventEnable: EnableCodeType                 Index (IS_OPTN) read FEventEnable write SetEventEnable stored EventEnable_Specified;
  end;



  // ************************************************************************ //
  // XML       : ProStoresDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProStoresDetailsType = class(TRemotable)
  private
    FSellerThirdPartyUsername: string;
    FSellerThirdPartyUsername_Specified: boolean;
    FStoreName: string;
    FStoreName_Specified: boolean;
    FStatus: EnableCodeType;
    FStatus_Specified: boolean;
    procedure SetSellerThirdPartyUsername(Index: Integer; const Astring: string);
    function  SellerThirdPartyUsername_Specified(Index: Integer): boolean;
    procedure SetStoreName(Index: Integer; const Astring: string);
    function  StoreName_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AEnableCodeType: EnableCodeType);
    function  Status_Specified(Index: Integer): boolean;
  published
    property SellerThirdPartyUsername: string          Index (IS_OPTN) read FSellerThirdPartyUsername write SetSellerThirdPartyUsername stored SellerThirdPartyUsername_Specified;
    property StoreName:                string          Index (IS_OPTN) read FStoreName write SetStoreName stored StoreName_Specified;
    property Status:                   EnableCodeType  Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
  end;



  // ************************************************************************ //
  // XML       : ApplicationDeliveryPreferencesType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ApplicationDeliveryPreferencesType = class(TRemotable)
  private
    FApplicationURL: string;
    FApplicationURL_Specified: boolean;
    FApplicationEnable: EnableCodeType;
    FApplicationEnable_Specified: boolean;
    FAlertEmail: string;
    FAlertEmail_Specified: boolean;
    FAlertEnable: EnableCodeType;
    FAlertEnable_Specified: boolean;
    FNotificationPayloadType: NotificationPayloadTypeCodeType;
    FNotificationPayloadType_Specified: boolean;
    FDeviceType: DeviceTypeCodeType;
    FDeviceType_Specified: boolean;
    FPayloadVersion: string;
    FPayloadVersion_Specified: boolean;
    FDeliveryURLDetails: Array_Of_DeliveryURLDetailType;
    FDeliveryURLDetails_Specified: boolean;
    procedure SetApplicationURL(Index: Integer; const Astring: string);
    function  ApplicationURL_Specified(Index: Integer): boolean;
    procedure SetApplicationEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
    function  ApplicationEnable_Specified(Index: Integer): boolean;
    procedure SetAlertEmail(Index: Integer; const Astring: string);
    function  AlertEmail_Specified(Index: Integer): boolean;
    procedure SetAlertEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
    function  AlertEnable_Specified(Index: Integer): boolean;
    procedure SetNotificationPayloadType(Index: Integer; const ANotificationPayloadTypeCodeType: NotificationPayloadTypeCodeType);
    function  NotificationPayloadType_Specified(Index: Integer): boolean;
    procedure SetDeviceType(Index: Integer; const ADeviceTypeCodeType: DeviceTypeCodeType);
    function  DeviceType_Specified(Index: Integer): boolean;
    procedure SetPayloadVersion(Index: Integer; const Astring: string);
    function  PayloadVersion_Specified(Index: Integer): boolean;
    procedure SetDeliveryURLDetails(Index: Integer; const AArray_Of_DeliveryURLDetailType: Array_Of_DeliveryURLDetailType);
    function  DeliveryURLDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ApplicationURL:          string                           Index (IS_OPTN) read FApplicationURL write SetApplicationURL stored ApplicationURL_Specified;
    property ApplicationEnable:       EnableCodeType                   Index (IS_OPTN) read FApplicationEnable write SetApplicationEnable stored ApplicationEnable_Specified;
    property AlertEmail:              string                           Index (IS_OPTN) read FAlertEmail write SetAlertEmail stored AlertEmail_Specified;
    property AlertEnable:             EnableCodeType                   Index (IS_OPTN) read FAlertEnable write SetAlertEnable stored AlertEnable_Specified;
    property NotificationPayloadType: NotificationPayloadTypeCodeType  Index (IS_OPTN) read FNotificationPayloadType write SetNotificationPayloadType stored NotificationPayloadType_Specified;
    property DeviceType:              DeviceTypeCodeType               Index (IS_OPTN) read FDeviceType write SetDeviceType stored DeviceType_Specified;
    property PayloadVersion:          string                           Index (IS_OPTN) read FPayloadVersion write SetPayloadVersion stored PayloadVersion_Specified;
    property DeliveryURLDetails:      Array_Of_DeliveryURLDetailType   Index (IS_OPTN or IS_UNBD) read FDeliveryURLDetails write SetDeliveryURLDetails stored DeliveryURLDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : AttributeConversionEnabledFeatureDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AttributeConversionEnabledFeatureDefinitionType = class(TRemotable)
  private
  published
  end;

  AverageRatingDetailArrayType = array of AverageRatingDetailsType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : AverageRatingSummaryType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AverageRatingSummaryType = class(TRemotable)
  private
    FFeedbackSummaryPeriod: FeedbackSummaryPeriodCodeType;
    FFeedbackSummaryPeriod_Specified: boolean;
    FAverageRatingDetails: AverageRatingDetailArrayType;
    FAverageRatingDetails_Specified: boolean;
    procedure SetFeedbackSummaryPeriod(Index: Integer; const AFeedbackSummaryPeriodCodeType: FeedbackSummaryPeriodCodeType);
    function  FeedbackSummaryPeriod_Specified(Index: Integer): boolean;
    procedure SetAverageRatingDetails(Index: Integer; const AAverageRatingDetailArrayType: AverageRatingDetailArrayType);
    function  AverageRatingDetails_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property FeedbackSummaryPeriod: FeedbackSummaryPeriodCodeType  Index (IS_OPTN) read FFeedbackSummaryPeriod write SetFeedbackSummaryPeriod stored FeedbackSummaryPeriod_Specified;
    property AverageRatingDetails:  AverageRatingDetailArrayType   Index (IS_OPTN or IS_UNBD) read FAverageRatingDetails write SetAverageRatingDetails stored AverageRatingDetails_Specified;
  end;



  // ************************************************************************ //
  // XML       : AverageRatingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AverageRatingDetailsType = class(TRemotable)
  private
    FRatingDetail: FeedbackRatingDetailCodeType;
    FRatingDetail_Specified: boolean;
    FRating: Double;
    FRating_Specified: boolean;
    FRatingCount: Integer;
    FRatingCount_Specified: boolean;
    procedure SetRatingDetail(Index: Integer; const AFeedbackRatingDetailCodeType: FeedbackRatingDetailCodeType);
    function  RatingDetail_Specified(Index: Integer): boolean;
    procedure SetRating(Index: Integer; const ADouble: Double);
    function  Rating_Specified(Index: Integer): boolean;
    procedure SetRatingCount(Index: Integer; const AInteger: Integer);
    function  RatingCount_Specified(Index: Integer): boolean;
  published
    property RatingDetail: FeedbackRatingDetailCodeType  Index (IS_OPTN) read FRatingDetail write SetRatingDetail stored RatingDetail_Specified;
    property Rating:       Double                        Index (IS_OPTN) read FRating write SetRating stored Rating_Specified;
    property RatingCount:  Integer                       Index (IS_OPTN) read FRatingCount write SetRatingCount stored RatingCount_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemRatingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemRatingDetailsType = class(TRemotable)
  private
    FRatingDetail: FeedbackRatingDetailCodeType;
    FRatingDetail_Specified: boolean;
    FRating: Integer;
    FRating_Specified: boolean;
    procedure SetRatingDetail(Index: Integer; const AFeedbackRatingDetailCodeType: FeedbackRatingDetailCodeType);
    function  RatingDetail_Specified(Index: Integer): boolean;
    procedure SetRating(Index: Integer; const AInteger: Integer);
    function  Rating_Specified(Index: Integer): boolean;
  published
    property RatingDetail: FeedbackRatingDetailCodeType  Index (IS_OPTN) read FRatingDetail write SetRatingDetail stored RatingDetail_Specified;
    property Rating:       Integer                       Index (IS_OPTN) read FRating write SetRating stored Rating_Specified;
  end;

  AttributeSetArrayType = array of AttributeSetType;   { "urn:ebay:apis:eBLBaseComponents"[GblCplx] }


  // ************************************************************************ //
  // XML       : ItemType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemType = class(TRemotable)
  private
    FApplicationData: string;
    FApplicationData_Specified: boolean;
    FAttributeSetArray: AttributeSetArrayType;
    FAttributeSetArray_Specified: boolean;
    FAttributeArray: AttributeArrayType;
    FAttributeArray_Specified: boolean;
    FLookupAttributeArray: LookupAttributeArrayType;
    FLookupAttributeArray_Specified: boolean;
    FAutoPay: Boolean;
    FAutoPay_Specified: boolean;
    FBiddingDetails: BiddingDetailsType;
    FBiddingDetails_Specified: boolean;
    FBuyerProtection: BuyerProtectionCodeType;
    FBuyerProtection_Specified: boolean;
    FBuyItNowPrice: AmountType;
    FBuyItNowPrice_Specified: boolean;
    FCategoryMappingAllowed: Boolean;
    FCategoryMappingAllowed_Specified: boolean;
    FCharity: CharityType;
    FCharity_Specified: boolean;
    FCountry: CountryCodeType;
    FCountry_Specified: boolean;
    FCrossPromotion: CrossPromotionsType;
    FCrossPromotion_Specified: boolean;
    FCurrency: CurrencyCodeType;
    FCurrency_Specified: boolean;
    FDescription: string;
    FDescription_Specified: boolean;
    FDescriptionReviseMode: DescriptionReviseModeCodeType;
    FDescriptionReviseMode_Specified: boolean;
    FDistance: DistanceType;
    FDistance_Specified: boolean;
    FHitCounter: HitCounterCodeType;
    FHitCounter_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FListingDetails: ListingDetailsType;
    FListingDetails_Specified: boolean;
    FListingDesigner: ListingDesignerType;
    FListingDesigner_Specified: boolean;
    FListingDuration: string;
    FListingDuration_Specified: boolean;
    FListingEnhancement: Array_Of_ListingEnhancementsCodeType;
    FListingEnhancement_Specified: boolean;
    FListingType: ListingTypeCodeType;
    FListingType_Specified: boolean;
    FLocation: string;
    FLocation_Specified: boolean;
    FLotSize: Integer;
    FLotSize_Specified: boolean;
    FPartnerCode: string;
    FPartnerCode_Specified: boolean;
    FPartnerName: string;
    FPartnerName_Specified: boolean;
    FPaymentDetails: PaymentDetailsType;
    FPaymentDetails_Specified: boolean;
    FPaymentMethods: Array_Of_BuyerPaymentMethodCodeType;
    FPaymentMethods_Specified: boolean;
    FPayPalEmailAddress: string;
    FPayPalEmailAddress_Specified: boolean;
    FPrimaryCategory: CategoryType;
    FPrimaryCategory_Specified: boolean;
    FPrivateListing: Boolean;
    FPrivateListing_Specified: boolean;
    FProductListingDetails: ProductListingDetailsType;
    FProductListingDetails_Specified: boolean;
    FQuantity: Integer;
    FQuantity_Specified: boolean;
    FPrivateNotes: string;
    FPrivateNotes_Specified: boolean;
    FRegionID: string;
    FRegionID_Specified: boolean;
    FRelistLink: Boolean;
    FRelistLink_Specified: boolean;
    FReservePrice: AmountType;
    FReservePrice_Specified: boolean;
    FReviseStatus: ReviseStatusType;
    FReviseStatus_Specified: boolean;
    FScheduleTime: TXSDateTime;
    FScheduleTime_Specified: boolean;
    FSecondaryCategory: CategoryType;
    FSecondaryCategory_Specified: boolean;
    FFreeAddedCategory: CategoryType;
    FFreeAddedCategory_Specified: boolean;
    FSeller: UserType;
    FSeller_Specified: boolean;
    FSellingStatus: SellingStatusType;
    FSellingStatus_Specified: boolean;
    FShippingDetails: ShippingDetailsType;
    FShippingDetails_Specified: boolean;
    FShipToLocations: SellerExcludeShipToLocationPreferencesType;
    FShipToLocations_Specified: boolean;
    FSite: SiteCodeType;
    FSite_Specified: boolean;
    FStartPrice: AmountType;
    FStartPrice_Specified: boolean;
    FStorefront: StorefrontType;
    FStorefront_Specified: boolean;
    FSubTitle: string;
    FSubTitle_Specified: boolean;
    FTimeLeft: TXSDuration;
    FTimeLeft_Specified: boolean;
    FTitle: string;
    FTitle_Specified: boolean;
    FUUID: UUIDType;
    FUUID_Specified: boolean;
    FVATDetails: VATDetailsType;
    FVATDetails_Specified: boolean;
    FSellerVacationNote: string;
    FSellerVacationNote_Specified: boolean;
    FWatchCount: Int64;
    FWatchCount_Specified: boolean;
    FHitCount: Int64;
    FHitCount_Specified: boolean;
    FDisableBuyerRequirements: Boolean;
    FDisableBuyerRequirements_Specified: boolean;
    FBestOfferDetails: BestOfferDetailsType;
    FBestOfferDetails_Specified: boolean;
    FLocationDefaulted: Boolean;
    FLocationDefaulted_Specified: boolean;
    FUseTaxTable: Boolean;
    FUseTaxTable_Specified: boolean;
    FGetItFast: Boolean;
    FGetItFast_Specified: boolean;
    FBuyerResponsibleForShipping: Boolean;
    FBuyerResponsibleForShipping_Specified: boolean;
    FLimitedWarrantyEligible: Boolean;
    FLimitedWarrantyEligible_Specified: boolean;
    FeBayNotes: string;
    FeBayNotes_Specified: boolean;
    FQuestionCount: Int64;
    FQuestionCount_Specified: boolean;
    FRelisted: Boolean;
    FRelisted_Specified: boolean;
    FQuantityAvailable: Integer;
    FQuantityAvailable_Specified: boolean;
    FSKU: SKUType;
    FSKU_Specified: boolean;
    FSearchDetails: SearchDetailsType;
    FSearchDetails_Specified: boolean;
    FPostalCode: string;
    FPostalCode_Specified: boolean;
    FPictureDetails: PictureDetailsType;
    FPictureDetails_Specified: boolean;
    FDispatchTimeMax: Integer;
    FDispatchTimeMax_Specified: boolean;
    FBestOfferEnabled: Boolean;
    FBestOfferEnabled_Specified: boolean;
    FLocalListing: Boolean;
    FLocalListing_Specified: boolean;
    FSellerContactDetails: AddressType;
    FSellerContactDetails_Specified: boolean;
    FTotalQuestionCount: Int64;
    FTotalQuestionCount_Specified: boolean;
    FProxyItem: Boolean;
    FProxyItem_Specified: boolean;
    FExtendedSellerContactDetails: ExtendedContactDetailsType;
    FExtendedSellerContactDetails_Specified: boolean;
    FLeadCount: Integer;
    FLeadCount_Specified: boolean;
    FNewLeadCount: Integer;
    FNewLeadCount_Specified: boolean;
    FItemSpecifics: NameValueListArrayType;
    FItemSpecifics_Specified: boolean;
    FGroupCategoryID: string;
    FGroupCategoryID_Specified: boolean;
    FClassifiedAdPayPerLeadFee: AmountType;
    FClassifiedAdPayPerLeadFee_Specified: boolean;
    FBidGroupItem: Boolean;
    FBidGroupItem_Specified: boolean;
    FApplyBuyerProtection: BuyerProtectionDetailsType;
    FApplyBuyerProtection_Specified: boolean;
    FListingSubtype2: ListingSubtypeCodeType;
    FListingSubtype2_Specified: boolean;
    FMechanicalCheckAccepted: Boolean;
    FMechanicalCheckAccepted_Specified: boolean;
    FUpdateSellerInfo: Boolean;
    FUpdateSellerInfo_Specified: boolean;
    FUpdateReturnPolicy: Boolean;
    FUpdateReturnPolicy_Specified: boolean;
    FItemPolicyViolation: ItemPolicyViolationType;
    FItemPolicyViolation_Specified: boolean;
    FCrossBorderTrade: SellerExcludeShipToLocationPreferencesType;
    FCrossBorderTrade_Specified: boolean;
    FBusinessSellerDetails: BusinessSellerDetailsType;
    FBusinessSellerDetails_Specified: boolean;
    FBuyerGuaranteePrice: AmountType;
    FBuyerGuaranteePrice_Specified: boolean;
    FBuyerRequirementDetails: BuyerRequirementDetailsType;
    FBuyerRequirementDetails_Specified: boolean;
    FReturnPolicy: ReturnPolicyType;
    FReturnPolicy_Specified: boolean;
    FPaymentAllowedSite: IntegratedMerchantCreditCardInfoType;
    FPaymentAllowedSite_Specified: boolean;
    FInventoryTrackingMethod: InventoryTrackingMethodCodeType;
    FInventoryTrackingMethod_Specified: boolean;
    FIntegratedMerchantCreditCardEnabled: Boolean;
    FIntegratedMerchantCreditCardEnabled_Specified: boolean;
    FVariations: VariationsType;
    FVariations_Specified: boolean;
    FItemCompatibilityList: ItemCompatibilityListType;
    FItemCompatibilityList_Specified: boolean;
    FItemCompatibilityCount: Integer;
    FItemCompatibilityCount_Specified: boolean;
    FConditionID: Integer;
    FConditionID_Specified: boolean;
    FConditionDescription: string;
    FConditionDescription_Specified: boolean;
    FConditionDisplayName: string;
    FConditionDisplayName_Specified: boolean;
    FTaxCategory: string;
    FTaxCategory_Specified: boolean;
    FQuantityAvailableHint: QuantityAvailableHintCodeType;
    FQuantityAvailableHint_Specified: boolean;
    FQuantityThreshold: Integer;
    FQuantityThreshold_Specified: boolean;
    FDiscountPriceInfo: DiscountPriceInfoType;
    FDiscountPriceInfo_Specified: boolean;
    FSellerProvidedTitle: string;
    FSellerProvidedTitle_Specified: boolean;
    FVIN: string;
    FVIN_Specified: boolean;
    FVINLink: string;
    FVINLink_Specified: boolean;
    FVRM: string;
    FVRM_Specified: boolean;
    FVRMLink: string;
    FVRMLink_Specified: boolean;
    FQuantityInfo: QuantityInfoType;
    FQuantityInfo_Specified: boolean;
    FSellerProfiles: SellerProfilesType;
    FSellerProfiles_Specified: boolean;
    FShippingServiceCostOverrideList: ShippingServiceCostOverrideListType;
    FShippingServiceCostOverrideList_Specified: boolean;
    FShippingOverride: ShippingOverrideType;
    FShippingOverride_Specified: boolean;
    FShippingPackageDetails: ShipPackageDetailsType;
    FShippingPackageDetails_Specified: boolean;
    FTopRatedListing: Boolean;
    FTopRatedListing_Specified: boolean;
    FQuantityRestrictionPerBuyer: QuantityRestrictionPerBuyerInfoType;
    FQuantityRestrictionPerBuyer_Specified: boolean;
    FFloorPrice: AmountType;
    FFloorPrice_Specified: boolean;
    FCeilingPrice: AmountType;
    FCeilingPrice_Specified: boolean;
    FIsIntermediatedShippingEligible: Boolean;
    FIsIntermediatedShippingEligible_Specified: boolean;
    FUnitInfo: UnitInfoType;
    FUnitInfo_Specified: boolean;
    FRelistParentID: Int64;
    FRelistParentID_Specified: boolean;
    FConditionDefinition: string;
    FConditionDefinition_Specified: boolean;
    FHideFromSearch: Boolean;
    FHideFromSearch_Specified: boolean;
    FReasonHideFromSearch: ReasonHideFromSearchCodeType;
    FReasonHideFromSearch_Specified: boolean;
    FIncludeRecommendations: Boolean;
    FIncludeRecommendations_Specified: boolean;
    FPickupInStoreDetails: PickupInStoreDetailsType;
    FPickupInStoreDetails_Specified: boolean;
    FSiteId: Integer;
    FSiteId_Specified: boolean;
    FIgnoreQuantity: Boolean;
    FIgnoreQuantity_Specified: boolean;
    FAvailableForPickupDropOff: Boolean;
    FAvailableForPickupDropOff_Specified: boolean;
    FEligibleForPickupDropOff: Boolean;
    FEligibleForPickupDropOff_Specified: boolean;
    FLiveAuction: Boolean;
    FLiveAuction_Specified: boolean;
    FDigitalGoodInfo: DigitalGoodInfoType;
    FDigitalGoodInfo_Specified: boolean;
    FeBayPlus: Boolean;
    FeBayPlus_Specified: boolean;
    FeBayPlusEligible: Boolean;
    FeBayPlusEligible_Specified: boolean;
    FeMailDeliveryAvailable: Boolean;
    FeMailDeliveryAvailable_Specified: boolean;
    FIsSecureDescription: Boolean;
    FIsSecureDescription_Specified: boolean;
    procedure SetApplicationData(Index: Integer; const Astring: string);
    function  ApplicationData_Specified(Index: Integer): boolean;
    procedure SetAttributeSetArray(Index: Integer; const AAttributeSetArrayType: AttributeSetArrayType);
    function  AttributeSetArray_Specified(Index: Integer): boolean;
    procedure SetAttributeArray(Index: Integer; const AAttributeArrayType: AttributeArrayType);
    function  AttributeArray_Specified(Index: Integer): boolean;
    procedure SetLookupAttributeArray(Index: Integer; const ALookupAttributeArrayType: LookupAttributeArrayType);
    function  LookupAttributeArray_Specified(Index: Integer): boolean;
    procedure SetAutoPay(Index: Integer; const ABoolean: Boolean);
    function  AutoPay_Specified(Index: Integer): boolean;
    procedure SetBiddingDetails(Index: Integer; const ABiddingDetailsType: BiddingDetailsType);
    function  BiddingDetails_Specified(Index: Integer): boolean;
    procedure SetBuyerProtection(Index: Integer; const ABuyerProtectionCodeType: BuyerProtectionCodeType);
    function  BuyerProtection_Specified(Index: Integer): boolean;
    procedure SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
    function  BuyItNowPrice_Specified(Index: Integer): boolean;
    procedure SetCategoryMappingAllowed(Index: Integer; const ABoolean: Boolean);
    function  CategoryMappingAllowed_Specified(Index: Integer): boolean;
    procedure SetCharity(Index: Integer; const ACharityType: CharityType);
    function  Charity_Specified(Index: Integer): boolean;
    procedure SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  Country_Specified(Index: Integer): boolean;
    procedure SetCrossPromotion(Index: Integer; const ACrossPromotionsType: CrossPromotionsType);
    function  CrossPromotion_Specified(Index: Integer): boolean;
    procedure SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
    function  Currency_Specified(Index: Integer): boolean;
    procedure SetDescription(Index: Integer; const Astring: string);
    function  Description_Specified(Index: Integer): boolean;
    procedure SetDescriptionReviseMode(Index: Integer; const ADescriptionReviseModeCodeType: DescriptionReviseModeCodeType);
    function  DescriptionReviseMode_Specified(Index: Integer): boolean;
    procedure SetDistance(Index: Integer; const ADistanceType: DistanceType);
    function  Distance_Specified(Index: Integer): boolean;
    procedure SetHitCounter(Index: Integer; const AHitCounterCodeType: HitCounterCodeType);
    function  HitCounter_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetListingDetails(Index: Integer; const AListingDetailsType: ListingDetailsType);
    function  ListingDetails_Specified(Index: Integer): boolean;
    procedure SetListingDesigner(Index: Integer; const AListingDesignerType: ListingDesignerType);
    function  ListingDesigner_Specified(Index: Integer): boolean;
    procedure SetListingDuration(Index: Integer; const Astring: string);
    function  ListingDuration_Specified(Index: Integer): boolean;
    procedure SetListingEnhancement(Index: Integer; const AArray_Of_ListingEnhancementsCodeType: Array_Of_ListingEnhancementsCodeType);
    function  ListingEnhancement_Specified(Index: Integer): boolean;
    procedure SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
    function  ListingType_Specified(Index: Integer): boolean;
    procedure SetLocation(Index: Integer; const Astring: string);
    function  Location_Specified(Index: Integer): boolean;
    procedure SetLotSize(Index: Integer; const AInteger: Integer);
    function  LotSize_Specified(Index: Integer): boolean;
    procedure SetPartnerCode(Index: Integer; const Astring: string);
    function  PartnerCode_Specified(Index: Integer): boolean;
    procedure SetPartnerName(Index: Integer; const Astring: string);
    function  PartnerName_Specified(Index: Integer): boolean;
    procedure SetPaymentDetails(Index: Integer; const APaymentDetailsType: PaymentDetailsType);
    function  PaymentDetails_Specified(Index: Integer): boolean;
    procedure SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
    function  PaymentMethods_Specified(Index: Integer): boolean;
    procedure SetPayPalEmailAddress(Index: Integer; const Astring: string);
    function  PayPalEmailAddress_Specified(Index: Integer): boolean;
    procedure SetPrimaryCategory(Index: Integer; const ACategoryType: CategoryType);
    function  PrimaryCategory_Specified(Index: Integer): boolean;
    procedure SetPrivateListing(Index: Integer; const ABoolean: Boolean);
    function  PrivateListing_Specified(Index: Integer): boolean;
    procedure SetProductListingDetails(Index: Integer; const AProductListingDetailsType: ProductListingDetailsType);
    function  ProductListingDetails_Specified(Index: Integer): boolean;
    procedure SetQuantity(Index: Integer; const AInteger: Integer);
    function  Quantity_Specified(Index: Integer): boolean;
    procedure SetPrivateNotes(Index: Integer; const Astring: string);
    function  PrivateNotes_Specified(Index: Integer): boolean;
    procedure SetRegionID(Index: Integer; const Astring: string);
    function  RegionID_Specified(Index: Integer): boolean;
    procedure SetRelistLink(Index: Integer; const ABoolean: Boolean);
    function  RelistLink_Specified(Index: Integer): boolean;
    procedure SetReservePrice(Index: Integer; const AAmountType: AmountType);
    function  ReservePrice_Specified(Index: Integer): boolean;
    procedure SetReviseStatus(Index: Integer; const AReviseStatusType: ReviseStatusType);
    function  ReviseStatus_Specified(Index: Integer): boolean;
    procedure SetScheduleTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ScheduleTime_Specified(Index: Integer): boolean;
    procedure SetSecondaryCategory(Index: Integer; const ACategoryType: CategoryType);
    function  SecondaryCategory_Specified(Index: Integer): boolean;
    procedure SetFreeAddedCategory(Index: Integer; const ACategoryType: CategoryType);
    function  FreeAddedCategory_Specified(Index: Integer): boolean;
    procedure SetSeller(Index: Integer; const AUserType: UserType);
    function  Seller_Specified(Index: Integer): boolean;
    procedure SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
    function  SellingStatus_Specified(Index: Integer): boolean;
    procedure SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
    function  ShippingDetails_Specified(Index: Integer): boolean;
    procedure SetShipToLocations(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  ShipToLocations_Specified(Index: Integer): boolean;
    procedure SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
    function  Site_Specified(Index: Integer): boolean;
    procedure SetStartPrice(Index: Integer; const AAmountType: AmountType);
    function  StartPrice_Specified(Index: Integer): boolean;
    procedure SetStorefront(Index: Integer; const AStorefrontType: StorefrontType);
    function  Storefront_Specified(Index: Integer): boolean;
    procedure SetSubTitle(Index: Integer; const Astring: string);
    function  SubTitle_Specified(Index: Integer): boolean;
    procedure SetTimeLeft(Index: Integer; const ATXSDuration: TXSDuration);
    function  TimeLeft_Specified(Index: Integer): boolean;
    procedure SetTitle(Index: Integer; const Astring: string);
    function  Title_Specified(Index: Integer): boolean;
    procedure SetUUID(Index: Integer; const AUUIDType: UUIDType);
    function  UUID_Specified(Index: Integer): boolean;
    procedure SetVATDetails(Index: Integer; const AVATDetailsType: VATDetailsType);
    function  VATDetails_Specified(Index: Integer): boolean;
    procedure SetSellerVacationNote(Index: Integer; const Astring: string);
    function  SellerVacationNote_Specified(Index: Integer): boolean;
    procedure SetWatchCount(Index: Integer; const AInt64: Int64);
    function  WatchCount_Specified(Index: Integer): boolean;
    procedure SetHitCount(Index: Integer; const AInt64: Int64);
    function  HitCount_Specified(Index: Integer): boolean;
    procedure SetDisableBuyerRequirements(Index: Integer; const ABoolean: Boolean);
    function  DisableBuyerRequirements_Specified(Index: Integer): boolean;
    procedure SetBestOfferDetails(Index: Integer; const ABestOfferDetailsType: BestOfferDetailsType);
    function  BestOfferDetails_Specified(Index: Integer): boolean;
    procedure SetLocationDefaulted(Index: Integer; const ABoolean: Boolean);
    function  LocationDefaulted_Specified(Index: Integer): boolean;
    procedure SetUseTaxTable(Index: Integer; const ABoolean: Boolean);
    function  UseTaxTable_Specified(Index: Integer): boolean;
    procedure SetGetItFast(Index: Integer; const ABoolean: Boolean);
    function  GetItFast_Specified(Index: Integer): boolean;
    procedure SetBuyerResponsibleForShipping(Index: Integer; const ABoolean: Boolean);
    function  BuyerResponsibleForShipping_Specified(Index: Integer): boolean;
    procedure SetLimitedWarrantyEligible(Index: Integer; const ABoolean: Boolean);
    function  LimitedWarrantyEligible_Specified(Index: Integer): boolean;
    procedure SeteBayNotes(Index: Integer; const Astring: string);
    function  eBayNotes_Specified(Index: Integer): boolean;
    procedure SetQuestionCount(Index: Integer; const AInt64: Int64);
    function  QuestionCount_Specified(Index: Integer): boolean;
    procedure SetRelisted(Index: Integer; const ABoolean: Boolean);
    function  Relisted_Specified(Index: Integer): boolean;
    procedure SetQuantityAvailable(Index: Integer; const AInteger: Integer);
    function  QuantityAvailable_Specified(Index: Integer): boolean;
    procedure SetSKU(Index: Integer; const ASKUType: SKUType);
    function  SKU_Specified(Index: Integer): boolean;
    procedure SetSearchDetails(Index: Integer; const ASearchDetailsType: SearchDetailsType);
    function  SearchDetails_Specified(Index: Integer): boolean;
    procedure SetPostalCode(Index: Integer; const Astring: string);
    function  PostalCode_Specified(Index: Integer): boolean;
    procedure SetPictureDetails(Index: Integer; const APictureDetailsType: PictureDetailsType);
    function  PictureDetails_Specified(Index: Integer): boolean;
    procedure SetDispatchTimeMax(Index: Integer; const AInteger: Integer);
    function  DispatchTimeMax_Specified(Index: Integer): boolean;
    procedure SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
    function  BestOfferEnabled_Specified(Index: Integer): boolean;
    procedure SetLocalListing(Index: Integer; const ABoolean: Boolean);
    function  LocalListing_Specified(Index: Integer): boolean;
    procedure SetSellerContactDetails(Index: Integer; const AAddressType: AddressType);
    function  SellerContactDetails_Specified(Index: Integer): boolean;
    procedure SetTotalQuestionCount(Index: Integer; const AInt64: Int64);
    function  TotalQuestionCount_Specified(Index: Integer): boolean;
    procedure SetProxyItem(Index: Integer; const ABoolean: Boolean);
    function  ProxyItem_Specified(Index: Integer): boolean;
    procedure SetExtendedSellerContactDetails(Index: Integer; const AExtendedContactDetailsType: ExtendedContactDetailsType);
    function  ExtendedSellerContactDetails_Specified(Index: Integer): boolean;
    procedure SetLeadCount(Index: Integer; const AInteger: Integer);
    function  LeadCount_Specified(Index: Integer): boolean;
    procedure SetNewLeadCount(Index: Integer; const AInteger: Integer);
    function  NewLeadCount_Specified(Index: Integer): boolean;
    procedure SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
    function  ItemSpecifics_Specified(Index: Integer): boolean;
    procedure SetGroupCategoryID(Index: Integer; const Astring: string);
    function  GroupCategoryID_Specified(Index: Integer): boolean;
    procedure SetClassifiedAdPayPerLeadFee(Index: Integer; const AAmountType: AmountType);
    function  ClassifiedAdPayPerLeadFee_Specified(Index: Integer): boolean;
    procedure SetBidGroupItem(Index: Integer; const ABoolean: Boolean);
    function  BidGroupItem_Specified(Index: Integer): boolean;
    procedure SetApplyBuyerProtection(Index: Integer; const ABuyerProtectionDetailsType: BuyerProtectionDetailsType);
    function  ApplyBuyerProtection_Specified(Index: Integer): boolean;
    procedure SetListingSubtype2(Index: Integer; const AListingSubtypeCodeType: ListingSubtypeCodeType);
    function  ListingSubtype2_Specified(Index: Integer): boolean;
    procedure SetMechanicalCheckAccepted(Index: Integer; const ABoolean: Boolean);
    function  MechanicalCheckAccepted_Specified(Index: Integer): boolean;
    procedure SetUpdateSellerInfo(Index: Integer; const ABoolean: Boolean);
    function  UpdateSellerInfo_Specified(Index: Integer): boolean;
    procedure SetUpdateReturnPolicy(Index: Integer; const ABoolean: Boolean);
    function  UpdateReturnPolicy_Specified(Index: Integer): boolean;
    procedure SetItemPolicyViolation(Index: Integer; const AItemPolicyViolationType: ItemPolicyViolationType);
    function  ItemPolicyViolation_Specified(Index: Integer): boolean;
    procedure SetCrossBorderTrade(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  CrossBorderTrade_Specified(Index: Integer): boolean;
    procedure SetBusinessSellerDetails(Index: Integer; const ABusinessSellerDetailsType: BusinessSellerDetailsType);
    function  BusinessSellerDetails_Specified(Index: Integer): boolean;
    procedure SetBuyerGuaranteePrice(Index: Integer; const AAmountType: AmountType);
    function  BuyerGuaranteePrice_Specified(Index: Integer): boolean;
    procedure SetBuyerRequirementDetails(Index: Integer; const ABuyerRequirementDetailsType: BuyerRequirementDetailsType);
    function  BuyerRequirementDetails_Specified(Index: Integer): boolean;
    procedure SetReturnPolicy(Index: Integer; const AReturnPolicyType: ReturnPolicyType);
    function  ReturnPolicy_Specified(Index: Integer): boolean;
    procedure SetPaymentAllowedSite(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
    function  PaymentAllowedSite_Specified(Index: Integer): boolean;
    procedure SetInventoryTrackingMethod(Index: Integer; const AInventoryTrackingMethodCodeType: InventoryTrackingMethodCodeType);
    function  InventoryTrackingMethod_Specified(Index: Integer): boolean;
    procedure SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
    function  IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
    procedure SetVariations(Index: Integer; const AVariationsType: VariationsType);
    function  Variations_Specified(Index: Integer): boolean;
    procedure SetItemCompatibilityList(Index: Integer; const AItemCompatibilityListType: ItemCompatibilityListType);
    function  ItemCompatibilityList_Specified(Index: Integer): boolean;
    procedure SetItemCompatibilityCount(Index: Integer; const AInteger: Integer);
    function  ItemCompatibilityCount_Specified(Index: Integer): boolean;
    procedure SetConditionID(Index: Integer; const AInteger: Integer);
    function  ConditionID_Specified(Index: Integer): boolean;
    procedure SetConditionDescription(Index: Integer; const Astring: string);
    function  ConditionDescription_Specified(Index: Integer): boolean;
    procedure SetConditionDisplayName(Index: Integer; const Astring: string);
    function  ConditionDisplayName_Specified(Index: Integer): boolean;
    procedure SetTaxCategory(Index: Integer; const Astring: string);
    function  TaxCategory_Specified(Index: Integer): boolean;
    procedure SetQuantityAvailableHint(Index: Integer; const AQuantityAvailableHintCodeType: QuantityAvailableHintCodeType);
    function  QuantityAvailableHint_Specified(Index: Integer): boolean;
    procedure SetQuantityThreshold(Index: Integer; const AInteger: Integer);
    function  QuantityThreshold_Specified(Index: Integer): boolean;
    procedure SetDiscountPriceInfo(Index: Integer; const ADiscountPriceInfoType: DiscountPriceInfoType);
    function  DiscountPriceInfo_Specified(Index: Integer): boolean;
    procedure SetSellerProvidedTitle(Index: Integer; const Astring: string);
    function  SellerProvidedTitle_Specified(Index: Integer): boolean;
    procedure SetVIN(Index: Integer; const Astring: string);
    function  VIN_Specified(Index: Integer): boolean;
    procedure SetVINLink(Index: Integer; const Astring: string);
    function  VINLink_Specified(Index: Integer): boolean;
    procedure SetVRM(Index: Integer; const Astring: string);
    function  VRM_Specified(Index: Integer): boolean;
    procedure SetVRMLink(Index: Integer; const Astring: string);
    function  VRMLink_Specified(Index: Integer): boolean;
    procedure SetQuantityInfo(Index: Integer; const AQuantityInfoType: QuantityInfoType);
    function  QuantityInfo_Specified(Index: Integer): boolean;
    procedure SetSellerProfiles(Index: Integer; const ASellerProfilesType: SellerProfilesType);
    function  SellerProfiles_Specified(Index: Integer): boolean;
    procedure SetShippingServiceCostOverrideList(Index: Integer; const AShippingServiceCostOverrideListType: ShippingServiceCostOverrideListType);
    function  ShippingServiceCostOverrideList_Specified(Index: Integer): boolean;
    procedure SetShippingOverride(Index: Integer; const AShippingOverrideType: ShippingOverrideType);
    function  ShippingOverride_Specified(Index: Integer): boolean;
    procedure SetShippingPackageDetails(Index: Integer; const AShipPackageDetailsType: ShipPackageDetailsType);
    function  ShippingPackageDetails_Specified(Index: Integer): boolean;
    procedure SetTopRatedListing(Index: Integer; const ABoolean: Boolean);
    function  TopRatedListing_Specified(Index: Integer): boolean;
    procedure SetQuantityRestrictionPerBuyer(Index: Integer; const AQuantityRestrictionPerBuyerInfoType: QuantityRestrictionPerBuyerInfoType);
    function  QuantityRestrictionPerBuyer_Specified(Index: Integer): boolean;
    procedure SetFloorPrice(Index: Integer; const AAmountType: AmountType);
    function  FloorPrice_Specified(Index: Integer): boolean;
    procedure SetCeilingPrice(Index: Integer; const AAmountType: AmountType);
    function  CeilingPrice_Specified(Index: Integer): boolean;
    procedure SetIsIntermediatedShippingEligible(Index: Integer; const ABoolean: Boolean);
    function  IsIntermediatedShippingEligible_Specified(Index: Integer): boolean;
    procedure SetUnitInfo(Index: Integer; const AUnitInfoType: UnitInfoType);
    function  UnitInfo_Specified(Index: Integer): boolean;
    procedure SetRelistParentID(Index: Integer; const AInt64: Int64);
    function  RelistParentID_Specified(Index: Integer): boolean;
    procedure SetConditionDefinition(Index: Integer; const Astring: string);
    function  ConditionDefinition_Specified(Index: Integer): boolean;
    procedure SetHideFromSearch(Index: Integer; const ABoolean: Boolean);
    function  HideFromSearch_Specified(Index: Integer): boolean;
    procedure SetReasonHideFromSearch(Index: Integer; const AReasonHideFromSearchCodeType: ReasonHideFromSearchCodeType);
    function  ReasonHideFromSearch_Specified(Index: Integer): boolean;
    procedure SetIncludeRecommendations(Index: Integer; const ABoolean: Boolean);
    function  IncludeRecommendations_Specified(Index: Integer): boolean;
    procedure SetPickupInStoreDetails(Index: Integer; const APickupInStoreDetailsType: PickupInStoreDetailsType);
    function  PickupInStoreDetails_Specified(Index: Integer): boolean;
    procedure SetSiteId(Index: Integer; const AInteger: Integer);
    function  SiteId_Specified(Index: Integer): boolean;
    procedure SetIgnoreQuantity(Index: Integer; const ABoolean: Boolean);
    function  IgnoreQuantity_Specified(Index: Integer): boolean;
    procedure SetAvailableForPickupDropOff(Index: Integer; const ABoolean: Boolean);
    function  AvailableForPickupDropOff_Specified(Index: Integer): boolean;
    procedure SetEligibleForPickupDropOff(Index: Integer; const ABoolean: Boolean);
    function  EligibleForPickupDropOff_Specified(Index: Integer): boolean;
    procedure SetLiveAuction(Index: Integer; const ABoolean: Boolean);
    function  LiveAuction_Specified(Index: Integer): boolean;
    procedure SetDigitalGoodInfo(Index: Integer; const ADigitalGoodInfoType: DigitalGoodInfoType);
    function  DigitalGoodInfo_Specified(Index: Integer): boolean;
    procedure SeteBayPlus(Index: Integer; const ABoolean: Boolean);
    function  eBayPlus_Specified(Index: Integer): boolean;
    procedure SeteBayPlusEligible(Index: Integer; const ABoolean: Boolean);
    function  eBayPlusEligible_Specified(Index: Integer): boolean;
    procedure SeteMailDeliveryAvailable(Index: Integer; const ABoolean: Boolean);
    function  eMailDeliveryAvailable_Specified(Index: Integer): boolean;
    procedure SetIsSecureDescription(Index: Integer; const ABoolean: Boolean);
    function  IsSecureDescription_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property ApplicationData:                     string                                      Index (IS_OPTN) read FApplicationData write SetApplicationData stored ApplicationData_Specified;
    property AttributeSetArray:                   AttributeSetArrayType                       Index (IS_OPTN) read FAttributeSetArray write SetAttributeSetArray stored AttributeSetArray_Specified;
    property AttributeArray:                      AttributeArrayType                          Index (IS_OPTN) read FAttributeArray write SetAttributeArray stored AttributeArray_Specified;
    property LookupAttributeArray:                LookupAttributeArrayType                    Index (IS_OPTN) read FLookupAttributeArray write SetLookupAttributeArray stored LookupAttributeArray_Specified;
    property AutoPay:                             Boolean                                     Index (IS_OPTN) read FAutoPay write SetAutoPay stored AutoPay_Specified;
    property BiddingDetails:                      BiddingDetailsType                          Index (IS_OPTN) read FBiddingDetails write SetBiddingDetails stored BiddingDetails_Specified;
    property BuyerProtection:                     BuyerProtectionCodeType                     Index (IS_OPTN) read FBuyerProtection write SetBuyerProtection stored BuyerProtection_Specified;
    property BuyItNowPrice:                       AmountType                                  Index (IS_OPTN) read FBuyItNowPrice write SetBuyItNowPrice stored BuyItNowPrice_Specified;
    property CategoryMappingAllowed:              Boolean                                     Index (IS_OPTN) read FCategoryMappingAllowed write SetCategoryMappingAllowed stored CategoryMappingAllowed_Specified;
    property Charity:                             CharityType                                 Index (IS_OPTN) read FCharity write SetCharity stored Charity_Specified;
    property Country:                             CountryCodeType                             Index (IS_OPTN) read FCountry write SetCountry stored Country_Specified;
    property CrossPromotion:                      CrossPromotionsType                         Index (IS_OPTN) read FCrossPromotion write SetCrossPromotion stored CrossPromotion_Specified;
    property Currency:                            CurrencyCodeType                            Index (IS_OPTN) read FCurrency write SetCurrency stored Currency_Specified;
    property Description:                         string                                      Index (IS_OPTN) read FDescription write SetDescription stored Description_Specified;
    property DescriptionReviseMode:               DescriptionReviseModeCodeType               Index (IS_OPTN) read FDescriptionReviseMode write SetDescriptionReviseMode stored DescriptionReviseMode_Specified;
    property Distance:                            DistanceType                                Index (IS_OPTN) read FDistance write SetDistance stored Distance_Specified;
    property HitCounter:                          HitCounterCodeType                          Index (IS_OPTN) read FHitCounter write SetHitCounter stored HitCounter_Specified;
    property ItemID:                              ItemIDType                                  Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ListingDetails:                      ListingDetailsType                          Index (IS_OPTN) read FListingDetails write SetListingDetails stored ListingDetails_Specified;
    property ListingDesigner:                     ListingDesignerType                         Index (IS_OPTN) read FListingDesigner write SetListingDesigner stored ListingDesigner_Specified;
    property ListingDuration:                     string                                      Index (IS_OPTN) read FListingDuration write SetListingDuration stored ListingDuration_Specified;
    property ListingEnhancement:                  Array_Of_ListingEnhancementsCodeType        Index (IS_OPTN or IS_UNBD) read FListingEnhancement write SetListingEnhancement stored ListingEnhancement_Specified;
    property ListingType:                         ListingTypeCodeType                         Index (IS_OPTN) read FListingType write SetListingType stored ListingType_Specified;
    property Location:                            string                                      Index (IS_OPTN) read FLocation write SetLocation stored Location_Specified;
    property LotSize:                             Integer                                     Index (IS_OPTN) read FLotSize write SetLotSize stored LotSize_Specified;
    property PartnerCode:                         string                                      Index (IS_OPTN) read FPartnerCode write SetPartnerCode stored PartnerCode_Specified;
    property PartnerName:                         string                                      Index (IS_OPTN) read FPartnerName write SetPartnerName stored PartnerName_Specified;
    property PaymentDetails:                      PaymentDetailsType                          Index (IS_OPTN) read FPaymentDetails write SetPaymentDetails stored PaymentDetails_Specified;
    property PaymentMethods:                      Array_Of_BuyerPaymentMethodCodeType         Index (IS_OPTN or IS_UNBD) read FPaymentMethods write SetPaymentMethods stored PaymentMethods_Specified;
    property PayPalEmailAddress:                  string                                      Index (IS_OPTN) read FPayPalEmailAddress write SetPayPalEmailAddress stored PayPalEmailAddress_Specified;
    property PrimaryCategory:                     CategoryType                                Index (IS_OPTN) read FPrimaryCategory write SetPrimaryCategory stored PrimaryCategory_Specified;
    property PrivateListing:                      Boolean                                     Index (IS_OPTN) read FPrivateListing write SetPrivateListing stored PrivateListing_Specified;
    property ProductListingDetails:               ProductListingDetailsType                   Index (IS_OPTN) read FProductListingDetails write SetProductListingDetails stored ProductListingDetails_Specified;
    property Quantity:                            Integer                                     Index (IS_OPTN) read FQuantity write SetQuantity stored Quantity_Specified;
    property PrivateNotes:                        string                                      Index (IS_OPTN) read FPrivateNotes write SetPrivateNotes stored PrivateNotes_Specified;
    property RegionID:                            string                                      Index (IS_OPTN) read FRegionID write SetRegionID stored RegionID_Specified;
    property RelistLink:                          Boolean                                     Index (IS_OPTN) read FRelistLink write SetRelistLink stored RelistLink_Specified;
    property ReservePrice:                        AmountType                                  Index (IS_OPTN) read FReservePrice write SetReservePrice stored ReservePrice_Specified;
    property ReviseStatus:                        ReviseStatusType                            Index (IS_OPTN) read FReviseStatus write SetReviseStatus stored ReviseStatus_Specified;
    property ScheduleTime:                        TXSDateTime                                 Index (IS_OPTN) read FScheduleTime write SetScheduleTime stored ScheduleTime_Specified;
    property SecondaryCategory:                   CategoryType                                Index (IS_OPTN) read FSecondaryCategory write SetSecondaryCategory stored SecondaryCategory_Specified;
    property FreeAddedCategory:                   CategoryType                                Index (IS_OPTN) read FFreeAddedCategory write SetFreeAddedCategory stored FreeAddedCategory_Specified;
    property Seller:                              UserType                                    Index (IS_OPTN) read FSeller write SetSeller stored Seller_Specified;
    property SellingStatus:                       SellingStatusType                           Index (IS_OPTN) read FSellingStatus write SetSellingStatus stored SellingStatus_Specified;
    property ShippingDetails:                     ShippingDetailsType                         Index (IS_OPTN) read FShippingDetails write SetShippingDetails stored ShippingDetails_Specified;
    property ShipToLocations:                     SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FShipToLocations write SetShipToLocations stored ShipToLocations_Specified;
    property Site:                                SiteCodeType                                Index (IS_OPTN) read FSite write SetSite stored Site_Specified;
    property StartPrice:                          AmountType                                  Index (IS_OPTN) read FStartPrice write SetStartPrice stored StartPrice_Specified;
    property Storefront:                          StorefrontType                              Index (IS_OPTN) read FStorefront write SetStorefront stored Storefront_Specified;
    property SubTitle:                            string                                      Index (IS_OPTN) read FSubTitle write SetSubTitle stored SubTitle_Specified;
    property TimeLeft:                            TXSDuration                                 Index (IS_OPTN) read FTimeLeft write SetTimeLeft stored TimeLeft_Specified;
    property Title:                               string                                      Index (IS_OPTN) read FTitle write SetTitle stored Title_Specified;
    property UUID:                                UUIDType                                    Index (IS_OPTN) read FUUID write SetUUID stored UUID_Specified;
    property VATDetails:                          VATDetailsType                              Index (IS_OPTN) read FVATDetails write SetVATDetails stored VATDetails_Specified;
    property SellerVacationNote:                  string                                      Index (IS_OPTN) read FSellerVacationNote write SetSellerVacationNote stored SellerVacationNote_Specified;
    property WatchCount:                          Int64                                       Index (IS_OPTN) read FWatchCount write SetWatchCount stored WatchCount_Specified;
    property HitCount:                            Int64                                       Index (IS_OPTN) read FHitCount write SetHitCount stored HitCount_Specified;
    property DisableBuyerRequirements:            Boolean                                     Index (IS_OPTN) read FDisableBuyerRequirements write SetDisableBuyerRequirements stored DisableBuyerRequirements_Specified;
    property BestOfferDetails:                    BestOfferDetailsType                        Index (IS_OPTN) read FBestOfferDetails write SetBestOfferDetails stored BestOfferDetails_Specified;
    property LocationDefaulted:                   Boolean                                     Index (IS_OPTN) read FLocationDefaulted write SetLocationDefaulted stored LocationDefaulted_Specified;
    property UseTaxTable:                         Boolean                                     Index (IS_OPTN) read FUseTaxTable write SetUseTaxTable stored UseTaxTable_Specified;
    property GetItFast:                           Boolean                                     Index (IS_OPTN) read FGetItFast write SetGetItFast stored GetItFast_Specified;
    property BuyerResponsibleForShipping:         Boolean                                     Index (IS_OPTN) read FBuyerResponsibleForShipping write SetBuyerResponsibleForShipping stored BuyerResponsibleForShipping_Specified;
    property LimitedWarrantyEligible:             Boolean                                     Index (IS_OPTN) read FLimitedWarrantyEligible write SetLimitedWarrantyEligible stored LimitedWarrantyEligible_Specified;
    property eBayNotes:                           string                                      Index (IS_OPTN) read FeBayNotes write SeteBayNotes stored eBayNotes_Specified;
    property QuestionCount:                       Int64                                       Index (IS_OPTN) read FQuestionCount write SetQuestionCount stored QuestionCount_Specified;
    property Relisted:                            Boolean                                     Index (IS_OPTN) read FRelisted write SetRelisted stored Relisted_Specified;
    property QuantityAvailable:                   Integer                                     Index (IS_OPTN) read FQuantityAvailable write SetQuantityAvailable stored QuantityAvailable_Specified;
    property SKU:                                 SKUType                                     Index (IS_OPTN) read FSKU write SetSKU stored SKU_Specified;
    property SearchDetails:                       SearchDetailsType                           Index (IS_OPTN) read FSearchDetails write SetSearchDetails stored SearchDetails_Specified;
    property PostalCode:                          string                                      Index (IS_OPTN) read FPostalCode write SetPostalCode stored PostalCode_Specified;
    property PictureDetails:                      PictureDetailsType                          Index (IS_OPTN) read FPictureDetails write SetPictureDetails stored PictureDetails_Specified;
    property DispatchTimeMax:                     Integer                                     Index (IS_OPTN) read FDispatchTimeMax write SetDispatchTimeMax stored DispatchTimeMax_Specified;
    property BestOfferEnabled:                    Boolean                                     Index (IS_OPTN) read FBestOfferEnabled write SetBestOfferEnabled stored BestOfferEnabled_Specified;
    property LocalListing:                        Boolean                                     Index (IS_OPTN) read FLocalListing write SetLocalListing stored LocalListing_Specified;
    property SellerContactDetails:                AddressType                                 Index (IS_OPTN) read FSellerContactDetails write SetSellerContactDetails stored SellerContactDetails_Specified;
    property TotalQuestionCount:                  Int64                                       Index (IS_OPTN) read FTotalQuestionCount write SetTotalQuestionCount stored TotalQuestionCount_Specified;
    property ProxyItem:                           Boolean                                     Index (IS_OPTN) read FProxyItem write SetProxyItem stored ProxyItem_Specified;
    property ExtendedSellerContactDetails:        ExtendedContactDetailsType                  Index (IS_OPTN) read FExtendedSellerContactDetails write SetExtendedSellerContactDetails stored ExtendedSellerContactDetails_Specified;
    property LeadCount:                           Integer                                     Index (IS_OPTN) read FLeadCount write SetLeadCount stored LeadCount_Specified;
    property NewLeadCount:                        Integer                                     Index (IS_OPTN) read FNewLeadCount write SetNewLeadCount stored NewLeadCount_Specified;
    property ItemSpecifics:                       NameValueListArrayType                      Index (IS_OPTN) read FItemSpecifics write SetItemSpecifics stored ItemSpecifics_Specified;
    property GroupCategoryID:                     string                                      Index (IS_OPTN) read FGroupCategoryID write SetGroupCategoryID stored GroupCategoryID_Specified;
    property ClassifiedAdPayPerLeadFee:           AmountType                                  Index (IS_OPTN) read FClassifiedAdPayPerLeadFee write SetClassifiedAdPayPerLeadFee stored ClassifiedAdPayPerLeadFee_Specified;
    property BidGroupItem:                        Boolean                                     Index (IS_OPTN) read FBidGroupItem write SetBidGroupItem stored BidGroupItem_Specified;
    property ApplyBuyerProtection:                BuyerProtectionDetailsType                  Index (IS_OPTN) read FApplyBuyerProtection write SetApplyBuyerProtection stored ApplyBuyerProtection_Specified;
    property ListingSubtype2:                     ListingSubtypeCodeType                      Index (IS_OPTN) read FListingSubtype2 write SetListingSubtype2 stored ListingSubtype2_Specified;
    property MechanicalCheckAccepted:             Boolean                                     Index (IS_OPTN) read FMechanicalCheckAccepted write SetMechanicalCheckAccepted stored MechanicalCheckAccepted_Specified;
    property UpdateSellerInfo:                    Boolean                                     Index (IS_OPTN) read FUpdateSellerInfo write SetUpdateSellerInfo stored UpdateSellerInfo_Specified;
    property UpdateReturnPolicy:                  Boolean                                     Index (IS_OPTN) read FUpdateReturnPolicy write SetUpdateReturnPolicy stored UpdateReturnPolicy_Specified;
    property ItemPolicyViolation:                 ItemPolicyViolationType                     Index (IS_OPTN) read FItemPolicyViolation write SetItemPolicyViolation stored ItemPolicyViolation_Specified;
    property CrossBorderTrade:                    SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FCrossBorderTrade write SetCrossBorderTrade stored CrossBorderTrade_Specified;
    property BusinessSellerDetails:               BusinessSellerDetailsType                   Index (IS_OPTN) read FBusinessSellerDetails write SetBusinessSellerDetails stored BusinessSellerDetails_Specified;
    property BuyerGuaranteePrice:                 AmountType                                  Index (IS_OPTN) read FBuyerGuaranteePrice write SetBuyerGuaranteePrice stored BuyerGuaranteePrice_Specified;
    property BuyerRequirementDetails:             BuyerRequirementDetailsType                 Index (IS_OPTN) read FBuyerRequirementDetails write SetBuyerRequirementDetails stored BuyerRequirementDetails_Specified;
    property ReturnPolicy:                        ReturnPolicyType                            Index (IS_OPTN) read FReturnPolicy write SetReturnPolicy stored ReturnPolicy_Specified;
    property PaymentAllowedSite:                  IntegratedMerchantCreditCardInfoType        Index (IS_OPTN or IS_UNBD) read FPaymentAllowedSite write SetPaymentAllowedSite stored PaymentAllowedSite_Specified;
    property InventoryTrackingMethod:             InventoryTrackingMethodCodeType             Index (IS_OPTN) read FInventoryTrackingMethod write SetInventoryTrackingMethod stored InventoryTrackingMethod_Specified;
    property IntegratedMerchantCreditCardEnabled: Boolean                                     Index (IS_OPTN) read FIntegratedMerchantCreditCardEnabled write SetIntegratedMerchantCreditCardEnabled stored IntegratedMerchantCreditCardEnabled_Specified;
    property Variations:                          VariationsType                              Index (IS_OPTN) read FVariations write SetVariations stored Variations_Specified;
    property ItemCompatibilityList:               ItemCompatibilityListType                   Index (IS_OPTN) read FItemCompatibilityList write SetItemCompatibilityList stored ItemCompatibilityList_Specified;
    property ItemCompatibilityCount:              Integer                                     Index (IS_OPTN) read FItemCompatibilityCount write SetItemCompatibilityCount stored ItemCompatibilityCount_Specified;
    property ConditionID:                         Integer                                     Index (IS_OPTN) read FConditionID write SetConditionID stored ConditionID_Specified;
    property ConditionDescription:                string                                      Index (IS_OPTN) read FConditionDescription write SetConditionDescription stored ConditionDescription_Specified;
    property ConditionDisplayName:                string                                      Index (IS_OPTN) read FConditionDisplayName write SetConditionDisplayName stored ConditionDisplayName_Specified;
    property TaxCategory:                         string                                      Index (IS_OPTN) read FTaxCategory write SetTaxCategory stored TaxCategory_Specified;
    property QuantityAvailableHint:               QuantityAvailableHintCodeType               Index (IS_OPTN) read FQuantityAvailableHint write SetQuantityAvailableHint stored QuantityAvailableHint_Specified;
    property QuantityThreshold:                   Integer                                     Index (IS_OPTN) read FQuantityThreshold write SetQuantityThreshold stored QuantityThreshold_Specified;
    property DiscountPriceInfo:                   DiscountPriceInfoType                       Index (IS_OPTN) read FDiscountPriceInfo write SetDiscountPriceInfo stored DiscountPriceInfo_Specified;
    property SellerProvidedTitle:                 string                                      Index (IS_OPTN) read FSellerProvidedTitle write SetSellerProvidedTitle stored SellerProvidedTitle_Specified;
    property VIN:                                 string                                      Index (IS_OPTN) read FVIN write SetVIN stored VIN_Specified;
    property VINLink:                             string                                      Index (IS_OPTN) read FVINLink write SetVINLink stored VINLink_Specified;
    property VRM:                                 string                                      Index (IS_OPTN) read FVRM write SetVRM stored VRM_Specified;
    property VRMLink:                             string                                      Index (IS_OPTN) read FVRMLink write SetVRMLink stored VRMLink_Specified;
    property QuantityInfo:                        QuantityInfoType                            Index (IS_OPTN) read FQuantityInfo write SetQuantityInfo stored QuantityInfo_Specified;
    property SellerProfiles:                      SellerProfilesType                          Index (IS_OPTN) read FSellerProfiles write SetSellerProfiles stored SellerProfiles_Specified;
    property ShippingServiceCostOverrideList:     ShippingServiceCostOverrideListType         Index (IS_OPTN) read FShippingServiceCostOverrideList write SetShippingServiceCostOverrideList stored ShippingServiceCostOverrideList_Specified;
    property ShippingOverride:                    ShippingOverrideType                        Index (IS_OPTN) read FShippingOverride write SetShippingOverride stored ShippingOverride_Specified;
    property ShippingPackageDetails:              ShipPackageDetailsType                      Index (IS_OPTN) read FShippingPackageDetails write SetShippingPackageDetails stored ShippingPackageDetails_Specified;
    property TopRatedListing:                     Boolean                                     Index (IS_OPTN) read FTopRatedListing write SetTopRatedListing stored TopRatedListing_Specified;
    property QuantityRestrictionPerBuyer:         QuantityRestrictionPerBuyerInfoType         Index (IS_OPTN) read FQuantityRestrictionPerBuyer write SetQuantityRestrictionPerBuyer stored QuantityRestrictionPerBuyer_Specified;
    property FloorPrice:                          AmountType                                  Index (IS_OPTN) read FFloorPrice write SetFloorPrice stored FloorPrice_Specified;
    property CeilingPrice:                        AmountType                                  Index (IS_OPTN) read FCeilingPrice write SetCeilingPrice stored CeilingPrice_Specified;
    property IsIntermediatedShippingEligible:     Boolean                                     Index (IS_OPTN) read FIsIntermediatedShippingEligible write SetIsIntermediatedShippingEligible stored IsIntermediatedShippingEligible_Specified;
    property UnitInfo:                            UnitInfoType                                Index (IS_OPTN) read FUnitInfo write SetUnitInfo stored UnitInfo_Specified;
    property RelistParentID:                      Int64                                       Index (IS_OPTN) read FRelistParentID write SetRelistParentID stored RelistParentID_Specified;
    property ConditionDefinition:                 string                                      Index (IS_OPTN) read FConditionDefinition write SetConditionDefinition stored ConditionDefinition_Specified;
    property HideFromSearch:                      Boolean                                     Index (IS_OPTN) read FHideFromSearch write SetHideFromSearch stored HideFromSearch_Specified;
    property ReasonHideFromSearch:                ReasonHideFromSearchCodeType                Index (IS_OPTN) read FReasonHideFromSearch write SetReasonHideFromSearch stored ReasonHideFromSearch_Specified;
    property IncludeRecommendations:              Boolean                                     Index (IS_OPTN) read FIncludeRecommendations write SetIncludeRecommendations stored IncludeRecommendations_Specified;
    property PickupInStoreDetails:                PickupInStoreDetailsType                    Index (IS_OPTN) read FPickupInStoreDetails write SetPickupInStoreDetails stored PickupInStoreDetails_Specified;
    property SiteId:                              Integer                                     Index (IS_OPTN) read FSiteId write SetSiteId stored SiteId_Specified;
    property IgnoreQuantity:                      Boolean                                     Index (IS_OPTN) read FIgnoreQuantity write SetIgnoreQuantity stored IgnoreQuantity_Specified;
    property AvailableForPickupDropOff:           Boolean                                     Index (IS_OPTN) read FAvailableForPickupDropOff write SetAvailableForPickupDropOff stored AvailableForPickupDropOff_Specified;
    property EligibleForPickupDropOff:            Boolean                                     Index (IS_OPTN) read FEligibleForPickupDropOff write SetEligibleForPickupDropOff stored EligibleForPickupDropOff_Specified;
    property LiveAuction:                         Boolean                                     Index (IS_OPTN) read FLiveAuction write SetLiveAuction stored LiveAuction_Specified;
    property DigitalGoodInfo:                     DigitalGoodInfoType                         Index (IS_OPTN) read FDigitalGoodInfo write SetDigitalGoodInfo stored DigitalGoodInfo_Specified;
    property eBayPlus:                            Boolean                                     Index (IS_OPTN) read FeBayPlus write SeteBayPlus stored eBayPlus_Specified;
    property eBayPlusEligible:                    Boolean                                     Index (IS_OPTN) read FeBayPlusEligible write SeteBayPlusEligible stored eBayPlusEligible_Specified;
    property eMailDeliveryAvailable:              Boolean                                     Index (IS_OPTN) read FeMailDeliveryAvailable write SeteMailDeliveryAvailable stored eMailDeliveryAvailable_Specified;
    property IsSecureDescription:                 Boolean                                     Index (IS_OPTN) read FIsSecureDescription write SetIsSecureDescription stored IsSecureDescription_Specified;
  end;



  // ************************************************************************ //
  // XML       : AttributeSetType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AttributeSetType = class(TRemotable)
  private
    FattributeSetID: Integer;
    FattributeSetID_Specified: boolean;
    FattributeSetVersion: string;
    FattributeSetVersion_Specified: boolean;
    FAttribute: AttributeArrayType;
    FAttribute_Specified: boolean;
    procedure SetattributeSetID(Index: Integer; const AInteger: Integer);
    function  attributeSetID_Specified(Index: Integer): boolean;
    procedure SetattributeSetVersion(Index: Integer; const Astring: string);
    function  attributeSetVersion_Specified(Index: Integer): boolean;
    procedure SetAttribute(Index: Integer; const AAttributeArrayType: AttributeArrayType);
    function  Attribute_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property attributeSetID:      Integer             Index (IS_ATTR or IS_OPTN) read FattributeSetID write SetattributeSetID stored attributeSetID_Specified;
    property attributeSetVersion: string              Index (IS_ATTR or IS_OPTN) read FattributeSetVersion write SetattributeSetVersion stored attributeSetVersion_Specified;
    property Attribute:           AttributeArrayType  Index (IS_OPTN or IS_UNBD) read FAttribute write SetAttribute stored Attribute_Specified;
  end;



  // ************************************************************************ //
  // XML       : ValType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValType = class(TRemotable)
  private
    FValueLiteral: string;
    FValueLiteral_Specified: boolean;
    FSuggestedValueLiteral: SellerExcludeShipToLocationPreferencesType;
    FSuggestedValueLiteral_Specified: boolean;
    FValueID: Integer;
    FValueID_Specified: boolean;
    procedure SetValueLiteral(Index: Integer; const Astring: string);
    function  ValueLiteral_Specified(Index: Integer): boolean;
    procedure SetSuggestedValueLiteral(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
    function  SuggestedValueLiteral_Specified(Index: Integer): boolean;
    procedure SetValueID(Index: Integer; const AInteger: Integer);
    function  ValueID_Specified(Index: Integer): boolean;
  published
    property ValueLiteral:          string                                      Index (IS_OPTN) read FValueLiteral write SetValueLiteral stored ValueLiteral_Specified;
    property SuggestedValueLiteral: SellerExcludeShipToLocationPreferencesType  Index (IS_OPTN or IS_UNBD) read FSuggestedValueLiteral write SetSuggestedValueLiteral stored SuggestedValueLiteral_Specified;
    property ValueID:               Integer                                     Index (IS_OPTN) read FValueID write SetValueID stored ValueID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AdFormatLeadType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdFormatLeadType = class(TRemotable)
  private
    FAdditionalInformation: string;
    FAdditionalInformation_Specified: boolean;
    FAddress: AddressType;
    FAddress_Specified: boolean;
    FBestTimeToCall: string;
    FBestTimeToCall_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FSubmittedTime: TXSDateTime;
    FSubmittedTime_Specified: boolean;
    FItemID: ItemIDType;
    FItemID_Specified: boolean;
    FItemTitle: string;
    FItemTitle_Specified: boolean;
    FUserID: UserIDType;
    FUserID_Specified: boolean;
    FMemberMessage: MemberMessageExchangeArrayType;
    FMemberMessage_Specified: boolean;
    FStatus: AdFormatLeadStatusCodeType;
    FStatus_Specified: boolean;
    FLeadFee: AmountType;
    FLeadFee_Specified: boolean;
    FExternalEmail: string;
    FExternalEmail_Specified: boolean;
    FPurchaseTimeFrame: string;
    FPurchaseTimeFrame_Specified: boolean;
    FTradeInYear: string;
    FTradeInYear_Specified: boolean;
    FTradeInMake: string;
    FTradeInMake_Specified: boolean;
    FTradeInModel: string;
    FTradeInModel_Specified: boolean;
    FFinancingAnswer: Boolean;
    FFinancingAnswer_Specified: boolean;
    FAnswer1: Boolean;
    FAnswer1_Specified: boolean;
    FAnswer2: Boolean;
    FAnswer2_Specified: boolean;
    procedure SetAdditionalInformation(Index: Integer; const Astring: string);
    function  AdditionalInformation_Specified(Index: Integer): boolean;
    procedure SetAddress(Index: Integer; const AAddressType: AddressType);
    function  Address_Specified(Index: Integer): boolean;
    procedure SetBestTimeToCall(Index: Integer; const Astring: string);
    function  BestTimeToCall_Specified(Index: Integer): boolean;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    procedure SetSubmittedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  SubmittedTime_Specified(Index: Integer): boolean;
    procedure SetItemID(Index: Integer; const AItemIDType: ItemIDType);
    function  ItemID_Specified(Index: Integer): boolean;
    procedure SetItemTitle(Index: Integer; const Astring: string);
    function  ItemTitle_Specified(Index: Integer): boolean;
    procedure SetUserID(Index: Integer; const AUserIDType: UserIDType);
    function  UserID_Specified(Index: Integer): boolean;
    procedure SetMemberMessage(Index: Integer; const AMemberMessageExchangeArrayType: MemberMessageExchangeArrayType);
    function  MemberMessage_Specified(Index: Integer): boolean;
    procedure SetStatus(Index: Integer; const AAdFormatLeadStatusCodeType: AdFormatLeadStatusCodeType);
    function  Status_Specified(Index: Integer): boolean;
    procedure SetLeadFee(Index: Integer; const AAmountType: AmountType);
    function  LeadFee_Specified(Index: Integer): boolean;
    procedure SetExternalEmail(Index: Integer; const Astring: string);
    function  ExternalEmail_Specified(Index: Integer): boolean;
    procedure SetPurchaseTimeFrame(Index: Integer; const Astring: string);
    function  PurchaseTimeFrame_Specified(Index: Integer): boolean;
    procedure SetTradeInYear(Index: Integer; const Astring: string);
    function  TradeInYear_Specified(Index: Integer): boolean;
    procedure SetTradeInMake(Index: Integer; const Astring: string);
    function  TradeInMake_Specified(Index: Integer): boolean;
    procedure SetTradeInModel(Index: Integer; const Astring: string);
    function  TradeInModel_Specified(Index: Integer): boolean;
    procedure SetFinancingAnswer(Index: Integer; const ABoolean: Boolean);
    function  FinancingAnswer_Specified(Index: Integer): boolean;
    procedure SetAnswer1(Index: Integer; const ABoolean: Boolean);
    function  Answer1_Specified(Index: Integer): boolean;
    procedure SetAnswer2(Index: Integer; const ABoolean: Boolean);
    function  Answer2_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AdditionalInformation: string                          Index (IS_OPTN) read FAdditionalInformation write SetAdditionalInformation stored AdditionalInformation_Specified;
    property Address:               AddressType                     Index (IS_OPTN) read FAddress write SetAddress stored Address_Specified;
    property BestTimeToCall:        string                          Index (IS_OPTN) read FBestTimeToCall write SetBestTimeToCall stored BestTimeToCall_Specified;
    property Email:                 string                          Index (IS_OPTN) read FEmail write SetEmail stored Email_Specified;
    property SubmittedTime:         TXSDateTime                     Index (IS_OPTN) read FSubmittedTime write SetSubmittedTime stored SubmittedTime_Specified;
    property ItemID:                ItemIDType                      Index (IS_OPTN) read FItemID write SetItemID stored ItemID_Specified;
    property ItemTitle:             string                          Index (IS_OPTN) read FItemTitle write SetItemTitle stored ItemTitle_Specified;
    property UserID:                UserIDType                      Index (IS_OPTN) read FUserID write SetUserID stored UserID_Specified;
    property MemberMessage:         MemberMessageExchangeArrayType  Index (IS_OPTN) read FMemberMessage write SetMemberMessage stored MemberMessage_Specified;
    property Status:                AdFormatLeadStatusCodeType      Index (IS_OPTN) read FStatus write SetStatus stored Status_Specified;
    property LeadFee:               AmountType                      Index (IS_OPTN) read FLeadFee write SetLeadFee stored LeadFee_Specified;
    property ExternalEmail:         string                          Index (IS_OPTN) read FExternalEmail write SetExternalEmail stored ExternalEmail_Specified;
    property PurchaseTimeFrame:     string                          Index (IS_OPTN) read FPurchaseTimeFrame write SetPurchaseTimeFrame stored PurchaseTimeFrame_Specified;
    property TradeInYear:           string                          Index (IS_OPTN) read FTradeInYear write SetTradeInYear stored TradeInYear_Specified;
    property TradeInMake:           string                          Index (IS_OPTN) read FTradeInMake write SetTradeInMake stored TradeInMake_Specified;
    property TradeInModel:          string                          Index (IS_OPTN) read FTradeInModel write SetTradeInModel stored TradeInModel_Specified;
    property FinancingAnswer:       Boolean                         Index (IS_OPTN) read FFinancingAnswer write SetFinancingAnswer stored FinancingAnswer_Specified;
    property Answer1:               Boolean                         Index (IS_OPTN) read FAnswer1 write SetAnswer1 stored Answer1_Specified;
    property Answer2:               Boolean                         Index (IS_OPTN) read FAnswer2 write SetAnswer2 stored Answer2_Specified;
  end;



  // ************************************************************************ //
  // XML       : AdditionalCompatibilityEnabledDefinitionType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdditionalCompatibilityEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AddressAttributeType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddressAttributeType = class(TRemotable)
  private
    FText: string;
    Ftype_: AddressAttributeCodeType;
    Ftype__Specified: boolean;
    procedure Settype_(Index: Integer; const AAddressAttributeCodeType: AddressAttributeCodeType);
    function  type__Specified(Index: Integer): boolean;
  published
    property Text:  string                    Index (IS_TEXT) read FText write FText;
    property type_: AddressAttributeCodeType  Index (IS_ATTR or IS_OPTN) read Ftype_ write Settype_ stored type__Specified;
  end;



  // ************************************************************************ //
  // XML       : ApiAccessRuleType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ApiAccessRuleType = class(TRemotable)
  private
    FCallName: string;
    FCallName_Specified: boolean;
    FCountsTowardAggregate: Boolean;
    FCountsTowardAggregate_Specified: boolean;
    FDailyHardLimit: Int64;
    FDailyHardLimit_Specified: boolean;
    FDailySoftLimit: Int64;
    FDailySoftLimit_Specified: boolean;
    FDailyUsage: Int64;
    FDailyUsage_Specified: boolean;
    FHourlyHardLimit: Int64;
    FHourlyHardLimit_Specified: boolean;
    FHourlySoftLimit: Int64;
    FHourlySoftLimit_Specified: boolean;
    FHourlyUsage: Int64;
    FHourlyUsage_Specified: boolean;
    FPeriod: Integer;
    FPeriod_Specified: boolean;
    FPeriodicHardLimit: Int64;
    FPeriodicHardLimit_Specified: boolean;
    FPeriodicSoftLimit: Int64;
    FPeriodicSoftLimit_Specified: boolean;
    FPeriodicUsage: Int64;
    FPeriodicUsage_Specified: boolean;
    FPeriodicStartDate: TXSDateTime;
    FPeriodicStartDate_Specified: boolean;
    FModTime: TXSDateTime;
    FModTime_Specified: boolean;
    FRuleCurrentStatus: AccessRuleCurrentStatusCodeType;
    FRuleCurrentStatus_Specified: boolean;
    FRuleStatus: AccessRuleStatusCodeType;
    FRuleStatus_Specified: boolean;
    procedure SetCallName(Index: Integer; const Astring: string);
    function  CallName_Specified(Index: Integer): boolean;
    procedure SetCountsTowardAggregate(Index: Integer; const ABoolean: Boolean);
    function  CountsTowardAggregate_Specified(Index: Integer): boolean;
    procedure SetDailyHardLimit(Index: Integer; const AInt64: Int64);
    function  DailyHardLimit_Specified(Index: Integer): boolean;
    procedure SetDailySoftLimit(Index: Integer; const AInt64: Int64);
    function  DailySoftLimit_Specified(Index: Integer): boolean;
    procedure SetDailyUsage(Index: Integer; const AInt64: Int64);
    function  DailyUsage_Specified(Index: Integer): boolean;
    procedure SetHourlyHardLimit(Index: Integer; const AInt64: Int64);
    function  HourlyHardLimit_Specified(Index: Integer): boolean;
    procedure SetHourlySoftLimit(Index: Integer; const AInt64: Int64);
    function  HourlySoftLimit_Specified(Index: Integer): boolean;
    procedure SetHourlyUsage(Index: Integer; const AInt64: Int64);
    function  HourlyUsage_Specified(Index: Integer): boolean;
    procedure SetPeriod(Index: Integer; const AInteger: Integer);
    function  Period_Specified(Index: Integer): boolean;
    procedure SetPeriodicHardLimit(Index: Integer; const AInt64: Int64);
    function  PeriodicHardLimit_Specified(Index: Integer): boolean;
    procedure SetPeriodicSoftLimit(Index: Integer; const AInt64: Int64);
    function  PeriodicSoftLimit_Specified(Index: Integer): boolean;
    procedure SetPeriodicUsage(Index: Integer; const AInt64: Int64);
    function  PeriodicUsage_Specified(Index: Integer): boolean;
    procedure SetPeriodicStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  PeriodicStartDate_Specified(Index: Integer): boolean;
    procedure SetModTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ModTime_Specified(Index: Integer): boolean;
    procedure SetRuleCurrentStatus(Index: Integer; const AAccessRuleCurrentStatusCodeType: AccessRuleCurrentStatusCodeType);
    function  RuleCurrentStatus_Specified(Index: Integer): boolean;
    procedure SetRuleStatus(Index: Integer; const AAccessRuleStatusCodeType: AccessRuleStatusCodeType);
    function  RuleStatus_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property CallName:              string                           Index (IS_OPTN) read FCallName write SetCallName stored CallName_Specified;
    property CountsTowardAggregate: Boolean                          Index (IS_OPTN) read FCountsTowardAggregate write SetCountsTowardAggregate stored CountsTowardAggregate_Specified;
    property DailyHardLimit:        Int64                            Index (IS_OPTN) read FDailyHardLimit write SetDailyHardLimit stored DailyHardLimit_Specified;
    property DailySoftLimit:        Int64                            Index (IS_OPTN) read FDailySoftLimit write SetDailySoftLimit stored DailySoftLimit_Specified;
    property DailyUsage:            Int64                            Index (IS_OPTN) read FDailyUsage write SetDailyUsage stored DailyUsage_Specified;
    property HourlyHardLimit:       Int64                            Index (IS_OPTN) read FHourlyHardLimit write SetHourlyHardLimit stored HourlyHardLimit_Specified;
    property HourlySoftLimit:       Int64                            Index (IS_OPTN) read FHourlySoftLimit write SetHourlySoftLimit stored HourlySoftLimit_Specified;
    property HourlyUsage:           Int64                            Index (IS_OPTN) read FHourlyUsage write SetHourlyUsage stored HourlyUsage_Specified;
    property Period:                Integer                          Index (IS_OPTN) read FPeriod write SetPeriod stored Period_Specified;
    property PeriodicHardLimit:     Int64                            Index (IS_OPTN) read FPeriodicHardLimit write SetPeriodicHardLimit stored PeriodicHardLimit_Specified;
    property PeriodicSoftLimit:     Int64                            Index (IS_OPTN) read FPeriodicSoftLimit write SetPeriodicSoftLimit stored PeriodicSoftLimit_Specified;
    property PeriodicUsage:         Int64                            Index (IS_OPTN) read FPeriodicUsage write SetPeriodicUsage stored PeriodicUsage_Specified;
    property PeriodicStartDate:     TXSDateTime                      Index (IS_OPTN) read FPeriodicStartDate write SetPeriodicStartDate stored PeriodicStartDate_Specified;
    property ModTime:               TXSDateTime                      Index (IS_OPTN) read FModTime write SetModTime stored ModTime_Specified;
    property RuleCurrentStatus:     AccessRuleCurrentStatusCodeType  Index (IS_OPTN) read FRuleCurrentStatus write SetRuleCurrentStatus stored RuleCurrentStatus_Specified;
    property RuleStatus:            AccessRuleStatusCodeType         Index (IS_OPTN) read FRuleStatus write SetRuleStatus stored RuleStatus_Specified;
  end;



  // ************************************************************************ //
  // XML       : AddressType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddressType = class(TRemotable)
  private
    FName_: string;
    FName__Specified: boolean;
    FStreet: string;
    FStreet_Specified: boolean;
    FStreet1: string;
    FStreet1_Specified: boolean;
    FStreet2: string;
    FStreet2_Specified: boolean;
    FCityName: string;
    FCityName_Specified: boolean;
    FCounty: string;
    FCounty_Specified: boolean;
    FStateOrProvince: string;
    FStateOrProvince_Specified: boolean;
    FCountry: CountryCodeType;
    FCountry_Specified: boolean;
    FCountryName: string;
    FCountryName_Specified: boolean;
    FPhone: string;
    FPhone_Specified: boolean;
    FPhoneCountryCode: CountryCodeType;
    FPhoneCountryCode_Specified: boolean;
    FPhoneCountryPrefix: string;
    FPhoneCountryPrefix_Specified: boolean;
    FPhoneAreaOrCityCode: string;
    FPhoneAreaOrCityCode_Specified: boolean;
    FPhoneLocalNumber: string;
    FPhoneLocalNumber_Specified: boolean;
    FPostalCode: string;
    FPostalCode_Specified: boolean;
    FAddressID: string;
    FAddressID_Specified: boolean;
    FAddressOwner: AddressOwnerCodeType;
    FAddressOwner_Specified: boolean;
    FAddressStatus: AddressStatusCodeType;
    FAddressStatus_Specified: boolean;
    FExternalAddressID: string;
    FExternalAddressID_Specified: boolean;
    FInternationalName: string;
    FInternationalName_Specified: boolean;
    FInternationalStateAndCity: string;
    FInternationalStateAndCity_Specified: boolean;
    FInternationalStreet: string;
    FInternationalStreet_Specified: boolean;
    FCompanyName: string;
    FCompanyName_Specified: boolean;
    FAddressRecordType: AddressRecordTypeCodeType;
    FAddressRecordType_Specified: boolean;
    FFirstName: string;
    FFirstName_Specified: boolean;
    FLastName: string;
    FLastName_Specified: boolean;
    FPhone2: string;
    FPhone2_Specified: boolean;
    FAddressUsage: AddressUsageCodeType;
    FAddressUsage_Specified: boolean;
    FReferenceID: string;
    FReferenceID_Specified: boolean;
    FAddressAttribute: Array_Of_AddressAttributeType;
    FAddressAttribute_Specified: boolean;
    procedure SetName_(Index: Integer; const Astring: string);
    function  Name__Specified(Index: Integer): boolean;
    procedure SetStreet(Index: Integer; const Astring: string);
    function  Street_Specified(Index: Integer): boolean;
    procedure SetStreet1(Index: Integer; const Astring: string);
    function  Street1_Specified(Index: Integer): boolean;
    procedure SetStreet2(Index: Integer; const Astring: string);
    function  Street2_Specified(Index: Integer): boolean;
    procedure SetCityName(Index: Integer; const Astring: string);
    function  CityName_Specified(Index: Integer): boolean;
    procedure SetCounty(Index: Integer; const Astring: string);
    function  County_Specified(Index: Integer): boolean;
    procedure SetStateOrProvince(Index: Integer; const Astring: string);
    function  StateOrProvince_Specified(Index: Integer): boolean;
    procedure SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  Country_Specified(Index: Integer): boolean;
    procedure SetCountryName(Index: Integer; const Astring: string);
    function  CountryName_Specified(Index: Integer): boolean;
    procedure SetPhone(Index: Integer; const Astring: string);
    function  Phone_Specified(Index: Integer): boolean;
    procedure SetPhoneCountryCode(Index: Integer; const ACountryCodeType: CountryCodeType);
    function  PhoneCountryCode_Specified(Index: Integer): boolean;
    procedure SetPhoneCountryPrefix(Index: Integer; const Astring: string);
    function  PhoneCountryPrefix_Specified(Index: Integer): boolean;
    procedure SetPhoneAreaOrCityCode(Index: Integer; const Astring: string);
    function  PhoneAreaOrCityCode_Specified(Index: Integer): boolean;
    procedure SetPhoneLocalNumber(Index: Integer; const Astring: string);
    function  PhoneLocalNumber_Specified(Index: Integer): boolean;
    procedure SetPostalCode(Index: Integer; const Astring: string);
    function  PostalCode_Specified(Index: Integer): boolean;
    procedure SetAddressID(Index: Integer; const Astring: string);
    function  AddressID_Specified(Index: Integer): boolean;
    procedure SetAddressOwner(Index: Integer; const AAddressOwnerCodeType: AddressOwnerCodeType);
    function  AddressOwner_Specified(Index: Integer): boolean;
    procedure SetAddressStatus(Index: Integer; const AAddressStatusCodeType: AddressStatusCodeType);
    function  AddressStatus_Specified(Index: Integer): boolean;
    procedure SetExternalAddressID(Index: Integer; const Astring: string);
    function  ExternalAddressID_Specified(Index: Integer): boolean;
    procedure SetInternationalName(Index: Integer; const Astring: string);
    function  InternationalName_Specified(Index: Integer): boolean;
    procedure SetInternationalStateAndCity(Index: Integer; const Astring: string);
    function  InternationalStateAndCity_Specified(Index: Integer): boolean;
    procedure SetInternationalStreet(Index: Integer; const Astring: string);
    function  InternationalStreet_Specified(Index: Integer): boolean;
    procedure SetCompanyName(Index: Integer; const Astring: string);
    function  CompanyName_Specified(Index: Integer): boolean;
    procedure SetAddressRecordType(Index: Integer; const AAddressRecordTypeCodeType: AddressRecordTypeCodeType);
    function  AddressRecordType_Specified(Index: Integer): boolean;
    procedure SetFirstName(Index: Integer; const Astring: string);
    function  FirstName_Specified(Index: Integer): boolean;
    procedure SetLastName(Index: Integer; const Astring: string);
    function  LastName_Specified(Index: Integer): boolean;
    procedure SetPhone2(Index: Integer; const Astring: string);
    function  Phone2_Specified(Index: Integer): boolean;
    procedure SetAddressUsage(Index: Integer; const AAddressUsageCodeType: AddressUsageCodeType);
    function  AddressUsage_Specified(Index: Integer): boolean;
    procedure SetReferenceID(Index: Integer; const Astring: string);
    function  ReferenceID_Specified(Index: Integer): boolean;
    procedure SetAddressAttribute(Index: Integer; const AArray_Of_AddressAttributeType: Array_Of_AddressAttributeType);
    function  AddressAttribute_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property Name_:                     string                         Index (IS_OPTN) read FName_ write SetName_ stored Name__Specified;
    property Street:                    string                         Index (IS_OPTN) read FStreet write SetStreet stored Street_Specified;
    property Street1:                   string                         Index (IS_OPTN) read FStreet1 write SetStreet1 stored Street1_Specified;
    property Street2:                   string                         Index (IS_OPTN) read FStreet2 write SetStreet2 stored Street2_Specified;
    property CityName:                  string                         Index (IS_OPTN) read FCityName write SetCityName stored CityName_Specified;
    property County:                    string                         Index (IS_OPTN) read FCounty write SetCounty stored County_Specified;
    property StateOrProvince:           string                         Index (IS_OPTN) read FStateOrProvince write SetStateOrProvince stored StateOrProvince_Specified;
    property Country:                   CountryCodeType                Index (IS_OPTN) read FCountry write SetCountry stored Country_Specified;
    property CountryName:               string                         Index (IS_OPTN) read FCountryName write SetCountryName stored CountryName_Specified;
    property Phone:                     string                         Index (IS_OPTN) read FPhone write SetPhone stored Phone_Specified;
    property PhoneCountryCode:          CountryCodeType                Index (IS_OPTN) read FPhoneCountryCode write SetPhoneCountryCode stored PhoneCountryCode_Specified;
    property PhoneCountryPrefix:        string                         Index (IS_OPTN) read FPhoneCountryPrefix write SetPhoneCountryPrefix stored PhoneCountryPrefix_Specified;
    property PhoneAreaOrCityCode:       string                         Index (IS_OPTN) read FPhoneAreaOrCityCode write SetPhoneAreaOrCityCode stored PhoneAreaOrCityCode_Specified;
    property PhoneLocalNumber:          string                         Index (IS_OPTN) read FPhoneLocalNumber write SetPhoneLocalNumber stored PhoneLocalNumber_Specified;
    property PostalCode:                string                         Index (IS_OPTN) read FPostalCode write SetPostalCode stored PostalCode_Specified;
    property AddressID:                 string                         Index (IS_OPTN) read FAddressID write SetAddressID stored AddressID_Specified;
    property AddressOwner:              AddressOwnerCodeType           Index (IS_OPTN) read FAddressOwner write SetAddressOwner stored AddressOwner_Specified;
    property AddressStatus:             AddressStatusCodeType          Index (IS_OPTN) read FAddressStatus write SetAddressStatus stored AddressStatus_Specified;
    property ExternalAddressID:         string                         Index (IS_OPTN) read FExternalAddressID write SetExternalAddressID stored ExternalAddressID_Specified;
    property InternationalName:         string                         Index (IS_OPTN) read FInternationalName write SetInternationalName stored InternationalName_Specified;
    property InternationalStateAndCity: string                         Index (IS_OPTN) read FInternationalStateAndCity write SetInternationalStateAndCity stored InternationalStateAndCity_Specified;
    property InternationalStreet:       string                         Index (IS_OPTN) read FInternationalStreet write SetInternationalStreet stored InternationalStreet_Specified;
    property CompanyName:               string                         Index (IS_OPTN) read FCompanyName write SetCompanyName stored CompanyName_Specified;
    property AddressRecordType:         AddressRecordTypeCodeType      Index (IS_OPTN) read FAddressRecordType write SetAddressRecordType stored AddressRecordType_Specified;
    property FirstName:                 string                         Index (IS_OPTN) read FFirstName write SetFirstName stored FirstName_Specified;
    property LastName:                  string                         Index (IS_OPTN) read FLastName write SetLastName stored LastName_Specified;
    property Phone2:                    string                         Index (IS_OPTN) read FPhone2 write SetPhone2 stored Phone2_Specified;
    property AddressUsage:              AddressUsageCodeType           Index (IS_OPTN) read FAddressUsage write SetAddressUsage stored AddressUsage_Specified;
    property ReferenceID:               string                         Index (IS_OPTN) read FReferenceID write SetReferenceID stored ReferenceID_Specified;
    property AddressAttribute:          Array_Of_AddressAttributeType  Index (IS_OPTN or IS_UNBD) read FAddressAttribute write SetAddressAttribute stored AddressAttribute_Specified;
  end;



  // ************************************************************************ //
  // XML       : AffiliateTrackingDetailsType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AffiliateTrackingDetailsType = class(TRemotable)
  private
    FTrackingID: string;
    FTrackingID_Specified: boolean;
    FTrackingPartnerCode: string;
    FTrackingPartnerCode_Specified: boolean;
    FApplicationDeviceType: ApplicationDeviceTypeCodeType;
    FApplicationDeviceType_Specified: boolean;
    FAffiliateUserID: string;
    FAffiliateUserID_Specified: boolean;
    procedure SetTrackingID(Index: Integer; const Astring: string);
    function  TrackingID_Specified(Index: Integer): boolean;
    procedure SetTrackingPartnerCode(Index: Integer; const Astring: string);
    function  TrackingPartnerCode_Specified(Index: Integer): boolean;
    procedure SetApplicationDeviceType(Index: Integer; const AApplicationDeviceTypeCodeType: ApplicationDeviceTypeCodeType);
    function  ApplicationDeviceType_Specified(Index: Integer): boolean;
    procedure SetAffiliateUserID(Index: Integer; const Astring: string);
    function  AffiliateUserID_Specified(Index: Integer): boolean;
  published
    property TrackingID:            string                         Index (IS_OPTN) read FTrackingID write SetTrackingID stored TrackingID_Specified;
    property TrackingPartnerCode:   string                         Index (IS_OPTN) read FTrackingPartnerCode write SetTrackingPartnerCode stored TrackingPartnerCode_Specified;
    property ApplicationDeviceType: ApplicationDeviceTypeCodeType  Index (IS_OPTN) read FApplicationDeviceType write SetApplicationDeviceType stored ApplicationDeviceType_Specified;
    property AffiliateUserID:       string                         Index (IS_OPTN) read FAffiliateUserID write SetAffiliateUserID stored AffiliateUserID_Specified;
  end;



  // ************************************************************************ //
  // XML       : AnnouncementMessageType, global, <complexType>
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AnnouncementMessageType = class(TRemotable)
  private
    FAnnouncementStartTime: TXSDateTime;
    FAnnouncementStartTime_Specified: boolean;
    FEventTime: TXSDateTime;
    FEventTime_Specified: boolean;
    FMessageType: AnnouncementMessageCodeType;
    FMessageType_Specified: boolean;
    procedure SetAnnouncementStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  AnnouncementStartTime_Specified(Index: Integer): boolean;
    procedure SetEventTime(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  EventTime_Specified(Index: Integer): boolean;
    procedure SetMessageType(Index: Integer; const AAnnouncementMessageCodeType: AnnouncementMessageCodeType);
    function  MessageType_Specified(Index: Integer): boolean;
  public
    destructor Destroy; override;
  published
    property AnnouncementStartTime: TXSDateTime                  Index (IS_OPTN) read FAnnouncementStartTime write SetAnnouncementStartTime stored AnnouncementStartTime_Specified;
    property EventTime:             TXSDateTime                  Index (IS_OPTN) read FEventTime write SetEventTime stored EventTime_Specified;
    property MessageType:           AnnouncementMessageCodeType  Index (IS_OPTN) read FMessageType write SetMessageType stored MessageType_Specified;
  end;


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : eBayAPISoapBinding
  // service   : eBayAPIInterfaceService
  // port      : eBayAPI
  // URL       : https://api.ebay.com/wsapi
  // ************************************************************************ //
  eBayAPIInterface = interface(IInvokable)
  ['{2BC4B12B-8207-48B3-0A35-5DC99215D445}']

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddDispute(const AddDisputeRequest: AddDisputeRequest): AddDisputeResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddDisputeResponse(const AddDisputeResponseRequest: AddDisputeResponseRequest): AddDisputeResponseResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddFixedPriceItem(const AddFixedPriceItemRequest: AddFixedPriceItemRequest): AddFixedPriceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddItem(const AddItemRequest: AddItemRequest): AddItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddItemFromSellingManagerTemplate(const AddItemFromSellingManagerTemplateRequest: AddItemFromSellingManagerTemplateRequest): AddItemFromSellingManagerTemplateResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddItems(const AddItemsRequest: AddItemsRequest): AddItemsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddMemberMessageAAQToPartner(const AddMemberMessageAAQToPartnerRequest: AddMemberMessageAAQToPartnerRequest): AddMemberMessageAAQToPartnerResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddMemberMessageRTQ(const AddMemberMessageRTQRequest: AddMemberMessageRTQRequest): AddMemberMessageRTQResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddMemberMessagesAAQToBidder(const AddMemberMessagesAAQToBidderRequest: AddMemberMessagesAAQToBidderRequest): AddMemberMessagesAAQToBidderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddOrder(const AddOrderRequest: AddOrderRequest): AddOrderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddSecondChanceItem(const AddSecondChanceItemRequest: AddSecondChanceItemRequest): AddSecondChanceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddSellingManagerInventoryFolder(const AddSellingManagerInventoryFolderRequest: AddSellingManagerInventoryFolderRequest): AddSellingManagerInventoryFolderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddSellingManagerProduct(const AddSellingManagerProductRequest: AddSellingManagerProductRequest): AddSellingManagerProductResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddSellingManagerTemplate(const AddSellingManagerTemplateRequest: AddSellingManagerTemplateRequest): AddSellingManagerTemplateResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  AddToItemDescription(const AddToItemDescriptionRequest: AddToItemDescriptionRequest): AddToItemDescriptionResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddToWatchList(const AddToWatchListRequest: AddToWatchListRequest): AddToWatchListResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  AddTransactionConfirmationItem(const AddTransactionConfirmationItemRequest: AddTransactionConfirmationItemRequest): AddTransactionConfirmationItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  CompleteSale(const CompleteSaleRequest: CompleteSaleRequest): CompleteSaleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ConfirmIdentity(const ConfirmIdentityRequest: ConfirmIdentityRequest): ConfirmIdentityResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  DeleteMyMessages(const DeleteMyMessagesRequest: DeleteMyMessagesRequest): DeleteMyMessagesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  DeleteSellingManagerInventoryFolder(const DeleteSellingManagerInventoryFolderRequest: DeleteSellingManagerInventoryFolderRequest): DeleteSellingManagerInventoryFolderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  DeleteSellingManagerItemAutomationRule(const DeleteSellingManagerItemAutomationRuleRequest: DeleteSellingManagerItemAutomationRuleRequest): DeleteSellingManagerItemAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  DeleteSellingManagerProduct(const DeleteSellingManagerProductRequest: DeleteSellingManagerProductRequest): DeleteSellingManagerProductResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  DeleteSellingManagerTemplate(const DeleteSellingManagerTemplateRequest: DeleteSellingManagerTemplateRequest): DeleteSellingManagerTemplateResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  DeleteSellingManagerTemplateAutomationRule(const DeleteSellingManagerTemplateAutomationRuleRequest: DeleteSellingManagerTemplateAutomationRuleRequest): DeleteSellingManagerTemplateAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  DisableUnpaidItemAssistance(const DisableUnpaidItemAssistanceRequest: DisableUnpaidItemAssistanceRequest): DisableUnpaidItemAssistanceResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  EndFixedPriceItem(const EndFixedPriceItemRequest: EndFixedPriceItemRequest): EndFixedPriceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  EndItem(const EndItemRequest: EndItemRequest): EndItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  EndItems(const EndItemsRequest: EndItemsRequest): EndItemsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ExtendSiteHostedPictures(const ExtendSiteHostedPicturesRequest: ExtendSiteHostedPicturesRequest): ExtendSiteHostedPicturesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  FetchToken(const FetchTokenRequest: FetchTokenRequest): FetchTokenResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetAccount(const GetAccountRequest: GetAccountRequest): GetAccountResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetAdFormatLeads(const GetAdFormatLeadsRequest: GetAdFormatLeadsRequest): GetAdFormatLeadsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetAllBidders(const GetAllBiddersRequest: GetAllBiddersRequest): GetAllBiddersResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetApiAccessRules(const GetApiAccessRulesRequest: GetApiAccessRulesRequest): GetApiAccessRulesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetBestOffers(const GetBestOffersRequest: GetBestOffersRequest): GetBestOffersResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetBidderList(const GetBidderListRequest: GetBidderListRequest): GetBidderListResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetCategories(const GetCategoriesRequest: GetCategoriesRequest): GetCategoriesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetCategoryFeatures(const GetCategoryFeaturesRequest: GetCategoryFeaturesRequest): GetCategoryFeaturesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetCategoryMappings(const GetCategoryMappingsRequest: GetCategoryMappingsRequest): GetCategoryMappingsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetCategorySpecifics(const GetCategorySpecificsRequest: GetCategorySpecificsRequest): GetCategorySpecificsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetChallengeToken(const GetChallengeTokenRequest: GetChallengeTokenRequest): GetChallengeTokenResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetCharities(const GetCharitiesRequest: GetCharitiesRequest): GetCharitiesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetClientAlertsAuthToken(const GetClientAlertsAuthTokenRequest: GetClientAlertsAuthTokenRequest): GetClientAlertsAuthTokenResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetContextualKeywords(const GetContextualKeywordsRequest: GetContextualKeywordsRequest): GetContextualKeywordsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetDescriptionTemplates(const GetDescriptionTemplatesRequest: GetDescriptionTemplatesRequest): GetDescriptionTemplatesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetDispute(const GetDisputeRequest: GetDisputeRequest): GetDisputeResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetFeedback(const GetFeedbackRequest: GetFeedbackRequest): GetFeedbackResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetItem(const GetItemRequest: GetItemRequest): GetItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetItemShipping(const GetItemShippingRequest: GetItemShippingRequest): GetItemShippingResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetItemTransactions(const GetItemTransactionsRequest: GetItemTransactionsRequest): GetItemTransactionsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetItemsAwaitingFeedback(const GetItemsAwaitingFeedbackRequest: GetItemsAwaitingFeedbackRequest): GetItemsAwaitingFeedbackResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetMemberMessages(const GetMemberMessagesRequest: GetMemberMessagesRequest): GetMemberMessagesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetMessagePreferences(const GetMessagePreferencesRequest: GetMessagePreferencesRequest): GetMessagePreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetMyMessages(const GetMyMessagesRequest: GetMyMessagesRequest): GetMyMessagesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetMyeBayBuying(const GetMyeBayBuyingRequest: GetMyeBayBuyingRequest): GetMyeBayBuyingResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetMyeBayReminders(const GetMyeBayRemindersRequest: GetMyeBayRemindersRequest): GetMyeBayRemindersResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetMyeBaySelling(const GetMyeBaySellingRequest: GetMyeBaySellingRequest): GetMyeBaySellingResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetNotificationPreferences(const GetNotificationPreferencesRequest: GetNotificationPreferencesRequest): GetNotificationPreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetNotificationsUsage(const GetNotificationsUsageRequest: GetNotificationsUsageRequest): GetNotificationsUsageResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetOrderTransactions(const GetOrderTransactionsRequest: GetOrderTransactionsRequest): GetOrderTransactionsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetOrders(const GetOrdersRequest: GetOrdersRequest): GetOrdersResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetPromotionalSaleDetails(const GetPromotionalSaleDetailsRequest: GetPromotionalSaleDetailsRequest): GetPromotionalSaleDetailsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellerDashboard(const GetSellerDashboardRequest: GetSellerDashboardRequest): GetSellerDashboardResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellerEvents(const GetSellerEventsRequest: GetSellerEventsRequest): GetSellerEventsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellerList(const GetSellerListRequest: GetSellerListRequest): GetSellerListResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellerTransactions(const GetSellerTransactionsRequest: GetSellerTransactionsRequest): GetSellerTransactionsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerAlerts(const GetSellingManagerAlertsRequest: GetSellingManagerAlertsRequest): GetSellingManagerAlertsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerEmailLog(const GetSellingManagerEmailLogRequest: GetSellingManagerEmailLogRequest): GetSellingManagerEmailLogResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerInventory(const GetSellingManagerInventoryRequest: GetSellingManagerInventoryRequest): GetSellingManagerInventoryResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerInventoryFolder(const GetSellingManagerInventoryFolderRequest: GetSellingManagerInventoryFolderRequest): GetSellingManagerInventoryFolderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerItemAutomationRule(const GetSellingManagerItemAutomationRuleRequest: GetSellingManagerItemAutomationRuleRequest): GetSellingManagerItemAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerSaleRecord(const GetSellingManagerSaleRecordRequest: GetSellingManagerSaleRecordRequest): GetSellingManagerSaleRecordResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerSoldListings(const GetSellingManagerSoldListingsRequest: GetSellingManagerSoldListingsRequest): GetSellingManagerSoldListingsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerTemplateAutomationRule(const GetSellingManagerTemplateAutomationRuleRequest: GetSellingManagerTemplateAutomationRuleRequest): GetSellingManagerTemplateAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSellingManagerTemplates(const GetSellingManagerTemplatesRequest: GetSellingManagerTemplatesRequest): GetSellingManagerTemplatesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetSessionID(const GetSessionIDRequest: GetSessionIDRequest): GetSessionIDResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetShippingDiscountProfiles(const GetShippingDiscountProfilesRequest: GetShippingDiscountProfilesRequest): GetShippingDiscountProfilesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetStore(const GetStoreRequest: GetStoreRequest): GetStoreResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetStoreCategoryUpdateStatus(const GetStoreCategoryUpdateStatusRequest: GetStoreCategoryUpdateStatusRequest): GetStoreCategoryUpdateStatusResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetStoreCustomPage(const GetStoreCustomPageRequest: GetStoreCustomPageRequest): GetStoreCustomPageResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetStoreOptions(const GetStoreOptionsRequest: GetStoreOptionsRequest): GetStoreOptionsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetStorePreferences(const GetStorePreferencesRequest: GetStorePreferencesRequest): GetStorePreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetSuggestedCategories(const GetSuggestedCategoriesRequest: GetSuggestedCategoriesRequest): GetSuggestedCategoriesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetTaxTable(const GetTaxTableRequest: GetTaxTableRequest): GetTaxTableResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetTokenStatus(const GetTokenStatusRequest: GetTokenStatusRequest): GetTokenStatusResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetUser(const GetUserRequest: GetUserRequest): GetUserResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetUserContactDetails(const GetUserContactDetailsRequest: GetUserContactDetailsRequest): GetUserContactDetailsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetUserDisputes(const GetUserDisputesRequest: GetUserDisputesRequest): GetUserDisputesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetUserPreferences(const GetUserPreferencesRequest: GetUserPreferencesRequest): GetUserPreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GetVeROReasonCodeDetails(const GetVeROReasonCodeDetailsRequest: GetVeROReasonCodeDetailsRequest): GetVeROReasonCodeDetailsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GetVeROReportStatus(const GetVeROReportStatusRequest: GetVeROReportStatusRequest): GetVeROReportStatusResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  GeteBayDetails(const GeteBayDetailsRequest: GeteBayDetailsRequest): GeteBayDetailsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  GeteBayOfficialTime(const GeteBayOfficialTimeRequest: GeteBayOfficialTimeRequest): GeteBayOfficialTimeResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  LeaveFeedback(const LeaveFeedbackRequest: LeaveFeedbackRequest): LeaveFeedbackResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  MoveSellingManagerInventoryFolder(const MoveSellingManagerInventoryFolderRequest: MoveSellingManagerInventoryFolderRequest): MoveSellingManagerInventoryFolderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  PlaceOffer(const PlaceOfferRequest: PlaceOfferRequest): PlaceOfferResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  RelistFixedPriceItem(const RelistFixedPriceItemRequest: RelistFixedPriceItemRequest): RelistFixedPriceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  RelistItem(const RelistItemRequest: RelistItemRequest): RelistItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  RemoveFromWatchList(const RemoveFromWatchListRequest: RemoveFromWatchListRequest): RemoveFromWatchListResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  RespondToBestOffer(const RespondToBestOfferRequest: RespondToBestOfferRequest): RespondToBestOfferResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  RespondToFeedback(const RespondToFeedbackRequest: RespondToFeedbackRequest): RespondToFeedbackResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseCheckoutStatus(const ReviseCheckoutStatusRequest: ReviseCheckoutStatusRequest): ReviseCheckoutStatusResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  ReviseFixedPriceItem(const ReviseFixedPriceItemRequest: ReviseFixedPriceItemRequest): ReviseFixedPriceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  ReviseInventoryStatus(const ReviseInventoryStatusRequest: ReviseInventoryStatusRequest): ReviseInventoryStatusResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  ReviseItem(const ReviseItemRequest: ReviseItemRequest): ReviseItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseMyMessages(const ReviseMyMessagesRequest: ReviseMyMessagesRequest): ReviseMyMessagesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseMyMessagesFolders(const ReviseMyMessagesFoldersRequest: ReviseMyMessagesFoldersRequest): ReviseMyMessagesFoldersResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseSellingManagerInventoryFolder(const ReviseSellingManagerInventoryFolderRequest: ReviseSellingManagerInventoryFolderRequest): ReviseSellingManagerInventoryFolderResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseSellingManagerProduct(const ReviseSellingManagerProductRequest: ReviseSellingManagerProductRequest): ReviseSellingManagerProductResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ReviseSellingManagerSaleRecord(const ReviseSellingManagerSaleRecordRequest: ReviseSellingManagerSaleRecordRequest): ReviseSellingManagerSaleRecordResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  ReviseSellingManagerTemplate(const ReviseSellingManagerTemplateRequest: ReviseSellingManagerTemplateRequest): ReviseSellingManagerTemplateResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  RevokeToken(const RevokeTokenRequest: RevokeTokenRequest): RevokeTokenResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SaveItemToSellingManagerTemplate(const SaveItemToSellingManagerTemplateRequest: SaveItemToSellingManagerTemplateRequest): SaveItemToSellingManagerTemplateResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SellerReverseDispute(const SellerReverseDisputeRequest: SellerReverseDisputeRequest): SellerReverseDisputeResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SendInvoice(const SendInvoiceRequest: SendInvoiceRequest): SendInvoiceResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetMessagePreferences(const SetMessagePreferencesRequest: SetMessagePreferencesRequest): SetMessagePreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetNotificationPreferences(const SetNotificationPreferencesRequest: SetNotificationPreferencesRequest): SetNotificationPreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  SetPromotionalSale(const SetPromotionalSaleRequest: SetPromotionalSaleRequest): SetPromotionalSaleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetPromotionalSaleListings(const SetPromotionalSaleListingsRequest: SetPromotionalSaleListingsRequest): SetPromotionalSaleListingsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetSellingManagerFeedbackOptions(const SetSellingManagerFeedbackOptionsRequest: SetSellingManagerFeedbackOptionsRequest): SetSellingManagerFeedbackOptionsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  SetSellingManagerItemAutomationRule(const SetSellingManagerItemAutomationRuleRequest: SetSellingManagerItemAutomationRuleRequest): SetSellingManagerItemAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  SetSellingManagerTemplateAutomationRule(const SetSellingManagerTemplateAutomationRuleRequest: SetSellingManagerTemplateAutomationRuleRequest): SetSellingManagerTemplateAutomationRuleResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetShippingDiscountProfiles(const SetShippingDiscountProfilesRequest: SetShippingDiscountProfilesRequest): SetShippingDiscountProfilesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetStore(const SetStoreRequest: SetStoreRequest): SetStoreResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  SetStoreCategories(const SetStoreCategoriesRequest: SetStoreCategoriesRequest): SetStoreCategoriesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetStoreCustomPage(const SetStoreCustomPageRequest: SetStoreCustomPageRequest): SetStoreCustomPageResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetStorePreferences(const SetStorePreferencesRequest: SetStorePreferencesRequest): SetStorePreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetTaxTable(const SetTaxTableRequest: SetTaxTableRequest): SetTaxTableResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetUserNotes(const SetUserNotesRequest: SetUserNotesRequest): SetUserNotesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  SetUserPreferences(const SetUserPreferencesRequest: SetUserPreferencesRequest): SetUserPreferencesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  UploadSiteHostedPictures(const UploadSiteHostedPicturesRequest: UploadSiteHostedPicturesRequest): UploadSiteHostedPicturesResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ValidateChallengeInput(const ValidateChallengeInputRequest: ValidateChallengeInputRequest): ValidateChallengeInputResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    // Headers: RequesterCredentials:pInOut
    function  ValidateTestUserRegistration(const ValidateTestUserRegistrationRequest: ValidateTestUserRegistrationRequest): ValidateTestUserRegistrationResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  VeROReportItems(const VeROReportItemsRequest: VeROReportItemsRequest): VeROReportItemsResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  VerifyAddFixedPriceItem(const VerifyAddFixedPriceItemRequest: VerifyAddFixedPriceItemRequest): VerifyAddFixedPriceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  VerifyAddItem(const VerifyAddItemRequest: VerifyAddItemRequest): VerifyAddItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  VerifyAddSecondChanceItem(const VerifyAddSecondChanceItemRequest: VerifyAddSecondChanceItemRequest): VerifyAddSecondChanceItemResponse; stdcall;

    // Cannot unwrap: 
    //     - Input element wrapper name does not match operation's name
    //     - More than one strictly out element was found
    // Headers: RequesterCredentials:pInOut
    function  VerifyRelistItem(const VerifyRelistItemRequest: VerifyRelistItemRequest): VerifyRelistItemResponse; stdcall;
  end;

function GeteBayAPIInterface(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): eBayAPIInterface;


implementation
  uses SysUtils;

function GeteBayAPIInterface(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): eBayAPIInterface;
const
  defWSDL = 'D:\temp\to be deleted\downloads\ebaysvc.wsdl';
  defURL  = 'https://api.ebay.com/wsapi';
  defSvc  = 'eBayAPIInterfaceService';
  defPrt  = 'eBayAPI';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as eBayAPIInterface);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


procedure RefundFailureReasonType.SetRefundFailureCode(Index: Integer; const ARefundFailureCodeType: RefundFailureCodeType);
begin
  FRefundFailureCode := ARefundFailureCodeType;
  FRefundFailureCode_Specified := True;
end;

function RefundFailureReasonType.RefundFailureCode_Specified(Index: Integer): boolean;
begin
  Result := FRefundFailureCode_Specified;
end;

destructor StoreSubscriptionType.Destroy;
begin
  SysUtils.FreeAndNil(FFee);
  inherited Destroy;
end;

procedure StoreSubscriptionType.SetLevel(Index: Integer; const AStoreSubscriptionLevelCodeType: StoreSubscriptionLevelCodeType);
begin
  FLevel := AStoreSubscriptionLevelCodeType;
  FLevel_Specified := True;
end;

function StoreSubscriptionType.Level_Specified(Index: Integer): boolean;
begin
  Result := FLevel_Specified;
end;

procedure StoreSubscriptionType.SetFee(Index: Integer; const AAmountType: AmountType);
begin
  FFee := AAmountType;
  FFee_Specified := True;
end;

function StoreSubscriptionType.Fee_Specified(Index: Integer): boolean;
begin
  Result := FFee_Specified;
end;

destructor MultiLegShippingDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FSellerShipmentToLogisticsProvider);
  SysUtils.FreeAndNil(FLogisticsProviderShipmentToBuyer);
  inherited Destroy;
end;

procedure MultiLegShippingDetailsType.SetSellerShipmentToLogisticsProvider(Index: Integer; const AMultiLegShipmentType: MultiLegShipmentType);
begin
  FSellerShipmentToLogisticsProvider := AMultiLegShipmentType;
  FSellerShipmentToLogisticsProvider_Specified := True;
end;

function MultiLegShippingDetailsType.SellerShipmentToLogisticsProvider_Specified(Index: Integer): boolean;
begin
  Result := FSellerShipmentToLogisticsProvider_Specified;
end;

procedure MultiLegShippingDetailsType.SetLogisticsProviderShipmentToBuyer(Index: Integer; const AMultiLegShipmentType: MultiLegShipmentType);
begin
  FLogisticsProviderShipmentToBuyer := AMultiLegShipmentType;
  FLogisticsProviderShipmentToBuyer_Specified := True;
end;

function MultiLegShippingDetailsType.LogisticsProviderShipmentToBuyer_Specified(Index: Integer): boolean;
begin
  Result := FLogisticsProviderShipmentToBuyer_Specified;
end;

destructor FlatRateInsuranceRangeCostType.Destroy;
begin
  SysUtils.FreeAndNil(FInsuranceCost);
  inherited Destroy;
end;

procedure FlatRateInsuranceRangeCostType.SetFlatRateInsuranceRange(Index: Integer; const AFlatRateInsuranceRangeCodeType: FlatRateInsuranceRangeCodeType);
begin
  FFlatRateInsuranceRange := AFlatRateInsuranceRangeCodeType;
  FFlatRateInsuranceRange_Specified := True;
end;

function FlatRateInsuranceRangeCostType.FlatRateInsuranceRange_Specified(Index: Integer): boolean;
begin
  Result := FFlatRateInsuranceRange_Specified;
end;

procedure FlatRateInsuranceRangeCostType.SetInsuranceCost(Index: Integer; const AAmountType: AmountType);
begin
  FInsuranceCost := AAmountType;
  FInsuranceCost_Specified := True;
end;

function FlatRateInsuranceRangeCostType.InsuranceCost_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceCost_Specified;
end;

destructor TaxesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTaxDetails)-1 do
    SysUtils.FreeAndNil(FTaxDetails[I]);
  System.SetLength(FTaxDetails, 0);
  SysUtils.FreeAndNil(FTotalTaxAmount);
  inherited Destroy;
end;

procedure TaxesType.SetTotalTaxAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTotalTaxAmount := AAmountType;
  FTotalTaxAmount_Specified := True;
end;

function TaxesType.TotalTaxAmount_Specified(Index: Integer): boolean;
begin
  Result := FTotalTaxAmount_Specified;
end;

procedure TaxesType.SetTaxDetails(Index: Integer; const AArray_Of_TaxDetailsType: Array_Of_TaxDetailsType);
begin
  FTaxDetails := AArray_Of_TaxDetailsType;
  FTaxDetails_Specified := True;
end;

function TaxesType.TaxDetails_Specified(Index: Integer): boolean;
begin
  Result := FTaxDetails_Specified;
end;

destructor SellerProfilesType.Destroy;
begin
  SysUtils.FreeAndNil(FSellerShippingProfile);
  SysUtils.FreeAndNil(FSellerReturnProfile);
  SysUtils.FreeAndNil(FSellerPaymentProfile);
  inherited Destroy;
end;

procedure SellerProfilesType.SetSellerShippingProfile(Index: Integer; const ASellerShippingProfileType: SellerShippingProfileType);
begin
  FSellerShippingProfile := ASellerShippingProfileType;
  FSellerShippingProfile_Specified := True;
end;

function SellerProfilesType.SellerShippingProfile_Specified(Index: Integer): boolean;
begin
  Result := FSellerShippingProfile_Specified;
end;

procedure SellerProfilesType.SetSellerReturnProfile(Index: Integer; const ASellerReturnProfileType: SellerReturnProfileType);
begin
  FSellerReturnProfile := ASellerReturnProfileType;
  FSellerReturnProfile_Specified := True;
end;

function SellerProfilesType.SellerReturnProfile_Specified(Index: Integer): boolean;
begin
  Result := FSellerReturnProfile_Specified;
end;

procedure SellerProfilesType.SetSellerPaymentProfile(Index: Integer; const ASellerPaymentProfileType: SellerPaymentProfileType);
begin
  FSellerPaymentProfile := ASellerPaymentProfileType;
  FSellerPaymentProfile_Specified := True;
end;

function SellerProfilesType.SellerPaymentProfile_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentProfile_Specified;
end;

destructor OrderTransactionType.Destroy;
begin
  SysUtils.FreeAndNil(FOrder);
  SysUtils.FreeAndNil(FTransaction);
  inherited Destroy;
end;

procedure OrderTransactionType.SetOrder(Index: Integer; const AOrderType: OrderType);
begin
  FOrder := AOrderType;
  FOrder_Specified := True;
end;

function OrderTransactionType.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure OrderTransactionType.SetTransaction(Index: Integer; const ATransactionType: TransactionType);
begin
  FTransaction := ATransactionType;
  FTransaction_Specified := True;
end;

function OrderTransactionType.Transaction_Specified(Index: Integer): boolean;
begin
  Result := FTransaction_Specified;
end;

destructor PaymentsInformationType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPayments)-1 do
    SysUtils.FreeAndNil(FPayments[I]);
  System.SetLength(FPayments, 0);
  for I := 0 to System.Length(FRefunds)-1 do
    SysUtils.FreeAndNil(FRefunds[I]);
  System.SetLength(FRefunds, 0);
  inherited Destroy;
end;

procedure PaymentsInformationType.SetPayments(Index: Integer; const APaymentInformationType: PaymentInformationType);
begin
  FPayments := APaymentInformationType;
  FPayments_Specified := True;
end;

function PaymentsInformationType.Payments_Specified(Index: Integer): boolean;
begin
  Result := FPayments_Specified;
end;

procedure PaymentsInformationType.SetRefunds(Index: Integer; const ARefundInformationType: RefundInformationType);
begin
  FRefunds := ARefundInformationType;
  FRefunds_Specified := True;
end;

function PaymentsInformationType.Refunds_Specified(Index: Integer): boolean;
begin
  Result := FRefunds_Specified;
end;

destructor OfferDiscountsType.Destroy;
begin
  SysUtils.FreeAndNil(FSellerMarketing);
  inherited Destroy;
end;

procedure OfferDiscountsType.SetSellerMarketing(Index: Integer; const AAmountType: AmountType);
begin
  FSellerMarketing := AAmountType;
  FSellerMarketing_Specified := True;
end;

function OfferDiscountsType.SellerMarketing_Specified(Index: Integer): boolean;
begin
  Result := FSellerMarketing_Specified;
end;

procedure SummaryEventScheduleType.SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
begin
  FEventType := ANotificationEventTypeCodeType;
  FEventType_Specified := True;
end;

function SummaryEventScheduleType.EventType_Specified(Index: Integer): boolean;
begin
  Result := FEventType_Specified;
end;

procedure SummaryEventScheduleType.SetSummaryPeriod(Index: Integer; const ASummaryWindowPeriodCodeType: SummaryWindowPeriodCodeType);
begin
  FSummaryPeriod := ASummaryWindowPeriodCodeType;
  FSummaryPeriod_Specified := True;
end;

function SummaryEventScheduleType.SummaryPeriod_Specified(Index: Integer): boolean;
begin
  Result := FSummaryPeriod_Specified;
end;

procedure SummaryEventScheduleType.SetFrequency(Index: Integer; const ASummaryFrequencyCodeType: SummaryFrequencyCodeType);
begin
  FFrequency := ASummaryFrequencyCodeType;
  FFrequency_Specified := True;
end;

function SummaryEventScheduleType.Frequency_Specified(Index: Integer): boolean;
begin
  Result := FFrequency_Specified;
end;

destructor ProductIdentifiersType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNameRecommendation)-1 do
    SysUtils.FreeAndNil(FNameRecommendation[I]);
  System.SetLength(FNameRecommendation, 0);
  SysUtils.FreeAndNil(FValidationRules);
  inherited Destroy;
end;

procedure ProductIdentifiersType.SetNameRecommendation(Index: Integer; const AArray_Of_NameRecommendationType: Array_Of_NameRecommendationType);
begin
  FNameRecommendation := AArray_Of_NameRecommendationType;
  FNameRecommendation_Specified := True;
end;

function ProductIdentifiersType.NameRecommendation_Specified(Index: Integer): boolean;
begin
  Result := FNameRecommendation_Specified;
end;

destructor VeROSiteDetailType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FReasonCodeDetail)-1 do
    SysUtils.FreeAndNil(FReasonCodeDetail[I]);
  System.SetLength(FReasonCodeDetail, 0);
  inherited Destroy;
end;

procedure VeROSiteDetailType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function VeROSiteDetailType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure VeROSiteDetailType.SetReasonCodeDetail(Index: Integer; const AArray_Of_ReasonCodeDetailType: Array_Of_ReasonCodeDetailType);
begin
  FReasonCodeDetail := AArray_Of_ReasonCodeDetailType;
  FReasonCodeDetail_Specified := True;
end;

function VeROSiteDetailType.ReasonCodeDetail_Specified(Index: Integer): boolean;
begin
  Result := FReasonCodeDetail_Specified;
end;

procedure UnpaidItemType.SetStatus(Index: Integer; const AUnpaidItemCaseStatusTypeCodeType: UnpaidItemCaseStatusTypeCodeType);
begin
  FStatus := AUnpaidItemCaseStatusTypeCodeType;
  FStatus_Specified := True;
end;

function UnpaidItemType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure UnpaidItemType.SetType_(Index: Integer; const AUnpaidItemCaseOpenTypeCodeType: UnpaidItemCaseOpenTypeCodeType);
begin
  FType_ := AUnpaidItemCaseOpenTypeCodeType;
  FType__Specified := True;
end;

function UnpaidItemType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

destructor SellingManagerProductType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellingManagerTemplateDetailsArray)-1 do
    SysUtils.FreeAndNil(FSellingManagerTemplateDetailsArray[I]);
  System.SetLength(FSellingManagerTemplateDetailsArray, 0);
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  SysUtils.FreeAndNil(FSellingManagerProductInventoryStatus);
  SysUtils.FreeAndNil(FSellingManagerProductSpecifics);
  inherited Destroy;
end;

procedure SellingManagerProductType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function SellingManagerProductType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure SellingManagerProductType.SetSellingManagerTemplateDetailsArray(Index: Integer; const ASellingManagerTemplateDetailsArrayType: SellingManagerTemplateDetailsArrayType);
begin
  FSellingManagerTemplateDetailsArray := ASellingManagerTemplateDetailsArrayType;
  FSellingManagerTemplateDetailsArray_Specified := True;
end;

function SellingManagerProductType.SellingManagerTemplateDetailsArray_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerTemplateDetailsArray_Specified;
end;

procedure SellingManagerProductType.SetSellingManagerProductInventoryStatus(Index: Integer; const ASellingManagerProductInventoryStatusType: SellingManagerProductInventoryStatusType);
begin
  FSellingManagerProductInventoryStatus := ASellingManagerProductInventoryStatusType;
  FSellingManagerProductInventoryStatus_Specified := True;
end;

function SellingManagerProductType.SellingManagerProductInventoryStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductInventoryStatus_Specified;
end;

procedure SellingManagerProductType.SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
begin
  FSellingManagerProductSpecifics := ASellingManagerProductSpecificsType;
  FSellingManagerProductSpecifics_Specified := True;
end;

function SellingManagerProductType.SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductSpecifics_Specified;
end;

destructor PaginatedOrderTransactionArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FOrderTransactionArray)-1 do
    SysUtils.FreeAndNil(FOrderTransactionArray[I]);
  System.SetLength(FOrderTransactionArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure PaginatedOrderTransactionArrayType.SetOrderTransactionArray(Index: Integer; const AOrderTransactionArrayType: OrderTransactionArrayType);
begin
  FOrderTransactionArray := AOrderTransactionArrayType;
  FOrderTransactionArray_Specified := True;
end;

function PaginatedOrderTransactionArrayType.OrderTransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FOrderTransactionArray_Specified;
end;

procedure PaginatedOrderTransactionArrayType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function PaginatedOrderTransactionArrayType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure SearchStandingDashboardType.SetStatus(Index: Integer; const ASearchStandingStatusCodeType: SearchStandingStatusCodeType);
begin
  FStatus := ASearchStandingStatusCodeType;
  FStatus_Specified := True;
end;

function SearchStandingDashboardType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

destructor PowerSellerDashboardType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlert)-1 do
    SysUtils.FreeAndNil(FAlert[I]);
  System.SetLength(FAlert, 0);
  inherited Destroy;
end;

procedure PowerSellerDashboardType.SetLevel(Index: Integer; const ASellerLevelCodeType: SellerLevelCodeType);
begin
  FLevel := ASellerLevelCodeType;
  FLevel_Specified := True;
end;

function PowerSellerDashboardType.Level_Specified(Index: Integer): boolean;
begin
  Result := FLevel_Specified;
end;

procedure PowerSellerDashboardType.SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
begin
  FAlert := AArray_Of_SellerDashboardAlertType;
  FAlert_Specified := True;
end;

function PowerSellerDashboardType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

destructor PolicyComplianceDashboardType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlert)-1 do
    SysUtils.FreeAndNil(FAlert[I]);
  System.SetLength(FAlert, 0);
  inherited Destroy;
end;

procedure PolicyComplianceDashboardType.SetStatus(Index: Integer; const APolicyComplianceStatusCodeType: PolicyComplianceStatusCodeType);
begin
  FStatus := APolicyComplianceStatusCodeType;
  FStatus_Specified := True;
end;

function PolicyComplianceDashboardType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure PolicyComplianceDashboardType.SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
begin
  FAlert := AArray_Of_SellerDashboardAlertType;
  FAlert_Specified := True;
end;

function PolicyComplianceDashboardType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

destructor SellerAccountDashboardType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlert)-1 do
    SysUtils.FreeAndNil(FAlert[I]);
  System.SetLength(FAlert, 0);
  inherited Destroy;
end;

procedure SellerAccountDashboardType.SetStatus(Index: Integer; const ASellerAccountStatusCodeType: SellerAccountStatusCodeType);
begin
  FStatus := ASellerAccountStatusCodeType;
  FStatus_Specified := True;
end;

function SellerAccountDashboardType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure SellerAccountDashboardType.SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
begin
  FAlert := AArray_Of_SellerDashboardAlertType;
  FAlert_Specified := True;
end;

function SellerAccountDashboardType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

destructor PerformanceDashboardType.Destroy;
begin
  SysUtils.FreeAndNil(FAlert);
  inherited Destroy;
end;

procedure PerformanceDashboardType.SetSite(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
begin
  FSite := AIntegratedMerchantCreditCardInfoType;
  FSite_Specified := True;
end;

function PerformanceDashboardType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure PerformanceDashboardType.SetStatus(Index: Integer; const APerformanceStatusCodeType: PerformanceStatusCodeType);
begin
  FStatus := APerformanceStatusCodeType;
  FStatus_Specified := True;
end;

function PerformanceDashboardType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure PerformanceDashboardType.SetAlert(Index: Integer; const ASellerDashboardAlertType: SellerDashboardAlertType);
begin
  FAlert := ASellerDashboardAlertType;
  FAlert_Specified := True;
end;

function PerformanceDashboardType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

destructor StoreThemeArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTheme)-1 do
    SysUtils.FreeAndNil(FTheme[I]);
  System.SetLength(FTheme, 0);
  for I := 0 to System.Length(FGenericColorSchemeArray)-1 do
    SysUtils.FreeAndNil(FGenericColorSchemeArray[I]);
  System.SetLength(FGenericColorSchemeArray, 0);
  inherited Destroy;
end;

procedure StoreThemeArrayType.SetTheme(Index: Integer; const AArray_Of_StoreThemeType: Array_Of_StoreThemeType);
begin
  FTheme := AArray_Of_StoreThemeType;
  FTheme_Specified := True;
end;

function StoreThemeArrayType.Theme_Specified(Index: Integer): boolean;
begin
  Result := FTheme_Specified;
end;

procedure StoreThemeArrayType.SetGenericColorSchemeArray(Index: Integer; const AStoreColorSchemeArrayType: StoreColorSchemeArrayType);
begin
  FGenericColorSchemeArray := AStoreColorSchemeArrayType;
  FGenericColorSchemeArray_Specified := True;
end;

function StoreThemeArrayType.GenericColorSchemeArray_Specified(Index: Integer): boolean;
begin
  Result := FGenericColorSchemeArray_Specified;
end;

destructor StorePreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FVacationPreferences);
  inherited Destroy;
end;

procedure StorePreferencesType.SetVacationPreferences(Index: Integer; const AStoreVacationPreferencesType: StoreVacationPreferencesType);
begin
  FVacationPreferences := AStoreVacationPreferencesType;
  FVacationPreferences_Specified := True;
end;

function StorePreferencesType.VacationPreferences_Specified(Index: Integer): boolean;
begin
  Result := FVacationPreferences_Specified;
end;

destructor ProStoresCheckoutPreferenceType.Destroy;
begin
  SysUtils.FreeAndNil(FProStoresDetails);
  inherited Destroy;
end;

procedure ProStoresCheckoutPreferenceType.SetCheckoutRedirectProStores(Index: Integer; const ABoolean: Boolean);
begin
  FCheckoutRedirectProStores := ABoolean;
  FCheckoutRedirectProStores_Specified := True;
end;

function ProStoresCheckoutPreferenceType.CheckoutRedirectProStores_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutRedirectProStores_Specified;
end;

procedure ProStoresCheckoutPreferenceType.SetProStoresDetails(Index: Integer; const AProStoresDetailsType: ProStoresDetailsType);
begin
  FProStoresDetails := AProStoresDetailsType;
  FProStoresDetails_Specified := True;
end;

function ProStoresCheckoutPreferenceType.ProStoresDetails_Specified(Index: Integer): boolean;
begin
  Result := FProStoresDetails_Specified;
end;

procedure BidderNoticePreferencesType.SetUnsuccessfulBidderNoticeIncludeMyItems(Index: Integer; const ABoolean: Boolean);
begin
  FUnsuccessfulBidderNoticeIncludeMyItems := ABoolean;
  FUnsuccessfulBidderNoticeIncludeMyItems_Specified := True;
end;

function BidderNoticePreferencesType.UnsuccessfulBidderNoticeIncludeMyItems_Specified(Index: Integer): boolean;
begin
  Result := FUnsuccessfulBidderNoticeIncludeMyItems_Specified;
end;

procedure SellerReturnPreferencesType.SetOptedIn(Index: Integer; const ABoolean: Boolean);
begin
  FOptedIn := ABoolean;
  FOptedIn_Specified := True;
end;

function SellerReturnPreferencesType.OptedIn_Specified(Index: Integer): boolean;
begin
  Result := FOptedIn_Specified;
end;

destructor SellerProfilePreferencesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSupportedSellerProfiles)-1 do
    SysUtils.FreeAndNil(FSupportedSellerProfiles[I]);
  System.SetLength(FSupportedSellerProfiles, 0);
  inherited Destroy;
end;

procedure SellerProfilePreferencesType.SetSellerProfileOptedIn(Index: Integer; const ABoolean: Boolean);
begin
  FSellerProfileOptedIn := ABoolean;
  FSellerProfileOptedIn_Specified := True;
end;

function SellerProfilePreferencesType.SellerProfileOptedIn_Specified(Index: Integer): boolean;
begin
  Result := FSellerProfileOptedIn_Specified;
end;

procedure SellerProfilePreferencesType.SetSupportedSellerProfiles(Index: Integer; const ASupportedSellerProfilesType: SupportedSellerProfilesType);
begin
  FSupportedSellerProfiles := ASupportedSellerProfilesType;
  FSupportedSellerProfiles_Specified := True;
end;

function SellerProfilePreferencesType.SupportedSellerProfiles_Specified(Index: Integer): boolean;
begin
  Result := FSupportedSellerProfiles_Specified;
end;

procedure PurchaseReminderEmailPreferencesType.SetPurchaseReminderEmailPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FPurchaseReminderEmailPreferences := ABoolean;
  FPurchaseReminderEmailPreferences_Specified := True;
end;

function PurchaseReminderEmailPreferencesType.PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FPurchaseReminderEmailPreferences_Specified;
end;

procedure ReviseStatusType.SetBuyItNowAdded(Index: Integer; const ABoolean: Boolean);
begin
  FBuyItNowAdded := ABoolean;
  FBuyItNowAdded_Specified := True;
end;

function ReviseStatusType.BuyItNowAdded_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowAdded_Specified;
end;

procedure ReviseStatusType.SetBuyItNowLowered(Index: Integer; const ABoolean: Boolean);
begin
  FBuyItNowLowered := ABoolean;
  FBuyItNowLowered_Specified := True;
end;

function ReviseStatusType.BuyItNowLowered_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowLowered_Specified;
end;

procedure ReviseStatusType.SetReserveLowered(Index: Integer; const ABoolean: Boolean);
begin
  FReserveLowered := ABoolean;
  FReserveLowered_Specified := True;
end;

function ReviseStatusType.ReserveLowered_Specified(Index: Integer): boolean;
begin
  Result := FReserveLowered_Specified;
end;

procedure ReviseStatusType.SetReserveRemoved(Index: Integer; const ABoolean: Boolean);
begin
  FReserveRemoved := ABoolean;
  FReserveRemoved_Specified := True;
end;

function ReviseStatusType.ReserveRemoved_Specified(Index: Integer): boolean;
begin
  Result := FReserveRemoved_Specified;
end;

procedure SearchDetailsType.SetBuyItNowEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBuyItNowEnabled := ABoolean;
  FBuyItNowEnabled_Specified := True;
end;

function SearchDetailsType.BuyItNowEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowEnabled_Specified;
end;

procedure SearchDetailsType.SetPicture(Index: Integer; const ABoolean: Boolean);
begin
  FPicture := ABoolean;
  FPicture_Specified := True;
end;

function SearchDetailsType.Picture_Specified(Index: Integer): boolean;
begin
  Result := FPicture_Specified;
end;

procedure SearchDetailsType.SetRecentListing(Index: Integer; const ABoolean: Boolean);
begin
  FRecentListing := ABoolean;
  FRecentListing_Specified := True;
end;

function SearchDetailsType.RecentListing_Specified(Index: Integer): boolean;
begin
  Result := FRecentListing_Specified;
end;

destructor ItemCompatibilityListType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCompatibility)-1 do
    SysUtils.FreeAndNil(FCompatibility[I]);
  System.SetLength(FCompatibility, 0);
  inherited Destroy;
end;

procedure ItemCompatibilityListType.SetCompatibility(Index: Integer; const AArray_Of_ItemCompatibilityType: Array_Of_ItemCompatibilityType);
begin
  FCompatibility := AArray_Of_ItemCompatibilityType;
  FCompatibility_Specified := True;
end;

function ItemCompatibilityListType.Compatibility_Specified(Index: Integer): boolean;
begin
  Result := FCompatibility_Specified;
end;

procedure ItemCompatibilityListType.SetReplaceAll(Index: Integer; const ABoolean: Boolean);
begin
  FReplaceAll := ABoolean;
  FReplaceAll_Specified := True;
end;

function ItemCompatibilityListType.ReplaceAll_Specified(Index: Integer): boolean;
begin
  Result := FReplaceAll_Specified;
end;

procedure ShippingServicePackageDetailsType.SetName_(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
begin
  FName_ := AShippingPackageCodeType;
  FName__Specified := True;
end;

function ShippingServicePackageDetailsType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ShippingServicePackageDetailsType.SetDimensionsRequired(Index: Integer; const ABoolean: Boolean);
begin
  FDimensionsRequired := ABoolean;
  FDimensionsRequired_Specified := True;
end;

function ShippingServicePackageDetailsType.DimensionsRequired_Specified(Index: Integer): boolean;
begin
  Result := FDimensionsRequired_Specified;
end;

destructor SellereBayPaymentProcessConsentCodeType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserAgreementInfo)-1 do
    SysUtils.FreeAndNil(FUserAgreementInfo[I]);
  System.SetLength(FUserAgreementInfo, 0);
  inherited Destroy;
end;

procedure SellereBayPaymentProcessConsentCodeType.SetPayoutMethodSet(Index: Integer; const ABoolean: Boolean);
begin
  FPayoutMethodSet := ABoolean;
  FPayoutMethodSet_Specified := True;
end;

function SellereBayPaymentProcessConsentCodeType.PayoutMethodSet_Specified(Index: Integer): boolean;
begin
  Result := FPayoutMethodSet_Specified;
end;

procedure SellereBayPaymentProcessConsentCodeType.SetPayoutMethod(Index: Integer; const APayoutMethodType: PayoutMethodType);
begin
  FPayoutMethod := APayoutMethodType;
  FPayoutMethod_Specified := True;
end;

function SellereBayPaymentProcessConsentCodeType.PayoutMethod_Specified(Index: Integer): boolean;
begin
  Result := FPayoutMethod_Specified;
end;

procedure SellereBayPaymentProcessConsentCodeType.SetUserAgreementInfo(Index: Integer; const AArray_Of_UserAgreementInfoType: Array_Of_UserAgreementInfoType);
begin
  FUserAgreementInfo := AArray_Of_UserAgreementInfoType;
  FUserAgreementInfo_Specified := True;
end;

function SellereBayPaymentProcessConsentCodeType.UserAgreementInfo_Specified(Index: Integer): boolean;
begin
  Result := FUserAgreementInfo_Specified;
end;

destructor StoreCustomListingHeaderType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FLinkToInclude)-1 do
    SysUtils.FreeAndNil(FLinkToInclude[I]);
  System.SetLength(FLinkToInclude, 0);
  inherited Destroy;
end;

procedure StoreCustomListingHeaderType.SetDisplayType(Index: Integer; const AStoreCustomListingHeaderDisplayCodeType: StoreCustomListingHeaderDisplayCodeType);
begin
  FDisplayType := AStoreCustomListingHeaderDisplayCodeType;
  FDisplayType_Specified := True;
end;

function StoreCustomListingHeaderType.DisplayType_Specified(Index: Integer): boolean;
begin
  Result := FDisplayType_Specified;
end;

procedure StoreCustomListingHeaderType.SetLogo(Index: Integer; const ABoolean: Boolean);
begin
  FLogo := ABoolean;
  FLogo_Specified := True;
end;

function StoreCustomListingHeaderType.Logo_Specified(Index: Integer): boolean;
begin
  Result := FLogo_Specified;
end;

procedure StoreCustomListingHeaderType.SetSearchBox(Index: Integer; const ABoolean: Boolean);
begin
  FSearchBox := ABoolean;
  FSearchBox_Specified := True;
end;

function StoreCustomListingHeaderType.SearchBox_Specified(Index: Integer): boolean;
begin
  Result := FSearchBox_Specified;
end;

procedure StoreCustomListingHeaderType.SetLinkToInclude(Index: Integer; const AArray_Of_StoreCustomListingHeaderLinkType: Array_Of_StoreCustomListingHeaderLinkType);
begin
  FLinkToInclude := AArray_Of_StoreCustomListingHeaderLinkType;
  FLinkToInclude_Specified := True;
end;

function StoreCustomListingHeaderType.LinkToInclude_Specified(Index: Integer): boolean;
begin
  Result := FLinkToInclude_Specified;
end;

procedure StoreCustomListingHeaderType.SetAddToFavoriteStores(Index: Integer; const ABoolean: Boolean);
begin
  FAddToFavoriteStores := ABoolean;
  FAddToFavoriteStores_Specified := True;
end;

function StoreCustomListingHeaderType.AddToFavoriteStores_Specified(Index: Integer): boolean;
begin
  Result := FAddToFavoriteStores_Specified;
end;

procedure StoreCustomListingHeaderType.SetSignUpForStoreNewsletter(Index: Integer; const ABoolean: Boolean);
begin
  FSignUpForStoreNewsletter := ABoolean;
  FSignUpForStoreNewsletter_Specified := True;
end;

function StoreCustomListingHeaderType.SignUpForStoreNewsletter_Specified(Index: Integer): boolean;
begin
  Result := FSignUpForStoreNewsletter_Specified;
end;

procedure DisputeFilterCountType.SetDisputeFilterType(Index: Integer; const ADisputeFilterTypeCodeType: DisputeFilterTypeCodeType);
begin
  FDisputeFilterType := ADisputeFilterTypeCodeType;
  FDisputeFilterType_Specified := True;
end;

function DisputeFilterCountType.DisputeFilterType_Specified(Index: Integer): boolean;
begin
  Result := FDisputeFilterType_Specified;
end;

procedure DisputeFilterCountType.SetTotalAvailable(Index: Integer; const AInteger: Integer);
begin
  FTotalAvailable := AInteger;
  FTotalAvailable_Specified := True;
end;

function DisputeFilterCountType.TotalAvailable_Specified(Index: Integer): boolean;
begin
  Result := FTotalAvailable_Specified;
end;

procedure NotificationStatisticsType.SetDeliveredCount(Index: Integer; const AInteger: Integer);
begin
  FDeliveredCount := AInteger;
  FDeliveredCount_Specified := True;
end;

function NotificationStatisticsType.DeliveredCount_Specified(Index: Integer): boolean;
begin
  Result := FDeliveredCount_Specified;
end;

procedure NotificationStatisticsType.SetQueuedNewCount(Index: Integer; const AInteger: Integer);
begin
  FQueuedNewCount := AInteger;
  FQueuedNewCount_Specified := True;
end;

function NotificationStatisticsType.QueuedNewCount_Specified(Index: Integer): boolean;
begin
  Result := FQueuedNewCount_Specified;
end;

procedure NotificationStatisticsType.SetQueuedPendingCount(Index: Integer; const AInteger: Integer);
begin
  FQueuedPendingCount := AInteger;
  FQueuedPendingCount_Specified := True;
end;

function NotificationStatisticsType.QueuedPendingCount_Specified(Index: Integer): boolean;
begin
  Result := FQueuedPendingCount_Specified;
end;

procedure NotificationStatisticsType.SetExpiredCount(Index: Integer; const AInteger: Integer);
begin
  FExpiredCount := AInteger;
  FExpiredCount_Specified := True;
end;

function NotificationStatisticsType.ExpiredCount_Specified(Index: Integer): boolean;
begin
  Result := FExpiredCount_Specified;
end;

procedure NotificationStatisticsType.SetErrorCount(Index: Integer; const AInteger: Integer);
begin
  FErrorCount := AInteger;
  FErrorCount_Specified := True;
end;

function NotificationStatisticsType.ErrorCount_Specified(Index: Integer): boolean;
begin
  Result := FErrorCount_Specified;
end;

procedure ReminderCustomizationType.SetDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FDurationInDays := AInteger;
  FDurationInDays_Specified := True;
end;

function ReminderCustomizationType.DurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FDurationInDays_Specified;
end;

procedure ReminderCustomizationType.SetInclude(Index: Integer; const ABoolean: Boolean);
begin
  FInclude := ABoolean;
  FInclude_Specified := True;
end;

function ReminderCustomizationType.Include_Specified(Index: Integer): boolean;
begin
  Result := FInclude_Specified;
end;

procedure RemindersType.SetPaymentToSendCount(Index: Integer; const AInteger: Integer);
begin
  FPaymentToSendCount := AInteger;
  FPaymentToSendCount_Specified := True;
end;

function RemindersType.PaymentToSendCount_Specified(Index: Integer): boolean;
begin
  Result := FPaymentToSendCount_Specified;
end;

procedure RemindersType.SetFeedbackToReceiveCount(Index: Integer; const AInteger: Integer);
begin
  FFeedbackToReceiveCount := AInteger;
  FFeedbackToReceiveCount_Specified := True;
end;

function RemindersType.FeedbackToReceiveCount_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackToReceiveCount_Specified;
end;

procedure RemindersType.SetFeedbackToSendCount(Index: Integer; const AInteger: Integer);
begin
  FFeedbackToSendCount := AInteger;
  FFeedbackToSendCount_Specified := True;
end;

function RemindersType.FeedbackToSendCount_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackToSendCount_Specified;
end;

procedure RemindersType.SetOutbidCount(Index: Integer; const AInteger: Integer);
begin
  FOutbidCount := AInteger;
  FOutbidCount_Specified := True;
end;

function RemindersType.OutbidCount_Specified(Index: Integer): boolean;
begin
  Result := FOutbidCount_Specified;
end;

procedure RemindersType.SetPaymentToReceiveCount(Index: Integer; const AInteger: Integer);
begin
  FPaymentToReceiveCount := AInteger;
  FPaymentToReceiveCount_Specified := True;
end;

function RemindersType.PaymentToReceiveCount_Specified(Index: Integer): boolean;
begin
  Result := FPaymentToReceiveCount_Specified;
end;

procedure RemindersType.SetSecondChanceOfferCount(Index: Integer; const AInteger: Integer);
begin
  FSecondChanceOfferCount := AInteger;
  FSecondChanceOfferCount_Specified := True;
end;

function RemindersType.SecondChanceOfferCount_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOfferCount_Specified;
end;

procedure RemindersType.SetShippingNeededCount(Index: Integer; const AInteger: Integer);
begin
  FShippingNeededCount := AInteger;
  FShippingNeededCount_Specified := True;
end;

function RemindersType.ShippingNeededCount_Specified(Index: Integer): boolean;
begin
  Result := FShippingNeededCount_Specified;
end;

procedure RemindersType.SetRelistingNeededCount(Index: Integer; const AInteger: Integer);
begin
  FRelistingNeededCount := AInteger;
  FRelistingNeededCount_Specified := True;
end;

function RemindersType.RelistingNeededCount_Specified(Index: Integer): boolean;
begin
  Result := FRelistingNeededCount_Specified;
end;

procedure RemindersType.SetTotalNewLeadsCount(Index: Integer; const AInteger: Integer);
begin
  FTotalNewLeadsCount := AInteger;
  FTotalNewLeadsCount_Specified := True;
end;

function RemindersType.TotalNewLeadsCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalNewLeadsCount_Specified;
end;

procedure RemindersType.SetDocsForCCProcessingToSendCount(Index: Integer; const AInteger: Integer);
begin
  FDocsForCCProcessingToSendCount := AInteger;
  FDocsForCCProcessingToSendCount_Specified := True;
end;

function RemindersType.DocsForCCProcessingToSendCount_Specified(Index: Integer): boolean;
begin
  Result := FDocsForCCProcessingToSendCount_Specified;
end;

procedure RemindersType.SetRTEToProcessCount(Index: Integer; const AInteger: Integer);
begin
  FRTEToProcessCount := AInteger;
  FRTEToProcessCount_Specified := True;
end;

function RemindersType.RTEToProcessCount_Specified(Index: Integer): boolean;
begin
  Result := FRTEToProcessCount_Specified;
end;

procedure RemindersType.SetItemReceiptToConfirmCount(Index: Integer; const AInteger: Integer);
begin
  FItemReceiptToConfirmCount := AInteger;
  FItemReceiptToConfirmCount_Specified := True;
end;

function RemindersType.ItemReceiptToConfirmCount_Specified(Index: Integer): boolean;
begin
  Result := FItemReceiptToConfirmCount_Specified;
end;

procedure RemindersType.SetRefundOnHoldCount(Index: Integer; const AInteger: Integer);
begin
  FRefundOnHoldCount := AInteger;
  FRefundOnHoldCount_Specified := True;
end;

function RemindersType.RefundOnHoldCount_Specified(Index: Integer): boolean;
begin
  Result := FRefundOnHoldCount_Specified;
end;

procedure RemindersType.SetRefundCancelledCount(Index: Integer; const AInteger: Integer);
begin
  FRefundCancelledCount := AInteger;
  FRefundCancelledCount_Specified := True;
end;

function RemindersType.RefundCancelledCount_Specified(Index: Integer): boolean;
begin
  Result := FRefundCancelledCount_Specified;
end;

procedure RemindersType.SetShippingDetailsToBeProvidedCount(Index: Integer; const AInteger: Integer);
begin
  FShippingDetailsToBeProvidedCount := AInteger;
  FShippingDetailsToBeProvidedCount_Specified := True;
end;

function RemindersType.ShippingDetailsToBeProvidedCount_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetailsToBeProvidedCount_Specified;
end;

procedure RemindersType.SetItemReceiptConfirmationToReceiveCount(Index: Integer; const AInteger: Integer);
begin
  FItemReceiptConfirmationToReceiveCount := AInteger;
  FItemReceiptConfirmationToReceiveCount_Specified := True;
end;

function RemindersType.ItemReceiptConfirmationToReceiveCount_Specified(Index: Integer): boolean;
begin
  Result := FItemReceiptConfirmationToReceiveCount_Specified;
end;

procedure RemindersType.SetRefundInitiatedCount(Index: Integer; const AInteger: Integer);
begin
  FRefundInitiatedCount := AInteger;
  FRefundInitiatedCount_Specified := True;
end;

function RemindersType.RefundInitiatedCount_Specified(Index: Integer): boolean;
begin
  Result := FRefundInitiatedCount_Specified;
end;

procedure RemindersType.SetPendingRTERequestCount(Index: Integer; const AInteger: Integer);
begin
  FPendingRTERequestCount := AInteger;
  FPendingRTERequestCount_Specified := True;
end;

function RemindersType.PendingRTERequestCount_Specified(Index: Integer): boolean;
begin
  Result := FPendingRTERequestCount_Specified;
end;

procedure RemindersType.SetDeclinedRTERequestCount(Index: Integer; const AInteger: Integer);
begin
  FDeclinedRTERequestCount := AInteger;
  FDeclinedRTERequestCount_Specified := True;
end;

function RemindersType.DeclinedRTERequestCount_Specified(Index: Integer): boolean;
begin
  Result := FDeclinedRTERequestCount_Specified;
end;

destructor BuyingSummaryType.Destroy;
begin
  SysUtils.FreeAndNil(FTotalWinningCost);
  SysUtils.FreeAndNil(FTotalWonCost);
  inherited Destroy;
end;

procedure BuyingSummaryType.SetBiddingCount(Index: Integer; const AInteger: Integer);
begin
  FBiddingCount := AInteger;
  FBiddingCount_Specified := True;
end;

function BuyingSummaryType.BiddingCount_Specified(Index: Integer): boolean;
begin
  Result := FBiddingCount_Specified;
end;

procedure BuyingSummaryType.SetWinningCount(Index: Integer; const AInteger: Integer);
begin
  FWinningCount := AInteger;
  FWinningCount_Specified := True;
end;

function BuyingSummaryType.WinningCount_Specified(Index: Integer): boolean;
begin
  Result := FWinningCount_Specified;
end;

procedure BuyingSummaryType.SetTotalWinningCost(Index: Integer; const AAmountType: AmountType);
begin
  FTotalWinningCost := AAmountType;
  FTotalWinningCost_Specified := True;
end;

function BuyingSummaryType.TotalWinningCost_Specified(Index: Integer): boolean;
begin
  Result := FTotalWinningCost_Specified;
end;

procedure BuyingSummaryType.SetWonCount(Index: Integer; const AInteger: Integer);
begin
  FWonCount := AInteger;
  FWonCount_Specified := True;
end;

function BuyingSummaryType.WonCount_Specified(Index: Integer): boolean;
begin
  Result := FWonCount_Specified;
end;

procedure BuyingSummaryType.SetTotalWonCost(Index: Integer; const AAmountType: AmountType);
begin
  FTotalWonCost := AAmountType;
  FTotalWonCost_Specified := True;
end;

function BuyingSummaryType.TotalWonCost_Specified(Index: Integer): boolean;
begin
  Result := FTotalWonCost_Specified;
end;

procedure BuyingSummaryType.SetWonDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FWonDurationInDays := AInteger;
  FWonDurationInDays_Specified := True;
end;

function BuyingSummaryType.WonDurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FWonDurationInDays_Specified;
end;

procedure BuyingSummaryType.SetBestOfferCount(Index: Integer; const AInteger: Integer);
begin
  FBestOfferCount := AInteger;
  FBestOfferCount_Specified := True;
end;

function BuyingSummaryType.BestOfferCount_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCount_Specified;
end;

destructor MyeBayFavoriteSellerListType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFavoriteSeller)-1 do
    SysUtils.FreeAndNil(FFavoriteSeller[I]);
  System.SetLength(FFavoriteSeller, 0);
  inherited Destroy;
end;

procedure MyeBayFavoriteSellerListType.SetTotalAvailable(Index: Integer; const AInteger: Integer);
begin
  FTotalAvailable := AInteger;
  FTotalAvailable_Specified := True;
end;

function MyeBayFavoriteSellerListType.TotalAvailable_Specified(Index: Integer): boolean;
begin
  Result := FTotalAvailable_Specified;
end;

procedure MyeBayFavoriteSellerListType.SetFavoriteSeller(Index: Integer; const AArray_Of_MyeBayFavoriteSellerType: Array_Of_MyeBayFavoriteSellerType);
begin
  FFavoriteSeller := AArray_Of_MyeBayFavoriteSellerType;
  FFavoriteSeller_Specified := True;
end;

function MyeBayFavoriteSellerListType.FavoriteSeller_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSeller_Specified;
end;

destructor MyeBayFavoriteSearchListType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFavoriteSearch)-1 do
    SysUtils.FreeAndNil(FFavoriteSearch[I]);
  System.SetLength(FFavoriteSearch, 0);
  inherited Destroy;
end;

procedure MyeBayFavoriteSearchListType.SetTotalAvailable(Index: Integer; const AInteger: Integer);
begin
  FTotalAvailable := AInteger;
  FTotalAvailable_Specified := True;
end;

function MyeBayFavoriteSearchListType.TotalAvailable_Specified(Index: Integer): boolean;
begin
  Result := FTotalAvailable_Specified;
end;

procedure MyeBayFavoriteSearchListType.SetFavoriteSearch(Index: Integer; const AArray_Of_MyeBayFavoriteSearchType: Array_Of_MyeBayFavoriteSearchType);
begin
  FFavoriteSearch := AArray_Of_MyeBayFavoriteSearchType;
  FFavoriteSearch_Specified := True;
end;

function MyeBayFavoriteSearchListType.FavoriteSearch_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSearch_Specified;
end;

destructor SellingSummaryType.Destroy;
begin
  SysUtils.FreeAndNil(FTotalAuctionSellingValue);
  SysUtils.FreeAndNil(FTotalSoldValue);
  inherited Destroy;
end;

procedure SellingSummaryType.SetActiveAuctionCount(Index: Integer; const AInteger: Integer);
begin
  FActiveAuctionCount := AInteger;
  FActiveAuctionCount_Specified := True;
end;

function SellingSummaryType.ActiveAuctionCount_Specified(Index: Integer): boolean;
begin
  Result := FActiveAuctionCount_Specified;
end;

procedure SellingSummaryType.SetAuctionSellingCount(Index: Integer; const AInteger: Integer);
begin
  FAuctionSellingCount := AInteger;
  FAuctionSellingCount_Specified := True;
end;

function SellingSummaryType.AuctionSellingCount_Specified(Index: Integer): boolean;
begin
  Result := FAuctionSellingCount_Specified;
end;

procedure SellingSummaryType.SetAuctionBidCount(Index: Integer; const AInteger: Integer);
begin
  FAuctionBidCount := AInteger;
  FAuctionBidCount_Specified := True;
end;

function SellingSummaryType.AuctionBidCount_Specified(Index: Integer): boolean;
begin
  Result := FAuctionBidCount_Specified;
end;

procedure SellingSummaryType.SetTotalAuctionSellingValue(Index: Integer; const AAmountType: AmountType);
begin
  FTotalAuctionSellingValue := AAmountType;
  FTotalAuctionSellingValue_Specified := True;
end;

function SellingSummaryType.TotalAuctionSellingValue_Specified(Index: Integer): boolean;
begin
  Result := FTotalAuctionSellingValue_Specified;
end;

procedure SellingSummaryType.SetTotalSoldCount(Index: Integer; const AInteger: Integer);
begin
  FTotalSoldCount := AInteger;
  FTotalSoldCount_Specified := True;
end;

function SellingSummaryType.TotalSoldCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalSoldCount_Specified;
end;

procedure SellingSummaryType.SetTotalSoldValue(Index: Integer; const AAmountType: AmountType);
begin
  FTotalSoldValue := AAmountType;
  FTotalSoldValue_Specified := True;
end;

function SellingSummaryType.TotalSoldValue_Specified(Index: Integer): boolean;
begin
  Result := FTotalSoldValue_Specified;
end;

procedure SellingSummaryType.SetSoldDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FSoldDurationInDays := AInteger;
  FSoldDurationInDays_Specified := True;
end;

function SellingSummaryType.SoldDurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FSoldDurationInDays_Specified;
end;

destructor RecommendationValidationRulesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRelationship)-1 do
    SysUtils.FreeAndNil(FRelationship[I]);
  System.SetLength(FRelationship, 0);
  inherited Destroy;
end;

procedure RecommendationValidationRulesType.SetValueType(Index: Integer; const AValueTypeCodeType: ValueTypeCodeType);
begin
  FValueType := AValueTypeCodeType;
  FValueType_Specified := True;
end;

function RecommendationValidationRulesType.ValueType_Specified(Index: Integer): boolean;
begin
  Result := FValueType_Specified;
end;

procedure RecommendationValidationRulesType.SetMinValues(Index: Integer; const AInteger: Integer);
begin
  FMinValues := AInteger;
  FMinValues_Specified := True;
end;

function RecommendationValidationRulesType.MinValues_Specified(Index: Integer): boolean;
begin
  Result := FMinValues_Specified;
end;

procedure RecommendationValidationRulesType.SetMaxValues(Index: Integer; const AInteger: Integer);
begin
  FMaxValues := AInteger;
  FMaxValues_Specified := True;
end;

function RecommendationValidationRulesType.MaxValues_Specified(Index: Integer): boolean;
begin
  Result := FMaxValues_Specified;
end;

procedure RecommendationValidationRulesType.SetSelectionMode(Index: Integer; const ASelectionModeCodeType: SelectionModeCodeType);
begin
  FSelectionMode := ASelectionModeCodeType;
  FSelectionMode_Specified := True;
end;

function RecommendationValidationRulesType.SelectionMode_Specified(Index: Integer): boolean;
begin
  Result := FSelectionMode_Specified;
end;

procedure RecommendationValidationRulesType.SetAspectUsage(Index: Integer; const AAspectUsageCodeType: AspectUsageCodeType);
begin
  FAspectUsage := AAspectUsageCodeType;
  FAspectUsage_Specified := True;
end;

function RecommendationValidationRulesType.AspectUsage_Specified(Index: Integer): boolean;
begin
  Result := FAspectUsage_Specified;
end;

procedure RecommendationValidationRulesType.SetMaxValueLength(Index: Integer; const AInteger: Integer);
begin
  FMaxValueLength := AInteger;
  FMaxValueLength_Specified := True;
end;

function RecommendationValidationRulesType.MaxValueLength_Specified(Index: Integer): boolean;
begin
  Result := FMaxValueLength_Specified;
end;

procedure RecommendationValidationRulesType.SetProductRequired(Index: Integer; const AProductRequiredCodeType: ProductRequiredCodeType);
begin
  FProductRequired := AProductRequiredCodeType;
  FProductRequired_Specified := True;
end;

function RecommendationValidationRulesType.ProductRequired_Specified(Index: Integer): boolean;
begin
  Result := FProductRequired_Specified;
end;

procedure RecommendationValidationRulesType.SetUsageConstraint(Index: Integer; const AUsageConstraintCodeType: UsageConstraintCodeType);
begin
  FUsageConstraint := AUsageConstraintCodeType;
  FUsageConstraint_Specified := True;
end;

function RecommendationValidationRulesType.UsageConstraint_Specified(Index: Integer): boolean;
begin
  Result := FUsageConstraint_Specified;
end;

procedure RecommendationValidationRulesType.SetConfidence(Index: Integer; const AInteger: Integer);
begin
  FConfidence := AInteger;
  FConfidence_Specified := True;
end;

function RecommendationValidationRulesType.Confidence_Specified(Index: Integer): boolean;
begin
  Result := FConfidence_Specified;
end;

procedure RecommendationValidationRulesType.SetRelationship(Index: Integer; const AArray_Of_NameValueRelationshipType: Array_Of_NameValueRelationshipType);
begin
  FRelationship := AArray_Of_NameValueRelationshipType;
  FRelationship_Specified := True;
end;

function RecommendationValidationRulesType.Relationship_Specified(Index: Integer): boolean;
begin
  Result := FRelationship_Specified;
end;

procedure RecommendationValidationRulesType.SetVariationPicture(Index: Integer; const AVariationPictureRuleCodeType: VariationPictureRuleCodeType);
begin
  FVariationPicture := AVariationPictureRuleCodeType;
  FVariationPicture_Specified := True;
end;

function RecommendationValidationRulesType.VariationPicture_Specified(Index: Integer): boolean;
begin
  Result := FVariationPicture_Specified;
end;

procedure RecommendationValidationRulesType.SetVariationSpecifics(Index: Integer; const AVariationSpecificsRuleCodeType: VariationSpecificsRuleCodeType);
begin
  FVariationSpecifics := AVariationSpecificsRuleCodeType;
  FVariationSpecifics_Specified := True;
end;

function RecommendationValidationRulesType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

procedure RecommendationValidationRulesType.SetValueFormat(Index: Integer; const AValueFormatCodeType: ValueFormatCodeType);
begin
  FValueFormat := AValueFormatCodeType;
  FValueFormat_Specified := True;
end;

function RecommendationValidationRulesType.ValueFormat_Specified(Index: Integer): boolean;
begin
  Result := FValueFormat_Specified;
end;

procedure ListingDesignerType.SetLayoutID(Index: Integer; const AInteger: Integer);
begin
  FLayoutID := AInteger;
  FLayoutID_Specified := True;
end;

function ListingDesignerType.LayoutID_Specified(Index: Integer): boolean;
begin
  Result := FLayoutID_Specified;
end;

procedure ListingDesignerType.SetOptimalPictureSize(Index: Integer; const ABoolean: Boolean);
begin
  FOptimalPictureSize := ABoolean;
  FOptimalPictureSize_Specified := True;
end;

function ListingDesignerType.OptimalPictureSize_Specified(Index: Integer): boolean;
begin
  Result := FOptimalPictureSize_Specified;
end;

procedure ListingDesignerType.SetThemeID(Index: Integer; const AInteger: Integer);
begin
  FThemeID := AInteger;
  FThemeID_Specified := True;
end;

function ListingDesignerType.ThemeID_Specified(Index: Integer): boolean;
begin
  Result := FThemeID_Specified;
end;

destructor PaymentDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FDepositAmount);
  inherited Destroy;
end;

procedure PaymentDetailsType.SetHoursToDeposit(Index: Integer; const AInteger: Integer);
begin
  FHoursToDeposit := AInteger;
  FHoursToDeposit_Specified := True;
end;

function PaymentDetailsType.HoursToDeposit_Specified(Index: Integer): boolean;
begin
  Result := FHoursToDeposit_Specified;
end;

procedure PaymentDetailsType.SetDaysToFullPayment(Index: Integer; const AInteger: Integer);
begin
  FDaysToFullPayment := AInteger;
  FDaysToFullPayment_Specified := True;
end;

function PaymentDetailsType.DaysToFullPayment_Specified(Index: Integer): boolean;
begin
  Result := FDaysToFullPayment_Specified;
end;

procedure PaymentDetailsType.SetDepositAmount(Index: Integer; const AAmountType: AmountType);
begin
  FDepositAmount := AAmountType;
  FDepositAmount_Specified := True;
end;

function PaymentDetailsType.DepositAmount_Specified(Index: Integer): boolean;
begin
  Result := FDepositAmount_Specified;
end;

procedure PaymentDetailsType.SetDepositType(Index: Integer; const ADepositTypeCodeType: DepositTypeCodeType);
begin
  FDepositType := ADepositTypeCodeType;
  FDepositType_Specified := True;
end;

function PaymentDetailsType.DepositType_Specified(Index: Integer): boolean;
begin
  Result := FDepositType_Specified;
end;

procedure QuantityInfoType.SetMinimumRemnantSet(Index: Integer; const AInteger: Integer);
begin
  FMinimumRemnantSet := AInteger;
  FMinimumRemnantSet_Specified := True;
end;

function QuantityInfoType.MinimumRemnantSet_Specified(Index: Integer): boolean;
begin
  Result := FMinimumRemnantSet_Specified;
end;

destructor ShippingOverrideType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FShippingServiceCostOverrideList)-1 do
    SysUtils.FreeAndNil(FShippingServiceCostOverrideList[I]);
  System.SetLength(FShippingServiceCostOverrideList, 0);
  inherited Destroy;
end;

procedure ShippingOverrideType.SetShippingServiceCostOverrideList(Index: Integer; const AShippingServiceCostOverrideListType: ShippingServiceCostOverrideListType);
begin
  FShippingServiceCostOverrideList := AShippingServiceCostOverrideListType;
  FShippingServiceCostOverrideList_Specified := True;
end;

function ShippingOverrideType.ShippingServiceCostOverrideList_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCostOverrideList_Specified;
end;

procedure ShippingOverrideType.SetDispatchTimeMaxOverride(Index: Integer; const AInteger: Integer);
begin
  FDispatchTimeMaxOverride := AInteger;
  FDispatchTimeMaxOverride_Specified := True;
end;

function ShippingOverrideType.DispatchTimeMaxOverride_Specified(Index: Integer): boolean;
begin
  Result := FDispatchTimeMaxOverride_Specified;
end;

destructor MaximumUnpaidItemStrikesInfoDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMaximumUnpaidItemStrikesDuration)-1 do
    SysUtils.FreeAndNil(FMaximumUnpaidItemStrikesDuration[I]);
  System.SetLength(FMaximumUnpaidItemStrikesDuration, 0);
  inherited Destroy;
end;

procedure MaximumUnpaidItemStrikesInfoDetailsType.SetMaximumUnpaidItemStrikesCount(Index: Integer; const AMaximumUnpaidItemStrikesCountDetailsType: MaximumUnpaidItemStrikesCountDetailsType);
begin
  FMaximumUnpaidItemStrikesCount := AMaximumUnpaidItemStrikesCountDetailsType;
  FMaximumUnpaidItemStrikesCount_Specified := True;
end;

function MaximumUnpaidItemStrikesInfoDetailsType.MaximumUnpaidItemStrikesCount_Specified(Index: Integer): boolean;
begin
  Result := FMaximumUnpaidItemStrikesCount_Specified;
end;

procedure MaximumUnpaidItemStrikesInfoDetailsType.SetMaximumUnpaidItemStrikesDuration(Index: Integer; const AArray_Of_MaximumUnpaidItemStrikesDurationDetailsType: Array_Of_MaximumUnpaidItemStrikesDurationDetailsType);
begin
  FMaximumUnpaidItemStrikesDuration := AArray_Of_MaximumUnpaidItemStrikesDurationDetailsType;
  FMaximumUnpaidItemStrikesDuration_Specified := True;
end;

function MaximumUnpaidItemStrikesInfoDetailsType.MaximumUnpaidItemStrikesDuration_Specified(Index: Integer): boolean;
begin
  Result := FMaximumUnpaidItemStrikesDuration_Specified;
end;

procedure VerifiedUserRequirementsDetailsType.SetVerifiedUser(Index: Integer; const ABoolean: Boolean);
begin
  FVerifiedUser := ABoolean;
  FVerifiedUser_Specified := True;
end;

function VerifiedUserRequirementsDetailsType.VerifiedUser_Specified(Index: Integer): boolean;
begin
  Result := FVerifiedUser_Specified;
end;

procedure VerifiedUserRequirementsDetailsType.SetFeedbackScore(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FFeedbackScore := ANumberOfPolicyViolationsDetailsType;
  FFeedbackScore_Specified := True;
end;

function VerifiedUserRequirementsDetailsType.FeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackScore_Specified;
end;

destructor MaximumBuyerPolicyViolationsDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPolicyViolationDuration)-1 do
    SysUtils.FreeAndNil(FPolicyViolationDuration[I]);
  System.SetLength(FPolicyViolationDuration, 0);
  inherited Destroy;
end;

procedure MaximumBuyerPolicyViolationsDetailsType.SetNumberOfPolicyViolations(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FNumberOfPolicyViolations := ANumberOfPolicyViolationsDetailsType;
  FNumberOfPolicyViolations_Specified := True;
end;

function MaximumBuyerPolicyViolationsDetailsType.NumberOfPolicyViolations_Specified(Index: Integer): boolean;
begin
  Result := FNumberOfPolicyViolations_Specified;
end;

procedure MaximumBuyerPolicyViolationsDetailsType.SetPolicyViolationDuration(Index: Integer; const AArray_Of_PolicyViolationDurationDetailsType: Array_Of_PolicyViolationDurationDetailsType);
begin
  FPolicyViolationDuration := AArray_Of_PolicyViolationDurationDetailsType;
  FPolicyViolationDuration_Specified := True;
end;

function MaximumBuyerPolicyViolationsDetailsType.PolicyViolationDuration_Specified(Index: Integer): boolean;
begin
  Result := FPolicyViolationDuration_Specified;
end;

procedure MaximumItemRequirementsDetailsType.SetMaximumItemCount(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FMaximumItemCount := ANumberOfPolicyViolationsDetailsType;
  FMaximumItemCount_Specified := True;
end;

function MaximumItemRequirementsDetailsType.MaximumItemCount_Specified(Index: Integer): boolean;
begin
  Result := FMaximumItemCount_Specified;
end;

procedure MaximumItemRequirementsDetailsType.SetMinimumFeedbackScore(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FMinimumFeedbackScore := ANumberOfPolicyViolationsDetailsType;
  FMinimumFeedbackScore_Specified := True;
end;

function MaximumItemRequirementsDetailsType.MinimumFeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FMinimumFeedbackScore_Specified;
end;

destructor MultiLegShipmentType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingServiceDetails);
  SysUtils.FreeAndNil(FShipToAddress);
  inherited Destroy;
end;

procedure MultiLegShipmentType.SetShippingServiceDetails(Index: Integer; const AMultiLegShippingServiceType: MultiLegShippingServiceType);
begin
  FShippingServiceDetails := AMultiLegShippingServiceType;
  FShippingServiceDetails_Specified := True;
end;

function MultiLegShipmentType.ShippingServiceDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceDetails_Specified;
end;

procedure MultiLegShipmentType.SetShipToAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShipToAddress := AAddressType;
  FShipToAddress_Specified := True;
end;

function MultiLegShipmentType.ShipToAddress_Specified(Index: Integer): boolean;
begin
  Result := FShipToAddress_Specified;
end;

procedure MultiLegShipmentType.SetShippingTimeMin(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMin := AInteger;
  FShippingTimeMin_Specified := True;
end;

function MultiLegShipmentType.ShippingTimeMin_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMin_Specified;
end;

procedure MultiLegShipmentType.SetShippingTimeMax(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMax := AInteger;
  FShippingTimeMax_Specified := True;
end;

function MultiLegShipmentType.ShippingTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMax_Specified;
end;

procedure QuantityRestrictionPerBuyerInfoType.SetMaximumQuantity(Index: Integer; const AInteger: Integer);
begin
  FMaximumQuantity := AInteger;
  FMaximumQuantity_Specified := True;
end;

function QuantityRestrictionPerBuyerInfoType.MaximumQuantity_Specified(Index: Integer): boolean;
begin
  Result := FMaximumQuantity_Specified;
end;

destructor ShippingServiceCostOverrideType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingServiceCost);
  SysUtils.FreeAndNil(FShippingServiceAdditionalCost);
  SysUtils.FreeAndNil(FShippingSurcharge);
  inherited Destroy;
end;

procedure ShippingServiceCostOverrideType.SetShippingServicePriority(Index: Integer; const AInteger: Integer);
begin
  FShippingServicePriority := AInteger;
  FShippingServicePriority_Specified := True;
end;

function ShippingServiceCostOverrideType.ShippingServicePriority_Specified(Index: Integer): boolean;
begin
  Result := FShippingServicePriority_Specified;
end;

procedure ShippingServiceCostOverrideType.SetShippingServiceType(Index: Integer; const AShippingServiceType: ShippingServiceType);
begin
  FShippingServiceType := AShippingServiceType;
  FShippingServiceType_Specified := True;
end;

function ShippingServiceCostOverrideType.ShippingServiceType_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceType_Specified;
end;

procedure ShippingServiceCostOverrideType.SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceCost := AAmountType;
  FShippingServiceCost_Specified := True;
end;

function ShippingServiceCostOverrideType.ShippingServiceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCost_Specified;
end;

procedure ShippingServiceCostOverrideType.SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceAdditionalCost := AAmountType;
  FShippingServiceAdditionalCost_Specified := True;
end;

function ShippingServiceCostOverrideType.ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceAdditionalCost_Specified;
end;

procedure ShippingServiceCostOverrideType.SetShippingSurcharge(Index: Integer; const AAmountType: AmountType);
begin
  FShippingSurcharge := AAmountType;
  FShippingSurcharge_Specified := True;
end;

function ShippingServiceCostOverrideType.ShippingSurcharge_Specified(Index: Integer): boolean;
begin
  Result := FShippingSurcharge_Specified;
end;

destructor SuggestedCategoryType.Destroy;
begin
  SysUtils.FreeAndNil(FCategory);
  inherited Destroy;
end;

procedure SuggestedCategoryType.SetCategory(Index: Integer; const ACategoryType: CategoryType);
begin
  FCategory := ACategoryType;
  FCategory_Specified := True;
end;

function SuggestedCategoryType.Category_Specified(Index: Integer): boolean;
begin
  Result := FCategory_Specified;
end;

procedure StoreCustomListingHeaderLinkType.SetLinkType(Index: Integer; const AStoreCustomListingHeaderLinkCodeType: StoreCustomListingHeaderLinkCodeType);
begin
  FLinkType := AStoreCustomListingHeaderLinkCodeType;
  FLinkType_Specified := True;
end;

function StoreCustomListingHeaderLinkType.LinkType_Specified(Index: Integer): boolean;
begin
  Result := FLinkType_Specified;
end;

destructor PromotionDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FPromotionPrice);
  SysUtils.FreeAndNil(FConvertedPromotionPrice);
  inherited Destroy;
end;

procedure PromotionDetailsType.SetPromotionPrice(Index: Integer; const AAmountType: AmountType);
begin
  FPromotionPrice := AAmountType;
  FPromotionPrice_Specified := True;
end;

function PromotionDetailsType.PromotionPrice_Specified(Index: Integer): boolean;
begin
  Result := FPromotionPrice_Specified;
end;

procedure PromotionDetailsType.SetPromotionPriceType(Index: Integer; const APromotionItemPriceTypeCodeType: PromotionItemPriceTypeCodeType);
begin
  FPromotionPriceType := APromotionItemPriceTypeCodeType;
  FPromotionPriceType_Specified := True;
end;

function PromotionDetailsType.PromotionPriceType_Specified(Index: Integer): boolean;
begin
  Result := FPromotionPriceType_Specified;
end;

procedure PromotionDetailsType.SetBidCount(Index: Integer; const AInteger: Integer);
begin
  FBidCount := AInteger;
  FBidCount_Specified := True;
end;

function PromotionDetailsType.BidCount_Specified(Index: Integer): boolean;
begin
  Result := FBidCount_Specified;
end;

procedure PromotionDetailsType.SetConvertedPromotionPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedPromotionPrice := AAmountType;
  FConvertedPromotionPrice_Specified := True;
end;

function PromotionDetailsType.ConvertedPromotionPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedPromotionPrice_Specified;
end;

procedure SchedulingInfoType.SetMaxScheduledMinutes(Index: Integer; const AInteger: Integer);
begin
  FMaxScheduledMinutes := AInteger;
  FMaxScheduledMinutes_Specified := True;
end;

function SchedulingInfoType.MaxScheduledMinutes_Specified(Index: Integer): boolean;
begin
  Result := FMaxScheduledMinutes_Specified;
end;

procedure SchedulingInfoType.SetMinScheduledMinutes(Index: Integer; const AInteger: Integer);
begin
  FMinScheduledMinutes := AInteger;
  FMinScheduledMinutes_Specified := True;
end;

function SchedulingInfoType.MinScheduledMinutes_Specified(Index: Integer): boolean;
begin
  Result := FMinScheduledMinutes_Specified;
end;

procedure SchedulingInfoType.SetMaxScheduledItems(Index: Integer; const AInteger: Integer);
begin
  FMaxScheduledItems := AInteger;
  FMaxScheduledItems_Specified := True;
end;

function SchedulingInfoType.MaxScheduledItems_Specified(Index: Integer): boolean;
begin
  Result := FMaxScheduledItems_Specified;
end;

procedure PictureSetMemberType.SetMemberURL(Index: Integer; const Astring: string);
begin
  FMemberURL := Astring;
  FMemberURL_Specified := True;
end;

function PictureSetMemberType.MemberURL_Specified(Index: Integer): boolean;
begin
  Result := FMemberURL_Specified;
end;

procedure PictureSetMemberType.SetPictureHeight(Index: Integer; const AInteger: Integer);
begin
  FPictureHeight := AInteger;
  FPictureHeight_Specified := True;
end;

function PictureSetMemberType.PictureHeight_Specified(Index: Integer): boolean;
begin
  Result := FPictureHeight_Specified;
end;

procedure PictureSetMemberType.SetPictureWidth(Index: Integer; const AInteger: Integer);
begin
  FPictureWidth := AInteger;
  FPictureWidth_Specified := True;
end;

function PictureSetMemberType.PictureWidth_Specified(Index: Integer): boolean;
begin
  Result := FPictureWidth_Specified;
end;

destructor SellingManagerAutoListType.Destroy;
begin
  SysUtils.FreeAndNil(FKeepMinActive);
  SysUtils.FreeAndNil(FListAccordingToSchedule);
  inherited Destroy;
end;

procedure SellingManagerAutoListType.SetSourceSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSourceSaleTemplateID := AInt64;
  FSourceSaleTemplateID_Specified := True;
end;

function SellingManagerAutoListType.SourceSaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSourceSaleTemplateID_Specified;
end;

procedure SellingManagerAutoListType.SetKeepMinActive(Index: Integer; const ASellingManagerAutoListMinActiveItemsType: SellingManagerAutoListMinActiveItemsType);
begin
  FKeepMinActive := ASellingManagerAutoListMinActiveItemsType;
  FKeepMinActive_Specified := True;
end;

function SellingManagerAutoListType.KeepMinActive_Specified(Index: Integer): boolean;
begin
  Result := FKeepMinActive_Specified;
end;

procedure SellingManagerAutoListType.SetListAccordingToSchedule(Index: Integer; const ASellingManagerAutoListAccordingToScheduleType: SellingManagerAutoListAccordingToScheduleType);
begin
  FListAccordingToSchedule := ASellingManagerAutoListAccordingToScheduleType;
  FListAccordingToSchedule_Specified := True;
end;

function SellingManagerAutoListType.ListAccordingToSchedule_Specified(Index: Integer): boolean;
begin
  Result := FListAccordingToSchedule_Specified;
end;

destructor MyeBaySellingSummaryType.Destroy;
begin
  SysUtils.FreeAndNil(FTotalAuctionSellingValue);
  SysUtils.FreeAndNil(FTotalSoldValue);
  SysUtils.FreeAndNil(FAmountLimitRemaining);
  inherited Destroy;
end;

procedure MyeBaySellingSummaryType.SetActiveAuctionCount(Index: Integer; const AInteger: Integer);
begin
  FActiveAuctionCount := AInteger;
  FActiveAuctionCount_Specified := True;
end;

function MyeBaySellingSummaryType.ActiveAuctionCount_Specified(Index: Integer): boolean;
begin
  Result := FActiveAuctionCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetAuctionSellingCount(Index: Integer; const AInteger: Integer);
begin
  FAuctionSellingCount := AInteger;
  FAuctionSellingCount_Specified := True;
end;

function MyeBaySellingSummaryType.AuctionSellingCount_Specified(Index: Integer): boolean;
begin
  Result := FAuctionSellingCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetAuctionBidCount(Index: Integer; const AInteger: Integer);
begin
  FAuctionBidCount := AInteger;
  FAuctionBidCount_Specified := True;
end;

function MyeBaySellingSummaryType.AuctionBidCount_Specified(Index: Integer): boolean;
begin
  Result := FAuctionBidCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetTotalAuctionSellingValue(Index: Integer; const AAmountType: AmountType);
begin
  FTotalAuctionSellingValue := AAmountType;
  FTotalAuctionSellingValue_Specified := True;
end;

function MyeBaySellingSummaryType.TotalAuctionSellingValue_Specified(Index: Integer): boolean;
begin
  Result := FTotalAuctionSellingValue_Specified;
end;

procedure MyeBaySellingSummaryType.SetTotalSoldCount(Index: Integer; const AInteger: Integer);
begin
  FTotalSoldCount := AInteger;
  FTotalSoldCount_Specified := True;
end;

function MyeBaySellingSummaryType.TotalSoldCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalSoldCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetTotalSoldValue(Index: Integer; const AAmountType: AmountType);
begin
  FTotalSoldValue := AAmountType;
  FTotalSoldValue_Specified := True;
end;

function MyeBaySellingSummaryType.TotalSoldValue_Specified(Index: Integer): boolean;
begin
  Result := FTotalSoldValue_Specified;
end;

procedure MyeBaySellingSummaryType.SetSoldDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FSoldDurationInDays := AInteger;
  FSoldDurationInDays_Specified := True;
end;

function MyeBaySellingSummaryType.SoldDurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FSoldDurationInDays_Specified;
end;

procedure MyeBaySellingSummaryType.SetClassifiedAdCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdCount := AInteger;
  FClassifiedAdCount_Specified := True;
end;

function MyeBaySellingSummaryType.ClassifiedAdCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetTotalLeadCount(Index: Integer; const AInteger: Integer);
begin
  FTotalLeadCount := AInteger;
  FTotalLeadCount_Specified := True;
end;

function MyeBaySellingSummaryType.TotalLeadCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalLeadCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetClassifiedAdOfferCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdOfferCount := AInteger;
  FClassifiedAdOfferCount_Specified := True;
end;

function MyeBaySellingSummaryType.ClassifiedAdOfferCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdOfferCount_Specified;
end;

procedure MyeBaySellingSummaryType.SetTotalListingsWithLeads(Index: Integer; const AInteger: Integer);
begin
  FTotalListingsWithLeads := AInteger;
  FTotalListingsWithLeads_Specified := True;
end;

function MyeBaySellingSummaryType.TotalListingsWithLeads_Specified(Index: Integer): boolean;
begin
  Result := FTotalListingsWithLeads_Specified;
end;

procedure MyeBaySellingSummaryType.SetQuantityLimitRemaining(Index: Integer; const AInt64: Int64);
begin
  FQuantityLimitRemaining := AInt64;
  FQuantityLimitRemaining_Specified := True;
end;

function MyeBaySellingSummaryType.QuantityLimitRemaining_Specified(Index: Integer): boolean;
begin
  Result := FQuantityLimitRemaining_Specified;
end;

procedure MyeBaySellingSummaryType.SetAmountLimitRemaining(Index: Integer; const AAmountType: AmountType);
begin
  FAmountLimitRemaining := AAmountType;
  FAmountLimitRemaining_Specified := True;
end;

function MyeBaySellingSummaryType.AmountLimitRemaining_Specified(Index: Integer): boolean;
begin
  Result := FAmountLimitRemaining_Specified;
end;

procedure SellingManagerAlertType.SetAlertType(Index: Integer; const ASellingManagerAlertTypeCodeType: SellingManagerAlertTypeCodeType);
begin
  FAlertType := ASellingManagerAlertTypeCodeType;
  FAlertType_Specified := True;
end;

function SellingManagerAlertType.AlertType_Specified(Index: Integer): boolean;
begin
  Result := FAlertType_Specified;
end;

procedure SellingManagerAlertType.SetSoldAlert(Index: Integer; const ASellingManagerSoldListingsPropertyTypeCodeType: SellingManagerSoldListingsPropertyTypeCodeType);
begin
  FSoldAlert := ASellingManagerSoldListingsPropertyTypeCodeType;
  FSoldAlert_Specified := True;
end;

function SellingManagerAlertType.SoldAlert_Specified(Index: Integer): boolean;
begin
  Result := FSoldAlert_Specified;
end;

procedure SellingManagerAlertType.SetInventoryAlert(Index: Integer; const ASellingManagerInventoryPropertyTypeCodeType: SellingManagerInventoryPropertyTypeCodeType);
begin
  FInventoryAlert := ASellingManagerInventoryPropertyTypeCodeType;
  FInventoryAlert_Specified := True;
end;

function SellingManagerAlertType.InventoryAlert_Specified(Index: Integer): boolean;
begin
  Result := FInventoryAlert_Specified;
end;

procedure SellingManagerAlertType.SetAutomationAlert(Index: Integer; const ASellingManagerAutomationPropertyTypeCodeType: SellingManagerAutomationPropertyTypeCodeType);
begin
  FAutomationAlert := ASellingManagerAutomationPropertyTypeCodeType;
  FAutomationAlert_Specified := True;
end;

function SellingManagerAlertType.AutomationAlert_Specified(Index: Integer): boolean;
begin
  Result := FAutomationAlert_Specified;
end;

procedure SellingManagerAlertType.SetPaisaPayAlert(Index: Integer; const ASellingManagerPaisaPayPropertyTypeCodeType: SellingManagerPaisaPayPropertyTypeCodeType);
begin
  FPaisaPayAlert := ASellingManagerPaisaPayPropertyTypeCodeType;
  FPaisaPayAlert_Specified := True;
end;

function SellingManagerAlertType.PaisaPayAlert_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayAlert_Specified;
end;

procedure SellingManagerAlertType.SetGeneralAlert(Index: Integer; const ASellingManagerGeneralPropertyTypeCodeType: SellingManagerGeneralPropertyTypeCodeType);
begin
  FGeneralAlert := ASellingManagerGeneralPropertyTypeCodeType;
  FGeneralAlert_Specified := True;
end;

function SellingManagerAlertType.GeneralAlert_Specified(Index: Integer): boolean;
begin
  Result := FGeneralAlert_Specified;
end;

procedure SellingManagerAlertType.SetDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FDurationInDays := AInteger;
  FDurationInDays_Specified := True;
end;

function SellingManagerAlertType.DurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FDurationInDays_Specified;
end;

procedure SellingManagerAlertType.SetCount(Index: Integer; const AInt64: Int64);
begin
  FCount := AInt64;
  FCount_Specified := True;
end;

function SellingManagerAlertType.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure EndItemRequestContainerType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function EndItemRequestContainerType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure EndItemRequestContainerType.SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
begin
  FEndingReason := AEndReasonCodeType;
  FEndingReason_Specified := True;
end;

function EndItemRequestContainerType.EndingReason_Specified(Index: Integer): boolean;
begin
  Result := FEndingReason_Specified;
end;

procedure EndItemRequestContainerType.SetMessageID(Index: Integer; const Astring: string);
begin
  FMessageID := Astring;
  FMessageID_Specified := True;
end;

function EndItemRequestContainerType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

procedure EndItemRequestContainerType.SetSellerInventoryID(Index: Integer; const Astring: string);
begin
  FSellerInventoryID := Astring;
  FSellerInventoryID_Specified := True;
end;

function EndItemRequestContainerType.SellerInventoryID_Specified(Index: Integer): boolean;
begin
  Result := FSellerInventoryID_Specified;
end;

destructor SellerPaymentPreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FSellerPaymentAddress);
  inherited Destroy;
end;

procedure SellerPaymentPreferencesType.SetAlwaysUseThisPaymentAddress(Index: Integer; const ABoolean: Boolean);
begin
  FAlwaysUseThisPaymentAddress := ABoolean;
  FAlwaysUseThisPaymentAddress_Specified := True;
end;

function SellerPaymentPreferencesType.AlwaysUseThisPaymentAddress_Specified(Index: Integer): boolean;
begin
  Result := FAlwaysUseThisPaymentAddress_Specified;
end;

procedure SellerPaymentPreferencesType.SetDisplayPayNowButton(Index: Integer; const ADisplayPayNowButtonCodeType: DisplayPayNowButtonCodeType);
begin
  FDisplayPayNowButton := ADisplayPayNowButtonCodeType;
  FDisplayPayNowButton_Specified := True;
end;

function SellerPaymentPreferencesType.DisplayPayNowButton_Specified(Index: Integer): boolean;
begin
  Result := FDisplayPayNowButton_Specified;
end;

procedure SellerPaymentPreferencesType.SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalPreferred := ABoolean;
  FPayPalPreferred_Specified := True;
end;

function SellerPaymentPreferencesType.PayPalPreferred_Specified(Index: Integer): boolean;
begin
  Result := FPayPalPreferred_Specified;
end;

procedure SellerPaymentPreferencesType.SetDefaultPayPalEmailAddress(Index: Integer; const Astring: string);
begin
  FDefaultPayPalEmailAddress := Astring;
  FDefaultPayPalEmailAddress_Specified := True;
end;

function SellerPaymentPreferencesType.DefaultPayPalEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FDefaultPayPalEmailAddress_Specified;
end;

procedure SellerPaymentPreferencesType.SetPayPalAlwaysOn(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalAlwaysOn := ABoolean;
  FPayPalAlwaysOn_Specified := True;
end;

function SellerPaymentPreferencesType.PayPalAlwaysOn_Specified(Index: Integer): boolean;
begin
  Result := FPayPalAlwaysOn_Specified;
end;

procedure SellerPaymentPreferencesType.SetSellerPaymentAddress(Index: Integer; const AAddressType: AddressType);
begin
  FSellerPaymentAddress := AAddressType;
  FSellerPaymentAddress_Specified := True;
end;

function SellerPaymentPreferencesType.SellerPaymentAddress_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentAddress_Specified;
end;

procedure SellerPaymentPreferencesType.SetUPSRateOption(Index: Integer; const AUPSRateOptionCodeType: UPSRateOptionCodeType);
begin
  FUPSRateOption := AUPSRateOptionCodeType;
  FUPSRateOption_Specified := True;
end;

function SellerPaymentPreferencesType.UPSRateOption_Specified(Index: Integer): boolean;
begin
  Result := FUPSRateOption_Specified;
end;

procedure SellerPaymentPreferencesType.SetFedExRateOption(Index: Integer; const AFedExRateOptionCodeType: FedExRateOptionCodeType);
begin
  FFedExRateOption := AFedExRateOptionCodeType;
  FFedExRateOption_Specified := True;
end;

function SellerPaymentPreferencesType.FedExRateOption_Specified(Index: Integer): boolean;
begin
  Result := FFedExRateOption_Specified;
end;

procedure SellerPaymentPreferencesType.SetUSPSRateOption(Index: Integer; const AUSPSRateOptionCodeType: USPSRateOptionCodeType);
begin
  FUSPSRateOption := AUSPSRateOptionCodeType;
  FUSPSRateOption_Specified := True;
end;

function SellerPaymentPreferencesType.USPSRateOption_Specified(Index: Integer): boolean;
begin
  Result := FUSPSRateOption_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetDelayBeforeOpeningDispute(Index: Integer; const AInteger: Integer);
begin
  FDelayBeforeOpeningDispute := AInteger;
  FDelayBeforeOpeningDispute_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.DelayBeforeOpeningDispute_Specified(Index: Integer): boolean;
begin
  Result := FDelayBeforeOpeningDispute_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetOptInStatus(Index: Integer; const ABoolean: Boolean);
begin
  FOptInStatus := ABoolean;
  FOptInStatus_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.OptInStatus_Specified(Index: Integer): boolean;
begin
  Result := FOptInStatus_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetAutoRelist(Index: Integer; const ABoolean: Boolean);
begin
  FAutoRelist := ABoolean;
  FAutoRelist_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.AutoRelist_Specified(Index: Integer): boolean;
begin
  Result := FAutoRelist_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetRemoveAllExcludedUsers(Index: Integer; const ABoolean: Boolean);
begin
  FRemoveAllExcludedUsers := ABoolean;
  FRemoveAllExcludedUsers_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.RemoveAllExcludedUsers_Specified(Index: Integer): boolean;
begin
  Result := FRemoveAllExcludedUsers_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetExcludedUser(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FExcludedUser := ASellerExcludeShipToLocationPreferencesType;
  FExcludedUser_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.ExcludedUser_Specified(Index: Integer): boolean;
begin
  Result := FExcludedUser_Specified;
end;

procedure UnpaidItemAssistancePreferencesType.SetAutoOptDonationRefund(Index: Integer; const ABoolean: Boolean);
begin
  FAutoOptDonationRefund := ABoolean;
  FAutoOptDonationRefund_Specified := True;
end;

function UnpaidItemAssistancePreferencesType.AutoOptDonationRefund_Specified(Index: Integer): boolean;
begin
  Result := FAutoOptDonationRefund_Specified;
end;

procedure ProductDetailsType.SetProductIdentifierUnavailableText(Index: Integer; const Astring: string);
begin
  FProductIdentifierUnavailableText := Astring;
  FProductIdentifierUnavailableText_Specified := True;
end;

function ProductDetailsType.ProductIdentifierUnavailableText_Specified(Index: Integer): boolean;
begin
  Result := FProductIdentifierUnavailableText_Specified;
end;

procedure NotificationEventPropertyType.SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
begin
  FEventType := ANotificationEventTypeCodeType;
  FEventType_Specified := True;
end;

function NotificationEventPropertyType.EventType_Specified(Index: Integer): boolean;
begin
  Result := FEventType_Specified;
end;

procedure NotificationEventPropertyType.SetName_(Index: Integer; const ANotificationEventPropertyNameCodeType: NotificationEventPropertyNameCodeType);
begin
  FName_ := ANotificationEventPropertyNameCodeType;
  FName__Specified := True;
end;

function NotificationEventPropertyType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure NotificationEventPropertyType.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function NotificationEventPropertyType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor NotificationUserDataType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSummarySchedule)-1 do
    SysUtils.FreeAndNil(FSummarySchedule[I]);
  System.SetLength(FSummarySchedule, 0);
  SysUtils.FreeAndNil(FSMSSubscription);
  inherited Destroy;
end;

procedure NotificationUserDataType.SetSMSSubscription(Index: Integer; const ASMSSubscriptionType: SMSSubscriptionType);
begin
  FSMSSubscription := ASMSSubscriptionType;
  FSMSSubscription_Specified := True;
end;

function NotificationUserDataType.SMSSubscription_Specified(Index: Integer): boolean;
begin
  Result := FSMSSubscription_Specified;
end;

procedure NotificationUserDataType.SetSummarySchedule(Index: Integer; const AArray_Of_SummaryEventScheduleType: Array_Of_SummaryEventScheduleType);
begin
  FSummarySchedule := AArray_Of_SummaryEventScheduleType;
  FSummarySchedule_Specified := True;
end;

function NotificationUserDataType.SummarySchedule_Specified(Index: Integer): boolean;
begin
  Result := FSummarySchedule_Specified;
end;

procedure NotificationUserDataType.SetExternalUserData(Index: Integer; const Astring: string);
begin
  FExternalUserData := Astring;
  FExternalUserData_Specified := True;
end;

function NotificationUserDataType.ExternalUserData_Specified(Index: Integer): boolean;
begin
  Result := FExternalUserData_Specified;
end;

procedure SellingManagerSearchType.SetSearchType(Index: Integer; const ASellingManagerSearchTypeCodeType: SellingManagerSearchTypeCodeType);
begin
  FSearchType := ASellingManagerSearchTypeCodeType;
  FSearchType_Specified := True;
end;

function SellingManagerSearchType.SearchType_Specified(Index: Integer): boolean;
begin
  Result := FSearchType_Specified;
end;

procedure SellingManagerSearchType.SetSearchValue(Index: Integer; const Astring: string);
begin
  FSearchValue := Astring;
  FSearchValue_Specified := True;
end;

function SellingManagerSearchType.SearchValue_Specified(Index: Integer): boolean;
begin
  Result := FSearchValue_Specified;
end;

procedure UnitOfMeasurementType.SetAlternateText(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FAlternateText := ASellerExcludeShipToLocationPreferencesType;
  FAlternateText_Specified := True;
end;

function UnitOfMeasurementType.AlternateText_Specified(Index: Integer): boolean;
begin
  Result := FAlternateText_Specified;
end;

procedure UnitOfMeasurementType.SetSuggestedText(Index: Integer; const Astring: string);
begin
  FSuggestedText := Astring;
  FSuggestedText_Specified := True;
end;

function UnitOfMeasurementType.SuggestedText_Specified(Index: Integer): boolean;
begin
  Result := FSuggestedText_Specified;
end;

procedure VeROReportedItemType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VeROReportedItemType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VeROReportedItemType.SetItemStatus(Index: Integer; const AVeROItemStatusCodeType: VeROItemStatusCodeType);
begin
  FItemStatus := AVeROItemStatusCodeType;
  FItemStatus_Specified := True;
end;

function VeROReportedItemType.ItemStatus_Specified(Index: Integer): boolean;
begin
  Result := FItemStatus_Specified;
end;

procedure VeROReportedItemType.SetItemReasonForFailure(Index: Integer; const Astring: string);
begin
  FItemReasonForFailure := Astring;
  FItemReasonForFailure_Specified := True;
end;

function VeROReportedItemType.ItemReasonForFailure_Specified(Index: Integer): boolean;
begin
  Result := FItemReasonForFailure_Specified;
end;

procedure SMSSubscriptionType.SetSMSPhone(Index: Integer; const Astring: string);
begin
  FSMSPhone := Astring;
  FSMSPhone_Specified := True;
end;

function SMSSubscriptionType.SMSPhone_Specified(Index: Integer): boolean;
begin
  Result := FSMSPhone_Specified;
end;

procedure SMSSubscriptionType.SetUserStatus(Index: Integer; const ASMSSubscriptionUserStatusCodeType: SMSSubscriptionUserStatusCodeType);
begin
  FUserStatus := ASMSSubscriptionUserStatusCodeType;
  FUserStatus_Specified := True;
end;

function SMSSubscriptionType.UserStatus_Specified(Index: Integer): boolean;
begin
  Result := FUserStatus_Specified;
end;

procedure SMSSubscriptionType.SetCarrierID(Index: Integer; const AWirelessCarrierIDCodeType: WirelessCarrierIDCodeType);
begin
  FCarrierID := AWirelessCarrierIDCodeType;
  FCarrierID_Specified := True;
end;

function SMSSubscriptionType.CarrierID_Specified(Index: Integer): boolean;
begin
  Result := FCarrierID_Specified;
end;

procedure SMSSubscriptionType.SetErrorCode(Index: Integer; const ASMSSubscriptionErrorCodeCodeType: SMSSubscriptionErrorCodeCodeType);
begin
  FErrorCode := ASMSSubscriptionErrorCodeCodeType;
  FErrorCode_Specified := True;
end;

function SMSSubscriptionType.ErrorCode_Specified(Index: Integer): boolean;
begin
  Result := FErrorCode_Specified;
end;

procedure SMSSubscriptionType.SetItemToUnsubscribe(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemToUnsubscribe := AItemIDType;
  FItemToUnsubscribe_Specified := True;
end;

function SMSSubscriptionType.ItemToUnsubscribe_Specified(Index: Integer): boolean;
begin
  Result := FItemToUnsubscribe_Specified;
end;

procedure MyMessagesFolderType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function MyMessagesFolderType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure MyMessagesFolderType.SetFolderName(Index: Integer; const Astring: string);
begin
  FFolderName := Astring;
  FFolderName_Specified := True;
end;

function MyMessagesFolderType.FolderName_Specified(Index: Integer): boolean;
begin
  Result := FFolderName_Specified;
end;

procedure MyMessagesFolderSummaryType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function MyMessagesFolderSummaryType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure MyMessagesFolderSummaryType.SetFolderName(Index: Integer; const Astring: string);
begin
  FFolderName := Astring;
  FFolderName_Specified := True;
end;

function MyMessagesFolderSummaryType.FolderName_Specified(Index: Integer): boolean;
begin
  Result := FFolderName_Specified;
end;

procedure MyMessagesFolderSummaryType.SetNewAlertCount(Index: Integer; const AInteger: Integer);
begin
  FNewAlertCount := AInteger;
  FNewAlertCount_Specified := True;
end;

function MyMessagesFolderSummaryType.NewAlertCount_Specified(Index: Integer): boolean;
begin
  Result := FNewAlertCount_Specified;
end;

procedure MyMessagesFolderSummaryType.SetNewMessageCount(Index: Integer; const AInteger: Integer);
begin
  FNewMessageCount := AInteger;
  FNewMessageCount_Specified := True;
end;

function MyMessagesFolderSummaryType.NewMessageCount_Specified(Index: Integer): boolean;
begin
  Result := FNewMessageCount_Specified;
end;

procedure MyMessagesFolderSummaryType.SetTotalAlertCount(Index: Integer; const AInteger: Integer);
begin
  FTotalAlertCount := AInteger;
  FTotalAlertCount_Specified := True;
end;

function MyMessagesFolderSummaryType.TotalAlertCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalAlertCount_Specified;
end;

procedure MyMessagesFolderSummaryType.SetTotalMessageCount(Index: Integer; const AInteger: Integer);
begin
  FTotalMessageCount := AInteger;
  FTotalMessageCount_Specified := True;
end;

function MyMessagesFolderSummaryType.TotalMessageCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalMessageCount_Specified;
end;

procedure MyMessagesFolderSummaryType.SetNewHighPriorityCount(Index: Integer; const AInteger: Integer);
begin
  FNewHighPriorityCount := AInteger;
  FNewHighPriorityCount_Specified := True;
end;

function MyMessagesFolderSummaryType.NewHighPriorityCount_Specified(Index: Integer): boolean;
begin
  Result := FNewHighPriorityCount_Specified;
end;

procedure MyMessagesFolderSummaryType.SetTotalHighPriorityCount(Index: Integer; const AInteger: Integer);
begin
  FTotalHighPriorityCount := AInteger;
  FTotalHighPriorityCount_Specified := True;
end;

function MyMessagesFolderSummaryType.TotalHighPriorityCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalHighPriorityCount_Specified;
end;

destructor ValueRecommendationType.Destroy;
begin
  SysUtils.FreeAndNil(FValidationRules);
  inherited Destroy;
end;

procedure ValueRecommendationType.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function ValueRecommendationType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure ValueRecommendationType.SetValidationRules(Index: Integer; const ARecommendationValidationRulesType: RecommendationValidationRulesType);
begin
  FValidationRules := ARecommendationValidationRulesType;
  FValidationRules_Specified := True;
end;

function ValueRecommendationType.ValidationRules_Specified(Index: Integer): boolean;
begin
  Result := FValidationRules_Specified;
end;

procedure NameValueRelationshipType.SetParentName(Index: Integer; const Astring: string);
begin
  FParentName := Astring;
  FParentName_Specified := True;
end;

function NameValueRelationshipType.ParentName_Specified(Index: Integer): boolean;
begin
  Result := FParentName_Specified;
end;

procedure NameValueRelationshipType.SetParentValue(Index: Integer; const Astring: string);
begin
  FParentValue := Astring;
  FParentValue_Specified := True;
end;

function NameValueRelationshipType.ParentValue_Specified(Index: Integer): boolean;
begin
  Result := FParentValue_Specified;
end;

destructor NameRecommendationType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FValueRecommendation)-1 do
    SysUtils.FreeAndNil(FValueRecommendation[I]);
  System.SetLength(FValueRecommendation, 0);
  SysUtils.FreeAndNil(FValidationRules);
  inherited Destroy;
end;

procedure NameRecommendationType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function NameRecommendationType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure NameRecommendationType.SetValidationRules(Index: Integer; const ARecommendationValidationRulesType: RecommendationValidationRulesType);
begin
  FValidationRules := ARecommendationValidationRulesType;
  FValidationRules_Specified := True;
end;

function NameRecommendationType.ValidationRules_Specified(Index: Integer): boolean;
begin
  Result := FValidationRules_Specified;
end;

procedure NameRecommendationType.SetValueRecommendation(Index: Integer; const AArray_Of_ValueRecommendationType: Array_Of_ValueRecommendationType);
begin
  FValueRecommendation := AArray_Of_ValueRecommendationType;
  FValueRecommendation_Specified := True;
end;

function NameRecommendationType.ValueRecommendation_Specified(Index: Integer): boolean;
begin
  Result := FValueRecommendation_Specified;
end;

procedure NameRecommendationType.SetHelpURL(Index: Integer; const Astring: string);
begin
  FHelpURL := Astring;
  FHelpURL_Specified := True;
end;

function NameRecommendationType.HelpURL_Specified(Index: Integer): boolean;
begin
  Result := FHelpURL_Specified;
end;

procedure NameRecommendationType.SetSource(Index: Integer; const AItemSpecificSourceCodeType: ItemSpecificSourceCodeType);
begin
  FSource := AItemSpecificSourceCodeType;
  FSource_Specified := True;
end;

function NameRecommendationType.Source_Specified(Index: Integer): boolean;
begin
  Result := FSource_Specified;
end;

procedure NameRecommendationType.SetHelpText(Index: Integer; const Astring: string);
begin
  FHelpText := Astring;
  FHelpText_Specified := True;
end;

function NameRecommendationType.HelpText_Specified(Index: Integer): boolean;
begin
  Result := FHelpText_Specified;
end;

procedure MyeBayFavoriteSellerType.SetUserID(Index: Integer; const Astring: string);
begin
  FUserID := Astring;
  FUserID_Specified := True;
end;

function MyeBayFavoriteSellerType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure MyeBayFavoriteSellerType.SetStoreName(Index: Integer; const Astring: string);
begin
  FStoreName := Astring;
  FStoreName_Specified := True;
end;

function MyeBayFavoriteSellerType.StoreName_Specified(Index: Integer): boolean;
begin
  Result := FStoreName_Specified;
end;

destructor PicturesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecificPictureSet)-1 do
    SysUtils.FreeAndNil(FVariationSpecificPictureSet[I]);
  System.SetLength(FVariationSpecificPictureSet, 0);
  inherited Destroy;
end;

procedure PicturesType.SetVariationSpecificName(Index: Integer; const Astring: string);
begin
  FVariationSpecificName := Astring;
  FVariationSpecificName_Specified := True;
end;

function PicturesType.VariationSpecificName_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecificName_Specified;
end;

procedure PicturesType.SetVariationSpecificPictureSet(Index: Integer; const AArray_Of_VariationSpecificPictureSetType: Array_Of_VariationSpecificPictureSetType);
begin
  FVariationSpecificPictureSet := AArray_Of_VariationSpecificPictureSetType;
  FVariationSpecificPictureSet_Specified := True;
end;

function PicturesType.VariationSpecificPictureSet_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecificPictureSet_Specified;
end;

procedure ProductSuggestionType.SetTitle(Index: Integer; const Astring: string);
begin
  FTitle := Astring;
  FTitle_Specified := True;
end;

function ProductSuggestionType.Title_Specified(Index: Integer): boolean;
begin
  Result := FTitle_Specified;
end;

procedure ProductSuggestionType.SetEPID(Index: Integer; const Astring: string);
begin
  FEPID := Astring;
  FEPID_Specified := True;
end;

function ProductSuggestionType.EPID_Specified(Index: Integer): boolean;
begin
  Result := FEPID_Specified;
end;

procedure ProductSuggestionType.SetStockPhoto(Index: Integer; const Astring: string);
begin
  FStockPhoto := Astring;
  FStockPhoto_Specified := True;
end;

function ProductSuggestionType.StockPhoto_Specified(Index: Integer): boolean;
begin
  Result := FStockPhoto_Specified;
end;

procedure ProductSuggestionType.SetRecommended(Index: Integer; const ABoolean: Boolean);
begin
  FRecommended := ABoolean;
  FRecommended_Specified := True;
end;

function ProductSuggestionType.Recommended_Specified(Index: Integer): boolean;
begin
  Result := FRecommended_Specified;
end;

procedure TicketListingDetailsType.SetEventTitle(Index: Integer; const Astring: string);
begin
  FEventTitle := Astring;
  FEventTitle_Specified := True;
end;

function TicketListingDetailsType.EventTitle_Specified(Index: Integer): boolean;
begin
  Result := FEventTitle_Specified;
end;

procedure TicketListingDetailsType.SetVenue(Index: Integer; const Astring: string);
begin
  FVenue := Astring;
  FVenue_Specified := True;
end;

function TicketListingDetailsType.Venue_Specified(Index: Integer): boolean;
begin
  Result := FVenue_Specified;
end;

procedure TicketListingDetailsType.SetPrintedDate(Index: Integer; const Astring: string);
begin
  FPrintedDate := Astring;
  FPrintedDate_Specified := True;
end;

function TicketListingDetailsType.PrintedDate_Specified(Index: Integer): boolean;
begin
  Result := FPrintedDate_Specified;
end;

procedure TicketListingDetailsType.SetPrintedTime(Index: Integer; const Astring: string);
begin
  FPrintedTime := Astring;
  FPrintedTime_Specified := True;
end;

function TicketListingDetailsType.PrintedTime_Specified(Index: Integer): boolean;
begin
  Result := FPrintedTime_Specified;
end;

procedure UserIdentityType.Settype_(Index: Integer; const AUserIdentityCodeType: UserIdentityCodeType);
begin
  Ftype_ := AUserIdentityCodeType;
  Ftype__Specified := True;
end;

function UserIdentityType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

procedure TransactionReferenceType.Settype_(Index: Integer; const ATransactionReferenceCodeType: TransactionReferenceCodeType);
begin
  Ftype_ := ATransactionReferenceCodeType;
  Ftype__Specified := True;
end;

function TransactionReferenceType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

procedure StorefrontType.SetStoreCategoryName(Index: Integer; const Astring: string);
begin
  FStoreCategoryName := Astring;
  FStoreCategoryName_Specified := True;
end;

function StorefrontType.StoreCategoryName_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategoryName_Specified;
end;

procedure StorefrontType.SetStoreCategory2Name(Index: Integer; const Astring: string);
begin
  FStoreCategory2Name := Astring;
  FStoreCategory2Name_Specified := True;
end;

function StorefrontType.StoreCategory2Name_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategory2Name_Specified;
end;

procedure StorefrontType.SetStoreURL(Index: Integer; const Astring: string);
begin
  FStoreURL := Astring;
  FStoreURL_Specified := True;
end;

function StorefrontType.StoreURL_Specified(Index: Integer): boolean;
begin
  Result := FStoreURL_Specified;
end;

procedure StorefrontType.SetStoreName(Index: Integer; const Astring: string);
begin
  FStoreName := Astring;
  FStoreName_Specified := True;
end;

function StorefrontType.StoreName_Specified(Index: Integer): boolean;
begin
  Result := FStoreName_Specified;
end;

procedure ItemTransactionIDType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ItemTransactionIDType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ItemTransactionIDType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function ItemTransactionIDType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure ItemTransactionIDType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function ItemTransactionIDType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure ItemTransactionIDType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function ItemTransactionIDType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure ItemPolicyViolationType.SetPolicyID(Index: Integer; const AInt64: Int64);
begin
  FPolicyID := AInt64;
  FPolicyID_Specified := True;
end;

function ItemPolicyViolationType.PolicyID_Specified(Index: Integer): boolean;
begin
  Result := FPolicyID_Specified;
end;

procedure ItemPolicyViolationType.SetPolicyText(Index: Integer; const Astring: string);
begin
  FPolicyText := Astring;
  FPolicyText_Specified := True;
end;

function ItemPolicyViolationType.PolicyText_Specified(Index: Integer): boolean;
begin
  Result := FPolicyText_Specified;
end;

procedure NameValueListType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function NameValueListType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure NameValueListType.SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FValue := ASellerExcludeShipToLocationPreferencesType;
  FValue_Specified := True;
end;

function NameValueListType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure NameValueListType.SetSource(Index: Integer; const AItemSpecificSourceCodeType: ItemSpecificSourceCodeType);
begin
  FSource := AItemSpecificSourceCodeType;
  FSource_Specified := True;
end;

function NameValueListType.Source_Specified(Index: Integer): boolean;
begin
  Result := FSource_Specified;
end;

procedure GiftSummaryType.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function GiftSummaryType.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure MaximumUnpaidItemStrikesDurationDetailsType.SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
begin
  FPeriod := APeriodCodeType;
  FPeriod_Specified := True;
end;

function MaximumUnpaidItemStrikesDurationDetailsType.Period_Specified(Index: Integer): boolean;
begin
  Result := FPeriod_Specified;
end;

procedure MaximumUnpaidItemStrikesDurationDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function MaximumUnpaidItemStrikesDurationDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure MessageMediaType.SetMediaURL(Index: Integer; const Astring: string);
begin
  FMediaURL := Astring;
  FMediaURL_Specified := True;
end;

function MessageMediaType.MediaURL_Specified(Index: Integer): boolean;
begin
  Result := FMediaURL_Specified;
end;

procedure MessageMediaType.SetMediaName(Index: Integer; const Astring: string);
begin
  FMediaName := Astring;
  FMediaName_Specified := True;
end;

function MessageMediaType.MediaName_Specified(Index: Integer): boolean;
begin
  Result := FMediaName_Specified;
end;

procedure PolicyViolationDurationDetailsType.SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
begin
  FPeriod := APeriodCodeType;
  FPeriod_Specified := True;
end;

function PolicyViolationDurationDetailsType.Period_Specified(Index: Integer): boolean;
begin
  Result := FPeriod_Specified;
end;

procedure PolicyViolationDurationDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function PolicyViolationDurationDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ModifyNameType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function ModifyNameType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure ModifyNameType.SetNewName(Index: Integer; const Astring: string);
begin
  FNewName := Astring;
  FNewName_Specified := True;
end;

function ModifyNameType.NewName_Specified(Index: Integer): boolean;
begin
  Result := FNewName_Specified;
end;

procedure ListingCheckoutRedirectPreferenceType.SetProStoresStoreName(Index: Integer; const Astring: string);
begin
  FProStoresStoreName := Astring;
  FProStoresStoreName_Specified := True;
end;

function ListingCheckoutRedirectPreferenceType.ProStoresStoreName_Specified(Index: Integer): boolean;
begin
  Result := FProStoresStoreName_Specified;
end;

procedure ListingCheckoutRedirectPreferenceType.SetSellerThirdPartyUsername(Index: Integer; const Astring: string);
begin
  FSellerThirdPartyUsername := Astring;
  FSellerThirdPartyUsername_Specified := True;
end;

function ListingCheckoutRedirectPreferenceType.SellerThirdPartyUsername_Specified(Index: Integer): boolean;
begin
  Result := FSellerThirdPartyUsername_Specified;
end;

procedure LineItemType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function LineItemType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure LineItemType.SetCountryOfOrigin(Index: Integer; const Astring: string);
begin
  FCountryOfOrigin := Astring;
  FCountryOfOrigin_Specified := True;
end;

function LineItemType.CountryOfOrigin_Specified(Index: Integer): boolean;
begin
  Result := FCountryOfOrigin_Specified;
end;

procedure LineItemType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function LineItemType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure MetadataType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function MetadataType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure MetadataType.SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FValue := ASellerExcludeShipToLocationPreferencesType;
  FValue_Specified := True;
end;

function MetadataType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor ListingRecommendationType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMetadata)-1 do
    SysUtils.FreeAndNil(FMetadata[I]);
  System.SetLength(FMetadata, 0);
  inherited Destroy;
end;

procedure ListingRecommendationType.SetType_(Index: Integer; const Astring: string);
begin
  FType_ := Astring;
  FType__Specified := True;
end;

function ListingRecommendationType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure ListingRecommendationType.SetGroup(Index: Integer; const Astring: string);
begin
  FGroup := Astring;
  FGroup_Specified := True;
end;

function ListingRecommendationType.Group_Specified(Index: Integer): boolean;
begin
  Result := FGroup_Specified;
end;

procedure ListingRecommendationType.SetFieldName(Index: Integer; const Astring: string);
begin
  FFieldName := Astring;
  FFieldName_Specified := True;
end;

function ListingRecommendationType.FieldName_Specified(Index: Integer): boolean;
begin
  Result := FFieldName_Specified;
end;

procedure ListingRecommendationType.SetCode(Index: Integer; const Astring: string);
begin
  FCode := Astring;
  FCode_Specified := True;
end;

function ListingRecommendationType.Code_Specified(Index: Integer): boolean;
begin
  Result := FCode_Specified;
end;

procedure ListingRecommendationType.SetValue(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FValue := ASellerExcludeShipToLocationPreferencesType;
  FValue_Specified := True;
end;

function ListingRecommendationType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure ListingRecommendationType.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function ListingRecommendationType.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure ListingRecommendationType.SetMetadata(Index: Integer; const AArray_Of_MetadataType: Array_Of_MetadataType);
begin
  FMetadata := AArray_Of_MetadataType;
  FMetadata_Specified := True;
end;

function ListingRecommendationType.Metadata_Specified(Index: Integer): boolean;
begin
  Result := FMetadata_Specified;
end;

procedure LookupAttributeType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LookupAttributeType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure LookupAttributeType.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function LookupAttributeType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor ShipmentTrackingDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FShipmentLineItem)-1 do
    SysUtils.FreeAndNil(FShipmentLineItem[I]);
  System.SetLength(FShipmentLineItem, 0);
  inherited Destroy;
end;

procedure ShipmentTrackingDetailsType.SetShippingCarrierUsed(Index: Integer; const Astring: string);
begin
  FShippingCarrierUsed := Astring;
  FShippingCarrierUsed_Specified := True;
end;

function ShipmentTrackingDetailsType.ShippingCarrierUsed_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrierUsed_Specified;
end;

procedure ShipmentTrackingDetailsType.SetShipmentTrackingNumber(Index: Integer; const Astring: string);
begin
  FShipmentTrackingNumber := Astring;
  FShipmentTrackingNumber_Specified := True;
end;

function ShipmentTrackingDetailsType.ShipmentTrackingNumber_Specified(Index: Integer): boolean;
begin
  Result := FShipmentTrackingNumber_Specified;
end;

procedure ShipmentTrackingDetailsType.SetShipmentLineItem(Index: Integer; const AShipmentLineItemType: ShipmentLineItemType);
begin
  FShipmentLineItem := AShipmentLineItemType;
  FShipmentLineItem_Specified := True;
end;

function ShipmentTrackingDetailsType.ShipmentLineItem_Specified(Index: Integer): boolean;
begin
  Result := FShipmentLineItem_Specified;
end;

procedure SellingManagerVendorDetailsType.SetVendorName(Index: Integer; const Astring: string);
begin
  FVendorName := Astring;
  FVendorName_Specified := True;
end;

function SellingManagerVendorDetailsType.VendorName_Specified(Index: Integer): boolean;
begin
  Result := FVendorName_Specified;
end;

procedure SellingManagerVendorDetailsType.SetVendorContactInfo(Index: Integer; const Astring: string);
begin
  FVendorContactInfo := Astring;
  FVendorContactInfo_Specified := True;
end;

function SellingManagerVendorDetailsType.VendorContactInfo_Specified(Index: Integer): boolean;
begin
  Result := FVendorContactInfo_Specified;
end;

destructor SupportedSellerProfileType.Destroy;
begin
  SysUtils.FreeAndNil(FCategoryGroup);
  inherited Destroy;
end;

procedure SupportedSellerProfileType.SetProfileID(Index: Integer; const AInt64: Int64);
begin
  FProfileID := AInt64;
  FProfileID_Specified := True;
end;

function SupportedSellerProfileType.ProfileID_Specified(Index: Integer): boolean;
begin
  Result := FProfileID_Specified;
end;

procedure SupportedSellerProfileType.SetProfileType(Index: Integer; const Astring: string);
begin
  FProfileType := Astring;
  FProfileType_Specified := True;
end;

function SupportedSellerProfileType.ProfileType_Specified(Index: Integer): boolean;
begin
  Result := FProfileType_Specified;
end;

procedure SupportedSellerProfileType.SetProfileName(Index: Integer; const Astring: string);
begin
  FProfileName := Astring;
  FProfileName_Specified := True;
end;

function SupportedSellerProfileType.ProfileName_Specified(Index: Integer): boolean;
begin
  Result := FProfileName_Specified;
end;

procedure SupportedSellerProfileType.SetShortSummary(Index: Integer; const Astring: string);
begin
  FShortSummary := Astring;
  FShortSummary_Specified := True;
end;

function SupportedSellerProfileType.ShortSummary_Specified(Index: Integer): boolean;
begin
  Result := FShortSummary_Specified;
end;

procedure SupportedSellerProfileType.SetCategoryGroup(Index: Integer; const ACategoryGroupType: CategoryGroupType);
begin
  FCategoryGroup := ACategoryGroupType;
  FCategoryGroup_Specified := True;
end;

function SupportedSellerProfileType.CategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FCategoryGroup_Specified;
end;

destructor TaxDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FTaxAmount);
  SysUtils.FreeAndNil(FTaxOnSubtotalAmount);
  SysUtils.FreeAndNil(FTaxOnShippingAmount);
  SysUtils.FreeAndNil(FTaxOnHandlingAmount);
  inherited Destroy;
end;

procedure TaxDetailsType.SetImposition(Index: Integer; const ATaxTypeCodeType: TaxTypeCodeType);
begin
  FImposition := ATaxTypeCodeType;
  FImposition_Specified := True;
end;

function TaxDetailsType.Imposition_Specified(Index: Integer): boolean;
begin
  Result := FImposition_Specified;
end;

procedure TaxDetailsType.SetTaxDescription(Index: Integer; const ATaxDescriptionCodeType: TaxDescriptionCodeType);
begin
  FTaxDescription := ATaxDescriptionCodeType;
  FTaxDescription_Specified := True;
end;

function TaxDetailsType.TaxDescription_Specified(Index: Integer): boolean;
begin
  Result := FTaxDescription_Specified;
end;

procedure TaxDetailsType.SetTaxAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTaxAmount := AAmountType;
  FTaxAmount_Specified := True;
end;

function TaxDetailsType.TaxAmount_Specified(Index: Integer): boolean;
begin
  Result := FTaxAmount_Specified;
end;

procedure TaxDetailsType.SetTaxOnSubtotalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTaxOnSubtotalAmount := AAmountType;
  FTaxOnSubtotalAmount_Specified := True;
end;

function TaxDetailsType.TaxOnSubtotalAmount_Specified(Index: Integer): boolean;
begin
  Result := FTaxOnSubtotalAmount_Specified;
end;

procedure TaxDetailsType.SetTaxOnShippingAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTaxOnShippingAmount := AAmountType;
  FTaxOnShippingAmount_Specified := True;
end;

function TaxDetailsType.TaxOnShippingAmount_Specified(Index: Integer): boolean;
begin
  Result := FTaxOnShippingAmount_Specified;
end;

procedure TaxDetailsType.SetTaxOnHandlingAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTaxOnHandlingAmount := AAmountType;
  FTaxOnHandlingAmount_Specified := True;
end;

function TaxDetailsType.TaxOnHandlingAmount_Specified(Index: Integer): boolean;
begin
  Result := FTaxOnHandlingAmount_Specified;
end;

procedure TaxDetailsType.SetTaxCode(Index: Integer; const Astring: string);
begin
  FTaxCode := Astring;
  FTaxCode_Specified := True;
end;

function TaxDetailsType.TaxCode_Specified(Index: Integer): boolean;
begin
  Result := FTaxCode_Specified;
end;

procedure TaxDetailsType.SetCollectionMethod(Index: Integer; const ACollectionMethodCodeType: CollectionMethodCodeType);
begin
  FCollectionMethod := ACollectionMethodCodeType;
  FCollectionMethod_Specified := True;
end;

function TaxDetailsType.CollectionMethod_Specified(Index: Integer): boolean;
begin
  Result := FCollectionMethod_Specified;
end;

procedure TaxIdentifierAttributeType.Setname_(Index: Integer; const ATaxIdentifierAttributeCodeType: TaxIdentifierAttributeCodeType);
begin
  Fname_ := ATaxIdentifierAttributeCodeType;
  Fname__Specified := True;
end;

function TaxIdentifierAttributeType.name__Specified(Index: Integer): boolean;
begin
  Result := Fname__Specified;
end;

procedure StoreFontType.SetNameFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
begin
  FNameFace := AStoreFontFaceCodeType;
  FNameFace_Specified := True;
end;

function StoreFontType.NameFace_Specified(Index: Integer): boolean;
begin
  Result := FNameFace_Specified;
end;

procedure StoreFontType.SetNameSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
begin
  FNameSize := AStoreFontSizeCodeType;
  FNameSize_Specified := True;
end;

function StoreFontType.NameSize_Specified(Index: Integer): boolean;
begin
  Result := FNameSize_Specified;
end;

procedure StoreFontType.SetNameColor(Index: Integer; const Astring: string);
begin
  FNameColor := Astring;
  FNameColor_Specified := True;
end;

function StoreFontType.NameColor_Specified(Index: Integer): boolean;
begin
  Result := FNameColor_Specified;
end;

procedure StoreFontType.SetTitleFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
begin
  FTitleFace := AStoreFontFaceCodeType;
  FTitleFace_Specified := True;
end;

function StoreFontType.TitleFace_Specified(Index: Integer): boolean;
begin
  Result := FTitleFace_Specified;
end;

procedure StoreFontType.SetTitleSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
begin
  FTitleSize := AStoreFontSizeCodeType;
  FTitleSize_Specified := True;
end;

function StoreFontType.TitleSize_Specified(Index: Integer): boolean;
begin
  Result := FTitleSize_Specified;
end;

procedure StoreFontType.SetTitleColor(Index: Integer; const Astring: string);
begin
  FTitleColor := Astring;
  FTitleColor_Specified := True;
end;

function StoreFontType.TitleColor_Specified(Index: Integer): boolean;
begin
  Result := FTitleColor_Specified;
end;

procedure StoreFontType.SetDescFace(Index: Integer; const AStoreFontFaceCodeType: StoreFontFaceCodeType);
begin
  FDescFace := AStoreFontFaceCodeType;
  FDescFace_Specified := True;
end;

function StoreFontType.DescFace_Specified(Index: Integer): boolean;
begin
  Result := FDescFace_Specified;
end;

procedure StoreFontType.SetDescSize(Index: Integer; const AStoreFontSizeCodeType: StoreFontSizeCodeType);
begin
  FDescSize := AStoreFontSizeCodeType;
  FDescSize_Specified := True;
end;

function StoreFontType.DescSize_Specified(Index: Integer): boolean;
begin
  Result := FDescSize_Specified;
end;

procedure StoreFontType.SetDescColor(Index: Integer; const Astring: string);
begin
  FDescColor := Astring;
  FDescColor_Specified := True;
end;

function StoreFontType.DescColor_Specified(Index: Integer): boolean;
begin
  Result := FDescColor_Specified;
end;

procedure StoreColorType.SetPrimary(Index: Integer; const Astring: string);
begin
  FPrimary := Astring;
  FPrimary_Specified := True;
end;

function StoreColorType.Primary_Specified(Index: Integer): boolean;
begin
  Result := FPrimary_Specified;
end;

procedure StoreColorType.SetSecondary(Index: Integer; const Astring: string);
begin
  FSecondary := Astring;
  FSecondary_Specified := True;
end;

function StoreColorType.Secondary_Specified(Index: Integer): boolean;
begin
  Result := FSecondary_Specified;
end;

procedure StoreColorType.SetAccent(Index: Integer; const Astring: string);
begin
  FAccent := Astring;
  FAccent_Specified := True;
end;

function StoreColorType.Accent_Specified(Index: Integer): boolean;
begin
  Result := FAccent_Specified;
end;

destructor StoreColorSchemeType.Destroy;
begin
  SysUtils.FreeAndNil(FColor);
  SysUtils.FreeAndNil(FFont);
  inherited Destroy;
end;

procedure StoreColorSchemeType.SetColorSchemeID(Index: Integer; const AInteger: Integer);
begin
  FColorSchemeID := AInteger;
  FColorSchemeID_Specified := True;
end;

function StoreColorSchemeType.ColorSchemeID_Specified(Index: Integer): boolean;
begin
  Result := FColorSchemeID_Specified;
end;

procedure StoreColorSchemeType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreColorSchemeType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreColorSchemeType.SetColor(Index: Integer; const AStoreColorType: StoreColorType);
begin
  FColor := AStoreColorType;
  FColor_Specified := True;
end;

function StoreColorSchemeType.Color_Specified(Index: Integer): boolean;
begin
  Result := FColor_Specified;
end;

procedure StoreColorSchemeType.SetFont(Index: Integer; const AStoreFontType: StoreFontType);
begin
  FFont := AStoreFontType;
  FFont_Specified := True;
end;

function StoreColorSchemeType.Font_Specified(Index: Integer): boolean;
begin
  Result := FFont_Specified;
end;

destructor StoreThemeType.Destroy;
begin
  SysUtils.FreeAndNil(FColorScheme);
  inherited Destroy;
end;

procedure StoreThemeType.SetThemeID(Index: Integer; const AInteger: Integer);
begin
  FThemeID := AInteger;
  FThemeID_Specified := True;
end;

function StoreThemeType.ThemeID_Specified(Index: Integer): boolean;
begin
  Result := FThemeID_Specified;
end;

procedure StoreThemeType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreThemeType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreThemeType.SetColorScheme(Index: Integer; const AStoreColorSchemeType: StoreColorSchemeType);
begin
  FColorScheme := AStoreColorSchemeType;
  FColorScheme_Specified := True;
end;

function StoreThemeType.ColorScheme_Specified(Index: Integer): boolean;
begin
  Result := FColorScheme_Specified;
end;

procedure StoreLogoType.SetLogoID(Index: Integer; const AInteger: Integer);
begin
  FLogoID := AInteger;
  FLogoID_Specified := True;
end;

function StoreLogoType.LogoID_Specified(Index: Integer): boolean;
begin
  Result := FLogoID_Specified;
end;

procedure StoreLogoType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreLogoType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreLogoType.SetURL(Index: Integer; const Astring: string);
begin
  FURL := Astring;
  FURL_Specified := True;
end;

function StoreLogoType.URL_Specified(Index: Integer): boolean;
begin
  Result := FURL_Specified;
end;

destructor RefundTransactionType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRefundLineArray)-1 do
    SysUtils.FreeAndNil(FRefundLineArray[I]);
  System.SetLength(FRefundLineArray, 0);
  inherited Destroy;
end;

procedure RefundTransactionType.SetOrderID(Index: Integer; const Astring: string);
begin
  FOrderID := Astring;
  FOrderID_Specified := True;
end;

function RefundTransactionType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure RefundTransactionType.SetItemID(Index: Integer; const Astring: string);
begin
  FItemID := Astring;
  FItemID_Specified := True;
end;

function RefundTransactionType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RefundTransactionType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function RefundTransactionType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure RefundTransactionType.SetRefundLineArray(Index: Integer; const ARefundLineArrayType: RefundLineArrayType);
begin
  FRefundLineArray := ARefundLineArrayType;
  FRefundLineArray_Specified := True;
end;

function RefundTransactionType.RefundLineArray_Specified(Index: Integer): boolean;
begin
  Result := FRefundLineArray_Specified;
end;

destructor RefundFundingSourceType.Destroy;
begin
  SysUtils.FreeAndNil(FRefundAmount);
  inherited Destroy;
end;

procedure RefundFundingSourceType.SetRefundingSourceType(Index: Integer; const ARefundingSourceTypeCodeType: RefundingSourceTypeCodeType);
begin
  FRefundingSourceType := ARefundingSourceTypeCodeType;
  FRefundingSourceType_Specified := True;
end;

function RefundFundingSourceType.RefundingSourceType_Specified(Index: Integer): boolean;
begin
  Result := FRefundingSourceType_Specified;
end;

procedure RefundFundingSourceType.SetAccountNumber(Index: Integer; const Astring: string);
begin
  FAccountNumber := Astring;
  FAccountNumber_Specified := True;
end;

function RefundFundingSourceType.AccountNumber_Specified(Index: Integer): boolean;
begin
  Result := FAccountNumber_Specified;
end;

procedure RefundFundingSourceType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function RefundFundingSourceType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure RefundFundingSourceType.SetSellerExternalTransactionID(Index: Integer; const Astring: string);
begin
  FSellerExternalTransactionID := Astring;
  FSellerExternalTransactionID_Specified := True;
end;

function RefundFundingSourceType.SellerExternalTransactionID_Specified(Index: Integer): boolean;
begin
  Result := FSellerExternalTransactionID_Specified;
end;

procedure RefundFundingSourceType.SetBuyerExternalTransactionID(Index: Integer; const Astring: string);
begin
  FBuyerExternalTransactionID := Astring;
  FBuyerExternalTransactionID_Specified := True;
end;

function RefundFundingSourceType.BuyerExternalTransactionID_Specified(Index: Integer): boolean;
begin
  Result := FBuyerExternalTransactionID_Specified;
end;

procedure RateTableDetailsType.SetDomesticRateTable(Index: Integer; const Astring: string);
begin
  FDomesticRateTable := Astring;
  FDomesticRateTable_Specified := True;
end;

function RateTableDetailsType.DomesticRateTable_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRateTable_Specified;
end;

procedure RateTableDetailsType.SetInternationalRateTable(Index: Integer; const Astring: string);
begin
  FInternationalRateTable := Astring;
  FInternationalRateTable_Specified := True;
end;

function RateTableDetailsType.InternationalRateTable_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRateTable_Specified;
end;

procedure RateTableDetailsType.SetDomesticRateTableId(Index: Integer; const Astring: string);
begin
  FDomesticRateTableId := Astring;
  FDomesticRateTableId_Specified := True;
end;

function RateTableDetailsType.DomesticRateTableId_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRateTableId_Specified;
end;

procedure RateTableDetailsType.SetInternationalRateTableId(Index: Integer; const Astring: string);
begin
  FInternationalRateTableId := Astring;
  FInternationalRateTableId_Specified := True;
end;

function RateTableDetailsType.InternationalRateTableId_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRateTableId_Specified;
end;

procedure ReasonCodeDetailType.SetcodeID(Index: Integer; const AInt64: Int64);
begin
  FcodeID := AInt64;
  FcodeID_Specified := True;
end;

function ReasonCodeDetailType.codeID_Specified(Index: Integer): boolean;
begin
  Result := FcodeID_Specified;
end;

procedure ReasonCodeDetailType.SetBriefText(Index: Integer; const Astring: string);
begin
  FBriefText := Astring;
  FBriefText_Specified := True;
end;

function ReasonCodeDetailType.BriefText_Specified(Index: Integer): boolean;
begin
  Result := FBriefText_Specified;
end;

procedure ReasonCodeDetailType.SetDetailedText(Index: Integer; const Astring: string);
begin
  FDetailedText := Astring;
  FDetailedText_Specified := True;
end;

function ReasonCodeDetailType.DetailedText_Specified(Index: Integer): boolean;
begin
  Result := FDetailedText_Specified;
end;

procedure SellerPaymentProfileType.SetPaymentProfileID(Index: Integer; const AInt64: Int64);
begin
  FPaymentProfileID := AInt64;
  FPaymentProfileID_Specified := True;
end;

function SellerPaymentProfileType.PaymentProfileID_Specified(Index: Integer): boolean;
begin
  Result := FPaymentProfileID_Specified;
end;

procedure SellerPaymentProfileType.SetPaymentProfileName(Index: Integer; const Astring: string);
begin
  FPaymentProfileName := Astring;
  FPaymentProfileName_Specified := True;
end;

function SellerPaymentProfileType.PaymentProfileName_Specified(Index: Integer): boolean;
begin
  Result := FPaymentProfileName_Specified;
end;

destructor SellerDiscountType.Destroy;
begin
  SysUtils.FreeAndNil(FItemDiscountAmount);
  SysUtils.FreeAndNil(FShippingDiscountAmount);
  inherited Destroy;
end;

procedure SellerDiscountType.SetCampaignID(Index: Integer; const AInt64: Int64);
begin
  FCampaignID := AInt64;
  FCampaignID_Specified := True;
end;

function SellerDiscountType.CampaignID_Specified(Index: Integer): boolean;
begin
  Result := FCampaignID_Specified;
end;

procedure SellerDiscountType.SetCampaignDisplayName(Index: Integer; const Astring: string);
begin
  FCampaignDisplayName := Astring;
  FCampaignDisplayName_Specified := True;
end;

function SellerDiscountType.CampaignDisplayName_Specified(Index: Integer): boolean;
begin
  Result := FCampaignDisplayName_Specified;
end;

procedure SellerDiscountType.SetItemDiscountAmount(Index: Integer; const AAmountType: AmountType);
begin
  FItemDiscountAmount := AAmountType;
  FItemDiscountAmount_Specified := True;
end;

function SellerDiscountType.ItemDiscountAmount_Specified(Index: Integer): boolean;
begin
  Result := FItemDiscountAmount_Specified;
end;

procedure SellerDiscountType.SetShippingDiscountAmount(Index: Integer; const AAmountType: AmountType);
begin
  FShippingDiscountAmount := AAmountType;
  FShippingDiscountAmount_Specified := True;
end;

function SellerDiscountType.ShippingDiscountAmount_Specified(Index: Integer): boolean;
begin
  Result := FShippingDiscountAmount_Specified;
end;

procedure SellerShippingProfileType.SetShippingProfileID(Index: Integer; const AInt64: Int64);
begin
  FShippingProfileID := AInt64;
  FShippingProfileID_Specified := True;
end;

function SellerShippingProfileType.ShippingProfileID_Specified(Index: Integer): boolean;
begin
  Result := FShippingProfileID_Specified;
end;

procedure SellerShippingProfileType.SetShippingProfileName(Index: Integer; const Astring: string);
begin
  FShippingProfileName := Astring;
  FShippingProfileName_Specified := True;
end;

function SellerShippingProfileType.ShippingProfileName_Specified(Index: Integer): boolean;
begin
  Result := FShippingProfileName_Specified;
end;

procedure SellerReturnProfileType.SetReturnProfileID(Index: Integer; const AInt64: Int64);
begin
  FReturnProfileID := AInt64;
  FReturnProfileID_Specified := True;
end;

function SellerReturnProfileType.ReturnProfileID_Specified(Index: Integer): boolean;
begin
  Result := FReturnProfileID_Specified;
end;

procedure SellerReturnProfileType.SetReturnProfileName(Index: Integer; const Astring: string);
begin
  FReturnProfileName := Astring;
  FReturnProfileName_Specified := True;
end;

function SellerReturnProfileType.ReturnProfileName_Specified(Index: Integer): boolean;
begin
  Result := FReturnProfileName_Specified;
end;

destructor EndItemResponseContainerType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FErrors)-1 do
    SysUtils.FreeAndNil(FErrors[I]);
  System.SetLength(FErrors, 0);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure EndItemResponseContainerType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function EndItemResponseContainerType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure EndItemResponseContainerType.SetCorrelationID(Index: Integer; const Astring: string);
begin
  FCorrelationID := Astring;
  FCorrelationID_Specified := True;
end;

function EndItemResponseContainerType.CorrelationID_Specified(Index: Integer): boolean;
begin
  Result := FCorrelationID_Specified;
end;

procedure EndItemResponseContainerType.SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
begin
  FErrors := AArray_Of_ErrorType;
  FErrors_Specified := True;
end;

function EndItemResponseContainerType.Errors_Specified(Index: Integer): boolean;
begin
  Result := FErrors_Specified;
end;

destructor TokenStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FExpirationTime);
  SysUtils.FreeAndNil(FRevocationTime);
  inherited Destroy;
end;

procedure TokenStatusType.SetStatus(Index: Integer; const ATokenStatusCodeType: TokenStatusCodeType);
begin
  FStatus := ATokenStatusCodeType;
  FStatus_Specified := True;
end;

function TokenStatusType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure TokenStatusType.SetEIASToken(Index: Integer; const Astring: string);
begin
  FEIASToken := Astring;
  FEIASToken_Specified := True;
end;

function TokenStatusType.EIASToken_Specified(Index: Integer): boolean;
begin
  Result := FEIASToken_Specified;
end;

procedure TokenStatusType.SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpirationTime := ATXSDateTime;
  FExpirationTime_Specified := True;
end;

function TokenStatusType.ExpirationTime_Specified(Index: Integer): boolean;
begin
  Result := FExpirationTime_Specified;
end;

procedure TokenStatusType.SetRevocationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRevocationTime := ATXSDateTime;
  FRevocationTime_Specified := True;
end;

function TokenStatusType.RevocationTime_Specified(Index: Integer): boolean;
begin
  Result := FRevocationTime_Specified;
end;

destructor SiteDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure SiteDetailsType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function SiteDetailsType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure SiteDetailsType.SetSiteID(Index: Integer; const AInteger: Integer);
begin
  FSiteID := AInteger;
  FSiteID_Specified := True;
end;

function SiteDetailsType.SiteID_Specified(Index: Integer): boolean;
begin
  Result := FSiteID_Specified;
end;

procedure SiteDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function SiteDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure SiteDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function SiteDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ShippingLocationDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ShippingLocationDetailsType.SetShippingLocation(Index: Integer; const Astring: string);
begin
  FShippingLocation := Astring;
  FShippingLocation_Specified := True;
end;

function ShippingLocationDetailsType.ShippingLocation_Specified(Index: Integer): boolean;
begin
  Result := FShippingLocation_Specified;
end;

procedure ShippingLocationDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingLocationDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ShippingLocationDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ShippingLocationDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ShippingLocationDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ShippingLocationDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor TimeZoneDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure TimeZoneDetailsType.SetTimeZoneID(Index: Integer; const Astring: string);
begin
  FTimeZoneID := Astring;
  FTimeZoneID_Specified := True;
end;

function TimeZoneDetailsType.TimeZoneID_Specified(Index: Integer): boolean;
begin
  Result := FTimeZoneID_Specified;
end;

procedure TimeZoneDetailsType.SetStandardLabel(Index: Integer; const Astring: string);
begin
  FStandardLabel := Astring;
  FStandardLabel_Specified := True;
end;

function TimeZoneDetailsType.StandardLabel_Specified(Index: Integer): boolean;
begin
  Result := FStandardLabel_Specified;
end;

procedure TimeZoneDetailsType.SetStandardOffset(Index: Integer; const Astring: string);
begin
  FStandardOffset := Astring;
  FStandardOffset_Specified := True;
end;

function TimeZoneDetailsType.StandardOffset_Specified(Index: Integer): boolean;
begin
  Result := FStandardOffset_Specified;
end;

procedure TimeZoneDetailsType.SetDaylightSavingsLabel(Index: Integer; const Astring: string);
begin
  FDaylightSavingsLabel := Astring;
  FDaylightSavingsLabel_Specified := True;
end;

function TimeZoneDetailsType.DaylightSavingsLabel_Specified(Index: Integer): boolean;
begin
  Result := FDaylightSavingsLabel_Specified;
end;

procedure TimeZoneDetailsType.SetDaylightSavingsOffset(Index: Integer; const Astring: string);
begin
  FDaylightSavingsOffset := Astring;
  FDaylightSavingsOffset_Specified := True;
end;

function TimeZoneDetailsType.DaylightSavingsOffset_Specified(Index: Integer): boolean;
begin
  Result := FDaylightSavingsOffset_Specified;
end;

procedure TimeZoneDetailsType.SetDaylightSavingsInEffect(Index: Integer; const ABoolean: Boolean);
begin
  FDaylightSavingsInEffect := ABoolean;
  FDaylightSavingsInEffect_Specified := True;
end;

function TimeZoneDetailsType.DaylightSavingsInEffect_Specified(Index: Integer): boolean;
begin
  Result := FDaylightSavingsInEffect_Specified;
end;

procedure TimeZoneDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function TimeZoneDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure TimeZoneDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function TimeZoneDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor URLDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure URLDetailsType.SetURLType(Index: Integer; const AURLTypeCodeType: URLTypeCodeType);
begin
  FURLType := AURLTypeCodeType;
  FURLType_Specified := True;
end;

function URLDetailsType.URLType_Specified(Index: Integer): boolean;
begin
  Result := FURLType_Specified;
end;

procedure URLDetailsType.SetURL(Index: Integer; const Astring: string);
begin
  FURL := Astring;
  FURL_Specified := True;
end;

function URLDetailsType.URL_Specified(Index: Integer): boolean;
begin
  Result := FURL_Specified;
end;

procedure URLDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function URLDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure URLDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function URLDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor RegionDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure RegionDetailsType.SetRegionID(Index: Integer; const Astring: string);
begin
  FRegionID := Astring;
  FRegionID_Specified := True;
end;

function RegionDetailsType.RegionID_Specified(Index: Integer): boolean;
begin
  Result := FRegionID_Specified;
end;

procedure RegionDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function RegionDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure RegionDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function RegionDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure RegionDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function RegionDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor DispatchTimeMaxDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure DispatchTimeMaxDetailsType.SetDispatchTimeMax(Index: Integer; const AInteger: Integer);
begin
  FDispatchTimeMax := AInteger;
  FDispatchTimeMax_Specified := True;
end;

function DispatchTimeMaxDetailsType.DispatchTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FDispatchTimeMax_Specified;
end;

procedure DispatchTimeMaxDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function DispatchTimeMaxDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure DispatchTimeMaxDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function DispatchTimeMaxDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure DispatchTimeMaxDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function DispatchTimeMaxDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure DispatchTimeMaxDetailsType.SetExtendedHandling(Index: Integer; const ABoolean: Boolean);
begin
  FExtendedHandling := ABoolean;
  FExtendedHandling_Specified := True;
end;

function DispatchTimeMaxDetailsType.ExtendedHandling_Specified(Index: Integer): boolean;
begin
  Result := FExtendedHandling_Specified;
end;

destructor VariationDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure VariationDetailsType.SetMaxVariationsPerItem(Index: Integer; const AInteger: Integer);
begin
  FMaxVariationsPerItem := AInteger;
  FMaxVariationsPerItem_Specified := True;
end;

function VariationDetailsType.MaxVariationsPerItem_Specified(Index: Integer): boolean;
begin
  Result := FMaxVariationsPerItem_Specified;
end;

procedure VariationDetailsType.SetMaxNamesPerVariationSpecificsSet(Index: Integer; const AInteger: Integer);
begin
  FMaxNamesPerVariationSpecificsSet := AInteger;
  FMaxNamesPerVariationSpecificsSet_Specified := True;
end;

function VariationDetailsType.MaxNamesPerVariationSpecificsSet_Specified(Index: Integer): boolean;
begin
  Result := FMaxNamesPerVariationSpecificsSet_Specified;
end;

procedure VariationDetailsType.SetMaxValuesPerVariationSpecificsSetName(Index: Integer; const AInteger: Integer);
begin
  FMaxValuesPerVariationSpecificsSetName := AInteger;
  FMaxValuesPerVariationSpecificsSetName_Specified := True;
end;

function VariationDetailsType.MaxValuesPerVariationSpecificsSetName_Specified(Index: Integer): boolean;
begin
  Result := FMaxValuesPerVariationSpecificsSetName_Specified;
end;

procedure VariationDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function VariationDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure VariationDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function VariationDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ListingFeatureDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ListingFeatureDetailsType.SetBoldTitle(Index: Integer; const ABoldTitleCodeType: BoldTitleCodeType);
begin
  FBoldTitle := ABoldTitleCodeType;
  FBoldTitle_Specified := True;
end;

function ListingFeatureDetailsType.BoldTitle_Specified(Index: Integer): boolean;
begin
  Result := FBoldTitle_Specified;
end;

procedure ListingFeatureDetailsType.SetBorder(Index: Integer; const ABorderCodeType: BorderCodeType);
begin
  FBorder := ABorderCodeType;
  FBorder_Specified := True;
end;

function ListingFeatureDetailsType.Border_Specified(Index: Integer): boolean;
begin
  Result := FBorder_Specified;
end;

procedure ListingFeatureDetailsType.SetHighlight(Index: Integer; const AHighlightCodeType: HighlightCodeType);
begin
  FHighlight := AHighlightCodeType;
  FHighlight_Specified := True;
end;

function ListingFeatureDetailsType.Highlight_Specified(Index: Integer): boolean;
begin
  Result := FHighlight_Specified;
end;

procedure ListingFeatureDetailsType.SetGiftIcon(Index: Integer; const AGiftIconCodeType: GiftIconCodeType);
begin
  FGiftIcon := AGiftIconCodeType;
  FGiftIcon_Specified := True;
end;

function ListingFeatureDetailsType.GiftIcon_Specified(Index: Integer): boolean;
begin
  Result := FGiftIcon_Specified;
end;

procedure ListingFeatureDetailsType.SetHomePageFeatured(Index: Integer; const AHomePageFeaturedCodeType: HomePageFeaturedCodeType);
begin
  FHomePageFeatured := AHomePageFeaturedCodeType;
  FHomePageFeatured_Specified := True;
end;

function ListingFeatureDetailsType.HomePageFeatured_Specified(Index: Integer): boolean;
begin
  Result := FHomePageFeatured_Specified;
end;

procedure ListingFeatureDetailsType.SetFeaturedFirst(Index: Integer; const AFeaturedFirstCodeType: FeaturedFirstCodeType);
begin
  FFeaturedFirst := AFeaturedFirstCodeType;
  FFeaturedFirst_Specified := True;
end;

function ListingFeatureDetailsType.FeaturedFirst_Specified(Index: Integer): boolean;
begin
  Result := FFeaturedFirst_Specified;
end;

procedure ListingFeatureDetailsType.SetFeaturedPlus(Index: Integer; const AFeaturedPlusCodeType: FeaturedPlusCodeType);
begin
  FFeaturedPlus := AFeaturedPlusCodeType;
  FFeaturedPlus_Specified := True;
end;

function ListingFeatureDetailsType.FeaturedPlus_Specified(Index: Integer): boolean;
begin
  Result := FFeaturedPlus_Specified;
end;

procedure ListingFeatureDetailsType.SetProPack(Index: Integer; const AProPackCodeType: ProPackCodeType);
begin
  FProPack := AProPackCodeType;
  FProPack_Specified := True;
end;

function ListingFeatureDetailsType.ProPack_Specified(Index: Integer): boolean;
begin
  Result := FProPack_Specified;
end;

procedure ListingFeatureDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ListingFeatureDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ListingFeatureDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ListingFeatureDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor SiteBuyerRequirementDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FMaximumBuyerPolicyViolations);
  SysUtils.FreeAndNil(FMaximumItemRequirements);
  SysUtils.FreeAndNil(FMaximumUnpaidItemStrikesInfo);
  SysUtils.FreeAndNil(FVerifiedUserRequirements);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure SiteBuyerRequirementDetailsType.SetLinkedPayPalAccount(Index: Integer; const ABoolean: Boolean);
begin
  FLinkedPayPalAccount := ABoolean;
  FLinkedPayPalAccount_Specified := True;
end;

function SiteBuyerRequirementDetailsType.LinkedPayPalAccount_Specified(Index: Integer): boolean;
begin
  Result := FLinkedPayPalAccount_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetMaximumBuyerPolicyViolations(Index: Integer; const AMaximumBuyerPolicyViolationsDetailsType: MaximumBuyerPolicyViolationsDetailsType);
begin
  FMaximumBuyerPolicyViolations := AMaximumBuyerPolicyViolationsDetailsType;
  FMaximumBuyerPolicyViolations_Specified := True;
end;

function SiteBuyerRequirementDetailsType.MaximumBuyerPolicyViolations_Specified(Index: Integer): boolean;
begin
  Result := FMaximumBuyerPolicyViolations_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetMaximumItemRequirements(Index: Integer; const AMaximumItemRequirementsDetailsType: MaximumItemRequirementsDetailsType);
begin
  FMaximumItemRequirements := AMaximumItemRequirementsDetailsType;
  FMaximumItemRequirements_Specified := True;
end;

function SiteBuyerRequirementDetailsType.MaximumItemRequirements_Specified(Index: Integer): boolean;
begin
  Result := FMaximumItemRequirements_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetMaximumUnpaidItemStrikesInfo(Index: Integer; const AMaximumUnpaidItemStrikesInfoDetailsType: MaximumUnpaidItemStrikesInfoDetailsType);
begin
  FMaximumUnpaidItemStrikesInfo := AMaximumUnpaidItemStrikesInfoDetailsType;
  FMaximumUnpaidItemStrikesInfo_Specified := True;
end;

function SiteBuyerRequirementDetailsType.MaximumUnpaidItemStrikesInfo_Specified(Index: Integer): boolean;
begin
  Result := FMaximumUnpaidItemStrikesInfo_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetMinimumFeedbackScore(Index: Integer; const AMinimumFeedbackScoreDetailsType: MinimumFeedbackScoreDetailsType);
begin
  FMinimumFeedbackScore := AMinimumFeedbackScoreDetailsType;
  FMinimumFeedbackScore_Specified := True;
end;

function SiteBuyerRequirementDetailsType.MinimumFeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FMinimumFeedbackScore_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetShipToRegistrationCountry(Index: Integer; const ABoolean: Boolean);
begin
  FShipToRegistrationCountry := ABoolean;
  FShipToRegistrationCountry_Specified := True;
end;

function SiteBuyerRequirementDetailsType.ShipToRegistrationCountry_Specified(Index: Integer): boolean;
begin
  Result := FShipToRegistrationCountry_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetVerifiedUserRequirements(Index: Integer; const AVerifiedUserRequirementsDetailsType: VerifiedUserRequirementsDetailsType);
begin
  FVerifiedUserRequirements := AVerifiedUserRequirementsDetailsType;
  FVerifiedUserRequirements_Specified := True;
end;

function SiteBuyerRequirementDetailsType.VerifiedUserRequirements_Specified(Index: Integer): boolean;
begin
  Result := FVerifiedUserRequirements_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function SiteBuyerRequirementDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure SiteBuyerRequirementDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function SiteBuyerRequirementDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor RecoupmentPolicyDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure RecoupmentPolicyDetailsType.SetEnforcedOnListingSite(Index: Integer; const ABoolean: Boolean);
begin
  FEnforcedOnListingSite := ABoolean;
  FEnforcedOnListingSite_Specified := True;
end;

function RecoupmentPolicyDetailsType.EnforcedOnListingSite_Specified(Index: Integer): boolean;
begin
  Result := FEnforcedOnListingSite_Specified;
end;

procedure RecoupmentPolicyDetailsType.SetEnforcedOnRegistrationSite(Index: Integer; const ABoolean: Boolean);
begin
  FEnforcedOnRegistrationSite := ABoolean;
  FEnforcedOnRegistrationSite_Specified := True;
end;

function RecoupmentPolicyDetailsType.EnforcedOnRegistrationSite_Specified(Index: Integer): boolean;
begin
  Result := FEnforcedOnRegistrationSite_Specified;
end;

procedure RecoupmentPolicyDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function RecoupmentPolicyDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure RecoupmentPolicyDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function RecoupmentPolicyDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ExcludeShippingLocationDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ExcludeShippingLocationDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ExcludeShippingLocationDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ExcludeShippingLocationDetailsType.SetLocation(Index: Integer; const Astring: string);
begin
  FLocation := Astring;
  FLocation_Specified := True;
end;

function ExcludeShippingLocationDetailsType.Location_Specified(Index: Integer): boolean;
begin
  Result := FLocation_Specified;
end;

procedure ExcludeShippingLocationDetailsType.SetRegion(Index: Integer; const Astring: string);
begin
  FRegion := Astring;
  FRegion_Specified := True;
end;

function ExcludeShippingLocationDetailsType.Region_Specified(Index: Integer): boolean;
begin
  Result := FRegion_Specified;
end;

procedure ExcludeShippingLocationDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ExcludeShippingLocationDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ExcludeShippingLocationDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ExcludeShippingLocationDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor RegionOfOriginDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure RegionOfOriginDetailsType.SetRegionOfOrigin(Index: Integer; const Astring: string);
begin
  FRegionOfOrigin := Astring;
  FRegionOfOrigin_Specified := True;
end;

function RegionOfOriginDetailsType.RegionOfOrigin_Specified(Index: Integer): boolean;
begin
  Result := FRegionOfOrigin_Specified;
end;

procedure RegionOfOriginDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function RegionOfOriginDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure RegionOfOriginDetailsType.SetStatus(Index: Integer; const AStatusCodeType: StatusCodeType);
begin
  FStatus := AStatusCodeType;
  FStatus_Specified := True;
end;

function RegionOfOriginDetailsType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure RegionOfOriginDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function RegionOfOriginDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure RegionOfOriginDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function RegionOfOriginDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor UnitOfMeasurementDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUnitOfMeasurement)-1 do
    SysUtils.FreeAndNil(FUnitOfMeasurement[I]);
  System.SetLength(FUnitOfMeasurement, 0);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure UnitOfMeasurementDetailsType.SetUnitOfMeasurement(Index: Integer; const AArray_Of_UnitOfMeasurementType: Array_Of_UnitOfMeasurementType);
begin
  FUnitOfMeasurement := AArray_Of_UnitOfMeasurementType;
  FUnitOfMeasurement_Specified := True;
end;

function UnitOfMeasurementDetailsType.UnitOfMeasurement_Specified(Index: Integer): boolean;
begin
  Result := FUnitOfMeasurement_Specified;
end;

procedure UnitOfMeasurementDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function UnitOfMeasurementDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure UnitOfMeasurementDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function UnitOfMeasurementDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ItemSpecificDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ItemSpecificDetailsType.SetMaxItemSpecificsPerItem(Index: Integer; const AInteger: Integer);
begin
  FMaxItemSpecificsPerItem := AInteger;
  FMaxItemSpecificsPerItem_Specified := True;
end;

function ItemSpecificDetailsType.MaxItemSpecificsPerItem_Specified(Index: Integer): boolean;
begin
  Result := FMaxItemSpecificsPerItem_Specified;
end;

procedure ItemSpecificDetailsType.SetMaxValuesPerName(Index: Integer; const AInteger: Integer);
begin
  FMaxValuesPerName := AInteger;
  FMaxValuesPerName_Specified := True;
end;

function ItemSpecificDetailsType.MaxValuesPerName_Specified(Index: Integer): boolean;
begin
  Result := FMaxValuesPerName_Specified;
end;

procedure ItemSpecificDetailsType.SetMaxCharactersPerValue(Index: Integer; const AInteger: Integer);
begin
  FMaxCharactersPerValue := AInteger;
  FMaxCharactersPerValue_Specified := True;
end;

function ItemSpecificDetailsType.MaxCharactersPerValue_Specified(Index: Integer): boolean;
begin
  Result := FMaxCharactersPerValue_Specified;
end;

procedure ItemSpecificDetailsType.SetMaxCharactersPerName(Index: Integer; const AInteger: Integer);
begin
  FMaxCharactersPerName := AInteger;
  FMaxCharactersPerName_Specified := True;
end;

function ItemSpecificDetailsType.MaxCharactersPerName_Specified(Index: Integer): boolean;
begin
  Result := FMaxCharactersPerName_Specified;
end;

procedure ItemSpecificDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ItemSpecificDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ItemSpecificDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ItemSpecificDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ReturnPolicyDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRefund)-1 do
    SysUtils.FreeAndNil(FRefund[I]);
  System.SetLength(FRefund, 0);
  for I := 0 to System.Length(FReturnsWithin)-1 do
    SysUtils.FreeAndNil(FReturnsWithin[I]);
  System.SetLength(FReturnsWithin, 0);
  for I := 0 to System.Length(FReturnsAccepted)-1 do
    SysUtils.FreeAndNil(FReturnsAccepted[I]);
  System.SetLength(FReturnsAccepted, 0);
  for I := 0 to System.Length(FWarrantyOffered)-1 do
    SysUtils.FreeAndNil(FWarrantyOffered[I]);
  System.SetLength(FWarrantyOffered, 0);
  for I := 0 to System.Length(FWarrantyType)-1 do
    SysUtils.FreeAndNil(FWarrantyType[I]);
  System.SetLength(FWarrantyType, 0);
  for I := 0 to System.Length(FWarrantyDuration)-1 do
    SysUtils.FreeAndNil(FWarrantyDuration[I]);
  System.SetLength(FWarrantyDuration, 0);
  for I := 0 to System.Length(FShippingCostPaidBy)-1 do
    SysUtils.FreeAndNil(FShippingCostPaidBy[I]);
  System.SetLength(FShippingCostPaidBy, 0);
  for I := 0 to System.Length(FRestockingFeeValue)-1 do
    SysUtils.FreeAndNil(FRestockingFeeValue[I]);
  System.SetLength(FRestockingFeeValue, 0);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ReturnPolicyDetailsType.SetRefund(Index: Integer; const AArray_Of_RefundDetailsType: Array_Of_RefundDetailsType);
begin
  FRefund := AArray_Of_RefundDetailsType;
  FRefund_Specified := True;
end;

function ReturnPolicyDetailsType.Refund_Specified(Index: Integer): boolean;
begin
  Result := FRefund_Specified;
end;

procedure ReturnPolicyDetailsType.SetReturnsWithin(Index: Integer; const AArray_Of_ReturnsWithinDetailsType: Array_Of_ReturnsWithinDetailsType);
begin
  FReturnsWithin := AArray_Of_ReturnsWithinDetailsType;
  FReturnsWithin_Specified := True;
end;

function ReturnPolicyDetailsType.ReturnsWithin_Specified(Index: Integer): boolean;
begin
  Result := FReturnsWithin_Specified;
end;

procedure ReturnPolicyDetailsType.SetReturnsAccepted(Index: Integer; const AArray_Of_ReturnsAcceptedDetailsType: Array_Of_ReturnsAcceptedDetailsType);
begin
  FReturnsAccepted := AArray_Of_ReturnsAcceptedDetailsType;
  FReturnsAccepted_Specified := True;
end;

function ReturnPolicyDetailsType.ReturnsAccepted_Specified(Index: Integer): boolean;
begin
  Result := FReturnsAccepted_Specified;
end;

procedure ReturnPolicyDetailsType.SetDescription(Index: Integer; const ABoolean: Boolean);
begin
  FDescription := ABoolean;
  FDescription_Specified := True;
end;

function ReturnPolicyDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReturnPolicyDetailsType.SetWarrantyOffered(Index: Integer; const AArray_Of_WarrantyOfferedDetailsType: Array_Of_WarrantyOfferedDetailsType);
begin
  FWarrantyOffered := AArray_Of_WarrantyOfferedDetailsType;
  FWarrantyOffered_Specified := True;
end;

function ReturnPolicyDetailsType.WarrantyOffered_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyOffered_Specified;
end;

procedure ReturnPolicyDetailsType.SetWarrantyType(Index: Integer; const AArray_Of_WarrantyTypeDetailsType: Array_Of_WarrantyTypeDetailsType);
begin
  FWarrantyType := AArray_Of_WarrantyTypeDetailsType;
  FWarrantyType_Specified := True;
end;

function ReturnPolicyDetailsType.WarrantyType_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyType_Specified;
end;

procedure ReturnPolicyDetailsType.SetWarrantyDuration(Index: Integer; const AArray_Of_WarrantyDurationDetailsType: Array_Of_WarrantyDurationDetailsType);
begin
  FWarrantyDuration := AArray_Of_WarrantyDurationDetailsType;
  FWarrantyDuration_Specified := True;
end;

function ReturnPolicyDetailsType.WarrantyDuration_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyDuration_Specified;
end;

procedure ReturnPolicyDetailsType.SetEAN(Index: Integer; const ABoolean: Boolean);
begin
  FEAN := ABoolean;
  FEAN_Specified := True;
end;

function ReturnPolicyDetailsType.EAN_Specified(Index: Integer): boolean;
begin
  Result := FEAN_Specified;
end;

procedure ReturnPolicyDetailsType.SetShippingCostPaidBy(Index: Integer; const AArray_Of_ShippingCostPaidByDetailsType: Array_Of_ShippingCostPaidByDetailsType);
begin
  FShippingCostPaidBy := AArray_Of_ShippingCostPaidByDetailsType;
  FShippingCostPaidBy_Specified := True;
end;

function ReturnPolicyDetailsType.ShippingCostPaidBy_Specified(Index: Integer): boolean;
begin
  Result := FShippingCostPaidBy_Specified;
end;

procedure ReturnPolicyDetailsType.SetRestockingFeeValue(Index: Integer; const AArray_Of_RestockingFeeValueDetailsType: Array_Of_RestockingFeeValueDetailsType);
begin
  FRestockingFeeValue := AArray_Of_RestockingFeeValueDetailsType;
  FRestockingFeeValue_Specified := True;
end;

function ReturnPolicyDetailsType.RestockingFeeValue_Specified(Index: Integer): boolean;
begin
  Result := FRestockingFeeValue_Specified;
end;

procedure ReturnPolicyDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ReturnPolicyDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ReturnPolicyDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ReturnPolicyDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ShippingCarrierDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ShippingCarrierDetailsType.SetShippingCarrierID(Index: Integer; const AInteger: Integer);
begin
  FShippingCarrierID := AInteger;
  FShippingCarrierID_Specified := True;
end;

function ShippingCarrierDetailsType.ShippingCarrierID_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrierID_Specified;
end;

procedure ShippingCarrierDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingCarrierDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ShippingCarrierDetailsType.SetShippingCarrier(Index: Integer; const AShippingCarrierCodeType: ShippingCarrierCodeType);
begin
  FShippingCarrier := AShippingCarrierCodeType;
  FShippingCarrier_Specified := True;
end;

function ShippingCarrierDetailsType.ShippingCarrier_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrier_Specified;
end;

procedure ShippingCarrierDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ShippingCarrierDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ShippingCarrierDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ShippingCarrierDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ShippingPackageDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ShippingPackageDetailsType.SetPackageID(Index: Integer; const AInteger: Integer);
begin
  FPackageID := AInteger;
  FPackageID_Specified := True;
end;

function ShippingPackageDetailsType.PackageID_Specified(Index: Integer): boolean;
begin
  Result := FPackageID_Specified;
end;

procedure ShippingPackageDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingPackageDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ShippingPackageDetailsType.SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
begin
  FShippingPackage := AShippingPackageCodeType;
  FShippingPackage_Specified := True;
end;

function ShippingPackageDetailsType.ShippingPackage_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackage_Specified;
end;

procedure ShippingPackageDetailsType.SetDefaultValue(Index: Integer; const ABoolean: Boolean);
begin
  FDefaultValue := ABoolean;
  FDefaultValue_Specified := True;
end;

function ShippingPackageDetailsType.DefaultValue_Specified(Index: Integer): boolean;
begin
  Result := FDefaultValue_Specified;
end;

procedure ShippingPackageDetailsType.SetDimensionsSupported(Index: Integer; const ABoolean: Boolean);
begin
  FDimensionsSupported := ABoolean;
  FDimensionsSupported_Specified := True;
end;

function ShippingPackageDetailsType.DimensionsSupported_Specified(Index: Integer): boolean;
begin
  Result := FDimensionsSupported_Specified;
end;

procedure ShippingPackageDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ShippingPackageDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ShippingPackageDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ShippingPackageDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor SellingManagerSoldOrderType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellingManagerSoldTransaction)-1 do
    SysUtils.FreeAndNil(FSellingManagerSoldTransaction[I]);
  System.SetLength(FSellingManagerSoldTransaction, 0);
  for I := 0 to System.Length(FVATRate)-1 do
    SysUtils.FreeAndNil(FVATRate[I]);
  System.SetLength(FVATRate, 0);
  SysUtils.FreeAndNil(FShippingAddress);
  SysUtils.FreeAndNil(FShippingDetails);
  SysUtils.FreeAndNil(FCashOnDeliveryCost);
  SysUtils.FreeAndNil(FTotalAmount);
  SysUtils.FreeAndNil(FItemCost);
  SysUtils.FreeAndNil(FNetInsuranceFee);
  SysUtils.FreeAndNil(FVATInsuranceFee);
  SysUtils.FreeAndNil(FVATShippingFee);
  SysUtils.FreeAndNil(FNetShippingFee);
  SysUtils.FreeAndNil(FNetTotalAmount);
  SysUtils.FreeAndNil(FVATTotalAmount);
  SysUtils.FreeAndNil(FActualShippingCost);
  SysUtils.FreeAndNil(FAdjustmentAmount);
  SysUtils.FreeAndNil(FOrderStatus);
  SysUtils.FreeAndNil(FSalePrice);
  SysUtils.FreeAndNil(FCreationTime);
  SysUtils.FreeAndNil(FRefundAmount);
  inherited Destroy;
end;

procedure SellingManagerSoldOrderType.SetSellingManagerSoldTransaction(Index: Integer; const AArray_Of_SellingManagerSoldTransactionType: Array_Of_SellingManagerSoldTransactionType);
begin
  FSellingManagerSoldTransaction := AArray_Of_SellingManagerSoldTransactionType;
  FSellingManagerSoldTransaction_Specified := True;
end;

function SellingManagerSoldOrderType.SellingManagerSoldTransaction_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerSoldTransaction_Specified;
end;

procedure SellingManagerSoldOrderType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function SellingManagerSoldOrderType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure SellingManagerSoldOrderType.SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
begin
  FShippingDetails := AShippingDetailsType;
  FShippingDetails_Specified := True;
end;

function SellingManagerSoldOrderType.ShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetails_Specified;
end;

procedure SellingManagerSoldOrderType.SetCashOnDeliveryCost(Index: Integer; const AAmountType: AmountType);
begin
  FCashOnDeliveryCost := AAmountType;
  FCashOnDeliveryCost_Specified := True;
end;

function SellingManagerSoldOrderType.CashOnDeliveryCost_Specified(Index: Integer): boolean;
begin
  Result := FCashOnDeliveryCost_Specified;
end;

procedure SellingManagerSoldOrderType.SetTotalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FTotalAmount := AAmountType;
  FTotalAmount_Specified := True;
end;

function SellingManagerSoldOrderType.TotalAmount_Specified(Index: Integer): boolean;
begin
  Result := FTotalAmount_Specified;
end;

procedure SellingManagerSoldOrderType.SetTotalQuantity(Index: Integer; const AInteger: Integer);
begin
  FTotalQuantity := AInteger;
  FTotalQuantity_Specified := True;
end;

function SellingManagerSoldOrderType.TotalQuantity_Specified(Index: Integer): boolean;
begin
  Result := FTotalQuantity_Specified;
end;

procedure SellingManagerSoldOrderType.SetItemCost(Index: Integer; const AAmountType: AmountType);
begin
  FItemCost := AAmountType;
  FItemCost_Specified := True;
end;

function SellingManagerSoldOrderType.ItemCost_Specified(Index: Integer): boolean;
begin
  Result := FItemCost_Specified;
end;

procedure SellingManagerSoldOrderType.SetVATRate(Index: Integer; const AArray_Of_VATRateType: Array_Of_VATRateType);
begin
  FVATRate := AArray_Of_VATRateType;
  FVATRate_Specified := True;
end;

function SellingManagerSoldOrderType.VATRate_Specified(Index: Integer): boolean;
begin
  Result := FVATRate_Specified;
end;

procedure SellingManagerSoldOrderType.SetNetInsuranceFee(Index: Integer; const AAmountType: AmountType);
begin
  FNetInsuranceFee := AAmountType;
  FNetInsuranceFee_Specified := True;
end;

function SellingManagerSoldOrderType.NetInsuranceFee_Specified(Index: Integer): boolean;
begin
  Result := FNetInsuranceFee_Specified;
end;

procedure SellingManagerSoldOrderType.SetVATInsuranceFee(Index: Integer; const AAmountType: AmountType);
begin
  FVATInsuranceFee := AAmountType;
  FVATInsuranceFee_Specified := True;
end;

function SellingManagerSoldOrderType.VATInsuranceFee_Specified(Index: Integer): boolean;
begin
  Result := FVATInsuranceFee_Specified;
end;

procedure SellingManagerSoldOrderType.SetVATShippingFee(Index: Integer; const AAmountType: AmountType);
begin
  FVATShippingFee := AAmountType;
  FVATShippingFee_Specified := True;
end;

function SellingManagerSoldOrderType.VATShippingFee_Specified(Index: Integer): boolean;
begin
  Result := FVATShippingFee_Specified;
end;

procedure SellingManagerSoldOrderType.SetNetShippingFee(Index: Integer; const AAmountType: AmountType);
begin
  FNetShippingFee := AAmountType;
  FNetShippingFee_Specified := True;
end;

function SellingManagerSoldOrderType.NetShippingFee_Specified(Index: Integer): boolean;
begin
  Result := FNetShippingFee_Specified;
end;

procedure SellingManagerSoldOrderType.SetNetTotalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FNetTotalAmount := AAmountType;
  FNetTotalAmount_Specified := True;
end;

function SellingManagerSoldOrderType.NetTotalAmount_Specified(Index: Integer): boolean;
begin
  Result := FNetTotalAmount_Specified;
end;

procedure SellingManagerSoldOrderType.SetVATTotalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FVATTotalAmount := AAmountType;
  FVATTotalAmount_Specified := True;
end;

function SellingManagerSoldOrderType.VATTotalAmount_Specified(Index: Integer): boolean;
begin
  Result := FVATTotalAmount_Specified;
end;

procedure SellingManagerSoldOrderType.SetActualShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FActualShippingCost := AAmountType;
  FActualShippingCost_Specified := True;
end;

function SellingManagerSoldOrderType.ActualShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FActualShippingCost_Specified;
end;

procedure SellingManagerSoldOrderType.SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAdjustmentAmount := AAmountType;
  FAdjustmentAmount_Specified := True;
end;

function SellingManagerSoldOrderType.AdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FAdjustmentAmount_Specified;
end;

procedure SellingManagerSoldOrderType.SetNotesToBuyer(Index: Integer; const Astring: string);
begin
  FNotesToBuyer := Astring;
  FNotesToBuyer_Specified := True;
end;

function SellingManagerSoldOrderType.NotesToBuyer_Specified(Index: Integer): boolean;
begin
  Result := FNotesToBuyer_Specified;
end;

procedure SellingManagerSoldOrderType.SetNotesFromBuyer(Index: Integer; const Astring: string);
begin
  FNotesFromBuyer := Astring;
  FNotesFromBuyer_Specified := True;
end;

function SellingManagerSoldOrderType.NotesFromBuyer_Specified(Index: Integer): boolean;
begin
  Result := FNotesFromBuyer_Specified;
end;

procedure SellingManagerSoldOrderType.SetNotesToSeller(Index: Integer; const Astring: string);
begin
  FNotesToSeller := Astring;
  FNotesToSeller_Specified := True;
end;

function SellingManagerSoldOrderType.NotesToSeller_Specified(Index: Integer): boolean;
begin
  Result := FNotesToSeller_Specified;
end;

procedure SellingManagerSoldOrderType.SetOrderStatus(Index: Integer; const ASellingManagerOrderStatusType: SellingManagerOrderStatusType);
begin
  FOrderStatus := ASellingManagerOrderStatusType;
  FOrderStatus_Specified := True;
end;

function SellingManagerSoldOrderType.OrderStatus_Specified(Index: Integer): boolean;
begin
  Result := FOrderStatus_Specified;
end;

procedure SellingManagerSoldOrderType.SetUnpaidItemStatus(Index: Integer; const AUnpaidItemStatusTypeCodeType: UnpaidItemStatusTypeCodeType);
begin
  FUnpaidItemStatus := AUnpaidItemStatusTypeCodeType;
  FUnpaidItemStatus_Specified := True;
end;

function SellingManagerSoldOrderType.UnpaidItemStatus_Specified(Index: Integer): boolean;
begin
  Result := FUnpaidItemStatus_Specified;
end;

procedure SellingManagerSoldOrderType.SetSalePrice(Index: Integer; const AAmountType: AmountType);
begin
  FSalePrice := AAmountType;
  FSalePrice_Specified := True;
end;

function SellingManagerSoldOrderType.SalePrice_Specified(Index: Integer): boolean;
begin
  Result := FSalePrice_Specified;
end;

procedure SellingManagerSoldOrderType.SetEmailsSent(Index: Integer; const AInteger: Integer);
begin
  FEmailsSent := AInteger;
  FEmailsSent_Specified := True;
end;

function SellingManagerSoldOrderType.EmailsSent_Specified(Index: Integer): boolean;
begin
  Result := FEmailsSent_Specified;
end;

procedure SellingManagerSoldOrderType.SetDaysSinceSale(Index: Integer; const AInteger: Integer);
begin
  FDaysSinceSale := AInteger;
  FDaysSinceSale_Specified := True;
end;

function SellingManagerSoldOrderType.DaysSinceSale_Specified(Index: Integer): boolean;
begin
  Result := FDaysSinceSale_Specified;
end;

procedure SellingManagerSoldOrderType.SetBuyerID(Index: Integer; const Astring: string);
begin
  FBuyerID := Astring;
  FBuyerID_Specified := True;
end;

function SellingManagerSoldOrderType.BuyerID_Specified(Index: Integer): boolean;
begin
  Result := FBuyerID_Specified;
end;

procedure SellingManagerSoldOrderType.SetBuyerEmail(Index: Integer; const Astring: string);
begin
  FBuyerEmail := Astring;
  FBuyerEmail_Specified := True;
end;

function SellingManagerSoldOrderType.BuyerEmail_Specified(Index: Integer): boolean;
begin
  Result := FBuyerEmail_Specified;
end;

procedure SellingManagerSoldOrderType.SetSaleRecordID(Index: Integer; const AInt64: Int64);
begin
  FSaleRecordID := AInt64;
  FSaleRecordID_Specified := True;
end;

function SellingManagerSoldOrderType.SaleRecordID_Specified(Index: Integer): boolean;
begin
  Result := FSaleRecordID_Specified;
end;

procedure SellingManagerSoldOrderType.SetCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationTime := ATXSDateTime;
  FCreationTime_Specified := True;
end;

function SellingManagerSoldOrderType.CreationTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationTime_Specified;
end;

procedure SellingManagerSoldOrderType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function SellingManagerSoldOrderType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure SellingManagerSoldOrderType.SetRefundStatus(Index: Integer; const Astring: string);
begin
  FRefundStatus := Astring;
  FRefundStatus_Specified := True;
end;

function SellingManagerSoldOrderType.RefundStatus_Specified(Index: Integer): boolean;
begin
  Result := FRefundStatus_Specified;
end;

destructor SellingManagerEmailLogType.Destroy;
begin
  SysUtils.FreeAndNil(FEventTime);
  inherited Destroy;
end;

procedure SellingManagerEmailLogType.SetEmailType(Index: Integer; const ASellingManagerEmailTypeCodeType: SellingManagerEmailTypeCodeType);
begin
  FEmailType := ASellingManagerEmailTypeCodeType;
  FEmailType_Specified := True;
end;

function SellingManagerEmailLogType.EmailType_Specified(Index: Integer): boolean;
begin
  Result := FEmailType_Specified;
end;

procedure SellingManagerEmailLogType.SetCustomEmailName(Index: Integer; const Astring: string);
begin
  FCustomEmailName := Astring;
  FCustomEmailName_Specified := True;
end;

function SellingManagerEmailLogType.CustomEmailName_Specified(Index: Integer): boolean;
begin
  Result := FCustomEmailName_Specified;
end;

procedure SellingManagerEmailLogType.SetEmailState(Index: Integer; const ASellingManagerEmailSentStatusCodeType: SellingManagerEmailSentStatusCodeType);
begin
  FEmailState := ASellingManagerEmailSentStatusCodeType;
  FEmailState_Specified := True;
end;

function SellingManagerEmailLogType.EmailState_Specified(Index: Integer): boolean;
begin
  Result := FEmailState_Specified;
end;

procedure SellingManagerEmailLogType.SetEventTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEventTime := ATXSDateTime;
  FEventTime_Specified := True;
end;

function SellingManagerEmailLogType.EventTime_Specified(Index: Integer): boolean;
begin
  Result := FEventTime_Specified;
end;

destructor TimeRangeType.Destroy;
begin
  SysUtils.FreeAndNil(FTimeFrom);
  SysUtils.FreeAndNil(FTimeTo);
  inherited Destroy;
end;

procedure TimeRangeType.SetTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeFrom := ATXSDateTime;
  FTimeFrom_Specified := True;
end;

function TimeRangeType.TimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FTimeFrom_Specified;
end;

procedure TimeRangeType.SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeTo := ATXSDateTime;
  FTimeTo_Specified := True;
end;

function TimeRangeType.TimeTo_Specified(Index: Integer): boolean;
begin
  Result := FTimeTo_Specified;
end;

destructor SellingManagerFolderDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FChildFolder)-1 do
    SysUtils.FreeAndNil(FChildFolder[I]);
  System.SetLength(FChildFolder, 0);
  SysUtils.FreeAndNil(FCreationTime);
  inherited Destroy;
end;

procedure SellingManagerFolderDetailsType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function SellingManagerFolderDetailsType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure SellingManagerFolderDetailsType.SetParentFolderID(Index: Integer; const AInt64: Int64);
begin
  FParentFolderID := AInt64;
  FParentFolderID_Specified := True;
end;

function SellingManagerFolderDetailsType.ParentFolderID_Specified(Index: Integer): boolean;
begin
  Result := FParentFolderID_Specified;
end;

procedure SellingManagerFolderDetailsType.SetFolderLevel(Index: Integer; const AInt64: Int64);
begin
  FFolderLevel := AInt64;
  FFolderLevel_Specified := True;
end;

function SellingManagerFolderDetailsType.FolderLevel_Specified(Index: Integer): boolean;
begin
  Result := FFolderLevel_Specified;
end;

procedure SellingManagerFolderDetailsType.SetFolderName(Index: Integer; const Astring: string);
begin
  FFolderName := Astring;
  FFolderName_Specified := True;
end;

function SellingManagerFolderDetailsType.FolderName_Specified(Index: Integer): boolean;
begin
  Result := FFolderName_Specified;
end;

procedure SellingManagerFolderDetailsType.SetFolderComment(Index: Integer; const Astring: string);
begin
  FFolderComment := Astring;
  FFolderComment_Specified := True;
end;

function SellingManagerFolderDetailsType.FolderComment_Specified(Index: Integer): boolean;
begin
  Result := FFolderComment_Specified;
end;

procedure SellingManagerFolderDetailsType.SetChildFolder(Index: Integer; const AArray_Of_SellingManagerFolderDetailsType: Array_Of_SellingManagerFolderDetailsType);
begin
  FChildFolder := AArray_Of_SellingManagerFolderDetailsType;
  FChildFolder_Specified := True;
end;

function SellingManagerFolderDetailsType.ChildFolder_Specified(Index: Integer): boolean;
begin
  Result := FChildFolder_Specified;
end;

procedure SellingManagerFolderDetailsType.SetCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationTime := ATXSDateTime;
  FCreationTime_Specified := True;
end;

function SellingManagerFolderDetailsType.CreationTime_Specified(Index: Integer): boolean;
begin
  Result := FCreationTime_Specified;
end;

destructor PaymentHoldDetailType.Destroy;
begin
  SysUtils.FreeAndNil(FExpectedReleaseDate);
  inherited Destroy;
end;

procedure PaymentHoldDetailType.SetExpectedReleaseDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpectedReleaseDate := ATXSDateTime;
  FExpectedReleaseDate_Specified := True;
end;

function PaymentHoldDetailType.ExpectedReleaseDate_Specified(Index: Integer): boolean;
begin
  Result := FExpectedReleaseDate_Specified;
end;

procedure PaymentHoldDetailType.SetRequiredSellerActionArray(Index: Integer; const ARequiredSellerActionArrayType: RequiredSellerActionArrayType);
begin
  FRequiredSellerActionArray := ARequiredSellerActionArrayType;
  FRequiredSellerActionArray_Specified := True;
end;

function PaymentHoldDetailType.RequiredSellerActionArray_Specified(Index: Integer): boolean;
begin
  Result := FRequiredSellerActionArray_Specified;
end;

procedure PaymentHoldDetailType.SetNumOfReqSellerActions(Index: Integer; const AInteger: Integer);
begin
  FNumOfReqSellerActions := AInteger;
  FNumOfReqSellerActions_Specified := True;
end;

function PaymentHoldDetailType.NumOfReqSellerActions_Specified(Index: Integer): boolean;
begin
  Result := FNumOfReqSellerActions_Specified;
end;

procedure PaymentHoldDetailType.SetPaymentHoldReason(Index: Integer; const APaymentHoldReasonCodeType: PaymentHoldReasonCodeType);
begin
  FPaymentHoldReason := APaymentHoldReasonCodeType;
  FPaymentHoldReason_Specified := True;
end;

function PaymentHoldDetailType.PaymentHoldReason_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldReason_Specified;
end;

destructor NotificationDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FExpirationTime);
  SysUtils.FreeAndNil(FNextRetryTime);
  SysUtils.FreeAndNil(FDeliveryTime);
  inherited Destroy;
end;

procedure NotificationDetailsType.SetDeliveryURL(Index: Integer; const Astring: string);
begin
  FDeliveryURL := Astring;
  FDeliveryURL_Specified := True;
end;

function NotificationDetailsType.DeliveryURL_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURL_Specified;
end;

procedure NotificationDetailsType.SetReferenceID(Index: Integer; const Astring: string);
begin
  FReferenceID := Astring;
  FReferenceID_Specified := True;
end;

function NotificationDetailsType.ReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FReferenceID_Specified;
end;

procedure NotificationDetailsType.SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpirationTime := ATXSDateTime;
  FExpirationTime_Specified := True;
end;

function NotificationDetailsType.ExpirationTime_Specified(Index: Integer): boolean;
begin
  Result := FExpirationTime_Specified;
end;

procedure NotificationDetailsType.SetType_(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
begin
  FType_ := ANotificationEventTypeCodeType;
  FType__Specified := True;
end;

function NotificationDetailsType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure NotificationDetailsType.SetRetries(Index: Integer; const AInteger: Integer);
begin
  FRetries := AInteger;
  FRetries_Specified := True;
end;

function NotificationDetailsType.Retries_Specified(Index: Integer): boolean;
begin
  Result := FRetries_Specified;
end;

procedure NotificationDetailsType.SetDeliveryStatus(Index: Integer; const ANotificationEventStateCodeType: NotificationEventStateCodeType);
begin
  FDeliveryStatus := ANotificationEventStateCodeType;
  FDeliveryStatus_Specified := True;
end;

function NotificationDetailsType.DeliveryStatus_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryStatus_Specified;
end;

procedure NotificationDetailsType.SetNextRetryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FNextRetryTime := ATXSDateTime;
  FNextRetryTime_Specified := True;
end;

function NotificationDetailsType.NextRetryTime_Specified(Index: Integer): boolean;
begin
  Result := FNextRetryTime_Specified;
end;

procedure NotificationDetailsType.SetDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDeliveryTime := ATXSDateTime;
  FDeliveryTime_Specified := True;
end;

function NotificationDetailsType.DeliveryTime_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryTime_Specified;
end;

procedure NotificationDetailsType.SetErrorMessage(Index: Integer; const Astring: string);
begin
  FErrorMessage := Astring;
  FErrorMessage_Specified := True;
end;

function NotificationDetailsType.ErrorMessage_Specified(Index: Integer): boolean;
begin
  Result := FErrorMessage_Specified;
end;

procedure NotificationDetailsType.SetDeliveryURLName(Index: Integer; const Astring: string);
begin
  FDeliveryURLName := Astring;
  FDeliveryURLName_Specified := True;
end;

function NotificationDetailsType.DeliveryURLName_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURLName_Specified;
end;

destructor MyMessagesForwardDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUserForwardDate);
  inherited Destroy;
end;

procedure MyMessagesForwardDetailsType.SetUserForwardDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUserForwardDate := ATXSDateTime;
  FUserForwardDate_Specified := True;
end;

function MyMessagesForwardDetailsType.UserForwardDate_Specified(Index: Integer): boolean;
begin
  Result := FUserForwardDate_Specified;
end;

procedure MyMessagesForwardDetailsType.SetForwardMessageEncoding(Index: Integer; const Astring: string);
begin
  FForwardMessageEncoding := Astring;
  FForwardMessageEncoding_Specified := True;
end;

function MyMessagesForwardDetailsType.ForwardMessageEncoding_Specified(Index: Integer): boolean;
begin
  Result := FForwardMessageEncoding_Specified;
end;

destructor MyMessagesResponseDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUserResponseDate);
  inherited Destroy;
end;

procedure MyMessagesResponseDetailsType.SetResponseEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FResponseEnabled := ABoolean;
  FResponseEnabled_Specified := True;
end;

function MyMessagesResponseDetailsType.ResponseEnabled_Specified(Index: Integer): boolean;
begin
  Result := FResponseEnabled_Specified;
end;

procedure MyMessagesResponseDetailsType.SetResponseURL(Index: Integer; const Astring: string);
begin
  FResponseURL := Astring;
  FResponseURL_Specified := True;
end;

function MyMessagesResponseDetailsType.ResponseURL_Specified(Index: Integer): boolean;
begin
  Result := FResponseURL_Specified;
end;

procedure MyMessagesResponseDetailsType.SetUserResponseDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUserResponseDate := ATXSDateTime;
  FUserResponseDate_Specified := True;
end;

function MyMessagesResponseDetailsType.UserResponseDate_Specified(Index: Integer): boolean;
begin
  Result := FUserResponseDate_Specified;
end;

destructor ListingDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FConvertedBuyItNowPrice);
  SysUtils.FreeAndNil(FConvertedStartPrice);
  SysUtils.FreeAndNil(FConvertedReservePrice);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  SysUtils.FreeAndNil(FMinimumBestOfferPrice);
  SysUtils.FreeAndNil(FBestOfferAutoAcceptPrice);
  inherited Destroy;
end;

procedure ListingDetailsType.SetAdult(Index: Integer; const ABoolean: Boolean);
begin
  FAdult := ABoolean;
  FAdult_Specified := True;
end;

function ListingDetailsType.Adult_Specified(Index: Integer): boolean;
begin
  Result := FAdult_Specified;
end;

procedure ListingDetailsType.SetBindingAuction(Index: Integer; const ABoolean: Boolean);
begin
  FBindingAuction := ABoolean;
  FBindingAuction_Specified := True;
end;

function ListingDetailsType.BindingAuction_Specified(Index: Integer): boolean;
begin
  Result := FBindingAuction_Specified;
end;

procedure ListingDetailsType.SetCheckoutEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCheckoutEnabled := ABoolean;
  FCheckoutEnabled_Specified := True;
end;

function ListingDetailsType.CheckoutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutEnabled_Specified;
end;

procedure ListingDetailsType.SetConvertedBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedBuyItNowPrice := AAmountType;
  FConvertedBuyItNowPrice_Specified := True;
end;

function ListingDetailsType.ConvertedBuyItNowPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedBuyItNowPrice_Specified;
end;

procedure ListingDetailsType.SetConvertedStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedStartPrice := AAmountType;
  FConvertedStartPrice_Specified := True;
end;

function ListingDetailsType.ConvertedStartPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedStartPrice_Specified;
end;

procedure ListingDetailsType.SetConvertedReservePrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedReservePrice := AAmountType;
  FConvertedReservePrice_Specified := True;
end;

function ListingDetailsType.ConvertedReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedReservePrice_Specified;
end;

procedure ListingDetailsType.SetHasReservePrice(Index: Integer; const ABoolean: Boolean);
begin
  FHasReservePrice := ABoolean;
  FHasReservePrice_Specified := True;
end;

function ListingDetailsType.HasReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FHasReservePrice_Specified;
end;

procedure ListingDetailsType.SetRelistedItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FRelistedItemID := AItemIDType;
  FRelistedItemID_Specified := True;
end;

function ListingDetailsType.RelistedItemID_Specified(Index: Integer): boolean;
begin
  Result := FRelistedItemID_Specified;
end;

procedure ListingDetailsType.SetSecondChanceOriginalItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FSecondChanceOriginalItemID := AItemIDType;
  FSecondChanceOriginalItemID_Specified := True;
end;

function ListingDetailsType.SecondChanceOriginalItemID_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOriginalItemID_Specified;
end;

procedure ListingDetailsType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function ListingDetailsType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure ListingDetailsType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function ListingDetailsType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure ListingDetailsType.SetViewItemURL(Index: Integer; const Astring: string);
begin
  FViewItemURL := Astring;
  FViewItemURL_Specified := True;
end;

function ListingDetailsType.ViewItemURL_Specified(Index: Integer): boolean;
begin
  Result := FViewItemURL_Specified;
end;

procedure ListingDetailsType.SetHasUnansweredQuestions(Index: Integer; const ABoolean: Boolean);
begin
  FHasUnansweredQuestions := ABoolean;
  FHasUnansweredQuestions_Specified := True;
end;

function ListingDetailsType.HasUnansweredQuestions_Specified(Index: Integer): boolean;
begin
  Result := FHasUnansweredQuestions_Specified;
end;

procedure ListingDetailsType.SetHasPublicMessages(Index: Integer; const ABoolean: Boolean);
begin
  FHasPublicMessages := ABoolean;
  FHasPublicMessages_Specified := True;
end;

function ListingDetailsType.HasPublicMessages_Specified(Index: Integer): boolean;
begin
  Result := FHasPublicMessages_Specified;
end;

procedure ListingDetailsType.SetBuyItNowAvailable(Index: Integer; const ABoolean: Boolean);
begin
  FBuyItNowAvailable := ABoolean;
  FBuyItNowAvailable_Specified := True;
end;

function ListingDetailsType.BuyItNowAvailable_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowAvailable_Specified;
end;

procedure ListingDetailsType.SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
begin
  FSellerBusinessType := ASellerBusinessCodeType;
  FSellerBusinessType_Specified := True;
end;

function ListingDetailsType.SellerBusinessType_Specified(Index: Integer): boolean;
begin
  Result := FSellerBusinessType_Specified;
end;

procedure ListingDetailsType.SetMinimumBestOfferPrice(Index: Integer; const AAmountType: AmountType);
begin
  FMinimumBestOfferPrice := AAmountType;
  FMinimumBestOfferPrice_Specified := True;
end;

function ListingDetailsType.MinimumBestOfferPrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumBestOfferPrice_Specified;
end;

procedure ListingDetailsType.SetMinimumBestOfferMessage(Index: Integer; const Astring: string);
begin
  FMinimumBestOfferMessage := Astring;
  FMinimumBestOfferMessage_Specified := True;
end;

function ListingDetailsType.MinimumBestOfferMessage_Specified(Index: Integer): boolean;
begin
  Result := FMinimumBestOfferMessage_Specified;
end;

procedure ListingDetailsType.SetLocalListingDistance(Index: Integer; const Astring: string);
begin
  FLocalListingDistance := Astring;
  FLocalListingDistance_Specified := True;
end;

function ListingDetailsType.LocalListingDistance_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistance_Specified;
end;

procedure ListingDetailsType.SetTCROriginalItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FTCROriginalItemID := AItemIDType;
  FTCROriginalItemID_Specified := True;
end;

function ListingDetailsType.TCROriginalItemID_Specified(Index: Integer): boolean;
begin
  Result := FTCROriginalItemID_Specified;
end;

procedure ListingDetailsType.SetViewItemURLForNaturalSearch(Index: Integer; const Astring: string);
begin
  FViewItemURLForNaturalSearch := Astring;
  FViewItemURLForNaturalSearch_Specified := True;
end;

function ListingDetailsType.ViewItemURLForNaturalSearch_Specified(Index: Integer): boolean;
begin
  Result := FViewItemURLForNaturalSearch_Specified;
end;

procedure ListingDetailsType.SetPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPayPerLeadEnabled := ABoolean;
  FPayPerLeadEnabled_Specified := True;
end;

function ListingDetailsType.PayPerLeadEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPayPerLeadEnabled_Specified;
end;

procedure ListingDetailsType.SetBestOfferAutoAcceptPrice(Index: Integer; const AAmountType: AmountType);
begin
  FBestOfferAutoAcceptPrice := AAmountType;
  FBestOfferAutoAcceptPrice_Specified := True;
end;

function ListingDetailsType.BestOfferAutoAcceptPrice_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoAcceptPrice_Specified;
end;

procedure ListingDetailsType.SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
begin
  FEndingReason := AEndReasonCodeType;
  FEndingReason_Specified := True;
end;

function ListingDetailsType.EndingReason_Specified(Index: Integer): boolean;
begin
  Result := FEndingReason_Specified;
end;

destructor MyMessagesAlertType.Destroy;
begin
  SysUtils.FreeAndNil(FCreationDate);
  SysUtils.FreeAndNil(FReceiveDate);
  SysUtils.FreeAndNil(FExpirationDate);
  SysUtils.FreeAndNil(FResolutionDate);
  SysUtils.FreeAndNil(FLastReadDate);
  SysUtils.FreeAndNil(FResponseDetails);
  SysUtils.FreeAndNil(FForwardDetails);
  SysUtils.FreeAndNil(FFolder);
  inherited Destroy;
end;

procedure MyMessagesAlertType.SetSender(Index: Integer; const Astring: string);
begin
  FSender := Astring;
  FSender_Specified := True;
end;

function MyMessagesAlertType.Sender_Specified(Index: Integer): boolean;
begin
  Result := FSender_Specified;
end;

procedure MyMessagesAlertType.SetRecipientUserID(Index: Integer; const Astring: string);
begin
  FRecipientUserID := Astring;
  FRecipientUserID_Specified := True;
end;

function MyMessagesAlertType.RecipientUserID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientUserID_Specified;
end;

procedure MyMessagesAlertType.SetSubject(Index: Integer; const Astring: string);
begin
  FSubject := Astring;
  FSubject_Specified := True;
end;

function MyMessagesAlertType.Subject_Specified(Index: Integer): boolean;
begin
  Result := FSubject_Specified;
end;

procedure MyMessagesAlertType.SetPriority(Index: Integer; const Astring: string);
begin
  FPriority := Astring;
  FPriority_Specified := True;
end;

function MyMessagesAlertType.Priority_Specified(Index: Integer): boolean;
begin
  Result := FPriority_Specified;
end;

procedure MyMessagesAlertType.SetAlertID(Index: Integer; const AMyMessagesAlertIDType: MyMessagesAlertIDType);
begin
  FAlertID := AMyMessagesAlertIDType;
  FAlertID_Specified := True;
end;

function MyMessagesAlertType.AlertID_Specified(Index: Integer): boolean;
begin
  Result := FAlertID_Specified;
end;

procedure MyMessagesAlertType.SetExternalAlertID(Index: Integer; const Astring: string);
begin
  FExternalAlertID := Astring;
  FExternalAlertID_Specified := True;
end;

function MyMessagesAlertType.ExternalAlertID_Specified(Index: Integer): boolean;
begin
  Result := FExternalAlertID_Specified;
end;

procedure MyMessagesAlertType.SetContentType(Index: Integer; const Astring: string);
begin
  FContentType := Astring;
  FContentType_Specified := True;
end;

function MyMessagesAlertType.ContentType_Specified(Index: Integer): boolean;
begin
  Result := FContentType_Specified;
end;

procedure MyMessagesAlertType.SetText(Index: Integer; const Astring: string);
begin
  FText := Astring;
  FText_Specified := True;
end;

function MyMessagesAlertType.Text_Specified(Index: Integer): boolean;
begin
  Result := FText_Specified;
end;

procedure MyMessagesAlertType.SetResolutionStatus(Index: Integer; const AMyMessagesAlertResolutionStatusCode: MyMessagesAlertResolutionStatusCode);
begin
  FResolutionStatus := AMyMessagesAlertResolutionStatusCode;
  FResolutionStatus_Specified := True;
end;

function MyMessagesAlertType.ResolutionStatus_Specified(Index: Integer): boolean;
begin
  Result := FResolutionStatus_Specified;
end;

procedure MyMessagesAlertType.SetRead_(Index: Integer; const ABoolean: Boolean);
begin
  FRead_ := ABoolean;
  FRead__Specified := True;
end;

function MyMessagesAlertType.Read__Specified(Index: Integer): boolean;
begin
  Result := FRead__Specified;
end;

procedure MyMessagesAlertType.SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDate := ATXSDateTime;
  FCreationDate_Specified := True;
end;

function MyMessagesAlertType.CreationDate_Specified(Index: Integer): boolean;
begin
  Result := FCreationDate_Specified;
end;

procedure MyMessagesAlertType.SetReceiveDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FReceiveDate := ATXSDateTime;
  FReceiveDate_Specified := True;
end;

function MyMessagesAlertType.ReceiveDate_Specified(Index: Integer): boolean;
begin
  Result := FReceiveDate_Specified;
end;

procedure MyMessagesAlertType.SetExpirationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpirationDate := ATXSDateTime;
  FExpirationDate_Specified := True;
end;

function MyMessagesAlertType.ExpirationDate_Specified(Index: Integer): boolean;
begin
  Result := FExpirationDate_Specified;
end;

procedure MyMessagesAlertType.SetResolutionDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FResolutionDate := ATXSDateTime;
  FResolutionDate_Specified := True;
end;

function MyMessagesAlertType.ResolutionDate_Specified(Index: Integer): boolean;
begin
  Result := FResolutionDate_Specified;
end;

procedure MyMessagesAlertType.SetLastReadDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastReadDate := ATXSDateTime;
  FLastReadDate_Specified := True;
end;

function MyMessagesAlertType.LastReadDate_Specified(Index: Integer): boolean;
begin
  Result := FLastReadDate_Specified;
end;

procedure MyMessagesAlertType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function MyMessagesAlertType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure MyMessagesAlertType.SetIsTimedResolution(Index: Integer; const ABoolean: Boolean);
begin
  FIsTimedResolution := ABoolean;
  FIsTimedResolution_Specified := True;
end;

function MyMessagesAlertType.IsTimedResolution_Specified(Index: Integer): boolean;
begin
  Result := FIsTimedResolution_Specified;
end;

procedure MyMessagesAlertType.SetActionURL(Index: Integer; const Astring: string);
begin
  FActionURL := Astring;
  FActionURL_Specified := True;
end;

function MyMessagesAlertType.ActionURL_Specified(Index: Integer): boolean;
begin
  Result := FActionURL_Specified;
end;

procedure MyMessagesAlertType.SetResponseDetails(Index: Integer; const AMyMessagesResponseDetailsType: MyMessagesResponseDetailsType);
begin
  FResponseDetails := AMyMessagesResponseDetailsType;
  FResponseDetails_Specified := True;
end;

function MyMessagesAlertType.ResponseDetails_Specified(Index: Integer): boolean;
begin
  Result := FResponseDetails_Specified;
end;

procedure MyMessagesAlertType.SetForwardDetails(Index: Integer; const AMyMessagesForwardDetailsType: MyMessagesForwardDetailsType);
begin
  FForwardDetails := AMyMessagesForwardDetailsType;
  FForwardDetails_Specified := True;
end;

function MyMessagesAlertType.ForwardDetails_Specified(Index: Integer): boolean;
begin
  Result := FForwardDetails_Specified;
end;

procedure MyMessagesAlertType.SetFolder(Index: Integer; const AMyMessagesFolderType: MyMessagesFolderType);
begin
  FFolder := AMyMessagesFolderType;
  FFolder_Specified := True;
end;

function MyMessagesAlertType.Folder_Specified(Index: Integer): boolean;
begin
  Result := FFolder_Specified;
end;

destructor MembershipDetailType.Destroy;
begin
  SysUtils.FreeAndNil(FExpiryDate);
  inherited Destroy;
end;

procedure MembershipDetailType.SetProgramName(Index: Integer; const Astring: string);
begin
  FProgramName := Astring;
  FProgramName_Specified := True;
end;

function MembershipDetailType.ProgramName_Specified(Index: Integer): boolean;
begin
  Result := FProgramName_Specified;
end;

procedure MembershipDetailType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function MembershipDetailType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure MembershipDetailType.SetExpiryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpiryDate := ATXSDateTime;
  FExpiryDate_Specified := True;
end;

function MembershipDetailType.ExpiryDate_Specified(Index: Integer): boolean;
begin
  Result := FExpiryDate_Specified;
end;

destructor MarkUpMarkDownEventType.Destroy;
begin
  SysUtils.FreeAndNil(FTime);
  inherited Destroy;
end;

procedure MarkUpMarkDownEventType.SetType_(Index: Integer; const AMarkUpMarkDownEventTypeCodeType: MarkUpMarkDownEventTypeCodeType);
begin
  FType_ := AMarkUpMarkDownEventTypeCodeType;
  FType__Specified := True;
end;

function MarkUpMarkDownEventType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure MarkUpMarkDownEventType.SetTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTime := ATXSDateTime;
  FTime_Specified := True;
end;

function MarkUpMarkDownEventType.Time_Specified(Index: Integer): boolean;
begin
  Result := FTime_Specified;
end;

procedure MarkUpMarkDownEventType.SetReason(Index: Integer; const Astring: string);
begin
  FReason := Astring;
  FReason_Specified := True;
end;

function MarkUpMarkDownEventType.Reason_Specified(Index: Integer): boolean;
begin
  Result := FReason_Specified;
end;

destructor UserAgreementInfoType.Destroy;
begin
  SysUtils.FreeAndNil(FAcceptedTime);
  SysUtils.FreeAndNil(FSellereBayPaymentProcessEnableTime);
  inherited Destroy;
end;

procedure UserAgreementInfoType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function UserAgreementInfoType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure UserAgreementInfoType.SetSellereBayPaymentProcessStatus(Index: Integer; const ASellereBayPaymentProcessStatusCodeType: SellereBayPaymentProcessStatusCodeType);
begin
  FSellereBayPaymentProcessStatus := ASellereBayPaymentProcessStatusCodeType;
  FSellereBayPaymentProcessStatus_Specified := True;
end;

function UserAgreementInfoType.SellereBayPaymentProcessStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellereBayPaymentProcessStatus_Specified;
end;

procedure UserAgreementInfoType.SetAcceptedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FAcceptedTime := ATXSDateTime;
  FAcceptedTime_Specified := True;
end;

function UserAgreementInfoType.AcceptedTime_Specified(Index: Integer): boolean;
begin
  Result := FAcceptedTime_Specified;
end;

procedure UserAgreementInfoType.SetSellereBayPaymentProcessEnableTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FSellereBayPaymentProcessEnableTime := ATXSDateTime;
  FSellereBayPaymentProcessEnableTime_Specified := True;
end;

function UserAgreementInfoType.SellereBayPaymentProcessEnableTime_Specified(Index: Integer): boolean;
begin
  Result := FSellereBayPaymentProcessEnableTime_Specified;
end;

procedure UserAgreementInfoType.SetUserAgreementURL(Index: Integer; const Astring: string);
begin
  FUserAgreementURL := Astring;
  FUserAgreementURL_Specified := True;
end;

function UserAgreementInfoType.UserAgreementURL_Specified(Index: Integer): boolean;
begin
  Result := FUserAgreementURL_Specified;
end;

destructor StoreVacationPreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FReturnDate);
  inherited Destroy;
end;

procedure StoreVacationPreferencesType.SetOnVacation(Index: Integer; const ABoolean: Boolean);
begin
  FOnVacation := ABoolean;
  FOnVacation_Specified := True;
end;

function StoreVacationPreferencesType.OnVacation_Specified(Index: Integer): boolean;
begin
  Result := FOnVacation_Specified;
end;

procedure StoreVacationPreferencesType.SetReturnDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FReturnDate := ATXSDateTime;
  FReturnDate_Specified := True;
end;

function StoreVacationPreferencesType.ReturnDate_Specified(Index: Integer): boolean;
begin
  Result := FReturnDate_Specified;
end;

procedure StoreVacationPreferencesType.SetHideFixedPriceStoreItems(Index: Integer; const ABoolean: Boolean);
begin
  FHideFixedPriceStoreItems := ABoolean;
  FHideFixedPriceStoreItems_Specified := True;
end;

function StoreVacationPreferencesType.HideFixedPriceStoreItems_Specified(Index: Integer): boolean;
begin
  Result := FHideFixedPriceStoreItems_Specified;
end;

procedure StoreVacationPreferencesType.SetMessageItem(Index: Integer; const ABoolean: Boolean);
begin
  FMessageItem := ABoolean;
  FMessageItem_Specified := True;
end;

function StoreVacationPreferencesType.MessageItem_Specified(Index: Integer): boolean;
begin
  Result := FMessageItem_Specified;
end;

procedure StoreVacationPreferencesType.SetMessageStore(Index: Integer; const ABoolean: Boolean);
begin
  FMessageStore := ABoolean;
  FMessageStore_Specified := True;
end;

function StoreVacationPreferencesType.MessageStore_Specified(Index: Integer): boolean;
begin
  Result := FMessageStore_Specified;
end;

procedure StoreVacationPreferencesType.SetDisplayMessageStoreCustomText(Index: Integer; const ABoolean: Boolean);
begin
  FDisplayMessageStoreCustomText := ABoolean;
  FDisplayMessageStoreCustomText_Specified := True;
end;

function StoreVacationPreferencesType.DisplayMessageStoreCustomText_Specified(Index: Integer): boolean;
begin
  Result := FDisplayMessageStoreCustomText_Specified;
end;

procedure StoreVacationPreferencesType.SetMessageStoreCustomText(Index: Integer; const Astring: string);
begin
  FMessageStoreCustomText := Astring;
  FMessageStoreCustomText_Specified := True;
end;

function StoreVacationPreferencesType.MessageStoreCustomText_Specified(Index: Integer): boolean;
begin
  Result := FMessageStoreCustomText_Specified;
end;

destructor PromotionalSaleDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FOriginalPrice);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure PromotionalSaleDetailsType.SetOriginalPrice(Index: Integer; const AAmountType: AmountType);
begin
  FOriginalPrice := AAmountType;
  FOriginalPrice_Specified := True;
end;

function PromotionalSaleDetailsType.OriginalPrice_Specified(Index: Integer): boolean;
begin
  Result := FOriginalPrice_Specified;
end;

procedure PromotionalSaleDetailsType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function PromotionalSaleDetailsType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure PromotionalSaleDetailsType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function PromotionalSaleDetailsType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

destructor RefundType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRefundTransactionArray)-1 do
    SysUtils.FreeAndNil(FRefundTransactionArray[I]);
  System.SetLength(FRefundTransactionArray, 0);
  for I := 0 to System.Length(FRefundFundingSourceArray)-1 do
    SysUtils.FreeAndNil(FRefundFundingSourceArray[I]);
  System.SetLength(FRefundFundingSourceArray, 0);
  SysUtils.FreeAndNil(FRefundFromSeller);
  SysUtils.FreeAndNil(FTotalRefundToBuyer);
  SysUtils.FreeAndNil(FRefundTime);
  SysUtils.FreeAndNil(FRefundAmount);
  SysUtils.FreeAndNil(FRefundFailureReason);
  SysUtils.FreeAndNil(FRefundRequestedTime);
  SysUtils.FreeAndNil(FRefundCompletionTime);
  SysUtils.FreeAndNil(FEstimatedRefundCompletionTime);
  inherited Destroy;
end;

procedure RefundType.SetRefundFromSeller(Index: Integer; const AAmountType: AmountType);
begin
  FRefundFromSeller := AAmountType;
  FRefundFromSeller_Specified := True;
end;

function RefundType.RefundFromSeller_Specified(Index: Integer): boolean;
begin
  Result := FRefundFromSeller_Specified;
end;

procedure RefundType.SetTotalRefundToBuyer(Index: Integer; const AAmountType: AmountType);
begin
  FTotalRefundToBuyer := AAmountType;
  FTotalRefundToBuyer_Specified := True;
end;

function RefundType.TotalRefundToBuyer_Specified(Index: Integer): boolean;
begin
  Result := FTotalRefundToBuyer_Specified;
end;

procedure RefundType.SetRefundTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundTime := ATXSDateTime;
  FRefundTime_Specified := True;
end;

function RefundType.RefundTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundTime_Specified;
end;

procedure RefundType.SetRefundID(Index: Integer; const Astring: string);
begin
  FRefundID := Astring;
  FRefundID_Specified := True;
end;

function RefundType.RefundID_Specified(Index: Integer): boolean;
begin
  Result := FRefundID_Specified;
end;

procedure RefundType.SetRefundTransactionArray(Index: Integer; const ARefundTransactionArrayType: RefundTransactionArrayType);
begin
  FRefundTransactionArray := ARefundTransactionArrayType;
  FRefundTransactionArray_Specified := True;
end;

function RefundType.RefundTransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FRefundTransactionArray_Specified;
end;

procedure RefundType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function RefundType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure RefundType.SetRefundStatus(Index: Integer; const ARefundStatusCodeType: RefundStatusCodeType);
begin
  FRefundStatus := ARefundStatusCodeType;
  FRefundStatus_Specified := True;
end;

function RefundType.RefundStatus_Specified(Index: Integer): boolean;
begin
  Result := FRefundStatus_Specified;
end;

procedure RefundType.SetRefundFailureReason(Index: Integer; const ARefundFailureReasonType: RefundFailureReasonType);
begin
  FRefundFailureReason := ARefundFailureReasonType;
  FRefundFailureReason_Specified := True;
end;

function RefundType.RefundFailureReason_Specified(Index: Integer): boolean;
begin
  Result := FRefundFailureReason_Specified;
end;

procedure RefundType.SetRefundFundingSourceArray(Index: Integer; const ARefundFundingSourceArrayType: RefundFundingSourceArrayType);
begin
  FRefundFundingSourceArray := ARefundFundingSourceArrayType;
  FRefundFundingSourceArray_Specified := True;
end;

function RefundType.RefundFundingSourceArray_Specified(Index: Integer): boolean;
begin
  Result := FRefundFundingSourceArray_Specified;
end;

procedure RefundType.SetExternalReferenceID(Index: Integer; const Astring: string);
begin
  FExternalReferenceID := Astring;
  FExternalReferenceID_Specified := True;
end;

function RefundType.ExternalReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FExternalReferenceID_Specified;
end;

procedure RefundType.SetRefundRequestedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundRequestedTime := ATXSDateTime;
  FRefundRequestedTime_Specified := True;
end;

function RefundType.RefundRequestedTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundRequestedTime_Specified;
end;

procedure RefundType.SetRefundCompletionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundCompletionTime := ATXSDateTime;
  FRefundCompletionTime_Specified := True;
end;

function RefundType.RefundCompletionTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundCompletionTime_Specified;
end;

procedure RefundType.SetEstimatedRefundCompletionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEstimatedRefundCompletionTime := ATXSDateTime;
  FEstimatedRefundCompletionTime_Specified := True;
end;

function RefundType.EstimatedRefundCompletionTime_Specified(Index: Integer): boolean;
begin
  Result := FEstimatedRefundCompletionTime_Specified;
end;

procedure RefundType.SetSellerNoteToBuyer(Index: Integer; const Astring: string);
begin
  FSellerNoteToBuyer := Astring;
  FSellerNoteToBuyer_Specified := True;
end;

function RefundType.SellerNoteToBuyer_Specified(Index: Integer): boolean;
begin
  Result := FSellerNoteToBuyer_Specified;
end;

destructor SellingManagerProductDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUnitCost);
  SysUtils.FreeAndNil(FVendorInfo);
  inherited Destroy;
end;

procedure SellingManagerProductDetailsType.SetProductName(Index: Integer; const Astring: string);
begin
  FProductName := Astring;
  FProductName_Specified := True;
end;

function SellingManagerProductDetailsType.ProductName_Specified(Index: Integer): boolean;
begin
  Result := FProductName_Specified;
end;

procedure SellingManagerProductDetailsType.SetProductID(Index: Integer; const AInt64: Int64);
begin
  FProductID := AInt64;
  FProductID_Specified := True;
end;

function SellingManagerProductDetailsType.ProductID_Specified(Index: Integer): boolean;
begin
  Result := FProductID_Specified;
end;

procedure SellingManagerProductDetailsType.SetCustomLabel(Index: Integer; const Astring: string);
begin
  FCustomLabel := Astring;
  FCustomLabel_Specified := True;
end;

function SellingManagerProductDetailsType.CustomLabel_Specified(Index: Integer): boolean;
begin
  Result := FCustomLabel_Specified;
end;

procedure SellingManagerProductDetailsType.SetQuantityAvailable(Index: Integer; const AInteger: Integer);
begin
  FQuantityAvailable := AInteger;
  FQuantityAvailable_Specified := True;
end;

function SellingManagerProductDetailsType.QuantityAvailable_Specified(Index: Integer): boolean;
begin
  Result := FQuantityAvailable_Specified;
end;

procedure SellingManagerProductDetailsType.SetUnitCost(Index: Integer; const AAmountType: AmountType);
begin
  FUnitCost := AAmountType;
  FUnitCost_Specified := True;
end;

function SellingManagerProductDetailsType.UnitCost_Specified(Index: Integer): boolean;
begin
  Result := FUnitCost_Specified;
end;

procedure SellingManagerProductDetailsType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function SellingManagerProductDetailsType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure SellingManagerProductDetailsType.SetRestockAlert(Index: Integer; const ABoolean: Boolean);
begin
  FRestockAlert := ABoolean;
  FRestockAlert_Specified := True;
end;

function SellingManagerProductDetailsType.RestockAlert_Specified(Index: Integer): boolean;
begin
  Result := FRestockAlert_Specified;
end;

procedure SellingManagerProductDetailsType.SetRestockThreshold(Index: Integer; const AInteger: Integer);
begin
  FRestockThreshold := AInteger;
  FRestockThreshold_Specified := True;
end;

function SellingManagerProductDetailsType.RestockThreshold_Specified(Index: Integer): boolean;
begin
  Result := FRestockThreshold_Specified;
end;

procedure SellingManagerProductDetailsType.SetVendorInfo(Index: Integer; const ASellingManagerVendorDetailsType: SellingManagerVendorDetailsType);
begin
  FVendorInfo := ASellingManagerVendorDetailsType;
  FVendorInfo_Specified := True;
end;

function SellingManagerProductDetailsType.VendorInfo_Specified(Index: Integer): boolean;
begin
  Result := FVendorInfo_Specified;
end;

procedure SellingManagerProductDetailsType.SetNote(Index: Integer; const Astring: string);
begin
  FNote := Astring;
  FNote_Specified := True;
end;

function SellingManagerProductDetailsType.Note_Specified(Index: Integer): boolean;
begin
  Result := FNote_Specified;
end;

destructor AddItemRequestContainerType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure AddItemRequestContainerType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function AddItemRequestContainerType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure AddItemRequestContainerType.SetMessageID(Index: Integer; const Astring: string);
begin
  FMessageID := Astring;
  FMessageID_Specified := True;
end;

function AddItemRequestContainerType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

destructor AddItemResponseContainerType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FErrors)-1 do
    SysUtils.FreeAndNil(FErrors[I]);
  System.SetLength(FErrors, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddItemResponseContainerType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddItemResponseContainerType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddItemResponseContainerType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddItemResponseContainerType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddItemResponseContainerType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddItemResponseContainerType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure AddItemResponseContainerType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function AddItemResponseContainerType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure AddItemResponseContainerType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function AddItemResponseContainerType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure AddItemResponseContainerType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function AddItemResponseContainerType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure AddItemResponseContainerType.SetCorrelationID(Index: Integer; const Astring: string);
begin
  FCorrelationID := Astring;
  FCorrelationID_Specified := True;
end;

function AddItemResponseContainerType.CorrelationID_Specified(Index: Integer): boolean;
begin
  Result := FCorrelationID_Specified;
end;

procedure AddItemResponseContainerType.SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
begin
  FErrors := AArray_Of_ErrorType;
  FErrors_Specified := True;
end;

function AddItemResponseContainerType.Errors_Specified(Index: Integer): boolean;
begin
  Result := FErrors_Specified;
end;

procedure AddItemResponseContainerType.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function AddItemResponseContainerType.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure AddItemResponseContainerType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function AddItemResponseContainerType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure AddItemResponseContainerType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function AddItemResponseContainerType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

destructor AddMemberMessagesAAQToBidderRequestContainerType.Destroy;
begin
  SysUtils.FreeAndNil(FMemberMessage);
  inherited Destroy;
end;

procedure AddMemberMessagesAAQToBidderRequestContainerType.SetCorrelationID(Index: Integer; const Astring: string);
begin
  FCorrelationID := Astring;
  FCorrelationID_Specified := True;
end;

function AddMemberMessagesAAQToBidderRequestContainerType.CorrelationID_Specified(Index: Integer): boolean;
begin
  Result := FCorrelationID_Specified;
end;

procedure AddMemberMessagesAAQToBidderRequestContainerType.SetItemID(Index: Integer; const Astring: string);
begin
  FItemID := Astring;
  FItemID_Specified := True;
end;

function AddMemberMessagesAAQToBidderRequestContainerType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddMemberMessagesAAQToBidderRequestContainerType.SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
begin
  FMemberMessage := AMemberMessageType;
  FMemberMessage_Specified := True;
end;

function AddMemberMessagesAAQToBidderRequestContainerType.MemberMessage_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessage_Specified;
end;

procedure FeedbackInfoType.SetCommentText(Index: Integer; const Astring: string);
begin
  FCommentText := Astring;
  FCommentText_Specified := True;
end;

function FeedbackInfoType.CommentText_Specified(Index: Integer): boolean;
begin
  Result := FCommentText_Specified;
end;

procedure FeedbackInfoType.SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
begin
  FCommentType := ACommentTypeCodeType;
  FCommentType_Specified := True;
end;

function FeedbackInfoType.CommentType_Specified(Index: Integer): boolean;
begin
  Result := FCommentType_Specified;
end;

procedure FeedbackInfoType.SetTargetUser(Index: Integer; const AUserIDType: UserIDType);
begin
  FTargetUser := AUserIDType;
  FTargetUser_Specified := True;
end;

function FeedbackInfoType.TargetUser_Specified(Index: Integer): boolean;
begin
  Result := FTargetUser_Specified;
end;

procedure eBayPLUSPreferenceType.SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FCountry := ACountryCodeType;
  FCountry_Specified := True;
end;

function eBayPLUSPreferenceType.Country_Specified(Index: Integer): boolean;
begin
  Result := FCountry_Specified;
end;

procedure eBayPLUSPreferenceType.SetOptInStatus(Index: Integer; const ABoolean: Boolean);
begin
  FOptInStatus := ABoolean;
  FOptInStatus_Specified := True;
end;

function eBayPLUSPreferenceType.OptInStatus_Specified(Index: Integer): boolean;
begin
  Result := FOptInStatus_Specified;
end;

procedure eBayPLUSPreferenceType.SetListingPreference(Index: Integer; const ABoolean: Boolean);
begin
  FListingPreference := ABoolean;
  FListingPreference_Specified := True;
end;

function eBayPLUSPreferenceType.ListingPreference_Specified(Index: Integer): boolean;
begin
  Result := FListingPreference_Specified;
end;

destructor CountryDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure CountryDetailsType.SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FCountry := ACountryCodeType;
  FCountry_Specified := True;
end;

function CountryDetailsType.Country_Specified(Index: Integer): boolean;
begin
  Result := FCountry_Specified;
end;

procedure CountryDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function CountryDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure CountryDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function CountryDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure CountryDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function CountryDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure VeROReportItemType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VeROReportItemType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VeROReportItemType.SetVeROReasonCodeID(Index: Integer; const AInt64: Int64);
begin
  FVeROReasonCodeID := AInt64;
  FVeROReasonCodeID_Specified := True;
end;

function VeROReportItemType.VeROReasonCodeID_Specified(Index: Integer): boolean;
begin
  Result := FVeROReasonCodeID_Specified;
end;

procedure VeROReportItemType.SetMessageToSeller(Index: Integer; const Astring: string);
begin
  FMessageToSeller := Astring;
  FMessageToSeller_Specified := True;
end;

function VeROReportItemType.MessageToSeller_Specified(Index: Integer): boolean;
begin
  Result := FMessageToSeller_Specified;
end;

procedure VeROReportItemType.SetCopyEmailToRightsOwner(Index: Integer; const ABoolean: Boolean);
begin
  FCopyEmailToRightsOwner := ABoolean;
  FCopyEmailToRightsOwner_Specified := True;
end;

function VeROReportItemType.CopyEmailToRightsOwner_Specified(Index: Integer): boolean;
begin
  Result := FCopyEmailToRightsOwner_Specified;
end;

procedure VeROReportItemType.SetRegion(Index: Integer; const AArray_Of_ShippingRegionCodeType: Array_Of_ShippingRegionCodeType);
begin
  FRegion := AArray_Of_ShippingRegionCodeType;
  FRegion_Specified := True;
end;

function VeROReportItemType.Region_Specified(Index: Integer): boolean;
begin
  Result := FRegion_Specified;
end;

procedure VeROReportItemType.SetCountry(Index: Integer; const AArray_Of_CountryCodeType: Array_Of_CountryCodeType);
begin
  FCountry := AArray_Of_CountryCodeType;
  FCountry_Specified := True;
end;

function VeROReportItemType.Country_Specified(Index: Integer): boolean;
begin
  Result := FCountry_Specified;
end;

procedure VeROReportItemType.SetPatent(Index: Integer; const Astring: string);
begin
  FPatent := Astring;
  FPatent_Specified := True;
end;

function VeROReportItemType.Patent_Specified(Index: Integer): boolean;
begin
  Result := FPatent_Specified;
end;

procedure VeROReportItemType.SetDetailedMessage(Index: Integer; const Astring: string);
begin
  FDetailedMessage := Astring;
  FDetailedMessage_Specified := True;
end;

function VeROReportItemType.DetailedMessage_Specified(Index: Integer): boolean;
begin
  Result := FDetailedMessage_Specified;
end;

destructor SellingManagerProductSpecificsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemSpecifics)-1 do
    SysUtils.FreeAndNil(FItemSpecifics[I]);
  System.SetLength(FItemSpecifics, 0);
  SysUtils.FreeAndNil(FVariations);
  inherited Destroy;
end;

procedure SellingManagerProductSpecificsType.SetPrimaryCategoryID(Index: Integer; const Astring: string);
begin
  FPrimaryCategoryID := Astring;
  FPrimaryCategoryID_Specified := True;
end;

function SellingManagerProductSpecificsType.PrimaryCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FPrimaryCategoryID_Specified;
end;

procedure SellingManagerProductSpecificsType.SetVariations(Index: Integer; const AVariationsType: VariationsType);
begin
  FVariations := AVariationsType;
  FVariations_Specified := True;
end;

function SellingManagerProductSpecificsType.Variations_Specified(Index: Integer): boolean;
begin
  Result := FVariations_Specified;
end;

procedure SellingManagerProductSpecificsType.SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FItemSpecifics := ANameValueListArrayType;
  FItemSpecifics_Specified := True;
end;

function SellingManagerProductSpecificsType.ItemSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecifics_Specified;
end;

destructor VariationKeyType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecifics)-1 do
    SysUtils.FreeAndNil(FVariationSpecifics[I]);
  System.SetLength(FVariationSpecifics, 0);
  inherited Destroy;
end;

procedure VariationKeyType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VariationKeyType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VariationKeyType.SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecifics := ANameValueListArrayType;
  FVariationSpecifics_Specified := True;
end;

function VariationKeyType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

destructor VariationProductListingDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNameValueList)-1 do
    SysUtils.FreeAndNil(FNameValueList[I]);
  System.SetLength(FNameValueList, 0);
  inherited Destroy;
end;

procedure VariationProductListingDetailsType.SetISBN(Index: Integer; const Astring: string);
begin
  FISBN := Astring;
  FISBN_Specified := True;
end;

function VariationProductListingDetailsType.ISBN_Specified(Index: Integer): boolean;
begin
  Result := FISBN_Specified;
end;

procedure VariationProductListingDetailsType.SetUPC(Index: Integer; const Astring: string);
begin
  FUPC := Astring;
  FUPC_Specified := True;
end;

function VariationProductListingDetailsType.UPC_Specified(Index: Integer): boolean;
begin
  Result := FUPC_Specified;
end;

procedure VariationProductListingDetailsType.SetEAN(Index: Integer; const Astring: string);
begin
  FEAN := Astring;
  FEAN_Specified := True;
end;

function VariationProductListingDetailsType.EAN_Specified(Index: Integer): boolean;
begin
  Result := FEAN_Specified;
end;

procedure VariationProductListingDetailsType.SetProductReferenceID(Index: Integer; const Astring: string);
begin
  FProductReferenceID := Astring;
  FProductReferenceID_Specified := True;
end;

function VariationProductListingDetailsType.ProductReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FProductReferenceID_Specified;
end;

procedure VariationProductListingDetailsType.SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FNameValueList := ANameValueListArrayType;
  FNameValueList_Specified := True;
end;

function VariationProductListingDetailsType.NameValueList_Specified(Index: Integer): boolean;
begin
  Result := FNameValueList_Specified;
end;

destructor VariationsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariation)-1 do
    SysUtils.FreeAndNil(FVariation[I]);
  System.SetLength(FVariation, 0);
  for I := 0 to System.Length(FPictures)-1 do
    SysUtils.FreeAndNil(FPictures[I]);
  System.SetLength(FPictures, 0);
  for I := 0 to System.Length(FVariationSpecificsSet)-1 do
    SysUtils.FreeAndNil(FVariationSpecificsSet[I]);
  System.SetLength(FVariationSpecificsSet, 0);
  for I := 0 to System.Length(FModifyNameList)-1 do
    SysUtils.FreeAndNil(FModifyNameList[I]);
  System.SetLength(FModifyNameList, 0);
  inherited Destroy;
end;

procedure VariationsType.SetVariation(Index: Integer; const AArray_Of_VariationType: Array_Of_VariationType);
begin
  FVariation := AArray_Of_VariationType;
  FVariation_Specified := True;
end;

function VariationsType.Variation_Specified(Index: Integer): boolean;
begin
  Result := FVariation_Specified;
end;

procedure VariationsType.SetPictures(Index: Integer; const AArray_Of_PicturesType: Array_Of_PicturesType);
begin
  FPictures := AArray_Of_PicturesType;
  FPictures_Specified := True;
end;

function VariationsType.Pictures_Specified(Index: Integer): boolean;
begin
  Result := FPictures_Specified;
end;

procedure VariationsType.SetVariationSpecificsSet(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecificsSet := ANameValueListArrayType;
  FVariationSpecificsSet_Specified := True;
end;

function VariationsType.VariationSpecificsSet_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecificsSet_Specified;
end;

procedure VariationsType.SetModifyNameList(Index: Integer; const AModifyNameArrayType: ModifyNameArrayType);
begin
  FModifyNameList := AModifyNameArrayType;
  FModifyNameList_Specified := True;
end;

function VariationsType.ModifyNameList_Specified(Index: Integer): boolean;
begin
  Result := FModifyNameList_Specified;
end;

destructor ItemCompatibilityType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNameValueList)-1 do
    SysUtils.FreeAndNil(FNameValueList[I]);
  System.SetLength(FNameValueList, 0);
  inherited Destroy;
end;

procedure ItemCompatibilityType.SetDelete(Index: Integer; const ABoolean: Boolean);
begin
  FDelete := ABoolean;
  FDelete_Specified := True;
end;

function ItemCompatibilityType.Delete_Specified(Index: Integer): boolean;
begin
  Result := FDelete_Specified;
end;

procedure ItemCompatibilityType.SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FNameValueList := ANameValueListArrayType;
  FNameValueList_Specified := True;
end;

function ItemCompatibilityType.NameValueList_Specified(Index: Integer): boolean;
begin
  Result := FNameValueList_Specified;
end;

procedure ItemCompatibilityType.SetCompatibilityNotes(Index: Integer; const Astring: string);
begin
  FCompatibilityNotes := Astring;
  FCompatibilityNotes_Specified := True;
end;

function ItemCompatibilityType.CompatibilityNotes_Specified(Index: Integer): boolean;
begin
  Result := FCompatibilityNotes_Specified;
end;

destructor ProductListingDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNameValueList)-1 do
    SysUtils.FreeAndNil(FNameValueList[I]);
  System.SetLength(FNameValueList, 0);
  SysUtils.FreeAndNil(FBrandMPN);
  SysUtils.FreeAndNil(FTicketListingDetails);
  inherited Destroy;
end;

procedure ProductListingDetailsType.SetIncludeStockPhotoURL(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeStockPhotoURL := ABoolean;
  FIncludeStockPhotoURL_Specified := True;
end;

function ProductListingDetailsType.IncludeStockPhotoURL_Specified(Index: Integer): boolean;
begin
  Result := FIncludeStockPhotoURL_Specified;
end;

procedure ProductListingDetailsType.SetUseStockPhotoURLAsGallery(Index: Integer; const ABoolean: Boolean);
begin
  FUseStockPhotoURLAsGallery := ABoolean;
  FUseStockPhotoURLAsGallery_Specified := True;
end;

function ProductListingDetailsType.UseStockPhotoURLAsGallery_Specified(Index: Integer): boolean;
begin
  Result := FUseStockPhotoURLAsGallery_Specified;
end;

procedure ProductListingDetailsType.SetStockPhotoURL(Index: Integer; const Astring: string);
begin
  FStockPhotoURL := Astring;
  FStockPhotoURL_Specified := True;
end;

function ProductListingDetailsType.StockPhotoURL_Specified(Index: Integer): boolean;
begin
  Result := FStockPhotoURL_Specified;
end;

procedure ProductListingDetailsType.SetCopyright(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCopyright := ASellerExcludeShipToLocationPreferencesType;
  FCopyright_Specified := True;
end;

function ProductListingDetailsType.Copyright_Specified(Index: Integer): boolean;
begin
  Result := FCopyright_Specified;
end;

procedure ProductListingDetailsType.SetProductReferenceID(Index: Integer; const Astring: string);
begin
  FProductReferenceID := Astring;
  FProductReferenceID_Specified := True;
end;

function ProductListingDetailsType.ProductReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FProductReferenceID_Specified;
end;

procedure ProductListingDetailsType.SetDetailsURL(Index: Integer; const Astring: string);
begin
  FDetailsURL := Astring;
  FDetailsURL_Specified := True;
end;

function ProductListingDetailsType.DetailsURL_Specified(Index: Integer): boolean;
begin
  Result := FDetailsURL_Specified;
end;

procedure ProductListingDetailsType.SetProductDetailsURL(Index: Integer; const Astring: string);
begin
  FProductDetailsURL := Astring;
  FProductDetailsURL_Specified := True;
end;

function ProductListingDetailsType.ProductDetailsURL_Specified(Index: Integer): boolean;
begin
  Result := FProductDetailsURL_Specified;
end;

procedure ProductListingDetailsType.SetReturnSearchResultOnDuplicates(Index: Integer; const ABoolean: Boolean);
begin
  FReturnSearchResultOnDuplicates := ABoolean;
  FReturnSearchResultOnDuplicates_Specified := True;
end;

function ProductListingDetailsType.ReturnSearchResultOnDuplicates_Specified(Index: Integer): boolean;
begin
  Result := FReturnSearchResultOnDuplicates_Specified;
end;

procedure ProductListingDetailsType.SetISBN(Index: Integer; const Astring: string);
begin
  FISBN := Astring;
  FISBN_Specified := True;
end;

function ProductListingDetailsType.ISBN_Specified(Index: Integer): boolean;
begin
  Result := FISBN_Specified;
end;

procedure ProductListingDetailsType.SetUPC(Index: Integer; const Astring: string);
begin
  FUPC := Astring;
  FUPC_Specified := True;
end;

function ProductListingDetailsType.UPC_Specified(Index: Integer): boolean;
begin
  Result := FUPC_Specified;
end;

procedure ProductListingDetailsType.SetEAN(Index: Integer; const Astring: string);
begin
  FEAN := Astring;
  FEAN_Specified := True;
end;

function ProductListingDetailsType.EAN_Specified(Index: Integer): boolean;
begin
  Result := FEAN_Specified;
end;

procedure ProductListingDetailsType.SetBrandMPN(Index: Integer; const ABrandMPNType: BrandMPNType);
begin
  FBrandMPN := ABrandMPNType;
  FBrandMPN_Specified := True;
end;

function ProductListingDetailsType.BrandMPN_Specified(Index: Integer): boolean;
begin
  Result := FBrandMPN_Specified;
end;

procedure ProductListingDetailsType.SetTicketListingDetails(Index: Integer; const ATicketListingDetailsType: TicketListingDetailsType);
begin
  FTicketListingDetails := ATicketListingDetailsType;
  FTicketListingDetails_Specified := True;
end;

function ProductListingDetailsType.TicketListingDetails_Specified(Index: Integer): boolean;
begin
  Result := FTicketListingDetails_Specified;
end;

procedure ProductListingDetailsType.SetUseFirstProduct(Index: Integer; const ABoolean: Boolean);
begin
  FUseFirstProduct := ABoolean;
  FUseFirstProduct_Specified := True;
end;

function ProductListingDetailsType.UseFirstProduct_Specified(Index: Integer): boolean;
begin
  Result := FUseFirstProduct_Specified;
end;

procedure ProductListingDetailsType.SetIncludeeBayProductDetails(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeeBayProductDetails := ABoolean;
  FIncludeeBayProductDetails_Specified := True;
end;

function ProductListingDetailsType.IncludeeBayProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FIncludeeBayProductDetails_Specified;
end;

procedure ProductListingDetailsType.SetNameValueList(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FNameValueList := ANameValueListArrayType;
  FNameValueList_Specified := True;
end;

function ProductListingDetailsType.NameValueList_Specified(Index: Integer): boolean;
begin
  Result := FNameValueList_Specified;
end;

destructor VariationType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecifics)-1 do
    SysUtils.FreeAndNil(FVariationSpecifics[I]);
  System.SetLength(FVariationSpecifics, 0);
  SysUtils.FreeAndNil(FStartPrice);
  SysUtils.FreeAndNil(FUnitCost);
  SysUtils.FreeAndNil(FSellingStatus);
  SysUtils.FreeAndNil(FSellingManagerProductInventoryStatus);
  SysUtils.FreeAndNil(FDiscountPriceInfo);
  SysUtils.FreeAndNil(FVariationProductListingDetails);
  inherited Destroy;
end;

procedure VariationType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function VariationType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure VariationType.SetStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FStartPrice := AAmountType;
  FStartPrice_Specified := True;
end;

function VariationType.StartPrice_Specified(Index: Integer): boolean;
begin
  Result := FStartPrice_Specified;
end;

procedure VariationType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function VariationType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure VariationType.SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecifics := ANameValueListArrayType;
  FVariationSpecifics_Specified := True;
end;

function VariationType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

procedure VariationType.SetUnitsAvailable(Index: Integer; const AInteger: Integer);
begin
  FUnitsAvailable := AInteger;
  FUnitsAvailable_Specified := True;
end;

function VariationType.UnitsAvailable_Specified(Index: Integer): boolean;
begin
  Result := FUnitsAvailable_Specified;
end;

procedure VariationType.SetUnitCost(Index: Integer; const AAmountType: AmountType);
begin
  FUnitCost := AAmountType;
  FUnitCost_Specified := True;
end;

function VariationType.UnitCost_Specified(Index: Integer): boolean;
begin
  Result := FUnitCost_Specified;
end;

procedure VariationType.SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
begin
  FSellingStatus := ASellingStatusType;
  FSellingStatus_Specified := True;
end;

function VariationType.SellingStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellingStatus_Specified;
end;

procedure VariationType.SetVariationTitle(Index: Integer; const Astring: string);
begin
  FVariationTitle := Astring;
  FVariationTitle_Specified := True;
end;

function VariationType.VariationTitle_Specified(Index: Integer): boolean;
begin
  Result := FVariationTitle_Specified;
end;

procedure VariationType.SetVariationViewItemURL(Index: Integer; const Astring: string);
begin
  FVariationViewItemURL := Astring;
  FVariationViewItemURL_Specified := True;
end;

function VariationType.VariationViewItemURL_Specified(Index: Integer): boolean;
begin
  Result := FVariationViewItemURL_Specified;
end;

procedure VariationType.SetDelete(Index: Integer; const ABoolean: Boolean);
begin
  FDelete := ABoolean;
  FDelete_Specified := True;
end;

function VariationType.Delete_Specified(Index: Integer): boolean;
begin
  Result := FDelete_Specified;
end;

procedure VariationType.SetSellingManagerProductInventoryStatus(Index: Integer; const ASellingManagerProductInventoryStatusType: SellingManagerProductInventoryStatusType);
begin
  FSellingManagerProductInventoryStatus := ASellingManagerProductInventoryStatusType;
  FSellingManagerProductInventoryStatus_Specified := True;
end;

function VariationType.SellingManagerProductInventoryStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductInventoryStatus_Specified;
end;

procedure VariationType.SetWatchCount(Index: Integer; const AInt64: Int64);
begin
  FWatchCount := AInt64;
  FWatchCount_Specified := True;
end;

function VariationType.WatchCount_Specified(Index: Integer): boolean;
begin
  Result := FWatchCount_Specified;
end;

procedure VariationType.SetPrivateNotes(Index: Integer; const Astring: string);
begin
  FPrivateNotes := Astring;
  FPrivateNotes_Specified := True;
end;

function VariationType.PrivateNotes_Specified(Index: Integer): boolean;
begin
  Result := FPrivateNotes_Specified;
end;

procedure VariationType.SetDiscountPriceInfo(Index: Integer; const ADiscountPriceInfoType: DiscountPriceInfoType);
begin
  FDiscountPriceInfo := ADiscountPriceInfoType;
  FDiscountPriceInfo_Specified := True;
end;

function VariationType.DiscountPriceInfo_Specified(Index: Integer): boolean;
begin
  Result := FDiscountPriceInfo_Specified;
end;

procedure VariationType.SetVariationProductListingDetails(Index: Integer; const AVariationProductListingDetailsType: VariationProductListingDetailsType);
begin
  FVariationProductListingDetails := AVariationProductListingDetailsType;
  FVariationProductListingDetails_Specified := True;
end;

function VariationType.VariationProductListingDetails_Specified(Index: Integer): boolean;
begin
  Result := FVariationProductListingDetails_Specified;
end;

destructor ContextSearchAssetType.Destroy;
begin
  SysUtils.FreeAndNil(FCategory);
  inherited Destroy;
end;

procedure ContextSearchAssetType.SetKeyword(Index: Integer; const Astring: string);
begin
  FKeyword := Astring;
  FKeyword_Specified := True;
end;

function ContextSearchAssetType.Keyword_Specified(Index: Integer): boolean;
begin
  Result := FKeyword_Specified;
end;

procedure ContextSearchAssetType.SetCategory(Index: Integer; const ACategoryType: CategoryType);
begin
  FCategory := ACategoryType;
  FCategory_Specified := True;
end;

function ContextSearchAssetType.Category_Specified(Index: Integer): boolean;
begin
  Result := FCategory_Specified;
end;

procedure ContextSearchAssetType.SetRanking(Index: Integer; const AInteger: Integer);
begin
  FRanking := AInteger;
  FRanking_Specified := True;
end;

function ContextSearchAssetType.Ranking_Specified(Index: Integer): boolean;
begin
  Result := FRanking_Specified;
end;

procedure ThemeGroupType.SetGroupID(Index: Integer; const AInteger: Integer);
begin
  FGroupID := AInteger;
  FGroupID_Specified := True;
end;

function ThemeGroupType.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure ThemeGroupType.SetGroupName(Index: Integer; const Astring: string);
begin
  FGroupName := Astring;
  FGroupName_Specified := True;
end;

function ThemeGroupType.GroupName_Specified(Index: Integer): boolean;
begin
  Result := FGroupName_Specified;
end;

procedure ThemeGroupType.SetThemeID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FThemeID := ANumberOfPolicyViolationsDetailsType;
  FThemeID_Specified := True;
end;

function ThemeGroupType.ThemeID_Specified(Index: Integer): boolean;
begin
  Result := FThemeID_Specified;
end;

procedure ThemeGroupType.SetThemeTotal(Index: Integer; const AInteger: Integer);
begin
  FThemeTotal := AInteger;
  FThemeTotal_Specified := True;
end;

function ThemeGroupType.ThemeTotal_Specified(Index: Integer): boolean;
begin
  Result := FThemeTotal_Specified;
end;

procedure PickupInStoreDetailsType.SetEligibleForPickupInStore(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleForPickupInStore := ABoolean;
  FEligibleForPickupInStore_Specified := True;
end;

function PickupInStoreDetailsType.EligibleForPickupInStore_Specified(Index: Integer): boolean;
begin
  Result := FEligibleForPickupInStore_Specified;
end;

procedure PickupInStoreDetailsType.SetEligibleForPickupDropOff(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleForPickupDropOff := ABoolean;
  FEligibleForPickupDropOff_Specified := True;
end;

function PickupInStoreDetailsType.EligibleForPickupDropOff_Specified(Index: Integer): boolean;
begin
  Result := FEligibleForPickupDropOff_Specified;
end;

destructor MyMessagesSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFolderSummary)-1 do
    SysUtils.FreeAndNil(FFolderSummary[I]);
  System.SetLength(FFolderSummary, 0);
  inherited Destroy;
end;

procedure MyMessagesSummaryType.SetFolderSummary(Index: Integer; const AArray_Of_MyMessagesFolderSummaryType: Array_Of_MyMessagesFolderSummaryType);
begin
  FFolderSummary := AArray_Of_MyMessagesFolderSummaryType;
  FFolderSummary_Specified := True;
end;

function MyMessagesSummaryType.FolderSummary_Specified(Index: Integer): boolean;
begin
  Result := FFolderSummary_Specified;
end;

procedure MyMessagesSummaryType.SetNewAlertCount(Index: Integer; const AInteger: Integer);
begin
  FNewAlertCount := AInteger;
  FNewAlertCount_Specified := True;
end;

function MyMessagesSummaryType.NewAlertCount_Specified(Index: Integer): boolean;
begin
  Result := FNewAlertCount_Specified;
end;

procedure MyMessagesSummaryType.SetNewMessageCount(Index: Integer; const AInteger: Integer);
begin
  FNewMessageCount := AInteger;
  FNewMessageCount_Specified := True;
end;

function MyMessagesSummaryType.NewMessageCount_Specified(Index: Integer): boolean;
begin
  Result := FNewMessageCount_Specified;
end;

procedure MyMessagesSummaryType.SetUnresolvedAlertCount(Index: Integer; const AInteger: Integer);
begin
  FUnresolvedAlertCount := AInteger;
  FUnresolvedAlertCount_Specified := True;
end;

function MyMessagesSummaryType.UnresolvedAlertCount_Specified(Index: Integer): boolean;
begin
  Result := FUnresolvedAlertCount_Specified;
end;

procedure MyMessagesSummaryType.SetFlaggedMessageCount(Index: Integer; const AInteger: Integer);
begin
  FFlaggedMessageCount := AInteger;
  FFlaggedMessageCount_Specified := True;
end;

function MyMessagesSummaryType.FlaggedMessageCount_Specified(Index: Integer): boolean;
begin
  Result := FFlaggedMessageCount_Specified;
end;

procedure MyMessagesSummaryType.SetTotalAlertCount(Index: Integer; const AInteger: Integer);
begin
  FTotalAlertCount := AInteger;
  FTotalAlertCount_Specified := True;
end;

function MyMessagesSummaryType.TotalAlertCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalAlertCount_Specified;
end;

procedure MyMessagesSummaryType.SetTotalMessageCount(Index: Integer; const AInteger: Integer);
begin
  FTotalMessageCount := AInteger;
  FTotalMessageCount_Specified := True;
end;

function MyMessagesSummaryType.TotalMessageCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalMessageCount_Specified;
end;

procedure MyMessagesSummaryType.SetNewHighPriorityCount(Index: Integer; const AInteger: Integer);
begin
  FNewHighPriorityCount := AInteger;
  FNewHighPriorityCount_Specified := True;
end;

function MyMessagesSummaryType.NewHighPriorityCount_Specified(Index: Integer): boolean;
begin
  Result := FNewHighPriorityCount_Specified;
end;

procedure MyMessagesSummaryType.SetTotalHighPriorityCount(Index: Integer; const AInteger: Integer);
begin
  FTotalHighPriorityCount := AInteger;
  FTotalHighPriorityCount_Specified := True;
end;

function MyMessagesSummaryType.TotalHighPriorityCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalHighPriorityCount_Specified;
end;

procedure ASQPreferencesType.SetResetDefaultSubjects(Index: Integer; const ABoolean: Boolean);
begin
  FResetDefaultSubjects := ABoolean;
  FResetDefaultSubjects_Specified := True;
end;

function ASQPreferencesType.ResetDefaultSubjects_Specified(Index: Integer): boolean;
begin
  Result := FResetDefaultSubjects_Specified;
end;

procedure ASQPreferencesType.SetSubject(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSubject := ASellerExcludeShipToLocationPreferencesType;
  FSubject_Specified := True;
end;

function ASQPreferencesType.Subject_Specified(Index: Integer): boolean;
begin
  Result := FSubject_Specified;
end;

procedure MyeBaySelectionType.SetInclude(Index: Integer; const ABoolean: Boolean);
begin
  FInclude := ABoolean;
  FInclude_Specified := True;
end;

function MyeBaySelectionType.Include_Specified(Index: Integer): boolean;
begin
  Result := FInclude_Specified;
end;

procedure MyeBaySelectionType.SetIncludeItemCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeItemCount := ABoolean;
  FIncludeItemCount_Specified := True;
end;

function MyeBaySelectionType.IncludeItemCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeItemCount_Specified;
end;

procedure MyeBaySelectionType.SetIncludeFavoriteSearcheCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFavoriteSearcheCount := ABoolean;
  FIncludeFavoriteSearcheCount_Specified := True;
end;

function MyeBaySelectionType.IncludeFavoriteSearcheCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFavoriteSearcheCount_Specified;
end;

procedure MyeBaySelectionType.SetIncludeFavoriteSellerCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFavoriteSellerCount := ABoolean;
  FIncludeFavoriteSellerCount_Specified := True;
end;

function MyeBaySelectionType.IncludeFavoriteSellerCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFavoriteSellerCount_Specified;
end;

procedure MyeBaySelectionType.SetSort(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSort := ASortOrderCodeType;
  FSort_Specified := True;
end;

function MyeBaySelectionType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure MyeBaySelectionType.SetMaxResults(Index: Integer; const AInteger: Integer);
begin
  FMaxResults := AInteger;
  FMaxResults_Specified := True;
end;

function MyeBaySelectionType.MaxResults_Specified(Index: Integer): boolean;
begin
  Result := FMaxResults_Specified;
end;

procedure MyeBaySelectionType.SetUserDefinedListName(Index: Integer; const Astring: string);
begin
  FUserDefinedListName := Astring;
  FUserDefinedListName_Specified := True;
end;

function MyeBaySelectionType.UserDefinedListName_Specified(Index: Integer): boolean;
begin
  Result := FUserDefinedListName_Specified;
end;

procedure MyeBaySelectionType.SetIncludeListContents(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeListContents := ABoolean;
  FIncludeListContents_Specified := True;
end;

function MyeBaySelectionType.IncludeListContents_Specified(Index: Integer): boolean;
begin
  Result := FIncludeListContents_Specified;
end;

procedure BidAssistantListType.SetBidGroupID(Index: Integer; const AInt64: Int64);
begin
  FBidGroupID := AInt64;
  FBidGroupID_Specified := True;
end;

function BidAssistantListType.BidGroupID_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupID_Specified;
end;

procedure BidAssistantListType.SetIncludeNotes(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeNotes := ABoolean;
  FIncludeNotes_Specified := True;
end;

function BidAssistantListType.IncludeNotes_Specified(Index: Integer): boolean;
begin
  Result := FIncludeNotes_Specified;
end;

destructor ItemListCustomizationType.Destroy;
begin
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure ItemListCustomizationType.SetInclude(Index: Integer; const ABoolean: Boolean);
begin
  FInclude := ABoolean;
  FInclude_Specified := True;
end;

function ItemListCustomizationType.Include_Specified(Index: Integer): boolean;
begin
  Result := FInclude_Specified;
end;

procedure ItemListCustomizationType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function ItemListCustomizationType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure ItemListCustomizationType.SetSort(Index: Integer; const AItemSortTypeCodeType: ItemSortTypeCodeType);
begin
  FSort := AItemSortTypeCodeType;
  FSort_Specified := True;
end;

function ItemListCustomizationType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure ItemListCustomizationType.SetDurationInDays(Index: Integer; const AInteger: Integer);
begin
  FDurationInDays := AInteger;
  FDurationInDays_Specified := True;
end;

function ItemListCustomizationType.DurationInDays_Specified(Index: Integer): boolean;
begin
  Result := FDurationInDays_Specified;
end;

procedure ItemListCustomizationType.SetIncludeNotes(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeNotes := ABoolean;
  FIncludeNotes_Specified := True;
end;

function ItemListCustomizationType.IncludeNotes_Specified(Index: Integer): boolean;
begin
  Result := FIncludeNotes_Specified;
end;

procedure ItemListCustomizationType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function ItemListCustomizationType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure ItemListCustomizationType.SetOrderStatusFilter(Index: Integer; const AOrderStatusFilterCodeType: OrderStatusFilterCodeType);
begin
  FOrderStatusFilter := AOrderStatusFilterCodeType;
  FOrderStatusFilter_Specified := True;
end;

function ItemListCustomizationType.OrderStatusFilter_Specified(Index: Integer): boolean;
begin
  Result := FOrderStatusFilter_Specified;
end;

destructor SellingManagerSoldTransactionType.Destroy;
begin
  SysUtils.FreeAndNil(FItemPrice);
  SysUtils.FreeAndNil(FSubtotalAmount);
  SysUtils.FreeAndNil(FStartPrice);
  SysUtils.FreeAndNil(FReservePrice);
  SysUtils.FreeAndNil(FShipment);
  SysUtils.FreeAndNil(FVariation);
  inherited Destroy;
end;

procedure SellingManagerSoldTransactionType.SetInvoiceNumber(Index: Integer; const Astring: string);
begin
  FInvoiceNumber := Astring;
  FInvoiceNumber_Specified := True;
end;

function SellingManagerSoldTransactionType.InvoiceNumber_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceNumber_Specified;
end;

procedure SellingManagerSoldTransactionType.SetTransactionID(Index: Integer; const AInt64: Int64);
begin
  FTransactionID := AInt64;
  FTransactionID_Specified := True;
end;

function SellingManagerSoldTransactionType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure SellingManagerSoldTransactionType.SetSaleRecordID(Index: Integer; const AInt64: Int64);
begin
  FSaleRecordID := AInt64;
  FSaleRecordID_Specified := True;
end;

function SellingManagerSoldTransactionType.SaleRecordID_Specified(Index: Integer): boolean;
begin
  Result := FSaleRecordID_Specified;
end;

procedure SellingManagerSoldTransactionType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function SellingManagerSoldTransactionType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure SellingManagerSoldTransactionType.SetQuantitySold(Index: Integer; const AInteger: Integer);
begin
  FQuantitySold := AInteger;
  FQuantitySold_Specified := True;
end;

function SellingManagerSoldTransactionType.QuantitySold_Specified(Index: Integer): boolean;
begin
  Result := FQuantitySold_Specified;
end;

procedure SellingManagerSoldTransactionType.SetItemPrice(Index: Integer; const AAmountType: AmountType);
begin
  FItemPrice := AAmountType;
  FItemPrice_Specified := True;
end;

function SellingManagerSoldTransactionType.ItemPrice_Specified(Index: Integer): boolean;
begin
  Result := FItemPrice_Specified;
end;

procedure SellingManagerSoldTransactionType.SetSubtotalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FSubtotalAmount := AAmountType;
  FSubtotalAmount_Specified := True;
end;

function SellingManagerSoldTransactionType.SubtotalAmount_Specified(Index: Integer): boolean;
begin
  Result := FSubtotalAmount_Specified;
end;

procedure SellingManagerSoldTransactionType.SetItemTitle(Index: Integer; const Astring: string);
begin
  FItemTitle := Astring;
  FItemTitle_Specified := True;
end;

function SellingManagerSoldTransactionType.ItemTitle_Specified(Index: Integer): boolean;
begin
  Result := FItemTitle_Specified;
end;

procedure SellingManagerSoldTransactionType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function SellingManagerSoldTransactionType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure SellingManagerSoldTransactionType.SetRelisted(Index: Integer; const ABoolean: Boolean);
begin
  FRelisted := ABoolean;
  FRelisted_Specified := True;
end;

function SellingManagerSoldTransactionType.Relisted_Specified(Index: Integer): boolean;
begin
  Result := FRelisted_Specified;
end;

procedure SellingManagerSoldTransactionType.SetWatchCount(Index: Integer; const AInteger: Integer);
begin
  FWatchCount := AInteger;
  FWatchCount_Specified := True;
end;

function SellingManagerSoldTransactionType.WatchCount_Specified(Index: Integer): boolean;
begin
  Result := FWatchCount_Specified;
end;

procedure SellingManagerSoldTransactionType.SetStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FStartPrice := AAmountType;
  FStartPrice_Specified := True;
end;

function SellingManagerSoldTransactionType.StartPrice_Specified(Index: Integer): boolean;
begin
  Result := FStartPrice_Specified;
end;

procedure SellingManagerSoldTransactionType.SetReservePrice(Index: Integer; const AAmountType: AmountType);
begin
  FReservePrice := AAmountType;
  FReservePrice_Specified := True;
end;

function SellingManagerSoldTransactionType.ReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FReservePrice_Specified;
end;

procedure SellingManagerSoldTransactionType.SetSecondChanceOfferSent(Index: Integer; const ABoolean: Boolean);
begin
  FSecondChanceOfferSent := ABoolean;
  FSecondChanceOfferSent_Specified := True;
end;

function SellingManagerSoldTransactionType.SecondChanceOfferSent_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOfferSent_Specified;
end;

procedure SellingManagerSoldTransactionType.SetCustomLabel(Index: Integer; const Astring: string);
begin
  FCustomLabel := Astring;
  FCustomLabel_Specified := True;
end;

function SellingManagerSoldTransactionType.CustomLabel_Specified(Index: Integer): boolean;
begin
  Result := FCustomLabel_Specified;
end;

procedure SellingManagerSoldTransactionType.SetSoldOn(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
begin
  FSoldOn := ATransactionPlatformCodeType;
  FSoldOn_Specified := True;
end;

function SellingManagerSoldTransactionType.SoldOn_Specified(Index: Integer): boolean;
begin
  Result := FSoldOn_Specified;
end;

procedure SellingManagerSoldTransactionType.SetListedOn(Index: Integer; const AArray_Of_TransactionPlatformCodeType: Array_Of_TransactionPlatformCodeType);
begin
  FListedOn := AArray_Of_TransactionPlatformCodeType;
  FListedOn_Specified := True;
end;

function SellingManagerSoldTransactionType.ListedOn_Specified(Index: Integer): boolean;
begin
  Result := FListedOn_Specified;
end;

procedure SellingManagerSoldTransactionType.SetShipment(Index: Integer; const AShipmentType: ShipmentType);
begin
  FShipment := AShipmentType;
  FShipment_Specified := True;
end;

function SellingManagerSoldTransactionType.Shipment_Specified(Index: Integer): boolean;
begin
  Result := FShipment_Specified;
end;

procedure SellingManagerSoldTransactionType.SetCharityListing(Index: Integer; const ABoolean: Boolean);
begin
  FCharityListing := ABoolean;
  FCharityListing_Specified := True;
end;

function SellingManagerSoldTransactionType.CharityListing_Specified(Index: Integer): boolean;
begin
  Result := FCharityListing_Specified;
end;

procedure SellingManagerSoldTransactionType.SetVariation(Index: Integer; const AVariationType: VariationType);
begin
  FVariation := AVariationType;
  FVariation_Specified := True;
end;

function SellingManagerSoldTransactionType.Variation_Specified(Index: Integer): boolean;
begin
  Result := FVariation_Specified;
end;

procedure SellingManagerSoldTransactionType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function SellingManagerSoldTransactionType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

destructor PaginatedTransactionArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTransactionArray)-1 do
    SysUtils.FreeAndNil(FTransactionArray[I]);
  System.SetLength(FTransactionArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure PaginatedTransactionArrayType.SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
begin
  FTransactionArray := ATransactionArrayType;
  FTransactionArray_Specified := True;
end;

function PaginatedTransactionArrayType.TransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FTransactionArray_Specified;
end;

procedure PaginatedTransactionArrayType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function PaginatedTransactionArrayType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

destructor MemberMessageType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMessageMedia)-1 do
    SysUtils.FreeAndNil(FMessageMedia[I]);
  System.SetLength(FMessageMedia, 0);
  inherited Destroy;
end;

procedure MemberMessageType.SetMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
begin
  FMessageType := AMessageTypeCodeType;
  FMessageType_Specified := True;
end;

function MemberMessageType.MessageType_Specified(Index: Integer): boolean;
begin
  Result := FMessageType_Specified;
end;

procedure MemberMessageType.SetQuestionType(Index: Integer; const AQuestionTypeCodeType: QuestionTypeCodeType);
begin
  FQuestionType := AQuestionTypeCodeType;
  FQuestionType_Specified := True;
end;

function MemberMessageType.QuestionType_Specified(Index: Integer): boolean;
begin
  Result := FQuestionType_Specified;
end;

procedure MemberMessageType.SetEmailCopyToSender(Index: Integer; const ABoolean: Boolean);
begin
  FEmailCopyToSender := ABoolean;
  FEmailCopyToSender_Specified := True;
end;

function MemberMessageType.EmailCopyToSender_Specified(Index: Integer): boolean;
begin
  Result := FEmailCopyToSender_Specified;
end;

procedure MemberMessageType.SetHideSendersEmailAddress(Index: Integer; const ABoolean: Boolean);
begin
  FHideSendersEmailAddress := ABoolean;
  FHideSendersEmailAddress_Specified := True;
end;

function MemberMessageType.HideSendersEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FHideSendersEmailAddress_Specified;
end;

procedure MemberMessageType.SetDisplayToPublic(Index: Integer; const ABoolean: Boolean);
begin
  FDisplayToPublic := ABoolean;
  FDisplayToPublic_Specified := True;
end;

function MemberMessageType.DisplayToPublic_Specified(Index: Integer): boolean;
begin
  Result := FDisplayToPublic_Specified;
end;

procedure MemberMessageType.SetSenderID(Index: Integer; const Astring: string);
begin
  FSenderID := Astring;
  FSenderID_Specified := True;
end;

function MemberMessageType.SenderID_Specified(Index: Integer): boolean;
begin
  Result := FSenderID_Specified;
end;

procedure MemberMessageType.SetSenderEmail(Index: Integer; const Astring: string);
begin
  FSenderEmail := Astring;
  FSenderEmail_Specified := True;
end;

function MemberMessageType.SenderEmail_Specified(Index: Integer): boolean;
begin
  Result := FSenderEmail_Specified;
end;

procedure MemberMessageType.SetRecipientID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FRecipientID := ASellerExcludeShipToLocationPreferencesType;
  FRecipientID_Specified := True;
end;

function MemberMessageType.RecipientID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientID_Specified;
end;

procedure MemberMessageType.SetSubject(Index: Integer; const Astring: string);
begin
  FSubject := Astring;
  FSubject_Specified := True;
end;

function MemberMessageType.Subject_Specified(Index: Integer): boolean;
begin
  Result := FSubject_Specified;
end;

procedure MemberMessageType.SetBody(Index: Integer; const Astring: string);
begin
  FBody := Astring;
  FBody_Specified := True;
end;

function MemberMessageType.Body_Specified(Index: Integer): boolean;
begin
  Result := FBody_Specified;
end;

procedure MemberMessageType.SetMessageID(Index: Integer; const Astring: string);
begin
  FMessageID := Astring;
  FMessageID_Specified := True;
end;

function MemberMessageType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

procedure MemberMessageType.SetParentMessageID(Index: Integer; const Astring: string);
begin
  FParentMessageID := Astring;
  FParentMessageID_Specified := True;
end;

function MemberMessageType.ParentMessageID_Specified(Index: Integer): boolean;
begin
  Result := FParentMessageID_Specified;
end;

procedure MemberMessageType.SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
begin
  FMessageMedia := AArray_Of_MessageMediaType;
  FMessageMedia_Specified := True;
end;

function MemberMessageType.MessageMedia_Specified(Index: Integer): boolean;
begin
  Result := FMessageMedia_Specified;
end;

destructor SellingStatusType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSuggestedBidValues)-1 do
    SysUtils.FreeAndNil(FSuggestedBidValues[I]);
  System.SetLength(FSuggestedBidValues, 0);
  SysUtils.FreeAndNil(FBidIncrement);
  SysUtils.FreeAndNil(FConvertedCurrentPrice);
  SysUtils.FreeAndNil(FCurrentPrice);
  SysUtils.FreeAndNil(FHighBidder);
  SysUtils.FreeAndNil(FMinimumToBid);
  SysUtils.FreeAndNil(FFinalValueFee);
  SysUtils.FreeAndNil(FPromotionalSaleDetails);
  inherited Destroy;
end;

procedure SellingStatusType.SetBidCount(Index: Integer; const AInteger: Integer);
begin
  FBidCount := AInteger;
  FBidCount_Specified := True;
end;

function SellingStatusType.BidCount_Specified(Index: Integer): boolean;
begin
  Result := FBidCount_Specified;
end;

procedure SellingStatusType.SetBidIncrement(Index: Integer; const AAmountType: AmountType);
begin
  FBidIncrement := AAmountType;
  FBidIncrement_Specified := True;
end;

function SellingStatusType.BidIncrement_Specified(Index: Integer): boolean;
begin
  Result := FBidIncrement_Specified;
end;

procedure SellingStatusType.SetConvertedCurrentPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedCurrentPrice := AAmountType;
  FConvertedCurrentPrice_Specified := True;
end;

function SellingStatusType.ConvertedCurrentPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedCurrentPrice_Specified;
end;

procedure SellingStatusType.SetCurrentPrice(Index: Integer; const AAmountType: AmountType);
begin
  FCurrentPrice := AAmountType;
  FCurrentPrice_Specified := True;
end;

function SellingStatusType.CurrentPrice_Specified(Index: Integer): boolean;
begin
  Result := FCurrentPrice_Specified;
end;

procedure SellingStatusType.SetHighBidder(Index: Integer; const AUserType: UserType);
begin
  FHighBidder := AUserType;
  FHighBidder_Specified := True;
end;

function SellingStatusType.HighBidder_Specified(Index: Integer): boolean;
begin
  Result := FHighBidder_Specified;
end;

procedure SellingStatusType.SetLeadCount(Index: Integer; const AInteger: Integer);
begin
  FLeadCount := AInteger;
  FLeadCount_Specified := True;
end;

function SellingStatusType.LeadCount_Specified(Index: Integer): boolean;
begin
  Result := FLeadCount_Specified;
end;

procedure SellingStatusType.SetMinimumToBid(Index: Integer; const AAmountType: AmountType);
begin
  FMinimumToBid := AAmountType;
  FMinimumToBid_Specified := True;
end;

function SellingStatusType.MinimumToBid_Specified(Index: Integer): boolean;
begin
  Result := FMinimumToBid_Specified;
end;

procedure SellingStatusType.SetQuantitySold(Index: Integer; const AInteger: Integer);
begin
  FQuantitySold := AInteger;
  FQuantitySold_Specified := True;
end;

function SellingStatusType.QuantitySold_Specified(Index: Integer): boolean;
begin
  Result := FQuantitySold_Specified;
end;

procedure SellingStatusType.SetReserveMet(Index: Integer; const ABoolean: Boolean);
begin
  FReserveMet := ABoolean;
  FReserveMet_Specified := True;
end;

function SellingStatusType.ReserveMet_Specified(Index: Integer): boolean;
begin
  Result := FReserveMet_Specified;
end;

procedure SellingStatusType.SetSecondChanceEligible(Index: Integer; const ABoolean: Boolean);
begin
  FSecondChanceEligible := ABoolean;
  FSecondChanceEligible_Specified := True;
end;

function SellingStatusType.SecondChanceEligible_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceEligible_Specified;
end;

procedure SellingStatusType.SetBidderCount(Index: Integer; const AInt64: Int64);
begin
  FBidderCount := AInt64;
  FBidderCount_Specified := True;
end;

function SellingStatusType.BidderCount_Specified(Index: Integer): boolean;
begin
  Result := FBidderCount_Specified;
end;

procedure SellingStatusType.SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
begin
  FListingStatus := AListingStatusCodeType;
  FListingStatus_Specified := True;
end;

function SellingStatusType.ListingStatus_Specified(Index: Integer): boolean;
begin
  Result := FListingStatus_Specified;
end;

procedure SellingStatusType.SetFinalValueFee(Index: Integer; const AAmountType: AmountType);
begin
  FFinalValueFee := AAmountType;
  FFinalValueFee_Specified := True;
end;

function SellingStatusType.FinalValueFee_Specified(Index: Integer): boolean;
begin
  Result := FFinalValueFee_Specified;
end;

procedure SellingStatusType.SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleDetailsType: PromotionalSaleDetailsType);
begin
  FPromotionalSaleDetails := APromotionalSaleDetailsType;
  FPromotionalSaleDetails_Specified := True;
end;

function SellingStatusType.PromotionalSaleDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleDetails_Specified;
end;

procedure SellingStatusType.SetAdminEnded(Index: Integer; const ABoolean: Boolean);
begin
  FAdminEnded := ABoolean;
  FAdminEnded_Specified := True;
end;

function SellingStatusType.AdminEnded_Specified(Index: Integer): boolean;
begin
  Result := FAdminEnded_Specified;
end;

procedure SellingStatusType.SetSoldAsBin(Index: Integer; const ABoolean: Boolean);
begin
  FSoldAsBin := ABoolean;
  FSoldAsBin_Specified := True;
end;

function SellingStatusType.SoldAsBin_Specified(Index: Integer): boolean;
begin
  Result := FSoldAsBin_Specified;
end;

procedure SellingStatusType.SetQuantitySoldByPickupInStore(Index: Integer; const AInteger: Integer);
begin
  FQuantitySoldByPickupInStore := AInteger;
  FQuantitySoldByPickupInStore_Specified := True;
end;

function SellingStatusType.QuantitySoldByPickupInStore_Specified(Index: Integer): boolean;
begin
  Result := FQuantitySoldByPickupInStore_Specified;
end;

procedure SellingStatusType.SetSuggestedBidValues(Index: Integer; const ASuggestedBidValueType: SuggestedBidValueType);
begin
  FSuggestedBidValues := ASuggestedBidValueType;
  FSuggestedBidValues_Specified := True;
end;

function SellingStatusType.SuggestedBidValues_Specified(Index: Integer): boolean;
begin
  Result := FSuggestedBidValues_Specified;
end;

destructor MyMessagesMessageType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMessageMedia)-1 do
    SysUtils.FreeAndNil(FMessageMedia[I]);
  System.SetLength(FMessageMedia, 0);
  SysUtils.FreeAndNil(FCreationDate);
  SysUtils.FreeAndNil(FReceiveDate);
  SysUtils.FreeAndNil(FExpirationDate);
  SysUtils.FreeAndNil(FResponseDetails);
  SysUtils.FreeAndNil(FForwardDetails);
  SysUtils.FreeAndNil(FFolder);
  SysUtils.FreeAndNil(FItemEndTime);
  inherited Destroy;
end;

procedure MyMessagesMessageType.SetSender(Index: Integer; const Astring: string);
begin
  FSender := Astring;
  FSender_Specified := True;
end;

function MyMessagesMessageType.Sender_Specified(Index: Integer): boolean;
begin
  Result := FSender_Specified;
end;

procedure MyMessagesMessageType.SetRecipientUserID(Index: Integer; const Astring: string);
begin
  FRecipientUserID := Astring;
  FRecipientUserID_Specified := True;
end;

function MyMessagesMessageType.RecipientUserID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientUserID_Specified;
end;

procedure MyMessagesMessageType.SetSendToName(Index: Integer; const Astring: string);
begin
  FSendToName := Astring;
  FSendToName_Specified := True;
end;

function MyMessagesMessageType.SendToName_Specified(Index: Integer): boolean;
begin
  Result := FSendToName_Specified;
end;

procedure MyMessagesMessageType.SetSubject(Index: Integer; const Astring: string);
begin
  FSubject := Astring;
  FSubject_Specified := True;
end;

function MyMessagesMessageType.Subject_Specified(Index: Integer): boolean;
begin
  Result := FSubject_Specified;
end;

procedure MyMessagesMessageType.SetMessageID(Index: Integer; const AMyMessagesMessageIDType: MyMessagesMessageIDType);
begin
  FMessageID := AMyMessagesMessageIDType;
  FMessageID_Specified := True;
end;

function MyMessagesMessageType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

procedure MyMessagesMessageType.SetExternalMessageID(Index: Integer; const Astring: string);
begin
  FExternalMessageID := Astring;
  FExternalMessageID_Specified := True;
end;

function MyMessagesMessageType.ExternalMessageID_Specified(Index: Integer): boolean;
begin
  Result := FExternalMessageID_Specified;
end;

procedure MyMessagesMessageType.SetContentType(Index: Integer; const Astring: string);
begin
  FContentType := Astring;
  FContentType_Specified := True;
end;

function MyMessagesMessageType.ContentType_Specified(Index: Integer): boolean;
begin
  Result := FContentType_Specified;
end;

procedure MyMessagesMessageType.SetText(Index: Integer; const Astring: string);
begin
  FText := Astring;
  FText_Specified := True;
end;

function MyMessagesMessageType.Text_Specified(Index: Integer): boolean;
begin
  Result := FText_Specified;
end;

procedure MyMessagesMessageType.SetFlagged(Index: Integer; const ABoolean: Boolean);
begin
  FFlagged := ABoolean;
  FFlagged_Specified := True;
end;

function MyMessagesMessageType.Flagged_Specified(Index: Integer): boolean;
begin
  Result := FFlagged_Specified;
end;

procedure MyMessagesMessageType.SetRead_(Index: Integer; const ABoolean: Boolean);
begin
  FRead_ := ABoolean;
  FRead__Specified := True;
end;

function MyMessagesMessageType.Read__Specified(Index: Integer): boolean;
begin
  Result := FRead__Specified;
end;

procedure MyMessagesMessageType.SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDate := ATXSDateTime;
  FCreationDate_Specified := True;
end;

function MyMessagesMessageType.CreationDate_Specified(Index: Integer): boolean;
begin
  Result := FCreationDate_Specified;
end;

procedure MyMessagesMessageType.SetReceiveDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FReceiveDate := ATXSDateTime;
  FReceiveDate_Specified := True;
end;

function MyMessagesMessageType.ReceiveDate_Specified(Index: Integer): boolean;
begin
  Result := FReceiveDate_Specified;
end;

procedure MyMessagesMessageType.SetExpirationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpirationDate := ATXSDateTime;
  FExpirationDate_Specified := True;
end;

function MyMessagesMessageType.ExpirationDate_Specified(Index: Integer): boolean;
begin
  Result := FExpirationDate_Specified;
end;

procedure MyMessagesMessageType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function MyMessagesMessageType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure MyMessagesMessageType.SetResponseDetails(Index: Integer; const AMyMessagesResponseDetailsType: MyMessagesResponseDetailsType);
begin
  FResponseDetails := AMyMessagesResponseDetailsType;
  FResponseDetails_Specified := True;
end;

function MyMessagesMessageType.ResponseDetails_Specified(Index: Integer): boolean;
begin
  Result := FResponseDetails_Specified;
end;

procedure MyMessagesMessageType.SetForwardDetails(Index: Integer; const AMyMessagesForwardDetailsType: MyMessagesForwardDetailsType);
begin
  FForwardDetails := AMyMessagesForwardDetailsType;
  FForwardDetails_Specified := True;
end;

function MyMessagesMessageType.ForwardDetails_Specified(Index: Integer): boolean;
begin
  Result := FForwardDetails_Specified;
end;

procedure MyMessagesMessageType.SetFolder(Index: Integer; const AMyMessagesFolderType: MyMessagesFolderType);
begin
  FFolder := AMyMessagesFolderType;
  FFolder_Specified := True;
end;

function MyMessagesMessageType.Folder_Specified(Index: Integer): boolean;
begin
  Result := FFolder_Specified;
end;

procedure MyMessagesMessageType.SetContent(Index: Integer; const Astring: string);
begin
  FContent := Astring;
  FContent_Specified := True;
end;

function MyMessagesMessageType.Content_Specified(Index: Integer): boolean;
begin
  Result := FContent_Specified;
end;

procedure MyMessagesMessageType.SetMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
begin
  FMessageType := AMessageTypeCodeType;
  FMessageType_Specified := True;
end;

function MyMessagesMessageType.MessageType_Specified(Index: Integer): boolean;
begin
  Result := FMessageType_Specified;
end;

procedure MyMessagesMessageType.SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
begin
  FListingStatus := AListingStatusCodeType;
  FListingStatus_Specified := True;
end;

function MyMessagesMessageType.ListingStatus_Specified(Index: Integer): boolean;
begin
  Result := FListingStatus_Specified;
end;

procedure MyMessagesMessageType.SetQuestionType(Index: Integer; const AQuestionTypeCodeType: QuestionTypeCodeType);
begin
  FQuestionType := AQuestionTypeCodeType;
  FQuestionType_Specified := True;
end;

function MyMessagesMessageType.QuestionType_Specified(Index: Integer): boolean;
begin
  Result := FQuestionType_Specified;
end;

procedure MyMessagesMessageType.SetReplied(Index: Integer; const ABoolean: Boolean);
begin
  FReplied := ABoolean;
  FReplied_Specified := True;
end;

function MyMessagesMessageType.Replied_Specified(Index: Integer): boolean;
begin
  Result := FReplied_Specified;
end;

procedure MyMessagesMessageType.SetHighPriority(Index: Integer; const ABoolean: Boolean);
begin
  FHighPriority := ABoolean;
  FHighPriority_Specified := True;
end;

function MyMessagesMessageType.HighPriority_Specified(Index: Integer): boolean;
begin
  Result := FHighPriority_Specified;
end;

procedure MyMessagesMessageType.SetItemEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FItemEndTime := ATXSDateTime;
  FItemEndTime_Specified := True;
end;

function MyMessagesMessageType.ItemEndTime_Specified(Index: Integer): boolean;
begin
  Result := FItemEndTime_Specified;
end;

procedure MyMessagesMessageType.SetItemTitle(Index: Integer; const Astring: string);
begin
  FItemTitle := Astring;
  FItemTitle_Specified := True;
end;

function MyMessagesMessageType.ItemTitle_Specified(Index: Integer): boolean;
begin
  Result := FItemTitle_Specified;
end;

procedure MyMessagesMessageType.SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
begin
  FMessageMedia := AArray_Of_MessageMediaType;
  FMessageMedia_Specified := True;
end;

function MyMessagesMessageType.MessageMedia_Specified(Index: Integer): boolean;
begin
  Result := FMessageMedia_Specified;
end;

destructor ItemBestOffersType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBestOfferArray)-1 do
    SysUtils.FreeAndNil(FBestOfferArray[I]);
  System.SetLength(FBestOfferArray, 0);
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure ItemBestOffersType.SetRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FRole := ATradingRoleCodeType;
  FRole_Specified := True;
end;

function ItemBestOffersType.Role_Specified(Index: Integer): boolean;
begin
  Result := FRole_Specified;
end;

procedure ItemBestOffersType.SetBestOfferArray(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
begin
  FBestOfferArray := ABestOfferArrayType;
  FBestOfferArray_Specified := True;
end;

function ItemBestOffersType.BestOfferArray_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferArray_Specified;
end;

procedure ItemBestOffersType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function ItemBestOffersType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

destructor OfferType.Destroy;
begin
  SysUtils.FreeAndNil(FMaxBid);
  SysUtils.FreeAndNil(FDiscounts);
  SysUtils.FreeAndNil(FTimeBid);
  SysUtils.FreeAndNil(FHighestBid);
  SysUtils.FreeAndNil(FConvertedPrice);
  SysUtils.FreeAndNil(FUser);
  SysUtils.FreeAndNil(FMyMaxBid);
  inherited Destroy;
end;

procedure OfferType.SetAction(Index: Integer; const ABidActionCodeType: BidActionCodeType);
begin
  FAction := ABidActionCodeType;
  FAction_Specified := True;
end;

function OfferType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure OfferType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function OfferType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure OfferType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function OfferType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure OfferType.SetMaxBid(Index: Integer; const AAmountType: AmountType);
begin
  FMaxBid := AAmountType;
  FMaxBid_Specified := True;
end;

function OfferType.MaxBid_Specified(Index: Integer): boolean;
begin
  Result := FMaxBid_Specified;
end;

procedure OfferType.SetDiscounts(Index: Integer; const AOfferDiscountsType: OfferDiscountsType);
begin
  FDiscounts := AOfferDiscountsType;
  FDiscounts_Specified := True;
end;

function OfferType.Discounts_Specified(Index: Integer): boolean;
begin
  Result := FDiscounts_Specified;
end;

procedure OfferType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function OfferType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure OfferType.SetSecondChanceEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSecondChanceEnabled := ABoolean;
  FSecondChanceEnabled_Specified := True;
end;

function OfferType.SecondChanceEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceEnabled_Specified;
end;

procedure OfferType.SetSiteCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FSiteCurrency := ACurrencyCodeType;
  FSiteCurrency_Specified := True;
end;

function OfferType.SiteCurrency_Specified(Index: Integer): boolean;
begin
  Result := FSiteCurrency_Specified;
end;

procedure OfferType.SetTimeBid(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeBid := ATXSDateTime;
  FTimeBid_Specified := True;
end;

function OfferType.TimeBid_Specified(Index: Integer): boolean;
begin
  Result := FTimeBid_Specified;
end;

procedure OfferType.SetHighestBid(Index: Integer; const AAmountType: AmountType);
begin
  FHighestBid := AAmountType;
  FHighestBid_Specified := True;
end;

function OfferType.HighestBid_Specified(Index: Integer): boolean;
begin
  Result := FHighestBid_Specified;
end;

procedure OfferType.SetConvertedPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedPrice := AAmountType;
  FConvertedPrice_Specified := True;
end;

function OfferType.ConvertedPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedPrice_Specified;
end;

procedure OfferType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function OfferType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure OfferType.SetUser(Index: Integer; const AUserType: UserType);
begin
  FUser := AUserType;
  FUser_Specified := True;
end;

function OfferType.User_Specified(Index: Integer): boolean;
begin
  Result := FUser_Specified;
end;

procedure OfferType.SetUserConsent(Index: Integer; const ABoolean: Boolean);
begin
  FUserConsent := ABoolean;
  FUserConsent_Specified := True;
end;

function OfferType.UserConsent_Specified(Index: Integer): boolean;
begin
  Result := FUserConsent_Specified;
end;

procedure OfferType.SetBidCount(Index: Integer; const AInteger: Integer);
begin
  FBidCount := AInteger;
  FBidCount_Specified := True;
end;

function OfferType.BidCount_Specified(Index: Integer): boolean;
begin
  Result := FBidCount_Specified;
end;

procedure OfferType.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function OfferType.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure OfferType.SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
begin
  FBestOfferID := ABestOfferIDType;
  FBestOfferID_Specified := True;
end;

function OfferType.BestOfferID_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferID_Specified;
end;

procedure OfferType.SetMyMaxBid(Index: Integer; const AAmountType: AmountType);
begin
  FMyMaxBid := AAmountType;
  FMyMaxBid_Specified := True;
end;

function OfferType.MyMaxBid_Specified(Index: Integer): boolean;
begin
  Result := FMyMaxBid_Specified;
end;

destructor CurrencyDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure CurrencyDetailsType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function CurrencyDetailsType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure CurrencyDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function CurrencyDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure CurrencyDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function CurrencyDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure CurrencyDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function CurrencyDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor MyeBayFavoriteSearchType.Destroy;
begin
  SysUtils.FreeAndNil(FEndTimeFrom);
  SysUtils.FreeAndNil(FEndTimeTo);
  SysUtils.FreeAndNil(FPriceMax);
  SysUtils.FreeAndNil(FPriceMin);
  inherited Destroy;
end;

procedure MyeBayFavoriteSearchType.SetSearchName(Index: Integer; const Astring: string);
begin
  FSearchName := Astring;
  FSearchName_Specified := True;
end;

function MyeBayFavoriteSearchType.SearchName_Specified(Index: Integer): boolean;
begin
  Result := FSearchName_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSearchQuery(Index: Integer; const Astring: string);
begin
  FSearchQuery := Astring;
  FSearchQuery_Specified := True;
end;

function MyeBayFavoriteSearchType.SearchQuery_Specified(Index: Integer): boolean;
begin
  Result := FSearchQuery_Specified;
end;

procedure MyeBayFavoriteSearchType.SetQueryKeywords(Index: Integer; const Astring: string);
begin
  FQueryKeywords := Astring;
  FQueryKeywords_Specified := True;
end;

function MyeBayFavoriteSearchType.QueryKeywords_Specified(Index: Integer): boolean;
begin
  Result := FQueryKeywords_Specified;
end;

procedure MyeBayFavoriteSearchType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function MyeBayFavoriteSearchType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure MyeBayFavoriteSearchType.SetItemSort(Index: Integer; const ASimpleItemSortCodeType: SimpleItemSortCodeType);
begin
  FItemSort := ASimpleItemSortCodeType;
  FItemSort_Specified := True;
end;

function MyeBayFavoriteSearchType.ItemSort_Specified(Index: Integer): boolean;
begin
  Result := FItemSort_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSortOrder := ASortOrderCodeType;
  FSortOrder_Specified := True;
end;

function MyeBayFavoriteSearchType.SortOrder_Specified(Index: Integer): boolean;
begin
  Result := FSortOrder_Specified;
end;

procedure MyeBayFavoriteSearchType.SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeFrom := ATXSDateTime;
  FEndTimeFrom_Specified := True;
end;

function MyeBayFavoriteSearchType.EndTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeFrom_Specified;
end;

procedure MyeBayFavoriteSearchType.SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeTo := ATXSDateTime;
  FEndTimeTo_Specified := True;
end;

function MyeBayFavoriteSearchType.EndTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeTo_Specified;
end;

procedure MyeBayFavoriteSearchType.SetMaxDistance(Index: Integer; const AInteger: Integer);
begin
  FMaxDistance := AInteger;
  FMaxDistance_Specified := True;
end;

function MyeBayFavoriteSearchType.MaxDistance_Specified(Index: Integer): boolean;
begin
  Result := FMaxDistance_Specified;
end;

procedure MyeBayFavoriteSearchType.SetPostalCode(Index: Integer; const Astring: string);
begin
  FPostalCode := Astring;
  FPostalCode_Specified := True;
end;

function MyeBayFavoriteSearchType.PostalCode_Specified(Index: Integer): boolean;
begin
  Result := FPostalCode_Specified;
end;

procedure MyeBayFavoriteSearchType.SetItemType(Index: Integer; const AItemTypeCodeType: ItemTypeCodeType);
begin
  FItemType := AItemTypeCodeType;
  FItemType_Specified := True;
end;

function MyeBayFavoriteSearchType.ItemType_Specified(Index: Integer): boolean;
begin
  Result := FItemType_Specified;
end;

procedure MyeBayFavoriteSearchType.SetPriceMax(Index: Integer; const AAmountType: AmountType);
begin
  FPriceMax := AAmountType;
  FPriceMax_Specified := True;
end;

function MyeBayFavoriteSearchType.PriceMax_Specified(Index: Integer): boolean;
begin
  Result := FPriceMax_Specified;
end;

procedure MyeBayFavoriteSearchType.SetPriceMin(Index: Integer; const AAmountType: AmountType);
begin
  FPriceMin := AAmountType;
  FPriceMin_Specified := True;
end;

function MyeBayFavoriteSearchType.PriceMin_Specified(Index: Integer): boolean;
begin
  Result := FPriceMin_Specified;
end;

procedure MyeBayFavoriteSearchType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function MyeBayFavoriteSearchType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure MyeBayFavoriteSearchType.SetBidCountMax(Index: Integer; const AInteger: Integer);
begin
  FBidCountMax := AInteger;
  FBidCountMax_Specified := True;
end;

function MyeBayFavoriteSearchType.BidCountMax_Specified(Index: Integer): boolean;
begin
  Result := FBidCountMax_Specified;
end;

procedure MyeBayFavoriteSearchType.SetBidCountMin(Index: Integer; const AInteger: Integer);
begin
  FBidCountMin := AInteger;
  FBidCountMin_Specified := True;
end;

function MyeBayFavoriteSearchType.BidCountMin_Specified(Index: Integer): boolean;
begin
  Result := FBidCountMin_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSearchFlag(Index: Integer; const AArray_Of_SearchFlagCodeType: Array_Of_SearchFlagCodeType);
begin
  FSearchFlag := AArray_Of_SearchFlagCodeType;
  FSearchFlag_Specified := True;
end;

function MyeBayFavoriteSearchType.SearchFlag_Specified(Index: Integer): boolean;
begin
  Result := FSearchFlag_Specified;
end;

procedure MyeBayFavoriteSearchType.SetPaymentMethod(Index: Integer; const APaymentMethodSearchCodeType: PaymentMethodSearchCodeType);
begin
  FPaymentMethod := APaymentMethodSearchCodeType;
  FPaymentMethod_Specified := True;
end;

function MyeBayFavoriteSearchType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure MyeBayFavoriteSearchType.SetPreferredLocation(Index: Integer; const APreferredLocationCodeType: PreferredLocationCodeType);
begin
  FPreferredLocation := APreferredLocationCodeType;
  FPreferredLocation_Specified := True;
end;

function MyeBayFavoriteSearchType.PreferredLocation_Specified(Index: Integer): boolean;
begin
  Result := FPreferredLocation_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSellerID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSellerID := ASellerExcludeShipToLocationPreferencesType;
  FSellerID_Specified := True;
end;

function MyeBayFavoriteSearchType.SellerID_Specified(Index: Integer): boolean;
begin
  Result := FSellerID_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSellerIDExclude(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSellerIDExclude := ASellerExcludeShipToLocationPreferencesType;
  FSellerIDExclude_Specified := True;
end;

function MyeBayFavoriteSearchType.SellerIDExclude_Specified(Index: Integer): boolean;
begin
  Result := FSellerIDExclude_Specified;
end;

procedure MyeBayFavoriteSearchType.SetItemsAvailableTo(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FItemsAvailableTo := ACountryCodeType;
  FItemsAvailableTo_Specified := True;
end;

function MyeBayFavoriteSearchType.ItemsAvailableTo_Specified(Index: Integer): boolean;
begin
  Result := FItemsAvailableTo_Specified;
end;

procedure MyeBayFavoriteSearchType.SetItemsLocatedIn(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FItemsLocatedIn := ACountryCodeType;
  FItemsLocatedIn_Specified := True;
end;

function MyeBayFavoriteSearchType.ItemsLocatedIn_Specified(Index: Integer): boolean;
begin
  Result := FItemsLocatedIn_Specified;
end;

procedure MyeBayFavoriteSearchType.SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
begin
  FSellerBusinessType := ASellerBusinessCodeType;
  FSellerBusinessType_Specified := True;
end;

function MyeBayFavoriteSearchType.SellerBusinessType_Specified(Index: Integer): boolean;
begin
  Result := FSellerBusinessType_Specified;
end;

procedure MyeBayFavoriteSearchType.SetCondition(Index: Integer; const AItemConditionCodeType: ItemConditionCodeType);
begin
  FCondition := AItemConditionCodeType;
  FCondition_Specified := True;
end;

function MyeBayFavoriteSearchType.Condition_Specified(Index: Integer): boolean;
begin
  Result := FCondition_Specified;
end;

procedure MyeBayFavoriteSearchType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function MyeBayFavoriteSearchType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure MyeBayFavoriteSearchType.SetQuantityOperator(Index: Integer; const AQuantityOperatorCodeType: QuantityOperatorCodeType);
begin
  FQuantityOperator := AQuantityOperatorCodeType;
  FQuantityOperator_Specified := True;
end;

function MyeBayFavoriteSearchType.QuantityOperator_Specified(Index: Integer): boolean;
begin
  Result := FQuantityOperator_Specified;
end;

procedure PaginationType.SetEntriesPerPage(Index: Integer; const AInteger: Integer);
begin
  FEntriesPerPage := AInteger;
  FEntriesPerPage_Specified := True;
end;

function PaginationType.EntriesPerPage_Specified(Index: Integer): boolean;
begin
  Result := FEntriesPerPage_Specified;
end;

procedure PaginationType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function PaginationType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure PaginationResultType.SetTotalNumberOfPages(Index: Integer; const AInteger: Integer);
begin
  FTotalNumberOfPages := AInteger;
  FTotalNumberOfPages_Specified := True;
end;

function PaginationResultType.TotalNumberOfPages_Specified(Index: Integer): boolean;
begin
  Result := FTotalNumberOfPages_Specified;
end;

procedure PaginationResultType.SetTotalNumberOfEntries(Index: Integer; const AInteger: Integer);
begin
  FTotalNumberOfEntries := AInteger;
  FTotalNumberOfEntries_Specified := True;
end;

function PaginationResultType.TotalNumberOfEntries_Specified(Index: Integer): boolean;
begin
  Result := FTotalNumberOfEntries_Specified;
end;

destructor MemberMessageExchangeType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMessageMedia)-1 do
    SysUtils.FreeAndNil(FMessageMedia[I]);
  System.SetLength(FMessageMedia, 0);
  SysUtils.FreeAndNil(FItem);
  SysUtils.FreeAndNil(FQuestion);
  SysUtils.FreeAndNil(FCreationDate);
  SysUtils.FreeAndNil(FLastModifiedDate);
  inherited Destroy;
end;

procedure MemberMessageExchangeType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function MemberMessageExchangeType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure MemberMessageExchangeType.SetQuestion(Index: Integer; const AMemberMessageType: MemberMessageType);
begin
  FQuestion := AMemberMessageType;
  FQuestion_Specified := True;
end;

function MemberMessageExchangeType.Question_Specified(Index: Integer): boolean;
begin
  Result := FQuestion_Specified;
end;

procedure MemberMessageExchangeType.SetResponse(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FResponse := ASellerExcludeShipToLocationPreferencesType;
  FResponse_Specified := True;
end;

function MemberMessageExchangeType.Response_Specified(Index: Integer): boolean;
begin
  Result := FResponse_Specified;
end;

procedure MemberMessageExchangeType.SetMessageStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
begin
  FMessageStatus := AMessageStatusTypeCodeType;
  FMessageStatus_Specified := True;
end;

function MemberMessageExchangeType.MessageStatus_Specified(Index: Integer): boolean;
begin
  Result := FMessageStatus_Specified;
end;

procedure MemberMessageExchangeType.SetCreationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreationDate := ATXSDateTime;
  FCreationDate_Specified := True;
end;

function MemberMessageExchangeType.CreationDate_Specified(Index: Integer): boolean;
begin
  Result := FCreationDate_Specified;
end;

procedure MemberMessageExchangeType.SetLastModifiedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastModifiedDate := ATXSDateTime;
  FLastModifiedDate_Specified := True;
end;

function MemberMessageExchangeType.LastModifiedDate_Specified(Index: Integer): boolean;
begin
  Result := FLastModifiedDate_Specified;
end;

procedure MemberMessageExchangeType.SetMessageMedia(Index: Integer; const AArray_Of_MessageMediaType: Array_Of_MessageMediaType);
begin
  FMessageMedia := AArray_Of_MessageMediaType;
  FMessageMedia_Specified := True;
end;

function MemberMessageExchangeType.MessageMedia_Specified(Index: Integer): boolean;
begin
  Result := FMessageMedia_Specified;
end;

procedure CategoryMappingType.SetoldID(Index: Integer; const Astring: string);
begin
  FoldID := Astring;
  FoldID_Specified := True;
end;

function CategoryMappingType.oldID_Specified(Index: Integer): boolean;
begin
  Result := FoldID_Specified;
end;

procedure CategoryMappingType.Setid(Index: Integer; const Astring: string);
begin
  Fid := Astring;
  Fid_Specified := True;
end;

function CategoryMappingType.id_Specified(Index: Integer): boolean;
begin
  Result := Fid_Specified;
end;

destructor CategoryItemSpecificsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemSpecifics)-1 do
    SysUtils.FreeAndNil(FItemSpecifics[I]);
  System.SetLength(FItemSpecifics, 0);
  inherited Destroy;
end;

procedure CategoryItemSpecificsType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function CategoryItemSpecificsType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure CategoryItemSpecificsType.SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FItemSpecifics := ANameValueListArrayType;
  FItemSpecifics_Specified := True;
end;

function CategoryItemSpecificsType.ItemSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecifics_Specified;
end;

destructor RecommendationsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FProductIdentifiers)-1 do
    SysUtils.FreeAndNil(FProductIdentifiers[I]);
  System.SetLength(FProductIdentifiers, 0);
  for I := 0 to System.Length(FNameRecommendation)-1 do
    SysUtils.FreeAndNil(FNameRecommendation[I]);
  System.SetLength(FNameRecommendation, 0);
  inherited Destroy;
end;

procedure RecommendationsType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function RecommendationsType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure RecommendationsType.SetProductIdentifiers(Index: Integer; const AArray_Of_ProductIdentifiersType: Array_Of_ProductIdentifiersType);
begin
  FProductIdentifiers := AArray_Of_ProductIdentifiersType;
  FProductIdentifiers_Specified := True;
end;

function RecommendationsType.ProductIdentifiers_Specified(Index: Integer): boolean;
begin
  Result := FProductIdentifiers_Specified;
end;

procedure RecommendationsType.SetNameRecommendation(Index: Integer; const AArray_Of_NameRecommendationType: Array_Of_NameRecommendationType);
begin
  FNameRecommendation := AArray_Of_NameRecommendationType;
  FNameRecommendation_Specified := True;
end;

function RecommendationsType.NameRecommendation_Specified(Index: Integer): boolean;
begin
  Result := FNameRecommendation_Specified;
end;

procedure RecommendationsType.SetUpdated(Index: Integer; const ABoolean: Boolean);
begin
  FUpdated := ABoolean;
  FUpdated_Specified := True;
end;

function RecommendationsType.Updated_Specified(Index: Integer): boolean;
begin
  Result := FUpdated_Specified;
end;

destructor UserDefinedListType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemArray)-1 do
    SysUtils.FreeAndNil(FItemArray[I]);
  System.SetLength(FItemArray, 0);
  SysUtils.FreeAndNil(FFavoriteSearches);
  SysUtils.FreeAndNil(FFavoriteSellers);
  inherited Destroy;
end;

procedure UserDefinedListType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function UserDefinedListType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure UserDefinedListType.SetItemCount(Index: Integer; const AInteger: Integer);
begin
  FItemCount := AInteger;
  FItemCount_Specified := True;
end;

function UserDefinedListType.ItemCount_Specified(Index: Integer): boolean;
begin
  Result := FItemCount_Specified;
end;

procedure UserDefinedListType.SetFavoriteSearcheCount(Index: Integer; const AInteger: Integer);
begin
  FFavoriteSearcheCount := AInteger;
  FFavoriteSearcheCount_Specified := True;
end;

function UserDefinedListType.FavoriteSearcheCount_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSearcheCount_Specified;
end;

procedure UserDefinedListType.SetFavoriteSellerCount(Index: Integer; const AInteger: Integer);
begin
  FFavoriteSellerCount := AInteger;
  FFavoriteSellerCount_Specified := True;
end;

function UserDefinedListType.FavoriteSellerCount_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSellerCount_Specified;
end;

procedure UserDefinedListType.SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FItemArray := AItemArrayType;
  FItemArray_Specified := True;
end;

function UserDefinedListType.ItemArray_Specified(Index: Integer): boolean;
begin
  Result := FItemArray_Specified;
end;

procedure UserDefinedListType.SetFavoriteSearches(Index: Integer; const AMyeBayFavoriteSearchListType: MyeBayFavoriteSearchListType);
begin
  FFavoriteSearches := AMyeBayFavoriteSearchListType;
  FFavoriteSearches_Specified := True;
end;

function UserDefinedListType.FavoriteSearches_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSearches_Specified;
end;

procedure UserDefinedListType.SetFavoriteSellers(Index: Integer; const AMyeBayFavoriteSellerListType: MyeBayFavoriteSellerListType);
begin
  FFavoriteSellers := AMyeBayFavoriteSellerListType;
  FFavoriteSellers_Specified := True;
end;

function UserDefinedListType.FavoriteSellers_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSellers_Specified;
end;

destructor PaginatedItemArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemArray)-1 do
    SysUtils.FreeAndNil(FItemArray[I]);
  System.SetLength(FItemArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure PaginatedItemArrayType.SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FItemArray := AItemArrayType;
  FItemArray_Specified := True;
end;

function PaginatedItemArrayType.ItemArray_Specified(Index: Integer): boolean;
begin
  Result := FItemArray_Specified;
end;

procedure PaginatedItemArrayType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function PaginatedItemArrayType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure RefundLineType.Settype_(Index: Integer; const ARefundLineTypeCodeType: RefundLineTypeCodeType);
begin
  Ftype_ := ARefundLineTypeCodeType;
  Ftype__Specified := True;
end;

function RefundLineType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

procedure UnitInfoType.SetUnitType(Index: Integer; const Astring: string);
begin
  FUnitType := Astring;
  FUnitType_Specified := True;
end;

function UnitInfoType.UnitType_Specified(Index: Integer): boolean;
begin
  Result := FUnitType_Specified;
end;

procedure UnitInfoType.SetUnitQuantity(Index: Integer; const ADouble: Double);
begin
  FUnitQuantity := ADouble;
  FUnitQuantity_Specified := True;
end;

function UnitInfoType.UnitQuantity_Specified(Index: Integer): boolean;
begin
  Result := FUnitQuantity_Specified;
end;

destructor PromotedItemType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPromotionDetails)-1 do
    SysUtils.FreeAndNil(FPromotionDetails[I]);
  System.SetLength(FPromotionDetails, 0);
  SysUtils.FreeAndNil(FTimeLeft);
  inherited Destroy;
end;

procedure PromotedItemType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function PromotedItemType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure PromotedItemType.SetPictureURL(Index: Integer; const Astring: string);
begin
  FPictureURL := Astring;
  FPictureURL_Specified := True;
end;

function PromotedItemType.PictureURL_Specified(Index: Integer): boolean;
begin
  Result := FPictureURL_Specified;
end;

procedure PromotedItemType.SetPosition(Index: Integer; const AInteger: Integer);
begin
  FPosition := AInteger;
  FPosition_Specified := True;
end;

function PromotedItemType.Position_Specified(Index: Integer): boolean;
begin
  Result := FPosition_Specified;
end;

procedure PromotedItemType.SetSelectionType(Index: Integer; const APromotionItemSelectionCodeType: PromotionItemSelectionCodeType);
begin
  FSelectionType := APromotionItemSelectionCodeType;
  FSelectionType_Specified := True;
end;

function PromotedItemType.SelectionType_Specified(Index: Integer): boolean;
begin
  Result := FSelectionType_Specified;
end;

procedure PromotedItemType.SetTitle(Index: Integer; const Astring: string);
begin
  FTitle := Astring;
  FTitle_Specified := True;
end;

function PromotedItemType.Title_Specified(Index: Integer): boolean;
begin
  Result := FTitle_Specified;
end;

procedure PromotedItemType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function PromotedItemType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure PromotedItemType.SetPromotionDetails(Index: Integer; const AArray_Of_PromotionDetailsType: Array_Of_PromotionDetailsType);
begin
  FPromotionDetails := AArray_Of_PromotionDetailsType;
  FPromotionDetails_Specified := True;
end;

function PromotedItemType.PromotionDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionDetails_Specified;
end;

procedure PromotedItemType.SetTimeLeft(Index: Integer; const ATXSDuration: TXSDuration);
begin
  FTimeLeft := ATXSDuration;
  FTimeLeft_Specified := True;
end;

function PromotedItemType.TimeLeft_Specified(Index: Integer): boolean;
begin
  Result := FTimeLeft_Specified;
end;

destructor CrossPromotionsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPromotedItem)-1 do
    SysUtils.FreeAndNil(FPromotedItem[I]);
  System.SetLength(FPromotedItem, 0);
  inherited Destroy;
end;

procedure CrossPromotionsType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function CrossPromotionsType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure CrossPromotionsType.SetPrimaryScheme(Index: Integer; const APromotionSchemeCodeType: PromotionSchemeCodeType);
begin
  FPrimaryScheme := APromotionSchemeCodeType;
  FPrimaryScheme_Specified := True;
end;

function CrossPromotionsType.PrimaryScheme_Specified(Index: Integer): boolean;
begin
  Result := FPrimaryScheme_Specified;
end;

procedure CrossPromotionsType.SetPromotionMethod(Index: Integer; const APromotionMethodCodeType: PromotionMethodCodeType);
begin
  FPromotionMethod := APromotionMethodCodeType;
  FPromotionMethod_Specified := True;
end;

function CrossPromotionsType.PromotionMethod_Specified(Index: Integer): boolean;
begin
  Result := FPromotionMethod_Specified;
end;

procedure CrossPromotionsType.SetSellerID(Index: Integer; const Astring: string);
begin
  FSellerID := Astring;
  FSellerID_Specified := True;
end;

function CrossPromotionsType.SellerID_Specified(Index: Integer): boolean;
begin
  Result := FSellerID_Specified;
end;

procedure CrossPromotionsType.SetStoreName(Index: Integer; const Astring: string);
begin
  FStoreName := Astring;
  FStoreName_Specified := True;
end;

function CrossPromotionsType.StoreName_Specified(Index: Integer): boolean;
begin
  Result := FStoreName_Specified;
end;

procedure CrossPromotionsType.SetPromotedItem(Index: Integer; const AArray_Of_PromotedItemType: Array_Of_PromotedItemType);
begin
  FPromotedItem := AArray_Of_PromotedItemType;
  FPromotedItem_Specified := True;
end;

function CrossPromotionsType.PromotedItem_Specified(Index: Integer): boolean;
begin
  Result := FPromotedItem_Specified;
end;

destructor DeliveryDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FRecipient);
  SysUtils.FreeAndNil(FSender);
  inherited Destroy;
end;

procedure DeliveryDetailsType.SetRecipient(Index: Integer; const ADigitalDeliveryUserType: DigitalDeliveryUserType);
begin
  FRecipient := ADigitalDeliveryUserType;
  FRecipient_Specified := True;
end;

function DeliveryDetailsType.Recipient_Specified(Index: Integer): boolean;
begin
  Result := FRecipient_Specified;
end;

procedure DeliveryDetailsType.SetSender(Index: Integer; const ADigitalDeliveryUserType: DigitalDeliveryUserType);
begin
  FSender := ADigitalDeliveryUserType;
  FSender_Specified := True;
end;

function DeliveryDetailsType.Sender_Specified(Index: Integer): boolean;
begin
  Result := FSender_Specified;
end;

procedure DescriptionTemplateType.SetGroupID(Index: Integer; const AInteger: Integer);
begin
  FGroupID := AInteger;
  FGroupID_Specified := True;
end;

function DescriptionTemplateType.GroupID_Specified(Index: Integer): boolean;
begin
  Result := FGroupID_Specified;
end;

procedure DescriptionTemplateType.SetID(Index: Integer; const AInteger: Integer);
begin
  FID := AInteger;
  FID_Specified := True;
end;

function DescriptionTemplateType.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure DescriptionTemplateType.SetImageURL(Index: Integer; const Astring: string);
begin
  FImageURL := Astring;
  FImageURL_Specified := True;
end;

function DescriptionTemplateType.ImageURL_Specified(Index: Integer): boolean;
begin
  Result := FImageURL_Specified;
end;

procedure DescriptionTemplateType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DescriptionTemplateType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DescriptionTemplateType.SetTemplateXML(Index: Integer; const Astring: string);
begin
  FTemplateXML := Astring;
  FTemplateXML_Specified := True;
end;

function DescriptionTemplateType.TemplateXML_Specified(Index: Integer): boolean;
begin
  Result := FTemplateXML_Specified;
end;

procedure DescriptionTemplateType.SetType_(Index: Integer; const ADescriptionTemplateCodeType: DescriptionTemplateCodeType);
begin
  FType_ := ADescriptionTemplateCodeType;
  FType__Specified := True;
end;

function DescriptionTemplateType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure DigitalDeliveryUserType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function DigitalDeliveryUserType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure DigitalDeliveryUserType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function DigitalDeliveryUserType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure ConditionType.SetID(Index: Integer; const AInteger: Integer);
begin
  FID := AInteger;
  FID_Specified := True;
end;

function ConditionType.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure ConditionType.SetDisplayName(Index: Integer; const Astring: string);
begin
  FDisplayName := Astring;
  FDisplayName_Specified := True;
end;

function ConditionType.DisplayName_Specified(Index: Integer): boolean;
begin
  Result := FDisplayName_Specified;
end;

destructor CombinedPaymentPreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FCalculatedShippingPreferences);
  SysUtils.FreeAndNil(FFlatShippingPreferences);
  inherited Destroy;
end;

procedure CombinedPaymentPreferencesType.SetCalculatedShippingPreferences(Index: Integer; const ACalculatedShippingPreferencesType: CalculatedShippingPreferencesType);
begin
  FCalculatedShippingPreferences := ACalculatedShippingPreferencesType;
  FCalculatedShippingPreferences_Specified := True;
end;

function CombinedPaymentPreferencesType.CalculatedShippingPreferences_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingPreferences_Specified;
end;

procedure CombinedPaymentPreferencesType.SetCombinedPaymentOption(Index: Integer; const ACombinedPaymentOptionCodeType: CombinedPaymentOptionCodeType);
begin
  FCombinedPaymentOption := ACombinedPaymentOptionCodeType;
  FCombinedPaymentOption_Specified := True;
end;

function CombinedPaymentPreferencesType.CombinedPaymentOption_Specified(Index: Integer): boolean;
begin
  Result := FCombinedPaymentOption_Specified;
end;

procedure CombinedPaymentPreferencesType.SetCombinedPaymentPeriod(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
begin
  FCombinedPaymentPeriod := ACombinedPaymentPeriodCodeType;
  FCombinedPaymentPeriod_Specified := True;
end;

function CombinedPaymentPreferencesType.CombinedPaymentPeriod_Specified(Index: Integer): boolean;
begin
  Result := FCombinedPaymentPeriod_Specified;
end;

procedure CombinedPaymentPreferencesType.SetFlatShippingPreferences(Index: Integer; const AFlatShippingPreferencesType: FlatShippingPreferencesType);
begin
  FFlatShippingPreferences := AFlatShippingPreferencesType;
  FFlatShippingPreferences_Specified := True;
end;

function CombinedPaymentPreferencesType.FlatShippingPreferences_Specified(Index: Integer): boolean;
begin
  Result := FFlatShippingPreferences_Specified;
end;

procedure CrossPromotionPreferencesType.SetCrossPromotionEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossPromotionEnabled := ABoolean;
  FCrossPromotionEnabled_Specified := True;
end;

function CrossPromotionPreferencesType.CrossPromotionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossPromotionEnabled_Specified;
end;

procedure CrossPromotionPreferencesType.SetCrossSellItemFormatSortFilter(Index: Integer; const AItemFormatSortFilterCodeType: ItemFormatSortFilterCodeType);
begin
  FCrossSellItemFormatSortFilter := AItemFormatSortFilterCodeType;
  FCrossSellItemFormatSortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.CrossSellItemFormatSortFilter_Specified(Index: Integer): boolean;
begin
  Result := FCrossSellItemFormatSortFilter_Specified;
end;

procedure CrossPromotionPreferencesType.SetCrossSellGallerySortFilter(Index: Integer; const AGallerySortFilterCodeType: GallerySortFilterCodeType);
begin
  FCrossSellGallerySortFilter := AGallerySortFilterCodeType;
  FCrossSellGallerySortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.CrossSellGallerySortFilter_Specified(Index: Integer): boolean;
begin
  Result := FCrossSellGallerySortFilter_Specified;
end;

procedure CrossPromotionPreferencesType.SetCrossSellItemSortFilter(Index: Integer; const AItemSortFilterCodeType: ItemSortFilterCodeType);
begin
  FCrossSellItemSortFilter := AItemSortFilterCodeType;
  FCrossSellItemSortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.CrossSellItemSortFilter_Specified(Index: Integer): boolean;
begin
  Result := FCrossSellItemSortFilter_Specified;
end;

procedure CrossPromotionPreferencesType.SetUpSellItemFormatSortFilter(Index: Integer; const AItemFormatSortFilterCodeType: ItemFormatSortFilterCodeType);
begin
  FUpSellItemFormatSortFilter := AItemFormatSortFilterCodeType;
  FUpSellItemFormatSortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.UpSellItemFormatSortFilter_Specified(Index: Integer): boolean;
begin
  Result := FUpSellItemFormatSortFilter_Specified;
end;

procedure CrossPromotionPreferencesType.SetUpSellGallerySortFilter(Index: Integer; const AGallerySortFilterCodeType: GallerySortFilterCodeType);
begin
  FUpSellGallerySortFilter := AGallerySortFilterCodeType;
  FUpSellGallerySortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.UpSellGallerySortFilter_Specified(Index: Integer): boolean;
begin
  Result := FUpSellGallerySortFilter_Specified;
end;

procedure CrossPromotionPreferencesType.SetUpSellItemSortFilter(Index: Integer; const AItemSortFilterCodeType: ItemSortFilterCodeType);
begin
  FUpSellItemSortFilter := AItemSortFilterCodeType;
  FUpSellItemSortFilter_Specified := True;
end;

function CrossPromotionPreferencesType.UpSellItemSortFilter_Specified(Index: Integer): boolean;
begin
  Result := FUpSellItemSortFilter_Specified;
end;

destructor ContactHoursDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FHours1From);
  SysUtils.FreeAndNil(FHours1To);
  SysUtils.FreeAndNil(FHours2From);
  SysUtils.FreeAndNil(FHours2To);
  inherited Destroy;
end;

procedure ContactHoursDetailsType.SetTimeZoneID(Index: Integer; const Astring: string);
begin
  FTimeZoneID := Astring;
  FTimeZoneID_Specified := True;
end;

function ContactHoursDetailsType.TimeZoneID_Specified(Index: Integer): boolean;
begin
  Result := FTimeZoneID_Specified;
end;

procedure ContactHoursDetailsType.SetHours1Days(Index: Integer; const ADaysCodeType: DaysCodeType);
begin
  FHours1Days := ADaysCodeType;
  FHours1Days_Specified := True;
end;

function ContactHoursDetailsType.Hours1Days_Specified(Index: Integer): boolean;
begin
  Result := FHours1Days_Specified;
end;

procedure ContactHoursDetailsType.SetHours1AnyTime(Index: Integer; const ABoolean: Boolean);
begin
  FHours1AnyTime := ABoolean;
  FHours1AnyTime_Specified := True;
end;

function ContactHoursDetailsType.Hours1AnyTime_Specified(Index: Integer): boolean;
begin
  Result := FHours1AnyTime_Specified;
end;

procedure ContactHoursDetailsType.SetHours1From(Index: Integer; const ATXSTime: TXSTime);
begin
  FHours1From := ATXSTime;
  FHours1From_Specified := True;
end;

function ContactHoursDetailsType.Hours1From_Specified(Index: Integer): boolean;
begin
  Result := FHours1From_Specified;
end;

procedure ContactHoursDetailsType.SetHours1To(Index: Integer; const ATXSTime: TXSTime);
begin
  FHours1To := ATXSTime;
  FHours1To_Specified := True;
end;

function ContactHoursDetailsType.Hours1To_Specified(Index: Integer): boolean;
begin
  Result := FHours1To_Specified;
end;

procedure ContactHoursDetailsType.SetHours2Days(Index: Integer; const ADaysCodeType: DaysCodeType);
begin
  FHours2Days := ADaysCodeType;
  FHours2Days_Specified := True;
end;

function ContactHoursDetailsType.Hours2Days_Specified(Index: Integer): boolean;
begin
  Result := FHours2Days_Specified;
end;

procedure ContactHoursDetailsType.SetHours2AnyTime(Index: Integer; const ABoolean: Boolean);
begin
  FHours2AnyTime := ABoolean;
  FHours2AnyTime_Specified := True;
end;

function ContactHoursDetailsType.Hours2AnyTime_Specified(Index: Integer): boolean;
begin
  Result := FHours2AnyTime_Specified;
end;

procedure ContactHoursDetailsType.SetHours2From(Index: Integer; const ATXSTime: TXSTime);
begin
  FHours2From := ATXSTime;
  FHours2From_Specified := True;
end;

function ContactHoursDetailsType.Hours2From_Specified(Index: Integer): boolean;
begin
  Result := FHours2From_Specified;
end;

procedure ContactHoursDetailsType.SetHours2To(Index: Integer; const ATXSTime: TXSTime);
begin
  FHours2To := ATXSTime;
  FHours2To_Specified := True;
end;

function ContactHoursDetailsType.Hours2To_Specified(Index: Integer): boolean;
begin
  Result := FHours2To_Specified;
end;

destructor SellingManagerAutoRelistType.Destroy;
begin
  SysUtils.FreeAndNil(FRelistAtSpecificTimeOfDay);
  SysUtils.FreeAndNil(FBestOfferDetails);
  inherited Destroy;
end;

procedure SellingManagerAutoRelistType.SetType_(Index: Integer; const ASellingManagerAutoRelistTypeCodeType: SellingManagerAutoRelistTypeCodeType);
begin
  FType_ := ASellingManagerAutoRelistTypeCodeType;
  FType__Specified := True;
end;

function SellingManagerAutoRelistType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure SellingManagerAutoRelistType.SetRelistCondition(Index: Integer; const ASellingManagerAutoRelistOptionCodeType: SellingManagerAutoRelistOptionCodeType);
begin
  FRelistCondition := ASellingManagerAutoRelistOptionCodeType;
  FRelistCondition_Specified := True;
end;

function SellingManagerAutoRelistType.RelistCondition_Specified(Index: Integer): boolean;
begin
  Result := FRelistCondition_Specified;
end;

procedure SellingManagerAutoRelistType.SetRelistAfterDays(Index: Integer; const AInteger: Integer);
begin
  FRelistAfterDays := AInteger;
  FRelistAfterDays_Specified := True;
end;

function SellingManagerAutoRelistType.RelistAfterDays_Specified(Index: Integer): boolean;
begin
  Result := FRelistAfterDays_Specified;
end;

procedure SellingManagerAutoRelistType.SetRelistAfterHours(Index: Integer; const AInteger: Integer);
begin
  FRelistAfterHours := AInteger;
  FRelistAfterHours_Specified := True;
end;

function SellingManagerAutoRelistType.RelistAfterHours_Specified(Index: Integer): boolean;
begin
  Result := FRelistAfterHours_Specified;
end;

procedure SellingManagerAutoRelistType.SetRelistAtSpecificTimeOfDay(Index: Integer; const ATXSTime: TXSTime);
begin
  FRelistAtSpecificTimeOfDay := ATXSTime;
  FRelistAtSpecificTimeOfDay_Specified := True;
end;

function SellingManagerAutoRelistType.RelistAtSpecificTimeOfDay_Specified(Index: Integer): boolean;
begin
  Result := FRelistAtSpecificTimeOfDay_Specified;
end;

procedure SellingManagerAutoRelistType.SetBestOfferDetails(Index: Integer; const ABestOfferDetailsType: BestOfferDetailsType);
begin
  FBestOfferDetails := ABestOfferDetailsType;
  FBestOfferDetails_Specified := True;
end;

function SellingManagerAutoRelistType.BestOfferDetails_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferDetails_Specified;
end;

procedure SellingManagerAutoRelistType.SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
begin
  FListingHoldInventoryLevel := AInteger;
  FListingHoldInventoryLevel_Specified := True;
end;

function SellingManagerAutoRelistType.ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
begin
  Result := FListingHoldInventoryLevel_Specified;
end;

destructor DispatchCutoffTimePreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FCutoffTime);
  inherited Destroy;
end;

procedure DispatchCutoffTimePreferencesType.SetCutoffTime(Index: Integer; const ATXSTime: TXSTime);
begin
  FCutoffTime := ATXSTime;
  FCutoffTime_Specified := True;
end;

function DispatchCutoffTimePreferencesType.CutoffTime_Specified(Index: Integer): boolean;
begin
  Result := FCutoffTime_Specified;
end;

destructor SellingManagerAutoListAccordingToScheduleType.Destroy;
begin
  SysUtils.FreeAndNil(FListAtSpecificTimeOfDay);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetDayOfWeek(Index: Integer; const AArray_Of_DayOfWeekCodeType: Array_Of_DayOfWeekCodeType);
begin
  FDayOfWeek := AArray_Of_DayOfWeekCodeType;
  FDayOfWeek_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.DayOfWeek_Specified(Index: Integer): boolean;
begin
  Result := FDayOfWeek_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetListingPeriodInWeeks(Index: Integer; const AInteger: Integer);
begin
  FListingPeriodInWeeks := AInteger;
  FListingPeriodInWeeks_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.ListingPeriodInWeeks_Specified(Index: Integer): boolean;
begin
  Result := FListingPeriodInWeeks_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetListAtSpecificTimeOfDay(Index: Integer; const ATXSTime: TXSTime);
begin
  FListAtSpecificTimeOfDay := ATXSTime;
  FListAtSpecificTimeOfDay_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.ListAtSpecificTimeOfDay_Specified(Index: Integer): boolean;
begin
  Result := FListAtSpecificTimeOfDay_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetMaxActiveItemCount(Index: Integer; const AInteger: Integer);
begin
  FMaxActiveItemCount := AInteger;
  FMaxActiveItemCount_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.MaxActiveItemCount_Specified(Index: Integer): boolean;
begin
  Result := FMaxActiveItemCount_Specified;
end;

procedure SellingManagerAutoListAccordingToScheduleType.SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
begin
  FListingHoldInventoryLevel := AInteger;
  FListingHoldInventoryLevel_Specified := True;
end;

function SellingManagerAutoListAccordingToScheduleType.ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
begin
  Result := FListingHoldInventoryLevel_Specified;
end;

destructor SellingManagerAutoListMinActiveItemsType.Destroy;
begin
  SysUtils.FreeAndNil(FListTimeFrom);
  SysUtils.FreeAndNil(FListTimeTo);
  inherited Destroy;
end;

procedure SellingManagerAutoListMinActiveItemsType.SetMinActiveItemCount(Index: Integer; const AInteger: Integer);
begin
  FMinActiveItemCount := AInteger;
  FMinActiveItemCount_Specified := True;
end;

function SellingManagerAutoListMinActiveItemsType.MinActiveItemCount_Specified(Index: Integer): boolean;
begin
  Result := FMinActiveItemCount_Specified;
end;

procedure SellingManagerAutoListMinActiveItemsType.SetListTimeFrom(Index: Integer; const ATXSTime: TXSTime);
begin
  FListTimeFrom := ATXSTime;
  FListTimeFrom_Specified := True;
end;

function SellingManagerAutoListMinActiveItemsType.ListTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FListTimeFrom_Specified;
end;

procedure SellingManagerAutoListMinActiveItemsType.SetListTimeTo(Index: Integer; const ATXSTime: TXSTime);
begin
  FListTimeTo := ATXSTime;
  FListTimeTo_Specified := True;
end;

function SellingManagerAutoListMinActiveItemsType.ListTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FListTimeTo_Specified;
end;

procedure SellingManagerAutoListMinActiveItemsType.SetSpacingIntervalInMinutes(Index: Integer; const AInteger: Integer);
begin
  FSpacingIntervalInMinutes := AInteger;
  FSpacingIntervalInMinutes_Specified := True;
end;

function SellingManagerAutoListMinActiveItemsType.SpacingIntervalInMinutes_Specified(Index: Integer): boolean;
begin
  Result := FSpacingIntervalInMinutes_Specified;
end;

procedure SellingManagerAutoListMinActiveItemsType.SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
begin
  FListingHoldInventoryLevel := AInteger;
  FListingHoldInventoryLevel_Specified := True;
end;

function SellingManagerAutoListMinActiveItemsType.ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
begin
  Result := FListingHoldInventoryLevel_Specified;
end;

procedure DigitalGoodInfoType.SetDigitalDelivery(Index: Integer; const ABoolean: Boolean);
begin
  FDigitalDelivery := ABoolean;
  FDigitalDelivery_Specified := True;
end;

function DigitalGoodInfoType.DigitalDelivery_Specified(Index: Integer): boolean;
begin
  Result := FDigitalDelivery_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetTemplateText(Index: Integer; const Astring: string);
begin
  FTemplateText := Astring;
  FTemplateText_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.TemplateText_Specified(Index: Integer): boolean;
begin
  Result := FTemplateText_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetLogoURL(Index: Integer; const Astring: string);
begin
  FLogoURL := Astring;
  FLogoURL_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.LogoURL_Specified(Index: Integer): boolean;
begin
  Result := FLogoURL_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetLogoType(Index: Integer; const AEndOfAuctionLogoTypeCodeType: EndOfAuctionLogoTypeCodeType);
begin
  FLogoType := AEndOfAuctionLogoTypeCodeType;
  FLogoType_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.LogoType_Specified(Index: Integer): boolean;
begin
  Result := FLogoType_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetEmailCustomized(Index: Integer; const ABoolean: Boolean);
begin
  FEmailCustomized := ABoolean;
  FEmailCustomized_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.EmailCustomized_Specified(Index: Integer): boolean;
begin
  Result := FEmailCustomized_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetTextCustomized(Index: Integer; const ABoolean: Boolean);
begin
  FTextCustomized := ABoolean;
  FTextCustomized_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.TextCustomized_Specified(Index: Integer): boolean;
begin
  Result := FTextCustomized_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetLogoCustomized(Index: Integer; const ABoolean: Boolean);
begin
  FLogoCustomized := ABoolean;
  FLogoCustomized_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.LogoCustomized_Specified(Index: Integer): boolean;
begin
  Result := FLogoCustomized_Specified;
end;

procedure EndOfAuctionEmailPreferencesType.SetCopyEmail(Index: Integer; const ABoolean: Boolean);
begin
  FCopyEmail := ABoolean;
  FCopyEmail_Specified := True;
end;

function EndOfAuctionEmailPreferencesType.CopyEmail_Specified(Index: Integer): boolean;
begin
  Result := FCopyEmail_Specified;
end;

destructor ExtendedContactDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FContactHoursDetails);
  inherited Destroy;
end;

procedure ExtendedContactDetailsType.SetContactHoursDetails(Index: Integer; const AContactHoursDetailsType: ContactHoursDetailsType);
begin
  FContactHoursDetails := AContactHoursDetailsType;
  FContactHoursDetails_Specified := True;
end;

function ExtendedContactDetailsType.ContactHoursDetails_Specified(Index: Integer): boolean;
begin
  Result := FContactHoursDetails_Specified;
end;

procedure ExtendedContactDetailsType.SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByEmailEnabled := ABoolean;
  FClassifiedAdContactByEmailEnabled_Specified := True;
end;

function ExtendedContactDetailsType.ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByEmailEnabled_Specified;
end;

procedure ExtendedContactDetailsType.SetPayPerLeadPhoneNumber(Index: Integer; const Astring: string);
begin
  FPayPerLeadPhoneNumber := Astring;
  FPayPerLeadPhoneNumber_Specified := True;
end;

function ExtendedContactDetailsType.PayPerLeadPhoneNumber_Specified(Index: Integer): boolean;
begin
  Result := FPayPerLeadPhoneNumber_Specified;
end;

destructor VariationSpecificPictureSetType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FExtendedPictureDetails)-1 do
    SysUtils.FreeAndNil(FExtendedPictureDetails[I]);
  System.SetLength(FExtendedPictureDetails, 0);
  inherited Destroy;
end;

procedure VariationSpecificPictureSetType.SetVariationSpecificValue(Index: Integer; const Astring: string);
begin
  FVariationSpecificValue := Astring;
  FVariationSpecificValue_Specified := True;
end;

function VariationSpecificPictureSetType.VariationSpecificValue_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecificValue_Specified;
end;

procedure VariationSpecificPictureSetType.SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FPictureURL := AArray_Of_anyURI;
  FPictureURL_Specified := True;
end;

function VariationSpecificPictureSetType.PictureURL_Specified(Index: Integer): boolean;
begin
  Result := FPictureURL_Specified;
end;

procedure VariationSpecificPictureSetType.SetGalleryURL(Index: Integer; const Astring: string);
begin
  FGalleryURL := Astring;
  FGalleryURL_Specified := True;
end;

function VariationSpecificPictureSetType.GalleryURL_Specified(Index: Integer): boolean;
begin
  Result := FGalleryURL_Specified;
end;

procedure VariationSpecificPictureSetType.SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FExternalPictureURL := AArray_Of_anyURI;
  FExternalPictureURL_Specified := True;
end;

function VariationSpecificPictureSetType.ExternalPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FExternalPictureURL_Specified;
end;

procedure VariationSpecificPictureSetType.SetExtendedPictureDetails(Index: Integer; const AExtendedPictureDetailsType: ExtendedPictureDetailsType);
begin
  FExtendedPictureDetails := AExtendedPictureDetailsType;
  FExtendedPictureDetails_Specified := True;
end;

function VariationSpecificPictureSetType.ExtendedPictureDetails_Specified(Index: Integer): boolean;
begin
  Result := FExtendedPictureDetails_Specified;
end;

destructor PictureDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FExtendedPictureDetails)-1 do
    SysUtils.FreeAndNil(FExtendedPictureDetails[I]);
  System.SetLength(FExtendedPictureDetails, 0);
  inherited Destroy;
end;

procedure PictureDetailsType.SetGalleryType(Index: Integer; const AGalleryTypeCodeType: GalleryTypeCodeType);
begin
  FGalleryType := AGalleryTypeCodeType;
  FGalleryType_Specified := True;
end;

function PictureDetailsType.GalleryType_Specified(Index: Integer): boolean;
begin
  Result := FGalleryType_Specified;
end;

procedure PictureDetailsType.SetPhotoDisplay(Index: Integer; const APhotoDisplayCodeType: PhotoDisplayCodeType);
begin
  FPhotoDisplay := APhotoDisplayCodeType;
  FPhotoDisplay_Specified := True;
end;

function PictureDetailsType.PhotoDisplay_Specified(Index: Integer): boolean;
begin
  Result := FPhotoDisplay_Specified;
end;

procedure PictureDetailsType.SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FPictureURL := AArray_Of_anyURI;
  FPictureURL_Specified := True;
end;

function PictureDetailsType.PictureURL_Specified(Index: Integer): boolean;
begin
  Result := FPictureURL_Specified;
end;

procedure PictureDetailsType.SetPictureSource(Index: Integer; const APictureSourceCodeType: PictureSourceCodeType);
begin
  FPictureSource := APictureSourceCodeType;
  FPictureSource_Specified := True;
end;

function PictureDetailsType.PictureSource_Specified(Index: Integer): boolean;
begin
  Result := FPictureSource_Specified;
end;

procedure PictureDetailsType.SetGalleryStatus(Index: Integer; const AGalleryStatusCodeType: GalleryStatusCodeType);
begin
  FGalleryStatus := AGalleryStatusCodeType;
  FGalleryStatus_Specified := True;
end;

function PictureDetailsType.GalleryStatus_Specified(Index: Integer): boolean;
begin
  Result := FGalleryStatus_Specified;
end;

procedure PictureDetailsType.SetGalleryErrorInfo(Index: Integer; const Astring: string);
begin
  FGalleryErrorInfo := Astring;
  FGalleryErrorInfo_Specified := True;
end;

function PictureDetailsType.GalleryErrorInfo_Specified(Index: Integer): boolean;
begin
  Result := FGalleryErrorInfo_Specified;
end;

procedure PictureDetailsType.SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FExternalPictureURL := AArray_Of_anyURI;
  FExternalPictureURL_Specified := True;
end;

function PictureDetailsType.ExternalPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FExternalPictureURL_Specified;
end;

procedure PictureDetailsType.SetExtendedPictureDetails(Index: Integer; const AExtendedPictureDetailsType: ExtendedPictureDetailsType);
begin
  FExtendedPictureDetails := AExtendedPictureDetailsType;
  FExtendedPictureDetails_Specified := True;
end;

function PictureDetailsType.ExtendedPictureDetails_Specified(Index: Integer): boolean;
begin
  Result := FExtendedPictureDetails_Specified;
end;

procedure PictureURLsType.SeteBayPictureURL(Index: Integer; const Astring: string);
begin
  FeBayPictureURL := Astring;
  FeBayPictureURL_Specified := True;
end;

function PictureURLsType.eBayPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FeBayPictureURL_Specified;
end;

procedure PictureURLsType.SetExternalPictureURL(Index: Integer; const Astring: string);
begin
  FExternalPictureURL := Astring;
  FExternalPictureURL_Specified := True;
end;

function PictureURLsType.ExternalPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FExternalPictureURL_Specified;
end;

destructor DiscountPriceInfoType.Destroy;
begin
  SysUtils.FreeAndNil(FOriginalRetailPrice);
  SysUtils.FreeAndNil(FMinimumAdvertisedPrice);
  SysUtils.FreeAndNil(FMadeForOutletComparisonPrice);
  inherited Destroy;
end;

procedure DiscountPriceInfoType.SetOriginalRetailPrice(Index: Integer; const AAmountType: AmountType);
begin
  FOriginalRetailPrice := AAmountType;
  FOriginalRetailPrice_Specified := True;
end;

function DiscountPriceInfoType.OriginalRetailPrice_Specified(Index: Integer): boolean;
begin
  Result := FOriginalRetailPrice_Specified;
end;

procedure DiscountPriceInfoType.SetMinimumAdvertisedPrice(Index: Integer; const AAmountType: AmountType);
begin
  FMinimumAdvertisedPrice := AAmountType;
  FMinimumAdvertisedPrice_Specified := True;
end;

function DiscountPriceInfoType.MinimumAdvertisedPrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumAdvertisedPrice_Specified;
end;

procedure DiscountPriceInfoType.SetMinimumAdvertisedPriceExposure(Index: Integer; const AMinimumAdvertisedPriceExposureCodeType: MinimumAdvertisedPriceExposureCodeType);
begin
  FMinimumAdvertisedPriceExposure := AMinimumAdvertisedPriceExposureCodeType;
  FMinimumAdvertisedPriceExposure_Specified := True;
end;

function DiscountPriceInfoType.MinimumAdvertisedPriceExposure_Specified(Index: Integer): boolean;
begin
  Result := FMinimumAdvertisedPriceExposure_Specified;
end;

procedure DiscountPriceInfoType.SetPricingTreatment(Index: Integer; const APricingTreatmentCodeType: PricingTreatmentCodeType);
begin
  FPricingTreatment := APricingTreatmentCodeType;
  FPricingTreatment_Specified := True;
end;

function DiscountPriceInfoType.PricingTreatment_Specified(Index: Integer): boolean;
begin
  Result := FPricingTreatment_Specified;
end;

procedure DiscountPriceInfoType.SetSoldOneBay(Index: Integer; const ABoolean: Boolean);
begin
  FSoldOneBay := ABoolean;
  FSoldOneBay_Specified := True;
end;

function DiscountPriceInfoType.SoldOneBay_Specified(Index: Integer): boolean;
begin
  Result := FSoldOneBay_Specified;
end;

procedure DiscountPriceInfoType.SetSoldOffeBay(Index: Integer; const ABoolean: Boolean);
begin
  FSoldOffeBay := ABoolean;
  FSoldOffeBay_Specified := True;
end;

function DiscountPriceInfoType.SoldOffeBay_Specified(Index: Integer): boolean;
begin
  Result := FSoldOffeBay_Specified;
end;

procedure DiscountPriceInfoType.SetMadeForOutletComparisonPrice(Index: Integer; const AAmountType: AmountType);
begin
  FMadeForOutletComparisonPrice := AAmountType;
  FMadeForOutletComparisonPrice_Specified := True;
end;

function DiscountPriceInfoType.MadeForOutletComparisonPrice_Specified(Index: Integer): boolean;
begin
  Result := FMadeForOutletComparisonPrice_Specified;
end;

destructor DisputeType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDisputeResolution)-1 do
    SysUtils.FreeAndNil(FDisputeResolution[I]);
  System.SetLength(FDisputeResolution, 0);
  for I := 0 to System.Length(FDisputeMessage)-1 do
    SysUtils.FreeAndNil(FDisputeMessage[I]);
  System.SetLength(FDisputeMessage, 0);
  SysUtils.FreeAndNil(FItem);
  SysUtils.FreeAndNil(FDisputeCreatedTime);
  SysUtils.FreeAndNil(FDisputeModifiedTime);
  inherited Destroy;
end;

procedure DisputeType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function DisputeType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

procedure DisputeType.SetDisputeRecordType(Index: Integer; const ADisputeRecordTypeCodeType: DisputeRecordTypeCodeType);
begin
  FDisputeRecordType := ADisputeRecordTypeCodeType;
  FDisputeRecordType_Specified := True;
end;

function DisputeType.DisputeRecordType_Specified(Index: Integer): boolean;
begin
  Result := FDisputeRecordType_Specified;
end;

procedure DisputeType.SetDisputeState(Index: Integer; const ADisputeStateCodeType: DisputeStateCodeType);
begin
  FDisputeState := ADisputeStateCodeType;
  FDisputeState_Specified := True;
end;

function DisputeType.DisputeState_Specified(Index: Integer): boolean;
begin
  Result := FDisputeState_Specified;
end;

procedure DisputeType.SetDisputeStatus(Index: Integer; const ADisputeStatusCodeType: DisputeStatusCodeType);
begin
  FDisputeStatus := ADisputeStatusCodeType;
  FDisputeStatus_Specified := True;
end;

function DisputeType.DisputeStatus_Specified(Index: Integer): boolean;
begin
  Result := FDisputeStatus_Specified;
end;

procedure DisputeType.SetOtherPartyRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FOtherPartyRole := ATradingRoleCodeType;
  FOtherPartyRole_Specified := True;
end;

function DisputeType.OtherPartyRole_Specified(Index: Integer): boolean;
begin
  Result := FOtherPartyRole_Specified;
end;

procedure DisputeType.SetOtherPartyName(Index: Integer; const Astring: string);
begin
  FOtherPartyName := Astring;
  FOtherPartyName_Specified := True;
end;

function DisputeType.OtherPartyName_Specified(Index: Integer): boolean;
begin
  Result := FOtherPartyName_Specified;
end;

procedure DisputeType.SetUserRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FUserRole := ATradingRoleCodeType;
  FUserRole_Specified := True;
end;

function DisputeType.UserRole_Specified(Index: Integer): boolean;
begin
  Result := FUserRole_Specified;
end;

procedure DisputeType.SetBuyerUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FBuyerUserID := AUserIDType;
  FBuyerUserID_Specified := True;
end;

function DisputeType.BuyerUserID_Specified(Index: Integer): boolean;
begin
  Result := FBuyerUserID_Specified;
end;

procedure DisputeType.SetSellerUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSellerUserID := AUserIDType;
  FSellerUserID_Specified := True;
end;

function DisputeType.SellerUserID_Specified(Index: Integer): boolean;
begin
  Result := FSellerUserID_Specified;
end;

procedure DisputeType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function DisputeType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure DisputeType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function DisputeType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure DisputeType.SetDisputeReason(Index: Integer; const ADisputeReasonCodeType: DisputeReasonCodeType);
begin
  FDisputeReason := ADisputeReasonCodeType;
  FDisputeReason_Specified := True;
end;

function DisputeType.DisputeReason_Specified(Index: Integer): boolean;
begin
  Result := FDisputeReason_Specified;
end;

procedure DisputeType.SetDisputeExplanation(Index: Integer; const ADisputeExplanationCodeType: DisputeExplanationCodeType);
begin
  FDisputeExplanation := ADisputeExplanationCodeType;
  FDisputeExplanation_Specified := True;
end;

function DisputeType.DisputeExplanation_Specified(Index: Integer): boolean;
begin
  Result := FDisputeExplanation_Specified;
end;

procedure DisputeType.SetDisputeCreditEligibility(Index: Integer; const ADisputeCreditEligibilityCodeType: DisputeCreditEligibilityCodeType);
begin
  FDisputeCreditEligibility := ADisputeCreditEligibilityCodeType;
  FDisputeCreditEligibility_Specified := True;
end;

function DisputeType.DisputeCreditEligibility_Specified(Index: Integer): boolean;
begin
  Result := FDisputeCreditEligibility_Specified;
end;

procedure DisputeType.SetDisputeCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDisputeCreatedTime := ATXSDateTime;
  FDisputeCreatedTime_Specified := True;
end;

function DisputeType.DisputeCreatedTime_Specified(Index: Integer): boolean;
begin
  Result := FDisputeCreatedTime_Specified;
end;

procedure DisputeType.SetDisputeModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDisputeModifiedTime := ATXSDateTime;
  FDisputeModifiedTime_Specified := True;
end;

function DisputeType.DisputeModifiedTime_Specified(Index: Integer): boolean;
begin
  Result := FDisputeModifiedTime_Specified;
end;

procedure DisputeType.SetDisputeResolution(Index: Integer; const AArray_Of_DisputeResolutionType: Array_Of_DisputeResolutionType);
begin
  FDisputeResolution := AArray_Of_DisputeResolutionType;
  FDisputeResolution_Specified := True;
end;

function DisputeType.DisputeResolution_Specified(Index: Integer): boolean;
begin
  Result := FDisputeResolution_Specified;
end;

procedure DisputeType.SetDisputeMessage(Index: Integer; const AArray_Of_DisputeMessageType: Array_Of_DisputeMessageType);
begin
  FDisputeMessage := AArray_Of_DisputeMessageType;
  FDisputeMessage_Specified := True;
end;

function DisputeType.DisputeMessage_Specified(Index: Integer): boolean;
begin
  Result := FDisputeMessage_Specified;
end;

procedure DisputeType.SetEscalation(Index: Integer; const ABoolean: Boolean);
begin
  FEscalation := ABoolean;
  FEscalation_Specified := True;
end;

function DisputeType.Escalation_Specified(Index: Integer): boolean;
begin
  Result := FEscalation_Specified;
end;

procedure DisputeType.SetPurchaseProtection(Index: Integer; const ABoolean: Boolean);
begin
  FPurchaseProtection := ABoolean;
  FPurchaseProtection_Specified := True;
end;

function DisputeType.PurchaseProtection_Specified(Index: Integer): boolean;
begin
  Result := FPurchaseProtection_Specified;
end;

procedure DisputeType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function DisputeType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure DistanceType.SetDistanceUnit(Index: Integer; const Astring: string);
begin
  FDistanceUnit := Astring;
  FDistanceUnit_Specified := True;
end;

function DistanceType.DistanceUnit_Specified(Index: Integer): boolean;
begin
  Result := FDistanceUnit_Specified;
end;

destructor FeatureDefinitionsType.Destroy;
begin
  SysUtils.FreeAndNil(FListingDurations);
  SysUtils.FreeAndNil(FShippingTermsRequired);
  SysUtils.FreeAndNil(FBestOfferEnabled);
  SysUtils.FreeAndNil(FDutchBINEnabled);
  SysUtils.FreeAndNil(FUserConsentRequired);
  SysUtils.FreeAndNil(FHomePageFeaturedEnabled);
  SysUtils.FreeAndNil(FProPackEnabled);
  SysUtils.FreeAndNil(FBasicUpgradePackEnabled);
  SysUtils.FreeAndNil(FValuePackEnabled);
  SysUtils.FreeAndNil(FProPackPlusEnabled);
  SysUtils.FreeAndNil(FAdFormatEnabled);
  SysUtils.FreeAndNil(FBestOfferCounterEnabled);
  SysUtils.FreeAndNil(FBestOfferAutoDeclineEnabled);
  SysUtils.FreeAndNil(FLocalMarketSpecialitySubscription);
  SysUtils.FreeAndNil(FLocalMarketRegularSubscription);
  SysUtils.FreeAndNil(FLocalMarketPremiumSubscription);
  SysUtils.FreeAndNil(FLocalMarketNonSubscription);
  SysUtils.FreeAndNil(FExpressEnabled);
  SysUtils.FreeAndNil(FExpressPicturesRequired);
  SysUtils.FreeAndNil(FExpressConditionRequired);
  SysUtils.FreeAndNil(FMinimumReservePrice);
  SysUtils.FreeAndNil(FTransactionConfirmationRequestEnabled);
  SysUtils.FreeAndNil(FSellerContactDetailsEnabled);
  SysUtils.FreeAndNil(FStoreInventoryEnabled);
  SysUtils.FreeAndNil(FSkypeMeTransactionalEnabled);
  SysUtils.FreeAndNil(FSkypeMeNonTransactionalEnabled);
  SysUtils.FreeAndNil(FLocalListingDistancesRegular);
  SysUtils.FreeAndNil(FLocalListingDistancesSpecialty);
  SysUtils.FreeAndNil(FLocalListingDistancesNonSubscription);
  SysUtils.FreeAndNil(FClassifiedAdPaymentMethodEnabled);
  SysUtils.FreeAndNil(FClassifiedAdShippingMethodEnabled);
  SysUtils.FreeAndNil(FClassifiedAdBestOfferEnabled);
  SysUtils.FreeAndNil(FClassifiedAdCounterOfferEnabled);
  SysUtils.FreeAndNil(FClassifiedAdAutoDeclineEnabled);
  SysUtils.FreeAndNil(FClassifiedAdContactByPhoneEnabled);
  SysUtils.FreeAndNil(FClassifiedAdContactByEmailEnabled);
  SysUtils.FreeAndNil(FSafePaymentRequired);
  SysUtils.FreeAndNil(FClassifiedAdPayPerLeadEnabled);
  SysUtils.FreeAndNil(FItemSpecificsEnabled);
  SysUtils.FreeAndNil(FPaisaPayFullEscrowEnabled);
  SysUtils.FreeAndNil(FISBNIdentifierEnabled);
  SysUtils.FreeAndNil(FUPCIdentifierEnabled);
  SysUtils.FreeAndNil(FEANIdentifierEnabled);
  SysUtils.FreeAndNil(FBrandMPNIdentifierEnabled);
  SysUtils.FreeAndNil(FBestOfferAutoAcceptEnabled);
  SysUtils.FreeAndNil(FClassifiedAdAutoAcceptEnabled);
  SysUtils.FreeAndNil(FCrossBorderTradeNorthAmericaEnabled);
  SysUtils.FreeAndNil(FCrossBorderTradeGBEnabled);
  SysUtils.FreeAndNil(FCrossBorderTradeAustraliaEnabled);
  SysUtils.FreeAndNil(FPayPalBuyerProtectionEnabled);
  SysUtils.FreeAndNil(FBuyerGuaranteeEnabled);
  SysUtils.FreeAndNil(FCombinedFixedPriceTreatmentEnabled);
  SysUtils.FreeAndNil(FGalleryFeaturedDurations);
  SysUtils.FreeAndNil(FINEscrowWorkflowTimeline);
  SysUtils.FreeAndNil(FPayPalRequired);
  SysUtils.FreeAndNil(FeBayMotorsProAdFormatEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProContactByPhoneEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProPhoneCount);
  SysUtils.FreeAndNil(FeBayMotorsProContactByAddressEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProStreetCount);
  SysUtils.FreeAndNil(FeBayMotorsProCompanyNameEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProContactByEmailEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProBestOfferEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProAutoAcceptEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProAutoDeclineEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProPaymentMethodCheckOutEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProShippingMethodEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProCounterOfferEnabled);
  SysUtils.FreeAndNil(FeBayMotorsProSellerContactDetailsEnabled);
  SysUtils.FreeAndNil(FLocalMarketAdFormatEnabled);
  SysUtils.FreeAndNil(FLocalMarketContactByPhoneEnabled);
  SysUtils.FreeAndNil(FLocalMarketPhoneCount);
  SysUtils.FreeAndNil(FLocalMarketContactByAddressEnabled);
  SysUtils.FreeAndNil(FLocalMarketStreetCount);
  SysUtils.FreeAndNil(FLocalMarketCompanyNameEnabled);
  SysUtils.FreeAndNil(FLocalMarketContactByEmailEnabled);
  SysUtils.FreeAndNil(FLocalMarketBestOfferEnabled);
  SysUtils.FreeAndNil(FLocalMarketAutoAcceptEnabled);
  SysUtils.FreeAndNil(FLocalMarketAutoDeclineEnabled);
  SysUtils.FreeAndNil(FLocalMarketPaymentMethodCheckOutEnabled);
  SysUtils.FreeAndNil(FLocalMarketShippingMethodEnabled);
  SysUtils.FreeAndNil(FLocalMarketCounterOfferEnabled);
  SysUtils.FreeAndNil(FLocalMarketSellerContactDetailsEnabled);
  SysUtils.FreeAndNil(FClassifiedAdPhoneCount);
  SysUtils.FreeAndNil(FClassifiedAdContactByAddressEnabled);
  SysUtils.FreeAndNil(FClassifiedAdStreetCount);
  SysUtils.FreeAndNil(FClassifiedAdCompanyNameEnabled);
  SysUtils.FreeAndNil(FSpecialitySubscription);
  SysUtils.FreeAndNil(FRegularSubscription);
  SysUtils.FreeAndNil(FPremiumSubscription);
  SysUtils.FreeAndNil(FNonSubscription);
  SysUtils.FreeAndNil(FReturnPolicyEnabled);
  SysUtils.FreeAndNil(FHandlingTimeEnabled);
  SysUtils.FreeAndNil(FPayPalRequiredForStoreOwner);
  SysUtils.FreeAndNil(FReviseQuantityAllowed);
  SysUtils.FreeAndNil(FRevisePriceAllowed);
  SysUtils.FreeAndNil(FStoreOwnerExtendedListingDurationsEnabled);
  SysUtils.FreeAndNil(FStoreOwnerExtendedListingDurations);
  SysUtils.FreeAndNil(FPaymentMethod);
  SysUtils.FreeAndNil(FGroup1MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup2MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup3MaxFlatShippingCost);
  SysUtils.FreeAndNil(FMaxFlatShippingCostCBTExempt);
  SysUtils.FreeAndNil(FMaxFlatShippingCost);
  SysUtils.FreeAndNil(FVariationsEnabled);
  SysUtils.FreeAndNil(FAttributeConversionEnabled);
  SysUtils.FreeAndNil(FFreeGalleryPlusEnabled);
  SysUtils.FreeAndNil(FFreePicturePackEnabled);
  SysUtils.FreeAndNil(FItemCompatibilityEnabled);
  SysUtils.FreeAndNil(FMaxItemCompatibility);
  SysUtils.FreeAndNil(FMinItemCompatibility);
  SysUtils.FreeAndNil(FConditionEnabled);
  SysUtils.FreeAndNil(FConditionValues);
  SysUtils.FreeAndNil(FValueCategory);
  SysUtils.FreeAndNil(FProductCreationEnabled);
  SysUtils.FreeAndNil(FEANEnabled);
  SysUtils.FreeAndNil(FISBNEnabled);
  SysUtils.FreeAndNil(FUPCEnabled);
  SysUtils.FreeAndNil(FCompatibleVehicleType);
  SysUtils.FreeAndNil(FMaxGranularFitmentCount);
  SysUtils.FreeAndNil(FPaymentOptionsGroup);
  SysUtils.FreeAndNil(FShippingProfileCategoryGroup);
  SysUtils.FreeAndNil(FPaymentProfileCategoryGroup);
  SysUtils.FreeAndNil(FReturnPolicyProfileCategoryGroup);
  SysUtils.FreeAndNil(FVINSupported);
  SysUtils.FreeAndNil(FVRMSupported);
  SysUtils.FreeAndNil(FSellerProvidedTitleSupported);
  SysUtils.FreeAndNil(FDepositSupported);
  SysUtils.FreeAndNil(FGlobalShippingEnabled);
  SysUtils.FreeAndNil(FAdditionalCompatibilityEnabled);
  SysUtils.FreeAndNil(FPickupDropOffEnabled);
  SysUtils.FreeAndNil(FDigitalGoodDeliveryEnabled);
  SysUtils.FreeAndNil(FEpidSupported);
  SysUtils.FreeAndNil(FKTypeSupported);
  SysUtils.FreeAndNil(FProductRequiredEnabled);
  SysUtils.FreeAndNil(FDomesticReturnsAcceptedValues);
  SysUtils.FreeAndNil(FInternationalReturnsAcceptedValues);
  SysUtils.FreeAndNil(FDomesticReturnsDurationValues);
  SysUtils.FreeAndNil(FInternationalReturnsDurationValues);
  SysUtils.FreeAndNil(FDomesticReturnsShipmentPayeeValues);
  SysUtils.FreeAndNil(FInternationalReturnsShipmentPayeeValues);
  SysUtils.FreeAndNil(FReturnPolicyDescriptionEnabled);
  inherited Destroy;
end;

procedure FeatureDefinitionsType.SetListingDurations(Index: Integer; const AListingDurationDefinitionsType: ListingDurationDefinitionsType);
begin
  FListingDurations := AListingDurationDefinitionsType;
  FListingDurations_Specified := True;
end;

function FeatureDefinitionsType.ListingDurations_Specified(Index: Integer): boolean;
begin
  Result := FListingDurations_Specified;
end;

procedure FeatureDefinitionsType.SetShippingTermsRequired(Index: Integer; const AShippingTermRequiredDefinitionType: ShippingTermRequiredDefinitionType);
begin
  FShippingTermsRequired := AShippingTermRequiredDefinitionType;
  FShippingTermsRequired_Specified := True;
end;

function FeatureDefinitionsType.ShippingTermsRequired_Specified(Index: Integer): boolean;
begin
  Result := FShippingTermsRequired_Specified;
end;

procedure FeatureDefinitionsType.SetBestOfferEnabled(Index: Integer; const ABestOfferEnabledDefinitionType: BestOfferEnabledDefinitionType);
begin
  FBestOfferEnabled := ABestOfferEnabledDefinitionType;
  FBestOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetDutchBINEnabled(Index: Integer; const ADutchBINEnabledDefinitionType: DutchBINEnabledDefinitionType);
begin
  FDutchBINEnabled := ADutchBINEnabledDefinitionType;
  FDutchBINEnabled_Specified := True;
end;

function FeatureDefinitionsType.DutchBINEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDutchBINEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetUserConsentRequired(Index: Integer; const AUserConsentRequiredDefinitionType: UserConsentRequiredDefinitionType);
begin
  FUserConsentRequired := AUserConsentRequiredDefinitionType;
  FUserConsentRequired_Specified := True;
end;

function FeatureDefinitionsType.UserConsentRequired_Specified(Index: Integer): boolean;
begin
  Result := FUserConsentRequired_Specified;
end;

procedure FeatureDefinitionsType.SetHomePageFeaturedEnabled(Index: Integer; const AHomePageFeaturedEnabledDefinitionType: HomePageFeaturedEnabledDefinitionType);
begin
  FHomePageFeaturedEnabled := AHomePageFeaturedEnabledDefinitionType;
  FHomePageFeaturedEnabled_Specified := True;
end;

function FeatureDefinitionsType.HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHomePageFeaturedEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetProPackEnabled(Index: Integer; const AProPackEnabledDefinitionType: ProPackEnabledDefinitionType);
begin
  FProPackEnabled := AProPackEnabledDefinitionType;
  FProPackEnabled_Specified := True;
end;

function FeatureDefinitionsType.ProPackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBasicUpgradePackEnabled(Index: Integer; const ABasicUpgradePackEnabledDefinitionType: BasicUpgradePackEnabledDefinitionType);
begin
  FBasicUpgradePackEnabled := ABasicUpgradePackEnabledDefinitionType;
  FBasicUpgradePackEnabled_Specified := True;
end;

function FeatureDefinitionsType.BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBasicUpgradePackEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetValuePackEnabled(Index: Integer; const AValuePackEnabledDefinitionType: ValuePackEnabledDefinitionType);
begin
  FValuePackEnabled := AValuePackEnabledDefinitionType;
  FValuePackEnabled_Specified := True;
end;

function FeatureDefinitionsType.ValuePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FValuePackEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetProPackPlusEnabled(Index: Integer; const AProPackPlusEnabledDefinitionType: ProPackPlusEnabledDefinitionType);
begin
  FProPackPlusEnabled := AProPackPlusEnabledDefinitionType;
  FProPackPlusEnabled_Specified := True;
end;

function FeatureDefinitionsType.ProPackPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackPlusEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledDefinitionType: AdFormatEnabledDefinitionType);
begin
  FAdFormatEnabled := AAdFormatEnabledDefinitionType;
  FAdFormatEnabled_Specified := True;
end;

function FeatureDefinitionsType.AdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdFormatEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBestOfferCounterEnabled(Index: Integer; const ABestOfferCounterEnabledDefinitionType: BestOfferCounterEnabledDefinitionType);
begin
  FBestOfferCounterEnabled := ABestOfferCounterEnabledDefinitionType;
  FBestOfferCounterEnabled_Specified := True;
end;

function FeatureDefinitionsType.BestOfferCounterEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCounterEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBestOfferAutoDeclineEnabled(Index: Integer; const ABestOfferAutoDeclineEnabledDefinitionType: BestOfferAutoDeclineEnabledDefinitionType);
begin
  FBestOfferAutoDeclineEnabled := ABestOfferAutoDeclineEnabledDefinitionType;
  FBestOfferAutoDeclineEnabled_Specified := True;
end;

function FeatureDefinitionsType.BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoDeclineEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketSpecialitySubscription(Index: Integer; const ALocalMarketSpecialitySubscriptionDefinitionType: LocalMarketSpecialitySubscriptionDefinitionType);
begin
  FLocalMarketSpecialitySubscription := ALocalMarketSpecialitySubscriptionDefinitionType;
  FLocalMarketSpecialitySubscription_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSpecialitySubscription_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketRegularSubscription(Index: Integer; const ALocalMarketRegularSubscriptionDefinitionType: LocalMarketRegularSubscriptionDefinitionType);
begin
  FLocalMarketRegularSubscription := ALocalMarketRegularSubscriptionDefinitionType;
  FLocalMarketRegularSubscription_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketRegularSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketPremiumSubscription(Index: Integer; const ALocalMarketPremiumSubscriptionDefinitionType: LocalMarketPremiumSubscriptionDefinitionType);
begin
  FLocalMarketPremiumSubscription := ALocalMarketPremiumSubscriptionDefinitionType;
  FLocalMarketPremiumSubscription_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPremiumSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketNonSubscription(Index: Integer; const ALocalMarketNonSubscriptionDefinitionType: LocalMarketNonSubscriptionDefinitionType);
begin
  FLocalMarketNonSubscription := ALocalMarketNonSubscriptionDefinitionType;
  FLocalMarketNonSubscription_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketNonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketNonSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetExpressEnabled(Index: Integer; const AExpressEnabledDefinitionType: ExpressEnabledDefinitionType);
begin
  FExpressEnabled := AExpressEnabledDefinitionType;
  FExpressEnabled_Specified := True;
end;

function FeatureDefinitionsType.ExpressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FExpressEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetExpressPicturesRequired(Index: Integer; const AExpressPicturesRequiredDefinitionType: ExpressPicturesRequiredDefinitionType);
begin
  FExpressPicturesRequired := AExpressPicturesRequiredDefinitionType;
  FExpressPicturesRequired_Specified := True;
end;

function FeatureDefinitionsType.ExpressPicturesRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressPicturesRequired_Specified;
end;

procedure FeatureDefinitionsType.SetExpressConditionRequired(Index: Integer; const AExpressConditionRequiredDefinitionType: ExpressConditionRequiredDefinitionType);
begin
  FExpressConditionRequired := AExpressConditionRequiredDefinitionType;
  FExpressConditionRequired_Specified := True;
end;

function FeatureDefinitionsType.ExpressConditionRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressConditionRequired_Specified;
end;

procedure FeatureDefinitionsType.SetMinimumReservePrice(Index: Integer; const AMinimumReservePriceDefinitionType: MinimumReservePriceDefinitionType);
begin
  FMinimumReservePrice := AMinimumReservePriceDefinitionType;
  FMinimumReservePrice_Specified := True;
end;

function FeatureDefinitionsType.MinimumReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumReservePrice_Specified;
end;

procedure FeatureDefinitionsType.SetTransactionConfirmationRequestEnabled(Index: Integer; const ATCREnabledDefinitionType: TCREnabledDefinitionType);
begin
  FTransactionConfirmationRequestEnabled := ATCREnabledDefinitionType;
  FTransactionConfirmationRequestEnabled_Specified := True;
end;

function FeatureDefinitionsType.TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
begin
  Result := FTransactionConfirmationRequestEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetSellerContactDetailsEnabled(Index: Integer; const ASellerContactDetailsEnabledDefinitionType: SellerContactDetailsEnabledDefinitionType);
begin
  FSellerContactDetailsEnabled := ASellerContactDetailsEnabledDefinitionType;
  FSellerContactDetailsEnabled_Specified := True;
end;

function FeatureDefinitionsType.SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSellerContactDetailsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetStoreInventoryEnabled(Index: Integer; const AStoreInventoryEnabledDefinitionType: StoreInventoryEnabledDefinitionType);
begin
  FStoreInventoryEnabled := AStoreInventoryEnabledDefinitionType;
  FStoreInventoryEnabled_Specified := True;
end;

function FeatureDefinitionsType.StoreInventoryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreInventoryEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetSkypeMeTransactionalEnabled(Index: Integer; const ASkypeMeTransactionalEnabledDefinitionType: SkypeMeTransactionalEnabledDefinitionType);
begin
  FSkypeMeTransactionalEnabled := ASkypeMeTransactionalEnabledDefinitionType;
  FSkypeMeTransactionalEnabled_Specified := True;
end;

function FeatureDefinitionsType.SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeTransactionalEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetSkypeMeNonTransactionalEnabled(Index: Integer; const ASkypeMeNonTransactionalEnabledDefinitionType: SkypeMeNonTransactionalEnabledDefinitionType);
begin
  FSkypeMeNonTransactionalEnabled := ASkypeMeNonTransactionalEnabledDefinitionType;
  FSkypeMeNonTransactionalEnabled_Specified := True;
end;

function FeatureDefinitionsType.SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeNonTransactionalEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalListingDistancesRegular(Index: Integer; const ALocalListingDistancesRegularDefinitionType: LocalListingDistancesRegularDefinitionType);
begin
  FLocalListingDistancesRegular := ALocalListingDistancesRegularDefinitionType;
  FLocalListingDistancesRegular_Specified := True;
end;

function FeatureDefinitionsType.LocalListingDistancesRegular_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesRegular_Specified;
end;

procedure FeatureDefinitionsType.SetLocalListingDistancesSpecialty(Index: Integer; const ALocalListingDistancesSpecialtyDefinitionType: LocalListingDistancesSpecialtyDefinitionType);
begin
  FLocalListingDistancesSpecialty := ALocalListingDistancesSpecialtyDefinitionType;
  FLocalListingDistancesSpecialty_Specified := True;
end;

function FeatureDefinitionsType.LocalListingDistancesSpecialty_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesSpecialty_Specified;
end;

procedure FeatureDefinitionsType.SetLocalListingDistancesNonSubscription(Index: Integer; const ALocalListingDistancesNonSubscriptionDefinitionType: LocalListingDistancesNonSubscriptionDefinitionType);
begin
  FLocalListingDistancesNonSubscription := ALocalListingDistancesNonSubscriptionDefinitionType;
  FLocalListingDistancesNonSubscription_Specified := True;
end;

function FeatureDefinitionsType.LocalListingDistancesNonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesNonSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledDefinitionType: ClassifiedAdPaymentMethodEnabledDefinitionType);
begin
  FClassifiedAdPaymentMethodEnabled := AClassifiedAdPaymentMethodEnabledDefinitionType;
  FClassifiedAdPaymentMethodEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPaymentMethodEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdShippingMethodEnabled(Index: Integer; const AClassifiedAdShippingMethodEnabledDefinitionType: ClassifiedAdShippingMethodEnabledDefinitionType);
begin
  FClassifiedAdShippingMethodEnabled := AClassifiedAdShippingMethodEnabledDefinitionType;
  FClassifiedAdShippingMethodEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdShippingMethodEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledDefinitionType: ClassifiedAdBestOfferEnabledDefinitionType);
begin
  FClassifiedAdBestOfferEnabled := AClassifiedAdBestOfferEnabledDefinitionType;
  FClassifiedAdBestOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdBestOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdCounterOfferEnabled(Index: Integer; const AClassifiedAdCounterOfferEnabledDefinitionType: ClassifiedAdCounterOfferEnabledDefinitionType);
begin
  FClassifiedAdCounterOfferEnabled := AClassifiedAdCounterOfferEnabledDefinitionType;
  FClassifiedAdCounterOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCounterOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdAutoDeclineEnabled(Index: Integer; const AClassifiedAdAutoDeclineEnabledDefinitionType: ClassifiedAdAutoDeclineEnabledDefinitionType);
begin
  FClassifiedAdAutoDeclineEnabled := AClassifiedAdAutoDeclineEnabledDefinitionType;
  FClassifiedAdAutoDeclineEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoDeclineEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdContactByPhoneEnabled(Index: Integer; const AClassifiedAdContactByPhoneEnabledDefinitionType: ClassifiedAdContactByPhoneEnabledDefinitionType);
begin
  FClassifiedAdContactByPhoneEnabled := AClassifiedAdContactByPhoneEnabledDefinitionType;
  FClassifiedAdContactByPhoneEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByPhoneEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdContactByEmailEnabled(Index: Integer; const AClassifiedAdContactByEmailEnabledDefintionType: ClassifiedAdContactByEmailEnabledDefintionType);
begin
  FClassifiedAdContactByEmailEnabled := AClassifiedAdContactByEmailEnabledDefintionType;
  FClassifiedAdContactByEmailEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByEmailEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetSafePaymentRequired(Index: Integer; const ASafePaymentRequiredDefinitionType: SafePaymentRequiredDefinitionType);
begin
  FSafePaymentRequired := ASafePaymentRequiredDefinitionType;
  FSafePaymentRequired_Specified := True;
end;

function FeatureDefinitionsType.SafePaymentRequired_Specified(Index: Integer): boolean;
begin
  Result := FSafePaymentRequired_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdPayPerLeadEnabled(Index: Integer; const AClassifiedAdPayPerLeadEnabledDefinitionType: ClassifiedAdPayPerLeadEnabledDefinitionType);
begin
  FClassifiedAdPayPerLeadEnabled := AClassifiedAdPayPerLeadEnabledDefinitionType;
  FClassifiedAdPayPerLeadEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPayPerLeadEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledDefinitionType: ItemSpecificsEnabledDefinitionType);
begin
  FItemSpecificsEnabled := AItemSpecificsEnabledDefinitionType;
  FItemSpecificsEnabled_Specified := True;
end;

function FeatureDefinitionsType.ItemSpecificsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecificsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetPaisaPayFullEscrowEnabled(Index: Integer; const APaisaPayFullEscrowEnabledDefinitionType: PaisaPayFullEscrowEnabledDefinitionType);
begin
  FPaisaPayFullEscrowEnabled := APaisaPayFullEscrowEnabledDefinitionType;
  FPaisaPayFullEscrowEnabled_Specified := True;
end;

function FeatureDefinitionsType.PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayFullEscrowEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetISBNIdentifierEnabled(Index: Integer; const AISBNIdentifierEnabledDefinitionType: ISBNIdentifierEnabledDefinitionType);
begin
  FISBNIdentifierEnabled := AISBNIdentifierEnabledDefinitionType;
  FISBNIdentifierEnabled_Specified := True;
end;

function FeatureDefinitionsType.ISBNIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FISBNIdentifierEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetUPCIdentifierEnabled(Index: Integer; const AUPCIdentifierEnabledDefinitionType: UPCIdentifierEnabledDefinitionType);
begin
  FUPCIdentifierEnabled := AUPCIdentifierEnabledDefinitionType;
  FUPCIdentifierEnabled_Specified := True;
end;

function FeatureDefinitionsType.UPCIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FUPCIdentifierEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetEANIdentifierEnabled(Index: Integer; const AEANIdentifierEnabledDefinitionType: EANIdentifierEnabledDefinitionType);
begin
  FEANIdentifierEnabled := AEANIdentifierEnabledDefinitionType;
  FEANIdentifierEnabled_Specified := True;
end;

function FeatureDefinitionsType.EANIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FEANIdentifierEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBrandMPNIdentifierEnabled(Index: Integer; const ABrandMPNIdentifierEnabledDefinitionType: BrandMPNIdentifierEnabledDefinitionType);
begin
  FBrandMPNIdentifierEnabled := ABrandMPNIdentifierEnabledDefinitionType;
  FBrandMPNIdentifierEnabled_Specified := True;
end;

function FeatureDefinitionsType.BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBrandMPNIdentifierEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBestOfferAutoAcceptEnabled(Index: Integer; const ABestOfferAutoAcceptEnabledDefinitionType: BestOfferAutoAcceptEnabledDefinitionType);
begin
  FBestOfferAutoAcceptEnabled := ABestOfferAutoAcceptEnabledDefinitionType;
  FBestOfferAutoAcceptEnabled_Specified := True;
end;

function FeatureDefinitionsType.BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoAcceptEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdAutoAcceptEnabled(Index: Integer; const AClassifiedAdAutoAcceptEnabledDefinitionType: ClassifiedAdAutoAcceptEnabledDefinitionType);
begin
  FClassifiedAdAutoAcceptEnabled := AClassifiedAdAutoAcceptEnabledDefinitionType;
  FClassifiedAdAutoAcceptEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoAcceptEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ACrossBorderTradeNorthAmericaEnabledDefinitionType: CrossBorderTradeNorthAmericaEnabledDefinitionType);
begin
  FCrossBorderTradeNorthAmericaEnabled := ACrossBorderTradeNorthAmericaEnabledDefinitionType;
  FCrossBorderTradeNorthAmericaEnabled_Specified := True;
end;

function FeatureDefinitionsType.CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeNorthAmericaEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetCrossBorderTradeGBEnabled(Index: Integer; const ACrossBorderTradeGBEnabledDefinitionType: CrossBorderTradeGBEnabledDefinitionType);
begin
  FCrossBorderTradeGBEnabled := ACrossBorderTradeGBEnabledDefinitionType;
  FCrossBorderTradeGBEnabled_Specified := True;
end;

function FeatureDefinitionsType.CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeGBEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ACrossBorderTradeAustraliaEnabledDefinitionType: CrossBorderTradeAustraliaEnabledDefinitionType);
begin
  FCrossBorderTradeAustraliaEnabled := ACrossBorderTradeAustraliaEnabledDefinitionType;
  FCrossBorderTradeAustraliaEnabled_Specified := True;
end;

function FeatureDefinitionsType.CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeAustraliaEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetPayPalBuyerProtectionEnabled(Index: Integer; const APayPalBuyerProtectionEnabledDefinitionType: PayPalBuyerProtectionEnabledDefinitionType);
begin
  FPayPalBuyerProtectionEnabled := APayPalBuyerProtectionEnabledDefinitionType;
  FPayPalBuyerProtectionEnabled_Specified := True;
end;

function FeatureDefinitionsType.PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPayPalBuyerProtectionEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetBuyerGuaranteeEnabled(Index: Integer; const ABuyerGuaranteeEnabledDefinitionType: BuyerGuaranteeEnabledDefinitionType);
begin
  FBuyerGuaranteeEnabled := ABuyerGuaranteeEnabledDefinitionType;
  FBuyerGuaranteeEnabled_Specified := True;
end;

function FeatureDefinitionsType.BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBuyerGuaranteeEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ACombinedFixedPriceTreatmentEnabledDefinitionType: CombinedFixedPriceTreatmentEnabledDefinitionType);
begin
  FCombinedFixedPriceTreatmentEnabled := ACombinedFixedPriceTreatmentEnabledDefinitionType;
  FCombinedFixedPriceTreatmentEnabled_Specified := True;
end;

function FeatureDefinitionsType.CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCombinedFixedPriceTreatmentEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationDefinitionType: ListingEnhancementDurationDefinitionType);
begin
  FGalleryFeaturedDurations := AListingEnhancementDurationDefinitionType;
  FGalleryFeaturedDurations_Specified := True;
end;

function FeatureDefinitionsType.GalleryFeaturedDurations_Specified(Index: Integer): boolean;
begin
  Result := FGalleryFeaturedDurations_Specified;
end;

procedure FeatureDefinitionsType.SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineDefinitionType: INEscrowWorkflowTimelineDefinitionType);
begin
  FINEscrowWorkflowTimeline := AINEscrowWorkflowTimelineDefinitionType;
  FINEscrowWorkflowTimeline_Specified := True;
end;

function FeatureDefinitionsType.INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
begin
  Result := FINEscrowWorkflowTimeline_Specified;
end;

procedure FeatureDefinitionsType.SetPayPalRequired(Index: Integer; const APayPalRequiredDefinitionType: PayPalRequiredDefinitionType);
begin
  FPayPalRequired := APayPalRequiredDefinitionType;
  FPayPalRequired_Specified := True;
end;

function FeatureDefinitionsType.PayPalRequired_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequired_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProAdFormatEnabled(Index: Integer; const AeBayMotorsProAdFormatEnabledDefinitionType: eBayMotorsProAdFormatEnabledDefinitionType);
begin
  FeBayMotorsProAdFormatEnabled := AeBayMotorsProAdFormatEnabledDefinitionType;
  FeBayMotorsProAdFormatEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAdFormatEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const AeBayMotorsProContactByPhoneEnabledDefinitionType: eBayMotorsProContactByPhoneEnabledDefinitionType);
begin
  FeBayMotorsProContactByPhoneEnabled := AeBayMotorsProContactByPhoneEnabledDefinitionType;
  FeBayMotorsProContactByPhoneEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByPhoneEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProPhoneCount(Index: Integer; const AeBayMotorsProPhoneCountDefinitionType: eBayMotorsProPhoneCountDefinitionType);
begin
  FeBayMotorsProPhoneCount := AeBayMotorsProPhoneCountDefinitionType;
  FeBayMotorsProPhoneCount_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPhoneCount_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProContactByAddressEnabled(Index: Integer; const AeBayMotorsProContactByAddressEnabledDefinitionType: eBayMotorsProContactByAddressEnabledDefinitionType);
begin
  FeBayMotorsProContactByAddressEnabled := AeBayMotorsProContactByAddressEnabledDefinitionType;
  FeBayMotorsProContactByAddressEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByAddressEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProStreetCount(Index: Integer; const AeBayMotorsProStreetCountDefinitionType: eBayMotorsProStreetCountDefinitionType);
begin
  FeBayMotorsProStreetCount := AeBayMotorsProStreetCountDefinitionType;
  FeBayMotorsProStreetCount_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProStreetCount_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProCompanyNameEnabled(Index: Integer; const AeBayMotorsProCompanyNameEnabledDefinitionType: eBayMotorsProCompanyNameEnabledDefinitionType);
begin
  FeBayMotorsProCompanyNameEnabled := AeBayMotorsProCompanyNameEnabledDefinitionType;
  FeBayMotorsProCompanyNameEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCompanyNameEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProContactByEmailEnabled(Index: Integer; const AeBayMotorsProContactByEmailEnabledDefinitionType: eBayMotorsProContactByEmailEnabledDefinitionType);
begin
  FeBayMotorsProContactByEmailEnabled := AeBayMotorsProContactByEmailEnabledDefinitionType;
  FeBayMotorsProContactByEmailEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByEmailEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProBestOfferEnabled(Index: Integer; const AeBayMotorsProBestOfferEnabledDefinitionType: eBayMotorsProBestOfferEnabledDefinitionType);
begin
  FeBayMotorsProBestOfferEnabled := AeBayMotorsProBestOfferEnabledDefinitionType;
  FeBayMotorsProBestOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProBestOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const AeBayMotorsProAutoAcceptEnabledDefinitionType: eBayMotorsProAutoAcceptEnabledDefinitionType);
begin
  FeBayMotorsProAutoAcceptEnabled := AeBayMotorsProAutoAcceptEnabledDefinitionType;
  FeBayMotorsProAutoAcceptEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoAcceptEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const AeBayMotorsProAutoDeclineEnabledDefinitionType: eBayMotorsProAutoDeclineEnabledDefinitionType);
begin
  FeBayMotorsProAutoDeclineEnabled := AeBayMotorsProAutoDeclineEnabledDefinitionType;
  FeBayMotorsProAutoDeclineEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoDeclineEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AeBayMotorsProPaymentMethodCheckOutEnabledDefinitionType: eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType);
begin
  FeBayMotorsProPaymentMethodCheckOutEnabled := AeBayMotorsProPaymentMethodCheckOutEnabledDefinitionType;
  FeBayMotorsProPaymentMethodCheckOutEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPaymentMethodCheckOutEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProShippingMethodEnabled(Index: Integer; const AeBayMotorsProShippingMethodEnabledDefinitionType: eBayMotorsProShippingMethodEnabledDefinitionType);
begin
  FeBayMotorsProShippingMethodEnabled := AeBayMotorsProShippingMethodEnabledDefinitionType;
  FeBayMotorsProShippingMethodEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProShippingMethodEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProCounterOfferEnabled(Index: Integer; const AeBayMotorsProCounterOfferEnabledDefinitionType: eBayMotorsProCounterOfferEnabledDefinitionType);
begin
  FeBayMotorsProCounterOfferEnabled := AeBayMotorsProCounterOfferEnabledDefinitionType;
  FeBayMotorsProCounterOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCounterOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const AeBayMotorsProSellerContactDetailsEnabledDefinitionType: eBayMotorsProSellerContactDetailsEnabledDefinitionType);
begin
  FeBayMotorsProSellerContactDetailsEnabled := AeBayMotorsProSellerContactDetailsEnabledDefinitionType;
  FeBayMotorsProSellerContactDetailsEnabled_Specified := True;
end;

function FeatureDefinitionsType.eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProSellerContactDetailsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketAdFormatEnabled(Index: Integer; const ALocalMarketAdFormatEnabledDefinitionType: LocalMarketAdFormatEnabledDefinitionType);
begin
  FLocalMarketAdFormatEnabled := ALocalMarketAdFormatEnabledDefinitionType;
  FLocalMarketAdFormatEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAdFormatEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketContactByPhoneEnabled(Index: Integer; const ALocalMarketContactByPhoneEnabledDefinitionType: LocalMarketContactByPhoneEnabledDefinitionType);
begin
  FLocalMarketContactByPhoneEnabled := ALocalMarketContactByPhoneEnabledDefinitionType;
  FLocalMarketContactByPhoneEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByPhoneEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketPhoneCount(Index: Integer; const ALocalMarketPhoneCountDefinitionType: LocalMarketPhoneCountDefinitionType);
begin
  FLocalMarketPhoneCount := ALocalMarketPhoneCountDefinitionType;
  FLocalMarketPhoneCount_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPhoneCount_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketContactByAddressEnabled(Index: Integer; const ALocalMarketContactByAddressEnabledDefinitionType: LocalMarketContactByAddressEnabledDefinitionType);
begin
  FLocalMarketContactByAddressEnabled := ALocalMarketContactByAddressEnabledDefinitionType;
  FLocalMarketContactByAddressEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByAddressEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketStreetCount(Index: Integer; const ALocalMarketStreetCountDefinitionType: LocalMarketStreetCountDefinitionType);
begin
  FLocalMarketStreetCount := ALocalMarketStreetCountDefinitionType;
  FLocalMarketStreetCount_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketStreetCount_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketCompanyNameEnabled(Index: Integer; const ALocalMarketCompanyNameEnabledDefinitionType: LocalMarketCompanyNameEnabledDefinitionType);
begin
  FLocalMarketCompanyNameEnabled := ALocalMarketCompanyNameEnabledDefinitionType;
  FLocalMarketCompanyNameEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCompanyNameEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketContactByEmailEnabled(Index: Integer; const ALocalMarketContactByEmailEnabledDefinitionType: LocalMarketContactByEmailEnabledDefinitionType);
begin
  FLocalMarketContactByEmailEnabled := ALocalMarketContactByEmailEnabledDefinitionType;
  FLocalMarketContactByEmailEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByEmailEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketBestOfferEnabled(Index: Integer; const ALocalMarketBestOfferEnabledDefinitionType: LocalMarketBestOfferEnabledDefinitionType);
begin
  FLocalMarketBestOfferEnabled := ALocalMarketBestOfferEnabledDefinitionType;
  FLocalMarketBestOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketBestOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketAutoAcceptEnabled(Index: Integer; const ALocalMarketAutoAcceptEnabledDefinitionType: LocalMarketAutoAcceptEnabledDefinitionType);
begin
  FLocalMarketAutoAcceptEnabled := ALocalMarketAutoAcceptEnabledDefinitionType;
  FLocalMarketAutoAcceptEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoAcceptEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketAutoDeclineEnabled(Index: Integer; const ALocalMarketAutoDeclineEnabledDefinitionType: LocalMarketAutoDeclineEnabledDefinitionType);
begin
  FLocalMarketAutoDeclineEnabled := ALocalMarketAutoDeclineEnabledDefinitionType;
  FLocalMarketAutoDeclineEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoDeclineEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const ALocalMarketPaymentMethodCheckOutEnabledDefinitionType: LocalMarketPaymentMethodCheckOutEnabledDefinitionType);
begin
  FLocalMarketPaymentMethodCheckOutEnabled := ALocalMarketPaymentMethodCheckOutEnabledDefinitionType;
  FLocalMarketPaymentMethodCheckOutEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPaymentMethodCheckOutEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketShippingMethodEnabled(Index: Integer; const ALocalMarketShippingMethodEnabledDefinitionType: LocalMarketShippingMethodEnabledDefinitionType);
begin
  FLocalMarketShippingMethodEnabled := ALocalMarketShippingMethodEnabledDefinitionType;
  FLocalMarketShippingMethodEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketShippingMethodEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketCounterOfferEnabled(Index: Integer; const ALocalMarketCounterOfferEnabledDefinitionType: LocalMarketCounterOfferEnabledDefinitionType);
begin
  FLocalMarketCounterOfferEnabled := ALocalMarketCounterOfferEnabledDefinitionType;
  FLocalMarketCounterOfferEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCounterOfferEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ALocalMarketSellerContactDetailsEnabledDefinitionType: LocalMarketSellerContactDetailsEnabledDefinitionType);
begin
  FLocalMarketSellerContactDetailsEnabled := ALocalMarketSellerContactDetailsEnabledDefinitionType;
  FLocalMarketSellerContactDetailsEnabled_Specified := True;
end;

function FeatureDefinitionsType.LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSellerContactDetailsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdPhoneCount(Index: Integer; const AClassifiedAdPhoneCountDefinitionType: ClassifiedAdPhoneCountDefinitionType);
begin
  FClassifiedAdPhoneCount := AClassifiedAdPhoneCountDefinitionType;
  FClassifiedAdPhoneCount_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPhoneCount_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdContactByAddressEnabled(Index: Integer; const AClassifiedAdContactByAddressEnabledDefinitionType: ClassifiedAdContactByAddressEnabledDefinitionType);
begin
  FClassifiedAdContactByAddressEnabled := AClassifiedAdContactByAddressEnabledDefinitionType;
  FClassifiedAdContactByAddressEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByAddressEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdStreetCount(Index: Integer; const AClassifiedAdStreetCountDefinitionType: ClassifiedAdStreetCountDefinitionType);
begin
  FClassifiedAdStreetCount := AClassifiedAdStreetCountDefinitionType;
  FClassifiedAdStreetCount_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdStreetCount_Specified;
end;

procedure FeatureDefinitionsType.SetClassifiedAdCompanyNameEnabled(Index: Integer; const AClassifiedAdCompanyNameEnabledDefinitionType: ClassifiedAdCompanyNameEnabledDefinitionType);
begin
  FClassifiedAdCompanyNameEnabled := AClassifiedAdCompanyNameEnabledDefinitionType;
  FClassifiedAdCompanyNameEnabled_Specified := True;
end;

function FeatureDefinitionsType.ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCompanyNameEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetSpecialitySubscription(Index: Integer; const ASpecialitySubscriptionDefinitionType: SpecialitySubscriptionDefinitionType);
begin
  FSpecialitySubscription := ASpecialitySubscriptionDefinitionType;
  FSpecialitySubscription_Specified := True;
end;

function FeatureDefinitionsType.SpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FSpecialitySubscription_Specified;
end;

procedure FeatureDefinitionsType.SetRegularSubscription(Index: Integer; const ARegularSubscriptionDefinitionType: RegularSubscriptionDefinitionType);
begin
  FRegularSubscription := ARegularSubscriptionDefinitionType;
  FRegularSubscription_Specified := True;
end;

function FeatureDefinitionsType.RegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FRegularSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetPremiumSubscription(Index: Integer; const APremiumSubscriptionDefinitionType: PremiumSubscriptionDefinitionType);
begin
  FPremiumSubscription := APremiumSubscriptionDefinitionType;
  FPremiumSubscription_Specified := True;
end;

function FeatureDefinitionsType.PremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FPremiumSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetNonSubscription(Index: Integer; const ANonSubscriptionDefinitionType: NonSubscriptionDefinitionType);
begin
  FNonSubscription := ANonSubscriptionDefinitionType;
  FNonSubscription_Specified := True;
end;

function FeatureDefinitionsType.NonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FNonSubscription_Specified;
end;

procedure FeatureDefinitionsType.SetReturnPolicyEnabled(Index: Integer; const AReturnPolicyEnabledDefinitionType: ReturnPolicyEnabledDefinitionType);
begin
  FReturnPolicyEnabled := AReturnPolicyEnabledDefinitionType;
  FReturnPolicyEnabled_Specified := True;
end;

function FeatureDefinitionsType.ReturnPolicyEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetHandlingTimeEnabled(Index: Integer; const AHandlingTimeEnabledDefinitionType: HandlingTimeEnabledDefinitionType);
begin
  FHandlingTimeEnabled := AHandlingTimeEnabledDefinitionType;
  FHandlingTimeEnabled_Specified := True;
end;

function FeatureDefinitionsType.HandlingTimeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHandlingTimeEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetPayPalRequiredForStoreOwner(Index: Integer; const APayPalRequiredForStoreOwnerDefinitionType: PayPalRequiredForStoreOwnerDefinitionType);
begin
  FPayPalRequiredForStoreOwner := APayPalRequiredForStoreOwnerDefinitionType;
  FPayPalRequiredForStoreOwner_Specified := True;
end;

function FeatureDefinitionsType.PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequiredForStoreOwner_Specified;
end;

procedure FeatureDefinitionsType.SetReviseQuantityAllowed(Index: Integer; const AReviseQuantityAllowedDefinitionType: ReviseQuantityAllowedDefinitionType);
begin
  FReviseQuantityAllowed := AReviseQuantityAllowedDefinitionType;
  FReviseQuantityAllowed_Specified := True;
end;

function FeatureDefinitionsType.ReviseQuantityAllowed_Specified(Index: Integer): boolean;
begin
  Result := FReviseQuantityAllowed_Specified;
end;

procedure FeatureDefinitionsType.SetRevisePriceAllowed(Index: Integer; const ARevisePriceAllowedDefinitionType: RevisePriceAllowedDefinitionType);
begin
  FRevisePriceAllowed := ARevisePriceAllowedDefinitionType;
  FRevisePriceAllowed_Specified := True;
end;

function FeatureDefinitionsType.RevisePriceAllowed_Specified(Index: Integer): boolean;
begin
  Result := FRevisePriceAllowed_Specified;
end;

procedure FeatureDefinitionsType.SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const AStoreOwnerExtendedListingDurationsEnabledDefinitionType: StoreOwnerExtendedListingDurationsEnabledDefinitionType);
begin
  FStoreOwnerExtendedListingDurationsEnabled := AStoreOwnerExtendedListingDurationsEnabledDefinitionType;
  FStoreOwnerExtendedListingDurationsEnabled_Specified := True;
end;

function FeatureDefinitionsType.StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurationsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsDefinitionType: StoreOwnerExtendedListingDurationsDefinitionType);
begin
  FStoreOwnerExtendedListingDurations := AStoreOwnerExtendedListingDurationsDefinitionType;
  FStoreOwnerExtendedListingDurations_Specified := True;
end;

function FeatureDefinitionsType.StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurations_Specified;
end;

procedure FeatureDefinitionsType.SetPaymentMethod(Index: Integer; const APaymentMethodDefinitionType: PaymentMethodDefinitionType);
begin
  FPaymentMethod := APaymentMethodDefinitionType;
  FPaymentMethod_Specified := True;
end;

function FeatureDefinitionsType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure FeatureDefinitionsType.SetGroup1MaxFlatShippingCost(Index: Integer; const AGroup1MaxFlatShippingCostDefinitionType: Group1MaxFlatShippingCostDefinitionType);
begin
  FGroup1MaxFlatShippingCost := AGroup1MaxFlatShippingCostDefinitionType;
  FGroup1MaxFlatShippingCost_Specified := True;
end;

function FeatureDefinitionsType.Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup1MaxFlatShippingCost_Specified;
end;

procedure FeatureDefinitionsType.SetGroup2MaxFlatShippingCost(Index: Integer; const AGroup2MaxFlatShippingCostDefinitionType: Group2MaxFlatShippingCostDefinitionType);
begin
  FGroup2MaxFlatShippingCost := AGroup2MaxFlatShippingCostDefinitionType;
  FGroup2MaxFlatShippingCost_Specified := True;
end;

function FeatureDefinitionsType.Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup2MaxFlatShippingCost_Specified;
end;

procedure FeatureDefinitionsType.SetGroup3MaxFlatShippingCost(Index: Integer; const AGroup3MaxFlatShippingCostDefinitionType: Group3MaxFlatShippingCostDefinitionType);
begin
  FGroup3MaxFlatShippingCost := AGroup3MaxFlatShippingCostDefinitionType;
  FGroup3MaxFlatShippingCost_Specified := True;
end;

function FeatureDefinitionsType.Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup3MaxFlatShippingCost_Specified;
end;

procedure FeatureDefinitionsType.SetMaxFlatShippingCostCBTExempt(Index: Integer; const AMaxFlatShippingCostCBTExemptDefinitionType: MaxFlatShippingCostCBTExemptDefinitionType);
begin
  FMaxFlatShippingCostCBTExempt := AMaxFlatShippingCostCBTExemptDefinitionType;
  FMaxFlatShippingCostCBTExempt_Specified := True;
end;

function FeatureDefinitionsType.MaxFlatShippingCostCBTExempt_Specified(Index: Integer): boolean;
begin
  Result := FMaxFlatShippingCostCBTExempt_Specified;
end;

procedure FeatureDefinitionsType.SetMaxFlatShippingCost(Index: Integer; const AMaxFlatShippingCostDefinitionType: MaxFlatShippingCostDefinitionType);
begin
  FMaxFlatShippingCost := AMaxFlatShippingCostDefinitionType;
  FMaxFlatShippingCost_Specified := True;
end;

function FeatureDefinitionsType.MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FMaxFlatShippingCost_Specified;
end;

procedure FeatureDefinitionsType.SetVariationsEnabled(Index: Integer; const AVariationsEnabledDefinitionType: VariationsEnabledDefinitionType);
begin
  FVariationsEnabled := AVariationsEnabledDefinitionType;
  FVariationsEnabled_Specified := True;
end;

function FeatureDefinitionsType.VariationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FVariationsEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledFeatureDefinitionType: AttributeConversionEnabledFeatureDefinitionType);
begin
  FAttributeConversionEnabled := AAttributeConversionEnabledFeatureDefinitionType;
  FAttributeConversionEnabled_Specified := True;
end;

function FeatureDefinitionsType.AttributeConversionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAttributeConversionEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetFreeGalleryPlusEnabled(Index: Integer; const AFreeGalleryPlusEnabledDefinitionType: FreeGalleryPlusEnabledDefinitionType);
begin
  FFreeGalleryPlusEnabled := AFreeGalleryPlusEnabledDefinitionType;
  FFreeGalleryPlusEnabled_Specified := True;
end;

function FeatureDefinitionsType.FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreeGalleryPlusEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetFreePicturePackEnabled(Index: Integer; const AFreePicturePackEnabledDefinitionType: FreePicturePackEnabledDefinitionType);
begin
  FFreePicturePackEnabled := AFreePicturePackEnabledDefinitionType;
  FFreePicturePackEnabled_Specified := True;
end;

function FeatureDefinitionsType.FreePicturePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreePicturePackEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledDefinitionType: ItemCompatibilityEnabledDefinitionType);
begin
  FItemCompatibilityEnabled := AItemCompatibilityEnabledDefinitionType;
  FItemCompatibilityEnabled_Specified := True;
end;

function FeatureDefinitionsType.ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemCompatibilityEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetMaxItemCompatibility(Index: Integer; const AMaxItemCompatibilityDefinitionType: MaxItemCompatibilityDefinitionType);
begin
  FMaxItemCompatibility := AMaxItemCompatibilityDefinitionType;
  FMaxItemCompatibility_Specified := True;
end;

function FeatureDefinitionsType.MaxItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMaxItemCompatibility_Specified;
end;

procedure FeatureDefinitionsType.SetMinItemCompatibility(Index: Integer; const AMinItemCompatibilityDefinitionType: MinItemCompatibilityDefinitionType);
begin
  FMinItemCompatibility := AMinItemCompatibilityDefinitionType;
  FMinItemCompatibility_Specified := True;
end;

function FeatureDefinitionsType.MinItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMinItemCompatibility_Specified;
end;

procedure FeatureDefinitionsType.SetConditionEnabled(Index: Integer; const AConditionEnabledDefinitionType: ConditionEnabledDefinitionType);
begin
  FConditionEnabled := AConditionEnabledDefinitionType;
  FConditionEnabled_Specified := True;
end;

function FeatureDefinitionsType.ConditionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FConditionEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetConditionValues(Index: Integer; const AConditionValuesDefinitionType: ConditionValuesDefinitionType);
begin
  FConditionValues := AConditionValuesDefinitionType;
  FConditionValues_Specified := True;
end;

function FeatureDefinitionsType.ConditionValues_Specified(Index: Integer): boolean;
begin
  Result := FConditionValues_Specified;
end;

procedure FeatureDefinitionsType.SetValueCategory(Index: Integer; const AValueCategoryDefinitionType: ValueCategoryDefinitionType);
begin
  FValueCategory := AValueCategoryDefinitionType;
  FValueCategory_Specified := True;
end;

function FeatureDefinitionsType.ValueCategory_Specified(Index: Integer): boolean;
begin
  Result := FValueCategory_Specified;
end;

procedure FeatureDefinitionsType.SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledDefinitionType: ProductCreationEnabledDefinitionType);
begin
  FProductCreationEnabled := AProductCreationEnabledDefinitionType;
  FProductCreationEnabled_Specified := True;
end;

function FeatureDefinitionsType.ProductCreationEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductCreationEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetEANEnabled(Index: Integer; const AEANEnabledDefinitionType: EANEnabledDefinitionType);
begin
  FEANEnabled := AEANEnabledDefinitionType;
  FEANEnabled_Specified := True;
end;

function FeatureDefinitionsType.EANEnabled_Specified(Index: Integer): boolean;
begin
  Result := FEANEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetISBNEnabled(Index: Integer; const AISBNEnabledDefinitionType: ISBNEnabledDefinitionType);
begin
  FISBNEnabled := AISBNEnabledDefinitionType;
  FISBNEnabled_Specified := True;
end;

function FeatureDefinitionsType.ISBNEnabled_Specified(Index: Integer): boolean;
begin
  Result := FISBNEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetUPCEnabled(Index: Integer; const AUPCEnabledDefinitionType: UPCEnabledDefinitionType);
begin
  FUPCEnabled := AUPCEnabledDefinitionType;
  FUPCEnabled_Specified := True;
end;

function FeatureDefinitionsType.UPCEnabled_Specified(Index: Integer): boolean;
begin
  Result := FUPCEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetCompatibleVehicleType(Index: Integer; const ACompatibleVehicleTypeDefinitionType: CompatibleVehicleTypeDefinitionType);
begin
  FCompatibleVehicleType := ACompatibleVehicleTypeDefinitionType;
  FCompatibleVehicleType_Specified := True;
end;

function FeatureDefinitionsType.CompatibleVehicleType_Specified(Index: Integer): boolean;
begin
  Result := FCompatibleVehicleType_Specified;
end;

procedure FeatureDefinitionsType.SetMaxGranularFitmentCount(Index: Integer; const AMaxGranularFitmentCountDefinitionType: MaxGranularFitmentCountDefinitionType);
begin
  FMaxGranularFitmentCount := AMaxGranularFitmentCountDefinitionType;
  FMaxGranularFitmentCount_Specified := True;
end;

function FeatureDefinitionsType.MaxGranularFitmentCount_Specified(Index: Integer): boolean;
begin
  Result := FMaxGranularFitmentCount_Specified;
end;

procedure FeatureDefinitionsType.SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledDefinitionType: PaymentOptionsGroupEnabledDefinitionType);
begin
  FPaymentOptionsGroup := APaymentOptionsGroupEnabledDefinitionType;
  FPaymentOptionsGroup_Specified := True;
end;

function FeatureDefinitionsType.PaymentOptionsGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOptionsGroup_Specified;
end;

procedure FeatureDefinitionsType.SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
begin
  FShippingProfileCategoryGroup := AProfileCategoryGroupDefinitionType;
  FShippingProfileCategoryGroup_Specified := True;
end;

function FeatureDefinitionsType.ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FShippingProfileCategoryGroup_Specified;
end;

procedure FeatureDefinitionsType.SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
begin
  FPaymentProfileCategoryGroup := AProfileCategoryGroupDefinitionType;
  FPaymentProfileCategoryGroup_Specified := True;
end;

function FeatureDefinitionsType.PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentProfileCategoryGroup_Specified;
end;

procedure FeatureDefinitionsType.SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupDefinitionType: ProfileCategoryGroupDefinitionType);
begin
  FReturnPolicyProfileCategoryGroup := AProfileCategoryGroupDefinitionType;
  FReturnPolicyProfileCategoryGroup_Specified := True;
end;

function FeatureDefinitionsType.ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyProfileCategoryGroup_Specified;
end;

procedure FeatureDefinitionsType.SetVINSupported(Index: Integer; const AVINSupportedDefinitionType: VINSupportedDefinitionType);
begin
  FVINSupported := AVINSupportedDefinitionType;
  FVINSupported_Specified := True;
end;

function FeatureDefinitionsType.VINSupported_Specified(Index: Integer): boolean;
begin
  Result := FVINSupported_Specified;
end;

procedure FeatureDefinitionsType.SetVRMSupported(Index: Integer; const AVRMSupportedDefinitionType: VRMSupportedDefinitionType);
begin
  FVRMSupported := AVRMSupportedDefinitionType;
  FVRMSupported_Specified := True;
end;

function FeatureDefinitionsType.VRMSupported_Specified(Index: Integer): boolean;
begin
  Result := FVRMSupported_Specified;
end;

procedure FeatureDefinitionsType.SetSellerProvidedTitleSupported(Index: Integer; const ASellerProvidedTitleSupportedDefinitionType: SellerProvidedTitleSupportedDefinitionType);
begin
  FSellerProvidedTitleSupported := ASellerProvidedTitleSupportedDefinitionType;
  FSellerProvidedTitleSupported_Specified := True;
end;

function FeatureDefinitionsType.SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
begin
  Result := FSellerProvidedTitleSupported_Specified;
end;

procedure FeatureDefinitionsType.SetDepositSupported(Index: Integer; const ADepositSupportedDefinitionType: DepositSupportedDefinitionType);
begin
  FDepositSupported := ADepositSupportedDefinitionType;
  FDepositSupported_Specified := True;
end;

function FeatureDefinitionsType.DepositSupported_Specified(Index: Integer): boolean;
begin
  Result := FDepositSupported_Specified;
end;

procedure FeatureDefinitionsType.SetGlobalShippingEnabled(Index: Integer; const AGlobalShippingEnabledDefinitionType: GlobalShippingEnabledDefinitionType);
begin
  FGlobalShippingEnabled := AGlobalShippingEnabledDefinitionType;
  FGlobalShippingEnabled_Specified := True;
end;

function FeatureDefinitionsType.GlobalShippingEnabled_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShippingEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetAdditionalCompatibilityEnabled(Index: Integer; const AAdditionalCompatibilityEnabledDefinitionType: AdditionalCompatibilityEnabledDefinitionType);
begin
  FAdditionalCompatibilityEnabled := AAdditionalCompatibilityEnabledDefinitionType;
  FAdditionalCompatibilityEnabled_Specified := True;
end;

function FeatureDefinitionsType.AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalCompatibilityEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetPickupDropOffEnabled(Index: Integer; const APickupDropOffEnabledDefinitionType: PickupDropOffEnabledDefinitionType);
begin
  FPickupDropOffEnabled := APickupDropOffEnabledDefinitionType;
  FPickupDropOffEnabled_Specified := True;
end;

function FeatureDefinitionsType.PickupDropOffEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPickupDropOffEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetDigitalGoodDeliveryEnabled(Index: Integer; const ADigitalGoodDeliveryEnabledDefinitionType: DigitalGoodDeliveryEnabledDefinitionType);
begin
  FDigitalGoodDeliveryEnabled := ADigitalGoodDeliveryEnabledDefinitionType;
  FDigitalGoodDeliveryEnabled_Specified := True;
end;

function FeatureDefinitionsType.DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDigitalGoodDeliveryEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetEpidSupported(Index: Integer; const AEpidSupportedDefinitionType: EpidSupportedDefinitionType);
begin
  FEpidSupported := AEpidSupportedDefinitionType;
  FEpidSupported_Specified := True;
end;

function FeatureDefinitionsType.EpidSupported_Specified(Index: Integer): boolean;
begin
  Result := FEpidSupported_Specified;
end;

procedure FeatureDefinitionsType.SetKTypeSupported(Index: Integer; const AKTypeSupportedDefinitionType: KTypeSupportedDefinitionType);
begin
  FKTypeSupported := AKTypeSupportedDefinitionType;
  FKTypeSupported_Specified := True;
end;

function FeatureDefinitionsType.KTypeSupported_Specified(Index: Integer): boolean;
begin
  Result := FKTypeSupported_Specified;
end;

procedure FeatureDefinitionsType.SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledDefinitionType: ProductRequiredEnabledDefinitionType);
begin
  FProductRequiredEnabled := AProductRequiredEnabledDefinitionType;
  FProductRequiredEnabled_Specified := True;
end;

function FeatureDefinitionsType.ProductRequiredEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductRequiredEnabled_Specified;
end;

procedure FeatureDefinitionsType.SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedDefinitionType: DomesticReturnsAcceptedDefinitionType);
begin
  FDomesticReturnsAcceptedValues := ADomesticReturnsAcceptedDefinitionType;
  FDomesticReturnsAcceptedValues_Specified := True;
end;

function FeatureDefinitionsType.DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsAcceptedValues_Specified;
end;

procedure FeatureDefinitionsType.SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedDefinitionType: InternationalReturnsAcceptedDefinitionType);
begin
  FInternationalReturnsAcceptedValues := AInternationalReturnsAcceptedDefinitionType;
  FInternationalReturnsAcceptedValues_Specified := True;
end;

function FeatureDefinitionsType.InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsAcceptedValues_Specified;
end;

procedure FeatureDefinitionsType.SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationDefinitionType: DomesticReturnsDurationDefinitionType);
begin
  FDomesticReturnsDurationValues := ADomesticReturnsDurationDefinitionType;
  FDomesticReturnsDurationValues_Specified := True;
end;

function FeatureDefinitionsType.DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsDurationValues_Specified;
end;

procedure FeatureDefinitionsType.SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationDefinitionType: InternationalReturnsDurationDefinitionType);
begin
  FInternationalReturnsDurationValues := AInternationalReturnsDurationDefinitionType;
  FInternationalReturnsDurationValues_Specified := True;
end;

function FeatureDefinitionsType.InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsDurationValues_Specified;
end;

procedure FeatureDefinitionsType.SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeDefinitionType: DomesticReturnsShipmentPayeeDefinitionType);
begin
  FDomesticReturnsShipmentPayeeValues := ADomesticReturnsShipmentPayeeDefinitionType;
  FDomesticReturnsShipmentPayeeValues_Specified := True;
end;

function FeatureDefinitionsType.DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsShipmentPayeeValues_Specified;
end;

procedure FeatureDefinitionsType.SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeDefinitionType: InternationalReturnsShipmentPayeeDefinitionType);
begin
  FInternationalReturnsShipmentPayeeValues := AInternationalReturnsShipmentPayeeDefinitionType;
  FInternationalReturnsShipmentPayeeValues_Specified := True;
end;

function FeatureDefinitionsType.InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsShipmentPayeeValues_Specified;
end;

procedure FeatureDefinitionsType.SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
begin
  FDomesticRefundMethodValues := ADomesticRefundMethodCodeType;
  FDomesticRefundMethodValues_Specified := True;
end;

function FeatureDefinitionsType.DomesticRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRefundMethodValues_Specified;
end;

procedure FeatureDefinitionsType.SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
begin
  FInternationalRefundMethodValues := AInternationalRefundMethodCodeType;
  FInternationalRefundMethodValues_Specified := True;
end;

function FeatureDefinitionsType.InternationalRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRefundMethodValues_Specified;
end;

procedure FeatureDefinitionsType.SetReturnPolicyDescriptionEnabled(Index: Integer; const AReturnPolicyDescriptionEnabledDefinitionType: ReturnPolicyDescriptionEnabledDefinitionType);
begin
  FReturnPolicyDescriptionEnabled := AReturnPolicyDescriptionEnabledDefinitionType;
  FReturnPolicyDescriptionEnabled_Specified := True;
end;

function FeatureDefinitionsType.ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyDescriptionEnabled_Specified;
end;

destructor CharacteristicType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FValueList)-1 do
    SysUtils.FreeAndNil(FValueList[I]);
  System.SetLength(FValueList, 0);
  SysUtils.FreeAndNil(FLabel_);
  inherited Destroy;
end;

procedure CharacteristicType.SetDateFormat(Index: Integer; const Astring: string);
begin
  FDateFormat := Astring;
  FDateFormat_Specified := True;
end;

function CharacteristicType.DateFormat_Specified(Index: Integer): boolean;
begin
  Result := FDateFormat_Specified;
end;

procedure CharacteristicType.SetDisplaySequence(Index: Integer; const Astring: string);
begin
  FDisplaySequence := Astring;
  FDisplaySequence_Specified := True;
end;

function CharacteristicType.DisplaySequence_Specified(Index: Integer): boolean;
begin
  Result := FDisplaySequence_Specified;
end;

procedure CharacteristicType.SetDisplayUOM(Index: Integer; const Astring: string);
begin
  FDisplayUOM := Astring;
  FDisplayUOM_Specified := True;
end;

function CharacteristicType.DisplayUOM_Specified(Index: Integer): boolean;
begin
  Result := FDisplayUOM_Specified;
end;

procedure CharacteristicType.SetLabel_(Index: Integer; const ALabelType: LabelType);
begin
  FLabel_ := ALabelType;
  FLabel__Specified := True;
end;

function CharacteristicType.Label__Specified(Index: Integer): boolean;
begin
  Result := FLabel__Specified;
end;

procedure CharacteristicType.SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSortOrder := ASortOrderCodeType;
  FSortOrder_Specified := True;
end;

function CharacteristicType.SortOrder_Specified(Index: Integer): boolean;
begin
  Result := FSortOrder_Specified;
end;

procedure CharacteristicType.SetValueList(Index: Integer; const AArray_Of_ValType: Array_Of_ValType);
begin
  FValueList := AArray_Of_ValType;
  FValueList_Specified := True;
end;

function CharacteristicType.ValueList_Specified(Index: Integer): boolean;
begin
  Result := FValueList_Specified;
end;

procedure LabelType.Setvisible(Index: Integer; const ABoolean: Boolean);
begin
  Fvisible := ABoolean;
  Fvisible_Specified := True;
end;

function LabelType.visible_Specified(Index: Integer): boolean;
begin
  Result := Fvisible_Specified;
end;

procedure LabelType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function LabelType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CategoryGroupType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function CategoryGroupType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CategoryGroupType.SetIsDefault(Index: Integer; const ABoolean: Boolean);
begin
  FIsDefault := ABoolean;
  FIsDefault_Specified := True;
end;

function CategoryGroupType.IsDefault_Specified(Index: Integer): boolean;
begin
  Result := FIsDefault_Specified;
end;

procedure ExtendedProductFinderIDType.SetProductFinderID(Index: Integer; const AInteger: Integer);
begin
  FProductFinderID := AInteger;
  FProductFinderID_Specified := True;
end;

function ExtendedProductFinderIDType.ProductFinderID_Specified(Index: Integer): boolean;
begin
  Result := FProductFinderID_Specified;
end;

procedure ExtendedProductFinderIDType.SetProductFinderBuySide(Index: Integer; const ABoolean: Boolean);
begin
  FProductFinderBuySide := ABoolean;
  FProductFinderBuySide_Specified := True;
end;

function ExtendedProductFinderIDType.ProductFinderBuySide_Specified(Index: Integer): boolean;
begin
  Result := FProductFinderBuySide_Specified;
end;

destructor CharacteristicsSetType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCharacteristics)-1 do
    SysUtils.FreeAndNil(FCharacteristics[I]);
  System.SetLength(FCharacteristics, 0);
  inherited Destroy;
end;

procedure CharacteristicsSetType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function CharacteristicsSetType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CharacteristicsSetType.SetAttributeSetID(Index: Integer; const AInteger: Integer);
begin
  FAttributeSetID := AInteger;
  FAttributeSetID_Specified := True;
end;

function CharacteristicsSetType.AttributeSetID_Specified(Index: Integer): boolean;
begin
  Result := FAttributeSetID_Specified;
end;

procedure CharacteristicsSetType.SetAttributeSetVersion(Index: Integer; const Astring: string);
begin
  FAttributeSetVersion := Astring;
  FAttributeSetVersion_Specified := True;
end;

function CharacteristicsSetType.AttributeSetVersion_Specified(Index: Integer): boolean;
begin
  Result := FAttributeSetVersion_Specified;
end;

procedure CharacteristicsSetType.SetCharacteristics(Index: Integer; const AArray_Of_CharacteristicType: Array_Of_CharacteristicType);
begin
  FCharacteristics := AArray_Of_CharacteristicType;
  FCharacteristics_Specified := True;
end;

function CharacteristicsSetType.Characteristics_Specified(Index: Integer): boolean;
begin
  Result := FCharacteristics_Specified;
end;

destructor ConditionValuesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCondition)-1 do
    SysUtils.FreeAndNil(FCondition[I]);
  System.SetLength(FCondition, 0);
  inherited Destroy;
end;

procedure ConditionValuesType.SetCondition(Index: Integer; const AArray_Of_ConditionType: Array_Of_ConditionType);
begin
  FCondition := AArray_Of_ConditionType;
  FCondition_Specified := True;
end;

function ConditionValuesType.Condition_Specified(Index: Integer): boolean;
begin
  Result := FCondition_Specified;
end;

procedure ConditionValuesType.SetConditionHelpURL(Index: Integer; const Astring: string);
begin
  FConditionHelpURL := Astring;
  FConditionHelpURL_Specified := True;
end;

function ConditionValuesType.ConditionHelpURL_Specified(Index: Integer): boolean;
begin
  Result := FConditionHelpURL_Specified;
end;

destructor CharityAffiliationDetailType.Destroy;
begin
  SysUtils.FreeAndNil(FLastUsedTime);
  inherited Destroy;
end;

procedure CharityAffiliationDetailType.SetCharityID(Index: Integer; const Astring: string);
begin
  FCharityID := Astring;
  FCharityID_Specified := True;
end;

function CharityAffiliationDetailType.CharityID_Specified(Index: Integer): boolean;
begin
  Result := FCharityID_Specified;
end;

procedure CharityAffiliationDetailType.SetAffiliationType(Index: Integer; const ACharityAffiliationTypeCodeType: CharityAffiliationTypeCodeType);
begin
  FAffiliationType := ACharityAffiliationTypeCodeType;
  FAffiliationType_Specified := True;
end;

function CharityAffiliationDetailType.AffiliationType_Specified(Index: Integer): boolean;
begin
  Result := FAffiliationType_Specified;
end;

procedure CharityAffiliationDetailType.SetLastUsedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastUsedTime := ATXSDateTime;
  FLastUsedTime_Specified := True;
end;

function CharityAffiliationDetailType.LastUsedTime_Specified(Index: Integer): boolean;
begin
  Result := FLastUsedTime_Specified;
end;

destructor CharityInfoType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNonProfitAddress)-1 do
    SysUtils.FreeAndNil(FNonProfitAddress[I]);
  System.SetLength(FNonProfitAddress, 0);
  for I := 0 to System.Length(FNonProfitSocialAddress)-1 do
    SysUtils.FreeAndNil(FNonProfitSocialAddress[I]);
  System.SetLength(FNonProfitSocialAddress, 0);
  inherited Destroy;
end;

procedure CharityInfoType.Setid(Index: Integer; const Astring: string);
begin
  Fid := Astring;
  Fid_Specified := True;
end;

function CharityInfoType.id_Specified(Index: Integer): boolean;
begin
  Result := Fid_Specified;
end;

procedure CharityInfoType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function CharityInfoType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure CharityInfoType.SetListingNPEmailNotifPref(Index: Integer; const ABoolean: Boolean);
begin
  FListingNPEmailNotifPref := ABoolean;
  FListingNPEmailNotifPref_Specified := True;
end;

function CharityInfoType.ListingNPEmailNotifPref_Specified(Index: Integer): boolean;
begin
  Result := FListingNPEmailNotifPref_Specified;
end;

procedure CharityInfoType.SetListingNPEmail(Index: Integer; const Astring: string);
begin
  FListingNPEmail := Astring;
  FListingNPEmail_Specified := True;
end;

function CharityInfoType.ListingNPEmail_Specified(Index: Integer): boolean;
begin
  Result := FListingNPEmail_Specified;
end;

procedure CharityInfoType.SetListingNPContactName(Index: Integer; const Astring: string);
begin
  FListingNPContactName := Astring;
  FListingNPContactName_Specified := True;
end;

function CharityInfoType.ListingNPContactName_Specified(Index: Integer): boolean;
begin
  Result := FListingNPContactName_Specified;
end;

procedure CharityInfoType.SetMission(Index: Integer; const Astring: string);
begin
  FMission := Astring;
  FMission_Specified := True;
end;

function CharityInfoType.Mission_Specified(Index: Integer): boolean;
begin
  Result := FMission_Specified;
end;

procedure CharityInfoType.SetLogoURL(Index: Integer; const Astring: string);
begin
  FLogoURL := Astring;
  FLogoURL_Specified := True;
end;

function CharityInfoType.LogoURL_Specified(Index: Integer): boolean;
begin
  Result := FLogoURL_Specified;
end;

procedure CharityInfoType.SetStatus(Index: Integer; const ACharityStatusCodeType: CharityStatusCodeType);
begin
  FStatus := ACharityStatusCodeType;
  FStatus_Specified := True;
end;

function CharityInfoType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure CharityInfoType.SetSearchableString(Index: Integer; const Astring: string);
begin
  FSearchableString := Astring;
  FSearchableString_Specified := True;
end;

function CharityInfoType.SearchableString_Specified(Index: Integer): boolean;
begin
  Result := FSearchableString_Specified;
end;

procedure CharityInfoType.SetCharityRegion(Index: Integer; const AInteger: Integer);
begin
  FCharityRegion := AInteger;
  FCharityRegion_Specified := True;
end;

function CharityInfoType.CharityRegion_Specified(Index: Integer): boolean;
begin
  Result := FCharityRegion_Specified;
end;

procedure CharityInfoType.SetCharityDomain(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FCharityDomain := ANumberOfPolicyViolationsDetailsType;
  FCharityDomain_Specified := True;
end;

function CharityInfoType.CharityDomain_Specified(Index: Integer): boolean;
begin
  Result := FCharityDomain_Specified;
end;

procedure CharityInfoType.SetCharityID(Index: Integer; const Astring: string);
begin
  FCharityID := Astring;
  FCharityID_Specified := True;
end;

function CharityInfoType.CharityID_Specified(Index: Integer): boolean;
begin
  Result := FCharityID_Specified;
end;

procedure CharityInfoType.SetLogoURLSelling(Index: Integer; const Astring: string);
begin
  FLogoURLSelling := Astring;
  FLogoURLSelling_Specified := True;
end;

function CharityInfoType.LogoURLSelling_Specified(Index: Integer): boolean;
begin
  Result := FLogoURLSelling_Specified;
end;

procedure CharityInfoType.SetDisplayLogoSelling(Index: Integer; const ABoolean: Boolean);
begin
  FDisplayLogoSelling := ABoolean;
  FDisplayLogoSelling_Specified := True;
end;

function CharityInfoType.DisplayLogoSelling_Specified(Index: Integer): boolean;
begin
  Result := FDisplayLogoSelling_Specified;
end;

procedure CharityInfoType.SetDisplayNameInCheckout(Index: Integer; const ABoolean: Boolean);
begin
  FDisplayNameInCheckout := ABoolean;
  FDisplayNameInCheckout_Specified := True;
end;

function CharityInfoType.DisplayNameInCheckout_Specified(Index: Integer): boolean;
begin
  Result := FDisplayNameInCheckout_Specified;
end;

procedure CharityInfoType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function CharityInfoType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure CharityInfoType.SetShowMultipleDonationAmountInCheckout(Index: Integer; const ABoolean: Boolean);
begin
  FShowMultipleDonationAmountInCheckout := ABoolean;
  FShowMultipleDonationAmountInCheckout_Specified := True;
end;

function CharityInfoType.ShowMultipleDonationAmountInCheckout_Specified(Index: Integer): boolean;
begin
  Result := FShowMultipleDonationAmountInCheckout_Specified;
end;

procedure CharityInfoType.SetExternalID(Index: Integer; const Astring: string);
begin
  FExternalID := Astring;
  FExternalID_Specified := True;
end;

function CharityInfoType.ExternalID_Specified(Index: Integer): boolean;
begin
  Result := FExternalID_Specified;
end;

procedure CharityInfoType.SetPopularityIndex(Index: Integer; const AInteger: Integer);
begin
  FPopularityIndex := AInteger;
  FPopularityIndex_Specified := True;
end;

function CharityInfoType.PopularityIndex_Specified(Index: Integer): boolean;
begin
  Result := FPopularityIndex_Specified;
end;

procedure CharityInfoType.SetEIN(Index: Integer; const Astring: string);
begin
  FEIN := Astring;
  FEIN_Specified := True;
end;

function CharityInfoType.EIN_Specified(Index: Integer): boolean;
begin
  Result := FEIN_Specified;
end;

procedure CharityInfoType.SetNonProfitSecondName(Index: Integer; const Astring: string);
begin
  FNonProfitSecondName := Astring;
  FNonProfitSecondName_Specified := True;
end;

function CharityInfoType.NonProfitSecondName_Specified(Index: Integer): boolean;
begin
  Result := FNonProfitSecondName_Specified;
end;

procedure CharityInfoType.SetNonProfitAddress(Index: Integer; const AArray_Of_NonProfitAddressType: Array_Of_NonProfitAddressType);
begin
  FNonProfitAddress := AArray_Of_NonProfitAddressType;
  FNonProfitAddress_Specified := True;
end;

function CharityInfoType.NonProfitAddress_Specified(Index: Integer): boolean;
begin
  Result := FNonProfitAddress_Specified;
end;

procedure CharityInfoType.SetNonProfitSocialAddress(Index: Integer; const AArray_Of_NonProfitSocialAddressType: Array_Of_NonProfitSocialAddressType);
begin
  FNonProfitSocialAddress := AArray_Of_NonProfitSocialAddressType;
  FNonProfitSocialAddress_Specified := True;
end;

function CharityInfoType.NonProfitSocialAddress_Specified(Index: Integer): boolean;
begin
  Result := FNonProfitSocialAddress_Specified;
end;

procedure NonProfitSocialAddressType.SetSocialAddressType(Index: Integer; const ASocialAddressTypeCodeType: SocialAddressTypeCodeType);
begin
  FSocialAddressType := ASocialAddressTypeCodeType;
  FSocialAddressType_Specified := True;
end;

function NonProfitSocialAddressType.SocialAddressType_Specified(Index: Integer): boolean;
begin
  Result := FSocialAddressType_Specified;
end;

procedure NonProfitSocialAddressType.SetSocialAddressId(Index: Integer; const Astring: string);
begin
  FSocialAddressId := Astring;
  FSocialAddressId_Specified := True;
end;

function NonProfitSocialAddressType.SocialAddressId_Specified(Index: Integer): boolean;
begin
  Result := FSocialAddressId_Specified;
end;

destructor eBayPaymentMismatchDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FActionRequiredBy);
  SysUtils.FreeAndNil(FMismatchAmount);
  inherited Destroy;
end;

procedure eBayPaymentMismatchDetailsType.SetMismatchType(Index: Integer; const AMismatchTypeCodeType: MismatchTypeCodeType);
begin
  FMismatchType := AMismatchTypeCodeType;
  FMismatchType_Specified := True;
end;

function eBayPaymentMismatchDetailsType.MismatchType_Specified(Index: Integer): boolean;
begin
  Result := FMismatchType_Specified;
end;

procedure eBayPaymentMismatchDetailsType.SetActionRequiredBy(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FActionRequiredBy := ATXSDateTime;
  FActionRequiredBy_Specified := True;
end;

function eBayPaymentMismatchDetailsType.ActionRequiredBy_Specified(Index: Integer): boolean;
begin
  Result := FActionRequiredBy_Specified;
end;

procedure eBayPaymentMismatchDetailsType.SetMismatchAmount(Index: Integer; const AAmountType: AmountType);
begin
  FMismatchAmount := AAmountType;
  FMismatchAmount_Specified := True;
end;

function eBayPaymentMismatchDetailsType.MismatchAmount_Specified(Index: Integer): boolean;
begin
  Result := FMismatchAmount_Specified;
end;

destructor PaymentTransactionType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPaymentReferenceID)-1 do
    SysUtils.FreeAndNil(FPaymentReferenceID[I]);
  System.SetLength(FPaymentReferenceID, 0);
  SysUtils.FreeAndNil(FPayer);
  SysUtils.FreeAndNil(FPayee);
  SysUtils.FreeAndNil(FPaymentTime);
  SysUtils.FreeAndNil(FPaymentAmount);
  SysUtils.FreeAndNil(FReferenceID);
  SysUtils.FreeAndNil(FFeeOrCreditAmount);
  inherited Destroy;
end;

procedure PaymentTransactionType.SetPaymentStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
begin
  FPaymentStatus := APaymentTransactionStatusCodeType;
  FPaymentStatus_Specified := True;
end;

function PaymentTransactionType.PaymentStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaymentStatus_Specified;
end;

procedure PaymentTransactionType.SetPayer(Index: Integer; const AUserIdentityType: UserIdentityType);
begin
  FPayer := AUserIdentityType;
  FPayer_Specified := True;
end;

function PaymentTransactionType.Payer_Specified(Index: Integer): boolean;
begin
  Result := FPayer_Specified;
end;

procedure PaymentTransactionType.SetPayee(Index: Integer; const AUserIdentityType: UserIdentityType);
begin
  FPayee := AUserIdentityType;
  FPayee_Specified := True;
end;

function PaymentTransactionType.Payee_Specified(Index: Integer): boolean;
begin
  Result := FPayee_Specified;
end;

procedure PaymentTransactionType.SetPaymentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPaymentTime := ATXSDateTime;
  FPaymentTime_Specified := True;
end;

function PaymentTransactionType.PaymentTime_Specified(Index: Integer): boolean;
begin
  Result := FPaymentTime_Specified;
end;

procedure PaymentTransactionType.SetPaymentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FPaymentAmount := AAmountType;
  FPaymentAmount_Specified := True;
end;

function PaymentTransactionType.PaymentAmount_Specified(Index: Integer): boolean;
begin
  Result := FPaymentAmount_Specified;
end;

procedure PaymentTransactionType.SetReferenceID(Index: Integer; const ATransactionReferenceType: TransactionReferenceType);
begin
  FReferenceID := ATransactionReferenceType;
  FReferenceID_Specified := True;
end;

function PaymentTransactionType.ReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FReferenceID_Specified;
end;

procedure PaymentTransactionType.SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
begin
  FFeeOrCreditAmount := AAmountType;
  FFeeOrCreditAmount_Specified := True;
end;

function PaymentTransactionType.FeeOrCreditAmount_Specified(Index: Integer): boolean;
begin
  Result := FFeeOrCreditAmount_Specified;
end;

procedure PaymentTransactionType.SetPaymentReferenceID(Index: Integer; const AArray_Of_TransactionReferenceType: Array_Of_TransactionReferenceType);
begin
  FPaymentReferenceID := AArray_Of_TransactionReferenceType;
  FPaymentReferenceID_Specified := True;
end;

function PaymentTransactionType.PaymentReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FPaymentReferenceID_Specified;
end;

destructor RefundTransactionInfoType.Destroy;
begin
  SysUtils.FreeAndNil(FRefundTo);
  SysUtils.FreeAndNil(FRefundTime);
  SysUtils.FreeAndNil(FRefundAmount);
  SysUtils.FreeAndNil(FReferenceID);
  SysUtils.FreeAndNil(FFeeOrCreditAmount);
  inherited Destroy;
end;

procedure RefundTransactionInfoType.SetRefundStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
begin
  FRefundStatus := APaymentTransactionStatusCodeType;
  FRefundStatus_Specified := True;
end;

function RefundTransactionInfoType.RefundStatus_Specified(Index: Integer): boolean;
begin
  Result := FRefundStatus_Specified;
end;

procedure RefundTransactionInfoType.SetRefundType(Index: Integer; const ARefundSourceTypeCodeType: RefundSourceTypeCodeType);
begin
  FRefundType := ARefundSourceTypeCodeType;
  FRefundType_Specified := True;
end;

function RefundTransactionInfoType.RefundType_Specified(Index: Integer): boolean;
begin
  Result := FRefundType_Specified;
end;

procedure RefundTransactionInfoType.SetRefundTo(Index: Integer; const AUserIdentityType: UserIdentityType);
begin
  FRefundTo := AUserIdentityType;
  FRefundTo_Specified := True;
end;

function RefundTransactionInfoType.RefundTo_Specified(Index: Integer): boolean;
begin
  Result := FRefundTo_Specified;
end;

procedure RefundTransactionInfoType.SetRefundTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundTime := ATXSDateTime;
  FRefundTime_Specified := True;
end;

function RefundTransactionInfoType.RefundTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundTime_Specified;
end;

procedure RefundTransactionInfoType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function RefundTransactionInfoType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure RefundTransactionInfoType.SetReferenceID(Index: Integer; const ATransactionReferenceType: TransactionReferenceType);
begin
  FReferenceID := ATransactionReferenceType;
  FReferenceID_Specified := True;
end;

function RefundTransactionInfoType.ReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FReferenceID_Specified;
end;

procedure RefundTransactionInfoType.SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
begin
  FFeeOrCreditAmount := AAmountType;
  FFeeOrCreditAmount_Specified := True;
end;

function RefundTransactionInfoType.FeeOrCreditAmount_Specified(Index: Integer): boolean;
begin
  Result := FFeeOrCreditAmount_Specified;
end;

procedure FeatureEligibilityType.SetQualifiesForBuyItNow(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiesForBuyItNow := ABoolean;
  FQualifiesForBuyItNow_Specified := True;
end;

function FeatureEligibilityType.QualifiesForBuyItNow_Specified(Index: Integer): boolean;
begin
  Result := FQualifiesForBuyItNow_Specified;
end;

procedure FeatureEligibilityType.SetQualifiesForBuyItNowMultiple(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiesForBuyItNowMultiple := ABoolean;
  FQualifiesForBuyItNowMultiple_Specified := True;
end;

function FeatureEligibilityType.QualifiesForBuyItNowMultiple_Specified(Index: Integer): boolean;
begin
  Result := FQualifiesForBuyItNowMultiple_Specified;
end;

procedure FeatureEligibilityType.SetQualifiedForFixedPriceOneDayDuration(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiedForFixedPriceOneDayDuration := ABoolean;
  FQualifiedForFixedPriceOneDayDuration_Specified := True;
end;

function FeatureEligibilityType.QualifiedForFixedPriceOneDayDuration_Specified(Index: Integer): boolean;
begin
  Result := FQualifiedForFixedPriceOneDayDuration_Specified;
end;

procedure FeatureEligibilityType.SetQualifiesForVariations(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiesForVariations := ABoolean;
  FQualifiesForVariations_Specified := True;
end;

function FeatureEligibilityType.QualifiesForVariations_Specified(Index: Integer): boolean;
begin
  Result := FQualifiesForVariations_Specified;
end;

procedure FeatureEligibilityType.SetQualifiedForAuctionOneDayDuration(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiedForAuctionOneDayDuration := ABoolean;
  FQualifiedForAuctionOneDayDuration_Specified := True;
end;

function FeatureEligibilityType.QualifiedForAuctionOneDayDuration_Specified(Index: Integer): boolean;
begin
  Result := FQualifiedForAuctionOneDayDuration_Specified;
end;

destructor FeeType.Destroy;
begin
  SysUtils.FreeAndNil(FFee);
  SysUtils.FreeAndNil(FPromotionalDiscount);
  inherited Destroy;
end;

procedure FeeType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function FeeType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure FeeType.SetFee(Index: Integer; const AAmountType: AmountType);
begin
  FFee := AAmountType;
  FFee_Specified := True;
end;

function FeeType.Fee_Specified(Index: Integer): boolean;
begin
  Result := FFee_Specified;
end;

procedure FeeType.SetPromotionalDiscount(Index: Integer; const AAmountType: AmountType);
begin
  FPromotionalDiscount := AAmountType;
  FPromotionalDiscount_Specified := True;
end;

function FeeType.PromotionalDiscount_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalDiscount_Specified;
end;

procedure FeedbackPeriodType.SetPeriodInDays(Index: Integer; const AInteger: Integer);
begin
  FPeriodInDays := AInteger;
  FPeriodInDays_Specified := True;
end;

function FeedbackPeriodType.PeriodInDays_Specified(Index: Integer): boolean;
begin
  Result := FPeriodInDays_Specified;
end;

procedure FeedbackPeriodType.SetCount(Index: Integer; const AInteger: Integer);
begin
  FCount := AInteger;
  FCount_Specified := True;
end;

function FeedbackPeriodType.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure FeedbackRequirementsType.Setminimum(Index: Integer; const Astring: string);
begin
  Fminimum := Astring;
  Fminimum_Specified := True;
end;

function FeedbackRequirementsType.minimum_Specified(Index: Integer): boolean;
begin
  Result := Fminimum_Specified;
end;

destructor FeedbackDetailType.Destroy;
begin
  SysUtils.FreeAndNil(FCommentTime);
  SysUtils.FreeAndNil(FItemPrice);
  inherited Destroy;
end;

procedure FeedbackDetailType.SetCommentingUser(Index: Integer; const AUserIDType: UserIDType);
begin
  FCommentingUser := AUserIDType;
  FCommentingUser_Specified := True;
end;

function FeedbackDetailType.CommentingUser_Specified(Index: Integer): boolean;
begin
  Result := FCommentingUser_Specified;
end;

procedure FeedbackDetailType.SetFeedbackRatingStar(Index: Integer; const AFeedbackRatingStarCodeType: FeedbackRatingStarCodeType);
begin
  FFeedbackRatingStar := AFeedbackRatingStarCodeType;
  FFeedbackRatingStar_Specified := True;
end;

function FeedbackDetailType.FeedbackRatingStar_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackRatingStar_Specified;
end;

procedure FeedbackDetailType.SetCommentingUserScore(Index: Integer; const AInteger: Integer);
begin
  FCommentingUserScore := AInteger;
  FCommentingUserScore_Specified := True;
end;

function FeedbackDetailType.CommentingUserScore_Specified(Index: Integer): boolean;
begin
  Result := FCommentingUserScore_Specified;
end;

procedure FeedbackDetailType.SetCommentText(Index: Integer; const Astring: string);
begin
  FCommentText := Astring;
  FCommentText_Specified := True;
end;

function FeedbackDetailType.CommentText_Specified(Index: Integer): boolean;
begin
  Result := FCommentText_Specified;
end;

procedure FeedbackDetailType.SetCommentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCommentTime := ATXSDateTime;
  FCommentTime_Specified := True;
end;

function FeedbackDetailType.CommentTime_Specified(Index: Integer): boolean;
begin
  Result := FCommentTime_Specified;
end;

procedure FeedbackDetailType.SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
begin
  FCommentType := ACommentTypeCodeType;
  FCommentType_Specified := True;
end;

function FeedbackDetailType.CommentType_Specified(Index: Integer): boolean;
begin
  Result := FCommentType_Specified;
end;

procedure FeedbackDetailType.SetFeedbackResponse(Index: Integer; const Astring: string);
begin
  FFeedbackResponse := Astring;
  FFeedbackResponse_Specified := True;
end;

function FeedbackDetailType.FeedbackResponse_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackResponse_Specified;
end;

procedure FeedbackDetailType.SetFollowup(Index: Integer; const Astring: string);
begin
  FFollowup := Astring;
  FFollowup_Specified := True;
end;

function FeedbackDetailType.Followup_Specified(Index: Integer): boolean;
begin
  Result := FFollowup_Specified;
end;

procedure FeedbackDetailType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function FeedbackDetailType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure FeedbackDetailType.SetRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FRole := ATradingRoleCodeType;
  FRole_Specified := True;
end;

function FeedbackDetailType.Role_Specified(Index: Integer): boolean;
begin
  Result := FRole_Specified;
end;

procedure FeedbackDetailType.SetItemTitle(Index: Integer; const Astring: string);
begin
  FItemTitle := Astring;
  FItemTitle_Specified := True;
end;

function FeedbackDetailType.ItemTitle_Specified(Index: Integer): boolean;
begin
  Result := FItemTitle_Specified;
end;

procedure FeedbackDetailType.SetItemPrice(Index: Integer; const AAmountType: AmountType);
begin
  FItemPrice := AAmountType;
  FItemPrice_Specified := True;
end;

function FeedbackDetailType.ItemPrice_Specified(Index: Integer): boolean;
begin
  Result := FItemPrice_Specified;
end;

procedure FeedbackDetailType.SetFeedbackID(Index: Integer; const Astring: string);
begin
  FFeedbackID := Astring;
  FFeedbackID_Specified := True;
end;

function FeedbackDetailType.FeedbackID_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackID_Specified;
end;

procedure FeedbackDetailType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function FeedbackDetailType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure FeedbackDetailType.SetCommentReplaced(Index: Integer; const ABoolean: Boolean);
begin
  FCommentReplaced := ABoolean;
  FCommentReplaced_Specified := True;
end;

function FeedbackDetailType.CommentReplaced_Specified(Index: Integer): boolean;
begin
  Result := FCommentReplaced_Specified;
end;

procedure FeedbackDetailType.SetResponseReplaced(Index: Integer; const ABoolean: Boolean);
begin
  FResponseReplaced := ABoolean;
  FResponseReplaced_Specified := True;
end;

function FeedbackDetailType.ResponseReplaced_Specified(Index: Integer): boolean;
begin
  Result := FResponseReplaced_Specified;
end;

procedure FeedbackDetailType.SetFollowUpReplaced(Index: Integer; const ABoolean: Boolean);
begin
  FFollowUpReplaced := ABoolean;
  FFollowUpReplaced_Specified := True;
end;

function FeedbackDetailType.FollowUpReplaced_Specified(Index: Integer): boolean;
begin
  Result := FFollowUpReplaced_Specified;
end;

procedure FeedbackDetailType.SetCountable(Index: Integer; const ABoolean: Boolean);
begin
  FCountable := ABoolean;
  FCountable_Specified := True;
end;

function FeedbackDetailType.Countable_Specified(Index: Integer): boolean;
begin
  Result := FCountable_Specified;
end;

procedure FeedbackDetailType.SetFeedbackRevised(Index: Integer; const ABoolean: Boolean);
begin
  FFeedbackRevised := ABoolean;
  FFeedbackRevised_Specified := True;
end;

function FeedbackDetailType.FeedbackRevised_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackRevised_Specified;
end;

procedure FeedbackDetailType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function FeedbackDetailType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

destructor FeedbackSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBidRetractionFeedbackPeriodArray)-1 do
    SysUtils.FreeAndNil(FBidRetractionFeedbackPeriodArray[I]);
  System.SetLength(FBidRetractionFeedbackPeriodArray, 0);
  for I := 0 to System.Length(FNegativeFeedbackPeriodArray)-1 do
    SysUtils.FreeAndNil(FNegativeFeedbackPeriodArray[I]);
  System.SetLength(FNegativeFeedbackPeriodArray, 0);
  for I := 0 to System.Length(FNeutralFeedbackPeriodArray)-1 do
    SysUtils.FreeAndNil(FNeutralFeedbackPeriodArray[I]);
  System.SetLength(FNeutralFeedbackPeriodArray, 0);
  for I := 0 to System.Length(FPositiveFeedbackPeriodArray)-1 do
    SysUtils.FreeAndNil(FPositiveFeedbackPeriodArray[I]);
  System.SetLength(FPositiveFeedbackPeriodArray, 0);
  for I := 0 to System.Length(FTotalFeedbackPeriodArray)-1 do
    SysUtils.FreeAndNil(FTotalFeedbackPeriodArray[I]);
  System.SetLength(FTotalFeedbackPeriodArray, 0);
  for I := 0 to System.Length(FSellerRatingSummaryArray)-1 do
    SysUtils.FreeAndNil(FSellerRatingSummaryArray[I]);
  System.SetLength(FSellerRatingSummaryArray, 0);
  SysUtils.FreeAndNil(FSellerRoleMetrics);
  SysUtils.FreeAndNil(FBuyerRoleMetrics);
  inherited Destroy;
end;

procedure FeedbackSummaryType.SetBidRetractionFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
begin
  FBidRetractionFeedbackPeriodArray := AFeedbackPeriodArrayType;
  FBidRetractionFeedbackPeriodArray_Specified := True;
end;

function FeedbackSummaryType.BidRetractionFeedbackPeriodArray_Specified(Index: Integer): boolean;
begin
  Result := FBidRetractionFeedbackPeriodArray_Specified;
end;

procedure FeedbackSummaryType.SetNegativeFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
begin
  FNegativeFeedbackPeriodArray := AFeedbackPeriodArrayType;
  FNegativeFeedbackPeriodArray_Specified := True;
end;

function FeedbackSummaryType.NegativeFeedbackPeriodArray_Specified(Index: Integer): boolean;
begin
  Result := FNegativeFeedbackPeriodArray_Specified;
end;

procedure FeedbackSummaryType.SetNeutralFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
begin
  FNeutralFeedbackPeriodArray := AFeedbackPeriodArrayType;
  FNeutralFeedbackPeriodArray_Specified := True;
end;

function FeedbackSummaryType.NeutralFeedbackPeriodArray_Specified(Index: Integer): boolean;
begin
  Result := FNeutralFeedbackPeriodArray_Specified;
end;

procedure FeedbackSummaryType.SetPositiveFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
begin
  FPositiveFeedbackPeriodArray := AFeedbackPeriodArrayType;
  FPositiveFeedbackPeriodArray_Specified := True;
end;

function FeedbackSummaryType.PositiveFeedbackPeriodArray_Specified(Index: Integer): boolean;
begin
  Result := FPositiveFeedbackPeriodArray_Specified;
end;

procedure FeedbackSummaryType.SetTotalFeedbackPeriodArray(Index: Integer; const AFeedbackPeriodArrayType: FeedbackPeriodArrayType);
begin
  FTotalFeedbackPeriodArray := AFeedbackPeriodArrayType;
  FTotalFeedbackPeriodArray_Specified := True;
end;

function FeedbackSummaryType.TotalFeedbackPeriodArray_Specified(Index: Integer): boolean;
begin
  Result := FTotalFeedbackPeriodArray_Specified;
end;

procedure FeedbackSummaryType.SetNeutralCommentCountFromSuspendedUsers(Index: Integer; const AInteger: Integer);
begin
  FNeutralCommentCountFromSuspendedUsers := AInteger;
  FNeutralCommentCountFromSuspendedUsers_Specified := True;
end;

function FeedbackSummaryType.NeutralCommentCountFromSuspendedUsers_Specified(Index: Integer): boolean;
begin
  Result := FNeutralCommentCountFromSuspendedUsers_Specified;
end;

procedure FeedbackSummaryType.SetUniqueNegativeFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniqueNegativeFeedbackCount := AInteger;
  FUniqueNegativeFeedbackCount_Specified := True;
end;

function FeedbackSummaryType.UniqueNegativeFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniqueNegativeFeedbackCount_Specified;
end;

procedure FeedbackSummaryType.SetUniquePositiveFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniquePositiveFeedbackCount := AInteger;
  FUniquePositiveFeedbackCount_Specified := True;
end;

function FeedbackSummaryType.UniquePositiveFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniquePositiveFeedbackCount_Specified;
end;

procedure FeedbackSummaryType.SetUniqueNeutralFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniqueNeutralFeedbackCount := AInteger;
  FUniqueNeutralFeedbackCount_Specified := True;
end;

function FeedbackSummaryType.UniqueNeutralFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniqueNeutralFeedbackCount_Specified;
end;

procedure FeedbackSummaryType.SetSellerRatingSummaryArray(Index: Integer; const ASellerRatingSummaryArrayType: SellerRatingSummaryArrayType);
begin
  FSellerRatingSummaryArray := ASellerRatingSummaryArrayType;
  FSellerRatingSummaryArray_Specified := True;
end;

function FeedbackSummaryType.SellerRatingSummaryArray_Specified(Index: Integer): boolean;
begin
  Result := FSellerRatingSummaryArray_Specified;
end;

procedure FeedbackSummaryType.SetSellerRoleMetrics(Index: Integer; const ASellerRoleMetricsType: SellerRoleMetricsType);
begin
  FSellerRoleMetrics := ASellerRoleMetricsType;
  FSellerRoleMetrics_Specified := True;
end;

function FeedbackSummaryType.SellerRoleMetrics_Specified(Index: Integer): boolean;
begin
  Result := FSellerRoleMetrics_Specified;
end;

procedure FeedbackSummaryType.SetBuyerRoleMetrics(Index: Integer; const ABuyerRoleMetricsType: BuyerRoleMetricsType);
begin
  FBuyerRoleMetrics := ABuyerRoleMetricsType;
  FBuyerRoleMetrics_Specified := True;
end;

function FeedbackSummaryType.BuyerRoleMetrics_Specified(Index: Integer): boolean;
begin
  Result := FBuyerRoleMetrics_Specified;
end;

destructor ListingDurationDefinitionsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FListingDuration)-1 do
    SysUtils.FreeAndNil(FListingDuration[I]);
  System.SetLength(FListingDuration, 0);
  inherited Destroy;
end;

procedure ListingDurationDefinitionsType.SetVersion(Index: Integer; const AInteger: Integer);
begin
  FVersion := AInteger;
  FVersion_Specified := True;
end;

function ListingDurationDefinitionsType.Version_Specified(Index: Integer): boolean;
begin
  Result := FVersion_Specified;
end;

procedure ListingDurationDefinitionsType.SetListingDuration(Index: Integer; const AArray_Of_ListingDurationDefinitionType: Array_Of_ListingDurationDefinitionType);
begin
  FListingDuration := AArray_Of_ListingDurationDefinitionType;
  FListingDuration_Specified := True;
end;

function ListingDurationDefinitionsType.ListingDuration_Specified(Index: Integer): boolean;
begin
  Result := FListingDuration_Specified;
end;

procedure StoreCustomPageType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreCustomPageType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreCustomPageType.SetPageID(Index: Integer; const AInt64: Int64);
begin
  FPageID := AInt64;
  FPageID_Specified := True;
end;

function StoreCustomPageType.PageID_Specified(Index: Integer): boolean;
begin
  Result := FPageID_Specified;
end;

procedure StoreCustomPageType.SetURLPath(Index: Integer; const Astring: string);
begin
  FURLPath := Astring;
  FURLPath_Specified := True;
end;

function StoreCustomPageType.URLPath_Specified(Index: Integer): boolean;
begin
  Result := FURLPath_Specified;
end;

procedure StoreCustomPageType.SetURL(Index: Integer; const Astring: string);
begin
  FURL := Astring;
  FURL_Specified := True;
end;

function StoreCustomPageType.URL_Specified(Index: Integer): boolean;
begin
  Result := FURL_Specified;
end;

procedure StoreCustomPageType.SetStatus(Index: Integer; const AStoreCustomPageStatusCodeType: StoreCustomPageStatusCodeType);
begin
  FStatus := AStoreCustomPageStatusCodeType;
  FStatus_Specified := True;
end;

function StoreCustomPageType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure StoreCustomPageType.SetContent(Index: Integer; const Astring: string);
begin
  FContent := Astring;
  FContent_Specified := True;
end;

function StoreCustomPageType.Content_Specified(Index: Integer): boolean;
begin
  Result := FContent_Specified;
end;

procedure StoreCustomPageType.SetLeftNav(Index: Integer; const ABoolean: Boolean);
begin
  FLeftNav := ABoolean;
  FLeftNav_Specified := True;
end;

function StoreCustomPageType.LeftNav_Specified(Index: Integer): boolean;
begin
  Result := FLeftNav_Specified;
end;

procedure StoreCustomPageType.SetPreviewEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPreviewEnabled := ABoolean;
  FPreviewEnabled_Specified := True;
end;

function StoreCustomPageType.PreviewEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPreviewEnabled_Specified;
end;

procedure StoreCustomPageType.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function StoreCustomPageType.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

destructor StoreType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCustomCategories)-1 do
    SysUtils.FreeAndNil(FCustomCategories[I]);
  System.SetLength(FCustomCategories, 0);
  SysUtils.FreeAndNil(FLogo);
  SysUtils.FreeAndNil(FTheme);
  SysUtils.FreeAndNil(FCustomListingHeader);
  SysUtils.FreeAndNil(FLastOpenedTime);
  inherited Destroy;
end;

procedure StoreType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreType.SetURLPath(Index: Integer; const Astring: string);
begin
  FURLPath := Astring;
  FURLPath_Specified := True;
end;

function StoreType.URLPath_Specified(Index: Integer): boolean;
begin
  Result := FURLPath_Specified;
end;

procedure StoreType.SetURL(Index: Integer; const Astring: string);
begin
  FURL := Astring;
  FURL_Specified := True;
end;

function StoreType.URL_Specified(Index: Integer): boolean;
begin
  Result := FURL_Specified;
end;

procedure StoreType.SetSubscriptionLevel(Index: Integer; const AStoreSubscriptionLevelCodeType: StoreSubscriptionLevelCodeType);
begin
  FSubscriptionLevel := AStoreSubscriptionLevelCodeType;
  FSubscriptionLevel_Specified := True;
end;

function StoreType.SubscriptionLevel_Specified(Index: Integer): boolean;
begin
  Result := FSubscriptionLevel_Specified;
end;

procedure StoreType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function StoreType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure StoreType.SetLogo(Index: Integer; const AStoreLogoType: StoreLogoType);
begin
  FLogo := AStoreLogoType;
  FLogo_Specified := True;
end;

function StoreType.Logo_Specified(Index: Integer): boolean;
begin
  Result := FLogo_Specified;
end;

procedure StoreType.SetTheme(Index: Integer; const AStoreThemeType: StoreThemeType);
begin
  FTheme := AStoreThemeType;
  FTheme_Specified := True;
end;

function StoreType.Theme_Specified(Index: Integer): boolean;
begin
  Result := FTheme_Specified;
end;

procedure StoreType.SetHeaderStyle(Index: Integer; const AStoreHeaderStyleCodeType: StoreHeaderStyleCodeType);
begin
  FHeaderStyle := AStoreHeaderStyleCodeType;
  FHeaderStyle_Specified := True;
end;

function StoreType.HeaderStyle_Specified(Index: Integer): boolean;
begin
  Result := FHeaderStyle_Specified;
end;

procedure StoreType.SetHomePage(Index: Integer; const AInt64: Int64);
begin
  FHomePage := AInt64;
  FHomePage_Specified := True;
end;

function StoreType.HomePage_Specified(Index: Integer): boolean;
begin
  Result := FHomePage_Specified;
end;

procedure StoreType.SetItemListLayout(Index: Integer; const AStoreItemListLayoutCodeType: StoreItemListLayoutCodeType);
begin
  FItemListLayout := AStoreItemListLayoutCodeType;
  FItemListLayout_Specified := True;
end;

function StoreType.ItemListLayout_Specified(Index: Integer): boolean;
begin
  Result := FItemListLayout_Specified;
end;

procedure StoreType.SetItemListSortOrder(Index: Integer; const AStoreItemListSortOrderCodeType: StoreItemListSortOrderCodeType);
begin
  FItemListSortOrder := AStoreItemListSortOrderCodeType;
  FItemListSortOrder_Specified := True;
end;

function StoreType.ItemListSortOrder_Specified(Index: Integer): boolean;
begin
  Result := FItemListSortOrder_Specified;
end;

procedure StoreType.SetCustomHeaderLayout(Index: Integer; const AStoreCustomHeaderLayoutCodeType: StoreCustomHeaderLayoutCodeType);
begin
  FCustomHeaderLayout := AStoreCustomHeaderLayoutCodeType;
  FCustomHeaderLayout_Specified := True;
end;

function StoreType.CustomHeaderLayout_Specified(Index: Integer): boolean;
begin
  Result := FCustomHeaderLayout_Specified;
end;

procedure StoreType.SetCustomHeader(Index: Integer; const Astring: string);
begin
  FCustomHeader := Astring;
  FCustomHeader_Specified := True;
end;

function StoreType.CustomHeader_Specified(Index: Integer): boolean;
begin
  Result := FCustomHeader_Specified;
end;

procedure StoreType.SetExportListings(Index: Integer; const ABoolean: Boolean);
begin
  FExportListings := ABoolean;
  FExportListings_Specified := True;
end;

function StoreType.ExportListings_Specified(Index: Integer): boolean;
begin
  Result := FExportListings_Specified;
end;

procedure StoreType.SetCustomCategories(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
begin
  FCustomCategories := AStoreCustomCategoryArrayType;
  FCustomCategories_Specified := True;
end;

function StoreType.CustomCategories_Specified(Index: Integer): boolean;
begin
  Result := FCustomCategories_Specified;
end;

procedure StoreType.SetCustomListingHeader(Index: Integer; const AStoreCustomListingHeaderType: StoreCustomListingHeaderType);
begin
  FCustomListingHeader := AStoreCustomListingHeaderType;
  FCustomListingHeader_Specified := True;
end;

function StoreType.CustomListingHeader_Specified(Index: Integer): boolean;
begin
  Result := FCustomListingHeader_Specified;
end;

procedure StoreType.SetMerchDisplay(Index: Integer; const AMerchDisplayCodeType: MerchDisplayCodeType);
begin
  FMerchDisplay := AMerchDisplayCodeType;
  FMerchDisplay_Specified := True;
end;

function StoreType.MerchDisplay_Specified(Index: Integer): boolean;
begin
  Result := FMerchDisplay_Specified;
end;

procedure StoreType.SetLastOpenedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastOpenedTime := ATXSDateTime;
  FLastOpenedTime_Specified := True;
end;

function StoreType.LastOpenedTime_Specified(Index: Integer): boolean;
begin
  Result := FLastOpenedTime_Specified;
end;

procedure StoreType.SetTitleWithCompatibility(Index: Integer; const ABoolean: Boolean);
begin
  FTitleWithCompatibility := ABoolean;
  FTitleWithCompatibility_Specified := True;
end;

function StoreType.TitleWithCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FTitleWithCompatibility_Specified;
end;

destructor StoreCustomCategoryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FChildCategory)-1 do
    SysUtils.FreeAndNil(FChildCategory[I]);
  System.SetLength(FChildCategory, 0);
  inherited Destroy;
end;

procedure StoreCustomCategoryType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function StoreCustomCategoryType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure StoreCustomCategoryType.SetOrder(Index: Integer; const AInteger: Integer);
begin
  FOrder := AInteger;
  FOrder_Specified := True;
end;

function StoreCustomCategoryType.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

procedure StoreCustomCategoryType.SetChildCategory(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
begin
  FChildCategory := AStoreCustomCategoryArrayType;
  FChildCategory_Specified := True;
end;

function StoreCustomCategoryType.ChildCategory_Specified(Index: Integer): boolean;
begin
  Result := FChildCategory_Specified;
end;

procedure ExpressItemRequirementsType.SetSellerExpressEligible(Index: Integer; const ABoolean: Boolean);
begin
  FSellerExpressEligible := ABoolean;
  FSellerExpressEligible_Specified := True;
end;

function ExpressItemRequirementsType.SellerExpressEligible_Specified(Index: Integer): boolean;
begin
  Result := FSellerExpressEligible_Specified;
end;

procedure ExpressItemRequirementsType.SetExpressOptOut(Index: Integer; const ABoolean: Boolean);
begin
  FExpressOptOut := ABoolean;
  FExpressOptOut_Specified := True;
end;

function ExpressItemRequirementsType.ExpressOptOut_Specified(Index: Integer): boolean;
begin
  Result := FExpressOptOut_Specified;
end;

procedure ExpressItemRequirementsType.SetExpressApproved(Index: Integer; const ABoolean: Boolean);
begin
  FExpressApproved := ABoolean;
  FExpressApproved_Specified := True;
end;

function ExpressItemRequirementsType.ExpressApproved_Specified(Index: Integer): boolean;
begin
  Result := FExpressApproved_Specified;
end;

procedure ExpressItemRequirementsType.SetExpressEligibleListingType(Index: Integer; const ABoolean: Boolean);
begin
  FExpressEligibleListingType := ABoolean;
  FExpressEligibleListingType_Specified := True;
end;

function ExpressItemRequirementsType.ExpressEligibleListingType_Specified(Index: Integer): boolean;
begin
  Result := FExpressEligibleListingType_Specified;
end;

procedure ExpressItemRequirementsType.SetExpressEnabledCategory(Index: Integer; const ABoolean: Boolean);
begin
  FExpressEnabledCategory := ABoolean;
  FExpressEnabledCategory_Specified := True;
end;

function ExpressItemRequirementsType.ExpressEnabledCategory_Specified(Index: Integer): boolean;
begin
  Result := FExpressEnabledCategory_Specified;
end;

procedure ExpressItemRequirementsType.SetEligiblePayPalAccount(Index: Integer; const ABoolean: Boolean);
begin
  FEligiblePayPalAccount := ABoolean;
  FEligiblePayPalAccount_Specified := True;
end;

function ExpressItemRequirementsType.EligiblePayPalAccount_Specified(Index: Integer): boolean;
begin
  Result := FEligiblePayPalAccount_Specified;
end;

procedure ExpressItemRequirementsType.SetDomesticShippingCost(Index: Integer; const ABoolean: Boolean);
begin
  FDomesticShippingCost := ABoolean;
  FDomesticShippingCost_Specified := True;
end;

function ExpressItemRequirementsType.DomesticShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FDomesticShippingCost_Specified;
end;

procedure ExpressItemRequirementsType.SetEligibleReturnPolicy(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleReturnPolicy := ABoolean;
  FEligibleReturnPolicy_Specified := True;
end;

function ExpressItemRequirementsType.EligibleReturnPolicy_Specified(Index: Integer): boolean;
begin
  Result := FEligibleReturnPolicy_Specified;
end;

procedure ExpressItemRequirementsType.SetPicture(Index: Integer; const ABoolean: Boolean);
begin
  FPicture := ABoolean;
  FPicture_Specified := True;
end;

function ExpressItemRequirementsType.Picture_Specified(Index: Integer): boolean;
begin
  Result := FPicture_Specified;
end;

procedure ExpressItemRequirementsType.SetEligibleItemCondition(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleItemCondition := ABoolean;
  FEligibleItemCondition_Specified := True;
end;

function ExpressItemRequirementsType.EligibleItemCondition_Specified(Index: Integer): boolean;
begin
  Result := FEligibleItemCondition_Specified;
end;

procedure ExpressItemRequirementsType.SetPriceAboveMinimum(Index: Integer; const ABoolean: Boolean);
begin
  FPriceAboveMinimum := ABoolean;
  FPriceAboveMinimum_Specified := True;
end;

function ExpressItemRequirementsType.PriceAboveMinimum_Specified(Index: Integer): boolean;
begin
  Result := FPriceAboveMinimum_Specified;
end;

procedure ExpressItemRequirementsType.SetPriceBelowMaximum(Index: Integer; const ABoolean: Boolean);
begin
  FPriceBelowMaximum := ABoolean;
  FPriceBelowMaximum_Specified := True;
end;

function ExpressItemRequirementsType.PriceBelowMaximum_Specified(Index: Integer): boolean;
begin
  Result := FPriceBelowMaximum_Specified;
end;

procedure ExpressItemRequirementsType.SetEligibleCheckout(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleCheckout := ABoolean;
  FEligibleCheckout_Specified := True;
end;

function ExpressItemRequirementsType.EligibleCheckout_Specified(Index: Integer): boolean;
begin
  Result := FEligibleCheckout_Specified;
end;

procedure ExpressItemRequirementsType.SetNoPreapprovedBidderList(Index: Integer; const ABoolean: Boolean);
begin
  FNoPreapprovedBidderList := ABoolean;
  FNoPreapprovedBidderList_Specified := True;
end;

function ExpressItemRequirementsType.NoPreapprovedBidderList_Specified(Index: Integer): boolean;
begin
  Result := FNoPreapprovedBidderList_Specified;
end;

procedure ExpressItemRequirementsType.SetNoCharity(Index: Integer; const ABoolean: Boolean);
begin
  FNoCharity := ABoolean;
  FNoCharity_Specified := True;
end;

function ExpressItemRequirementsType.NoCharity_Specified(Index: Integer): boolean;
begin
  Result := FNoCharity_Specified;
end;

procedure ExpressItemRequirementsType.SetCombinedShippingDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FCombinedShippingDiscount := ABoolean;
  FCombinedShippingDiscount_Specified := True;
end;

function ExpressItemRequirementsType.CombinedShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCombinedShippingDiscount_Specified;
end;

procedure ExpressItemRequirementsType.SetShipFromEligibleCountry(Index: Integer; const ABoolean: Boolean);
begin
  FShipFromEligibleCountry := ABoolean;
  FShipFromEligibleCountry_Specified := True;
end;

function ExpressItemRequirementsType.ShipFromEligibleCountry_Specified(Index: Integer): boolean;
begin
  Result := FShipFromEligibleCountry_Specified;
end;

procedure ExpressItemRequirementsType.SetPayPalAccountAcceptsUnconfirmedAddress(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalAccountAcceptsUnconfirmedAddress := ABoolean;
  FPayPalAccountAcceptsUnconfirmedAddress_Specified := True;
end;

function ExpressItemRequirementsType.PayPalAccountAcceptsUnconfirmedAddress_Specified(Index: Integer): boolean;
begin
  Result := FPayPalAccountAcceptsUnconfirmedAddress_Specified;
end;

destructor SiteHostedPictureDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPictureSetMember)-1 do
    SysUtils.FreeAndNil(FPictureSetMember[I]);
  System.SetLength(FPictureSetMember, 0);
  SysUtils.FreeAndNil(FUseByDate);
  inherited Destroy;
end;

procedure SiteHostedPictureDetailsType.SetPictureName(Index: Integer; const Astring: string);
begin
  FPictureName := Astring;
  FPictureName_Specified := True;
end;

function SiteHostedPictureDetailsType.PictureName_Specified(Index: Integer): boolean;
begin
  Result := FPictureName_Specified;
end;

procedure SiteHostedPictureDetailsType.SetPictureSet(Index: Integer; const APictureSetCodeType: PictureSetCodeType);
begin
  FPictureSet := APictureSetCodeType;
  FPictureSet_Specified := True;
end;

function SiteHostedPictureDetailsType.PictureSet_Specified(Index: Integer): boolean;
begin
  Result := FPictureSet_Specified;
end;

procedure SiteHostedPictureDetailsType.SetPictureFormat(Index: Integer; const APictureFormatCodeType: PictureFormatCodeType);
begin
  FPictureFormat := APictureFormatCodeType;
  FPictureFormat_Specified := True;
end;

function SiteHostedPictureDetailsType.PictureFormat_Specified(Index: Integer): boolean;
begin
  Result := FPictureFormat_Specified;
end;

procedure SiteHostedPictureDetailsType.SetFullURL(Index: Integer; const Astring: string);
begin
  FFullURL := Astring;
  FFullURL_Specified := True;
end;

function SiteHostedPictureDetailsType.FullURL_Specified(Index: Integer): boolean;
begin
  Result := FFullURL_Specified;
end;

procedure SiteHostedPictureDetailsType.SetBaseURL(Index: Integer; const Astring: string);
begin
  FBaseURL := Astring;
  FBaseURL_Specified := True;
end;

function SiteHostedPictureDetailsType.BaseURL_Specified(Index: Integer): boolean;
begin
  Result := FBaseURL_Specified;
end;

procedure SiteHostedPictureDetailsType.SetPictureSetMember(Index: Integer; const AArray_Of_PictureSetMemberType: Array_Of_PictureSetMemberType);
begin
  FPictureSetMember := AArray_Of_PictureSetMemberType;
  FPictureSetMember_Specified := True;
end;

function SiteHostedPictureDetailsType.PictureSetMember_Specified(Index: Integer): boolean;
begin
  Result := FPictureSetMember_Specified;
end;

procedure SiteHostedPictureDetailsType.SetExternalPictureURL(Index: Integer; const Astring: string);
begin
  FExternalPictureURL := Astring;
  FExternalPictureURL_Specified := True;
end;

function SiteHostedPictureDetailsType.ExternalPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FExternalPictureURL_Specified;
end;

procedure SiteHostedPictureDetailsType.SetUseByDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUseByDate := ATXSDateTime;
  FUseByDate_Specified := True;
end;

function SiteHostedPictureDetailsType.UseByDate_Specified(Index: Integer): boolean;
begin
  Result := FUseByDate_Specified;
end;

destructor InventoryFeesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFee)-1 do
    SysUtils.FreeAndNil(FFee[I]);
  System.SetLength(FFee, 0);
  inherited Destroy;
end;

procedure InventoryFeesType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function InventoryFeesType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure InventoryFeesType.SetFee(Index: Integer; const AFeesType: FeesType);
begin
  FFee := AFeesType;
  FFee_Specified := True;
end;

function InventoryFeesType.Fee_Specified(Index: Integer): boolean;
begin
  Result := FFee_Specified;
end;

procedure DeliveryStatusType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function DeliveryStatusType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

destructor DigitalDeliverySelectedType.Destroy;
begin
  SysUtils.FreeAndNil(FDeliveryStatus);
  SysUtils.FreeAndNil(FDeliveryDetails);
  inherited Destroy;
end;

procedure DigitalDeliverySelectedType.SetDeliveryMethod(Index: Integer; const Astring: string);
begin
  FDeliveryMethod := Astring;
  FDeliveryMethod_Specified := True;
end;

function DigitalDeliverySelectedType.DeliveryMethod_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryMethod_Specified;
end;

procedure DigitalDeliverySelectedType.SetDeliveryStatus(Index: Integer; const ADeliveryStatusType: DeliveryStatusType);
begin
  FDeliveryStatus := ADeliveryStatusType;
  FDeliveryStatus_Specified := True;
end;

function DigitalDeliverySelectedType.DeliveryStatus_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryStatus_Specified;
end;

procedure DigitalDeliverySelectedType.SetDeliveryDetails(Index: Integer; const ADeliveryDetailsType: DeliveryDetailsType);
begin
  FDeliveryDetails := ADeliveryDetailsType;
  FDeliveryDetails_Specified := True;
end;

function DigitalDeliverySelectedType.DeliveryDetails_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryDetails_Specified;
end;

destructor ShippingDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FShippingServiceOptions)-1 do
    SysUtils.FreeAndNil(FShippingServiceOptions[I]);
  System.SetLength(FShippingServiceOptions, 0);
  for I := 0 to System.Length(FInternationalShippingServiceOption)-1 do
    SysUtils.FreeAndNil(FInternationalShippingServiceOption[I]);
  System.SetLength(FInternationalShippingServiceOption, 0);
  for I := 0 to System.Length(FTaxTable)-1 do
    SysUtils.FreeAndNil(FTaxTable[I]);
  System.SetLength(FTaxTable, 0);
  for I := 0 to System.Length(FShipmentTrackingDetails)-1 do
    SysUtils.FreeAndNil(FShipmentTrackingDetails[I]);
  System.SetLength(FShipmentTrackingDetails, 0);
  SysUtils.FreeAndNil(FCalculatedShippingRate);
  SysUtils.FreeAndNil(FSalesTax);
  SysUtils.FreeAndNil(FDefaultShippingCost);
  SysUtils.FreeAndNil(FFlatShippingDiscount);
  SysUtils.FreeAndNil(FCalculatedShippingDiscount);
  SysUtils.FreeAndNil(FInternationalFlatShippingDiscount);
  SysUtils.FreeAndNil(FInternationalCalculatedShippingDiscount);
  SysUtils.FreeAndNil(FPromotionalShippingDiscountDetails);
  SysUtils.FreeAndNil(FCODCost);
  SysUtils.FreeAndNil(FRateTableDetails);
  inherited Destroy;
end;

procedure ShippingDetailsType.SetAllowPaymentEdit(Index: Integer; const ABoolean: Boolean);
begin
  FAllowPaymentEdit := ABoolean;
  FAllowPaymentEdit_Specified := True;
end;

function ShippingDetailsType.AllowPaymentEdit_Specified(Index: Integer): boolean;
begin
  Result := FAllowPaymentEdit_Specified;
end;

procedure ShippingDetailsType.SetApplyShippingDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FApplyShippingDiscount := ABoolean;
  FApplyShippingDiscount_Specified := True;
end;

function ShippingDetailsType.ApplyShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FApplyShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetGlobalShipping(Index: Integer; const ABoolean: Boolean);
begin
  FGlobalShipping := ABoolean;
  FGlobalShipping_Specified := True;
end;

function ShippingDetailsType.GlobalShipping_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShipping_Specified;
end;

procedure ShippingDetailsType.SetCalculatedShippingRate(Index: Integer; const ACalculatedShippingRateType: CalculatedShippingRateType);
begin
  FCalculatedShippingRate := ACalculatedShippingRateType;
  FCalculatedShippingRate_Specified := True;
end;

function ShippingDetailsType.CalculatedShippingRate_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingRate_Specified;
end;

procedure ShippingDetailsType.SetChangePaymentInstructions(Index: Integer; const ABoolean: Boolean);
begin
  FChangePaymentInstructions := ABoolean;
  FChangePaymentInstructions_Specified := True;
end;

function ShippingDetailsType.ChangePaymentInstructions_Specified(Index: Integer): boolean;
begin
  Result := FChangePaymentInstructions_Specified;
end;

procedure ShippingDetailsType.SetInsuranceWanted(Index: Integer; const ABoolean: Boolean);
begin
  FInsuranceWanted := ABoolean;
  FInsuranceWanted_Specified := True;
end;

function ShippingDetailsType.InsuranceWanted_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceWanted_Specified;
end;

procedure ShippingDetailsType.SetPaymentEdited(Index: Integer; const ABoolean: Boolean);
begin
  FPaymentEdited := ABoolean;
  FPaymentEdited_Specified := True;
end;

function ShippingDetailsType.PaymentEdited_Specified(Index: Integer): boolean;
begin
  Result := FPaymentEdited_Specified;
end;

procedure ShippingDetailsType.SetPaymentInstructions(Index: Integer; const Astring: string);
begin
  FPaymentInstructions := Astring;
  FPaymentInstructions_Specified := True;
end;

function ShippingDetailsType.PaymentInstructions_Specified(Index: Integer): boolean;
begin
  Result := FPaymentInstructions_Specified;
end;

procedure ShippingDetailsType.SetSalesTax(Index: Integer; const ASalesTaxType: SalesTaxType);
begin
  FSalesTax := ASalesTaxType;
  FSalesTax_Specified := True;
end;

function ShippingDetailsType.SalesTax_Specified(Index: Integer): boolean;
begin
  Result := FSalesTax_Specified;
end;

procedure ShippingDetailsType.SetShippingRateErrorMessage(Index: Integer; const Astring: string);
begin
  FShippingRateErrorMessage := Astring;
  FShippingRateErrorMessage_Specified := True;
end;

function ShippingDetailsType.ShippingRateErrorMessage_Specified(Index: Integer): boolean;
begin
  Result := FShippingRateErrorMessage_Specified;
end;

procedure ShippingDetailsType.SetShippingRateType(Index: Integer; const AShippingRateTypeCodeType: ShippingRateTypeCodeType);
begin
  FShippingRateType := AShippingRateTypeCodeType;
  FShippingRateType_Specified := True;
end;

function ShippingDetailsType.ShippingRateType_Specified(Index: Integer): boolean;
begin
  Result := FShippingRateType_Specified;
end;

procedure ShippingDetailsType.SetShippingServiceOptions(Index: Integer; const AArray_Of_ShippingServiceOptionsType: Array_Of_ShippingServiceOptionsType);
begin
  FShippingServiceOptions := AArray_Of_ShippingServiceOptionsType;
  FShippingServiceOptions_Specified := True;
end;

function ShippingDetailsType.ShippingServiceOptions_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceOptions_Specified;
end;

procedure ShippingDetailsType.SetInternationalShippingServiceOption(Index: Integer; const AArray_Of_InternationalShippingServiceOptionsType: Array_Of_InternationalShippingServiceOptionsType);
begin
  FInternationalShippingServiceOption := AArray_Of_InternationalShippingServiceOptionsType;
  FInternationalShippingServiceOption_Specified := True;
end;

function ShippingDetailsType.InternationalShippingServiceOption_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingServiceOption_Specified;
end;

procedure ShippingDetailsType.SetShippingType(Index: Integer; const AShippingTypeCodeType: ShippingTypeCodeType);
begin
  FShippingType := AShippingTypeCodeType;
  FShippingType_Specified := True;
end;

function ShippingDetailsType.ShippingType_Specified(Index: Integer): boolean;
begin
  Result := FShippingType_Specified;
end;

procedure ShippingDetailsType.SetSellingManagerSalesRecordNumber(Index: Integer; const AInteger: Integer);
begin
  FSellingManagerSalesRecordNumber := AInteger;
  FSellingManagerSalesRecordNumber_Specified := True;
end;

function ShippingDetailsType.SellingManagerSalesRecordNumber_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerSalesRecordNumber_Specified;
end;

procedure ShippingDetailsType.SetThirdPartyCheckout(Index: Integer; const ABoolean: Boolean);
begin
  FThirdPartyCheckout := ABoolean;
  FThirdPartyCheckout_Specified := True;
end;

function ShippingDetailsType.ThirdPartyCheckout_Specified(Index: Integer): boolean;
begin
  Result := FThirdPartyCheckout_Specified;
end;

procedure ShippingDetailsType.SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
begin
  FTaxTable := ATaxTableType;
  FTaxTable_Specified := True;
end;

function ShippingDetailsType.TaxTable_Specified(Index: Integer): boolean;
begin
  Result := FTaxTable_Specified;
end;

procedure ShippingDetailsType.SetGetItFast(Index: Integer; const ABoolean: Boolean);
begin
  FGetItFast := ABoolean;
  FGetItFast_Specified := True;
end;

function ShippingDetailsType.GetItFast_Specified(Index: Integer): boolean;
begin
  Result := FGetItFast_Specified;
end;

procedure ShippingDetailsType.SetShippingServiceUsed(Index: Integer; const Astring: string);
begin
  FShippingServiceUsed := Astring;
  FShippingServiceUsed_Specified := True;
end;

function ShippingDetailsType.ShippingServiceUsed_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceUsed_Specified;
end;

procedure ShippingDetailsType.SetDefaultShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FDefaultShippingCost := AAmountType;
  FDefaultShippingCost_Specified := True;
end;

function ShippingDetailsType.DefaultShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FDefaultShippingCost_Specified;
end;

procedure ShippingDetailsType.SetShippingDiscountProfileID(Index: Integer; const Astring: string);
begin
  FShippingDiscountProfileID := Astring;
  FShippingDiscountProfileID_Specified := True;
end;

function ShippingDetailsType.ShippingDiscountProfileID_Specified(Index: Integer): boolean;
begin
  Result := FShippingDiscountProfileID_Specified;
end;

procedure ShippingDetailsType.SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
begin
  FFlatShippingDiscount := AFlatShippingDiscountType;
  FFlatShippingDiscount_Specified := True;
end;

function ShippingDetailsType.FlatShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FFlatShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
begin
  FCalculatedShippingDiscount := ACalculatedShippingDiscountType;
  FCalculatedShippingDiscount_Specified := True;
end;

function ShippingDetailsType.CalculatedShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FPromotionalShippingDiscount := ABoolean;
  FPromotionalShippingDiscount_Specified := True;
end;

function ShippingDetailsType.PromotionalShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetInternationalShippingDiscountProfileID(Index: Integer; const Astring: string);
begin
  FInternationalShippingDiscountProfileID := Astring;
  FInternationalShippingDiscountProfileID_Specified := True;
end;

function ShippingDetailsType.InternationalShippingDiscountProfileID_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingDiscountProfileID_Specified;
end;

procedure ShippingDetailsType.SetInternationalFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
begin
  FInternationalFlatShippingDiscount := AFlatShippingDiscountType;
  FInternationalFlatShippingDiscount_Specified := True;
end;

function ShippingDetailsType.InternationalFlatShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FInternationalFlatShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetInternationalCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
begin
  FInternationalCalculatedShippingDiscount := ACalculatedShippingDiscountType;
  FInternationalCalculatedShippingDiscount_Specified := True;
end;

function ShippingDetailsType.InternationalCalculatedShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FInternationalCalculatedShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetInternationalPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FInternationalPromotionalShippingDiscount := ABoolean;
  FInternationalPromotionalShippingDiscount_Specified := True;
end;

function ShippingDetailsType.InternationalPromotionalShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FInternationalPromotionalShippingDiscount_Specified;
end;

procedure ShippingDetailsType.SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
begin
  FPromotionalShippingDiscountDetails := APromotionalShippingDiscountDetailsType;
  FPromotionalShippingDiscountDetails_Specified := True;
end;

function ShippingDetailsType.PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalShippingDiscountDetails_Specified;
end;

procedure ShippingDetailsType.SetCODCost(Index: Integer; const AAmountType: AmountType);
begin
  FCODCost := AAmountType;
  FCODCost_Specified := True;
end;

function ShippingDetailsType.CODCost_Specified(Index: Integer): boolean;
begin
  Result := FCODCost_Specified;
end;

procedure ShippingDetailsType.SetExcludeShipToLocation(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FExcludeShipToLocation := ASellerExcludeShipToLocationPreferencesType;
  FExcludeShipToLocation_Specified := True;
end;

function ShippingDetailsType.ExcludeShipToLocation_Specified(Index: Integer): boolean;
begin
  Result := FExcludeShipToLocation_Specified;
end;

procedure ShippingDetailsType.SetSellerExcludeShipToLocationsPreference(Index: Integer; const ABoolean: Boolean);
begin
  FSellerExcludeShipToLocationsPreference := ABoolean;
  FSellerExcludeShipToLocationsPreference_Specified := True;
end;

function ShippingDetailsType.SellerExcludeShipToLocationsPreference_Specified(Index: Integer): boolean;
begin
  Result := FSellerExcludeShipToLocationsPreference_Specified;
end;

procedure ShippingDetailsType.SetShipmentTrackingDetails(Index: Integer; const AArray_Of_ShipmentTrackingDetailsType: Array_Of_ShipmentTrackingDetailsType);
begin
  FShipmentTrackingDetails := AArray_Of_ShipmentTrackingDetailsType;
  FShipmentTrackingDetails_Specified := True;
end;

function ShippingDetailsType.ShipmentTrackingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShipmentTrackingDetails_Specified;
end;

procedure ShippingDetailsType.SetRateTableDetails(Index: Integer; const ARateTableDetailsType: RateTableDetailsType);
begin
  FRateTableDetails := ARateTableDetailsType;
  FRateTableDetails_Specified := True;
end;

function ShippingDetailsType.RateTableDetails_Specified(Index: Integer): boolean;
begin
  Result := FRateTableDetails_Specified;
end;

destructor ShipmentType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemTransactionID)-1 do
    SysUtils.FreeAndNil(FItemTransactionID[I]);
  System.SetLength(FItemTransactionID, 0);
  for I := 0 to System.Length(FShipmentTrackingDetails)-1 do
    SysUtils.FreeAndNil(FShipmentTrackingDetails[I]);
  System.SetLength(FShipmentTrackingDetails, 0);
  for I := 0 to System.Length(FShipmentLineItem)-1 do
    SysUtils.FreeAndNil(FShipmentLineItem[I]);
  System.SetLength(FShipmentLineItem, 0);
  SysUtils.FreeAndNil(FEstimatedDeliveryDate);
  SysUtils.FreeAndNil(FInsuredValue);
  SysUtils.FreeAndNil(FPackageDepth);
  SysUtils.FreeAndNil(FPackageLength);
  SysUtils.FreeAndNil(FPackageWidth);
  SysUtils.FreeAndNil(FPostageTotal);
  SysUtils.FreeAndNil(FPrintedTime);
  SysUtils.FreeAndNil(FShipFromAddress);
  SysUtils.FreeAndNil(FShippingAddress);
  SysUtils.FreeAndNil(FWeightMajor);
  SysUtils.FreeAndNil(FWeightMinor);
  SysUtils.FreeAndNil(FDeliveryDate);
  SysUtils.FreeAndNil(FRefundGrantedTime);
  SysUtils.FreeAndNil(FRefundRequestedTime);
  SysUtils.FreeAndNil(FShippedTime);
  inherited Destroy;
end;

procedure ShipmentType.SetEstimatedDeliveryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEstimatedDeliveryDate := ATXSDateTime;
  FEstimatedDeliveryDate_Specified := True;
end;

function ShipmentType.EstimatedDeliveryDate_Specified(Index: Integer): boolean;
begin
  Result := FEstimatedDeliveryDate_Specified;
end;

procedure ShipmentType.SetInsuredValue(Index: Integer; const AAmountType: AmountType);
begin
  FInsuredValue := AAmountType;
  FInsuredValue_Specified := True;
end;

function ShipmentType.InsuredValue_Specified(Index: Integer): boolean;
begin
  Result := FInsuredValue_Specified;
end;

procedure ShipmentType.SetPackageDepth(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageDepth := AMeasureType;
  FPackageDepth_Specified := True;
end;

function ShipmentType.PackageDepth_Specified(Index: Integer): boolean;
begin
  Result := FPackageDepth_Specified;
end;

procedure ShipmentType.SetPackageLength(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageLength := AMeasureType;
  FPackageLength_Specified := True;
end;

function ShipmentType.PackageLength_Specified(Index: Integer): boolean;
begin
  Result := FPackageLength_Specified;
end;

procedure ShipmentType.SetPackageWidth(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageWidth := AMeasureType;
  FPackageWidth_Specified := True;
end;

function ShipmentType.PackageWidth_Specified(Index: Integer): boolean;
begin
  Result := FPackageWidth_Specified;
end;

procedure ShipmentType.SetPayPalShipmentID(Index: Integer; const Astring: string);
begin
  FPayPalShipmentID := Astring;
  FPayPalShipmentID_Specified := True;
end;

function ShipmentType.PayPalShipmentID_Specified(Index: Integer): boolean;
begin
  Result := FPayPalShipmentID_Specified;
end;

procedure ShipmentType.SetShipmentID(Index: Integer; const AInt64: Int64);
begin
  FShipmentID := AInt64;
  FShipmentID_Specified := True;
end;

function ShipmentType.ShipmentID_Specified(Index: Integer): boolean;
begin
  Result := FShipmentID_Specified;
end;

procedure ShipmentType.SetPostageTotal(Index: Integer; const AAmountType: AmountType);
begin
  FPostageTotal := AAmountType;
  FPostageTotal_Specified := True;
end;

function ShipmentType.PostageTotal_Specified(Index: Integer): boolean;
begin
  Result := FPostageTotal_Specified;
end;

procedure ShipmentType.SetPrintedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPrintedTime := ATXSDateTime;
  FPrintedTime_Specified := True;
end;

function ShipmentType.PrintedTime_Specified(Index: Integer): boolean;
begin
  Result := FPrintedTime_Specified;
end;

procedure ShipmentType.SetShipFromAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShipFromAddress := AAddressType;
  FShipFromAddress_Specified := True;
end;

function ShipmentType.ShipFromAddress_Specified(Index: Integer): boolean;
begin
  Result := FShipFromAddress_Specified;
end;

procedure ShipmentType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function ShipmentType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure ShipmentType.SetShippingCarrierUsed(Index: Integer; const Astring: string);
begin
  FShippingCarrierUsed := Astring;
  FShippingCarrierUsed_Specified := True;
end;

function ShipmentType.ShippingCarrierUsed_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrierUsed_Specified;
end;

procedure ShipmentType.SetShippingFeature(Index: Integer; const AArray_Of_ShippingFeatureCodeType: Array_Of_ShippingFeatureCodeType);
begin
  FShippingFeature := AArray_Of_ShippingFeatureCodeType;
  FShippingFeature_Specified := True;
end;

function ShipmentType.ShippingFeature_Specified(Index: Integer): boolean;
begin
  Result := FShippingFeature_Specified;
end;

procedure ShipmentType.SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
begin
  FShippingPackage := AShippingPackageCodeType;
  FShippingPackage_Specified := True;
end;

function ShipmentType.ShippingPackage_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackage_Specified;
end;

procedure ShipmentType.SetShippingServiceUsed(Index: Integer; const Astring: string);
begin
  FShippingServiceUsed := Astring;
  FShippingServiceUsed_Specified := True;
end;

function ShipmentType.ShippingServiceUsed_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceUsed_Specified;
end;

procedure ShipmentType.SetShipmentTrackingNumber(Index: Integer; const Astring: string);
begin
  FShipmentTrackingNumber := Astring;
  FShipmentTrackingNumber_Specified := True;
end;

function ShipmentType.ShipmentTrackingNumber_Specified(Index: Integer): boolean;
begin
  Result := FShipmentTrackingNumber_Specified;
end;

procedure ShipmentType.SetWeightMajor(Index: Integer; const AMeasureType: MeasureType);
begin
  FWeightMajor := AMeasureType;
  FWeightMajor_Specified := True;
end;

function ShipmentType.WeightMajor_Specified(Index: Integer): boolean;
begin
  Result := FWeightMajor_Specified;
end;

procedure ShipmentType.SetWeightMinor(Index: Integer; const AMeasureType: MeasureType);
begin
  FWeightMinor := AMeasureType;
  FWeightMinor_Specified := True;
end;

function ShipmentType.WeightMinor_Specified(Index: Integer): boolean;
begin
  Result := FWeightMinor_Specified;
end;

procedure ShipmentType.SetItemTransactionID(Index: Integer; const AItemTransactionIDArrayType: ItemTransactionIDArrayType);
begin
  FItemTransactionID := AItemTransactionIDArrayType;
  FItemTransactionID_Specified := True;
end;

function ShipmentType.ItemTransactionID_Specified(Index: Integer): boolean;
begin
  Result := FItemTransactionID_Specified;
end;

procedure ShipmentType.SetDeliveryDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDeliveryDate := ATXSDateTime;
  FDeliveryDate_Specified := True;
end;

function ShipmentType.DeliveryDate_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryDate_Specified;
end;

procedure ShipmentType.SetDeliveryStatus(Index: Integer; const AShipmentDeliveryStatusCodeType: ShipmentDeliveryStatusCodeType);
begin
  FDeliveryStatus := AShipmentDeliveryStatusCodeType;
  FDeliveryStatus_Specified := True;
end;

function ShipmentType.DeliveryStatus_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryStatus_Specified;
end;

procedure ShipmentType.SetRefundGrantedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundGrantedTime := ATXSDateTime;
  FRefundGrantedTime_Specified := True;
end;

function ShipmentType.RefundGrantedTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundGrantedTime_Specified;
end;

procedure ShipmentType.SetRefundRequestedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRefundRequestedTime := ATXSDateTime;
  FRefundRequestedTime_Specified := True;
end;

function ShipmentType.RefundRequestedTime_Specified(Index: Integer): boolean;
begin
  Result := FRefundRequestedTime_Specified;
end;

procedure ShipmentType.SetStatus(Index: Integer; const AShipmentStatusCodeType: ShipmentStatusCodeType);
begin
  FStatus := AShipmentStatusCodeType;
  FStatus_Specified := True;
end;

function ShipmentType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure ShipmentType.SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippedTime := ATXSDateTime;
  FShippedTime_Specified := True;
end;

function ShipmentType.ShippedTime_Specified(Index: Integer): boolean;
begin
  Result := FShippedTime_Specified;
end;

procedure ShipmentType.SetNotes(Index: Integer; const Astring: string);
begin
  FNotes := Astring;
  FNotes_Specified := True;
end;

function ShipmentType.Notes_Specified(Index: Integer): boolean;
begin
  Result := FNotes_Specified;
end;

procedure ShipmentType.SetShipmentTrackingDetails(Index: Integer; const AArray_Of_ShipmentTrackingDetailsType: Array_Of_ShipmentTrackingDetailsType);
begin
  FShipmentTrackingDetails := AArray_Of_ShipmentTrackingDetailsType;
  FShipmentTrackingDetails_Specified := True;
end;

function ShipmentType.ShipmentTrackingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShipmentTrackingDetails_Specified;
end;

procedure ShipmentType.SetShipmentLineItem(Index: Integer; const AShipmentLineItemType: ShipmentLineItemType);
begin
  FShipmentLineItem := AShipmentLineItemType;
  FShipmentLineItem_Specified := True;
end;

function ShipmentType.ShipmentLineItem_Specified(Index: Integer): boolean;
begin
  Result := FShipmentLineItem_Specified;
end;

destructor ShippingServiceDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDeprecationDetails)-1 do
    SysUtils.FreeAndNil(FDeprecationDetails[I]);
  System.SetLength(FDeprecationDetails, 0);
  for I := 0 to System.Length(FShippingServicePackageDetails)-1 do
    SysUtils.FreeAndNil(FShippingServicePackageDetails[I]);
  System.SetLength(FShippingServicePackageDetails, 0);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ShippingServiceDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingServiceDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ShippingServiceDetailsType.SetExpeditedService(Index: Integer; const ABoolean: Boolean);
begin
  FExpeditedService := ABoolean;
  FExpeditedService_Specified := True;
end;

function ShippingServiceDetailsType.ExpeditedService_Specified(Index: Integer): boolean;
begin
  Result := FExpeditedService_Specified;
end;

procedure ShippingServiceDetailsType.SetInternationalService(Index: Integer; const ABoolean: Boolean);
begin
  FInternationalService := ABoolean;
  FInternationalService_Specified := True;
end;

function ShippingServiceDetailsType.InternationalService_Specified(Index: Integer): boolean;
begin
  Result := FInternationalService_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingService(Index: Integer; const Astring: string);
begin
  FShippingService := Astring;
  FShippingService_Specified := True;
end;

function ShippingServiceDetailsType.ShippingService_Specified(Index: Integer): boolean;
begin
  Result := FShippingService_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingServiceID(Index: Integer; const AInteger: Integer);
begin
  FShippingServiceID := AInteger;
  FShippingServiceID_Specified := True;
end;

function ShippingServiceDetailsType.ShippingServiceID_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceID_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingTimeMax(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMax := AInteger;
  FShippingTimeMax_Specified := True;
end;

function ShippingServiceDetailsType.ShippingTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMax_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingTimeMin(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMin := AInteger;
  FShippingTimeMin_Specified := True;
end;

function ShippingServiceDetailsType.ShippingTimeMin_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMin_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingServiceCode(Index: Integer; const AShippingServiceCodeType: ShippingServiceCodeType);
begin
  FShippingServiceCode := AShippingServiceCodeType;
  FShippingServiceCode_Specified := True;
end;

function ShippingServiceDetailsType.ShippingServiceCode_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCode_Specified;
end;

procedure ShippingServiceDetailsType.SetServiceType(Index: Integer; const AArray_Of_ShippingTypeCodeType: Array_Of_ShippingTypeCodeType);
begin
  FServiceType := AArray_Of_ShippingTypeCodeType;
  FServiceType_Specified := True;
end;

function ShippingServiceDetailsType.ServiceType_Specified(Index: Integer): boolean;
begin
  Result := FServiceType_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingPackage(Index: Integer; const AArray_Of_ShippingPackageCodeType: Array_Of_ShippingPackageCodeType);
begin
  FShippingPackage := AArray_Of_ShippingPackageCodeType;
  FShippingPackage_Specified := True;
end;

function ShippingServiceDetailsType.ShippingPackage_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackage_Specified;
end;

procedure ShippingServiceDetailsType.SetDimensionsRequired(Index: Integer; const ABoolean: Boolean);
begin
  FDimensionsRequired := ABoolean;
  FDimensionsRequired_Specified := True;
end;

function ShippingServiceDetailsType.DimensionsRequired_Specified(Index: Integer): boolean;
begin
  Result := FDimensionsRequired_Specified;
end;

procedure ShippingServiceDetailsType.SetValidForSellingFlow(Index: Integer; const ABoolean: Boolean);
begin
  FValidForSellingFlow := ABoolean;
  FValidForSellingFlow_Specified := True;
end;

function ShippingServiceDetailsType.ValidForSellingFlow_Specified(Index: Integer): boolean;
begin
  Result := FValidForSellingFlow_Specified;
end;

procedure ShippingServiceDetailsType.SetSurchargeApplicable(Index: Integer; const ABoolean: Boolean);
begin
  FSurchargeApplicable := ABoolean;
  FSurchargeApplicable_Specified := True;
end;

function ShippingServiceDetailsType.SurchargeApplicable_Specified(Index: Integer): boolean;
begin
  Result := FSurchargeApplicable_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingCarrier(Index: Integer; const AArray_Of_ShippingCarrierCodeType: Array_Of_ShippingCarrierCodeType);
begin
  FShippingCarrier := AArray_Of_ShippingCarrierCodeType;
  FShippingCarrier_Specified := True;
end;

function ShippingServiceDetailsType.ShippingCarrier_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrier_Specified;
end;

procedure ShippingServiceDetailsType.SetCODService(Index: Integer; const ABoolean: Boolean);
begin
  FCODService := ABoolean;
  FCODService_Specified := True;
end;

function ShippingServiceDetailsType.CODService_Specified(Index: Integer): boolean;
begin
  Result := FCODService_Specified;
end;

procedure ShippingServiceDetailsType.SetDeprecationDetails(Index: Integer; const AArray_Of_AnnouncementMessageType: Array_Of_AnnouncementMessageType);
begin
  FDeprecationDetails := AArray_Of_AnnouncementMessageType;
  FDeprecationDetails_Specified := True;
end;

function ShippingServiceDetailsType.DeprecationDetails_Specified(Index: Integer): boolean;
begin
  Result := FDeprecationDetails_Specified;
end;

procedure ShippingServiceDetailsType.SetMappedToShippingServiceID(Index: Integer; const AInteger: Integer);
begin
  FMappedToShippingServiceID := AInteger;
  FMappedToShippingServiceID_Specified := True;
end;

function ShippingServiceDetailsType.MappedToShippingServiceID_Specified(Index: Integer): boolean;
begin
  Result := FMappedToShippingServiceID_Specified;
end;

procedure ShippingServiceDetailsType.SetCostGroupFlat(Index: Integer; const Astring: string);
begin
  FCostGroupFlat := Astring;
  FCostGroupFlat_Specified := True;
end;

function ShippingServiceDetailsType.CostGroupFlat_Specified(Index: Integer): boolean;
begin
  Result := FCostGroupFlat_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingServicePackageDetails(Index: Integer; const AArray_Of_ShippingServicePackageDetailsType: Array_Of_ShippingServicePackageDetailsType);
begin
  FShippingServicePackageDetails := AArray_Of_ShippingServicePackageDetailsType;
  FShippingServicePackageDetails_Specified := True;
end;

function ShippingServiceDetailsType.ShippingServicePackageDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingServicePackageDetails_Specified;
end;

procedure ShippingServiceDetailsType.SetWeightRequired(Index: Integer; const ABoolean: Boolean);
begin
  FWeightRequired := ABoolean;
  FWeightRequired_Specified := True;
end;

function ShippingServiceDetailsType.WeightRequired_Specified(Index: Integer): boolean;
begin
  Result := FWeightRequired_Specified;
end;

procedure ShippingServiceDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ShippingServiceDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ShippingServiceDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ShippingServiceDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure ShippingServiceDetailsType.SetShippingCategory(Index: Integer; const Astring: string);
begin
  FShippingCategory := Astring;
  FShippingCategory_Specified := True;
end;

function ShippingServiceDetailsType.ShippingCategory_Specified(Index: Integer): boolean;
begin
  Result := FShippingCategory_Specified;
end;

destructor ShippingCategoryDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ShippingCategoryDetailsType.SetShippingCategory(Index: Integer; const Astring: string);
begin
  FShippingCategory := Astring;
  FShippingCategory_Specified := True;
end;

function ShippingCategoryDetailsType.ShippingCategory_Specified(Index: Integer): boolean;
begin
  Result := FShippingCategory_Specified;
end;

procedure ShippingCategoryDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingCategoryDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ShippingCategoryDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ShippingCategoryDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ShippingCategoryDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ShippingCategoryDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor PickupMethodSelectedType.Destroy;
begin
  SysUtils.FreeAndNil(FPickupFulfillmentTime);
  inherited Destroy;
end;

procedure PickupMethodSelectedType.SetPickupMethod(Index: Integer; const Astring: string);
begin
  FPickupMethod := Astring;
  FPickupMethod_Specified := True;
end;

function PickupMethodSelectedType.PickupMethod_Specified(Index: Integer): boolean;
begin
  Result := FPickupMethod_Specified;
end;

procedure PickupMethodSelectedType.SetPickupStoreID(Index: Integer; const Astring: string);
begin
  FPickupStoreID := Astring;
  FPickupStoreID_Specified := True;
end;

function PickupMethodSelectedType.PickupStoreID_Specified(Index: Integer): boolean;
begin
  Result := FPickupStoreID_Specified;
end;

procedure PickupMethodSelectedType.SetPickupStatus(Index: Integer; const APickupStatusCodeType: PickupStatusCodeType);
begin
  FPickupStatus := APickupStatusCodeType;
  FPickupStatus_Specified := True;
end;

function PickupMethodSelectedType.PickupStatus_Specified(Index: Integer): boolean;
begin
  Result := FPickupStatus_Specified;
end;

procedure PickupMethodSelectedType.SetMerchantPickupCode(Index: Integer; const Astring: string);
begin
  FMerchantPickupCode := Astring;
  FMerchantPickupCode_Specified := True;
end;

function PickupMethodSelectedType.MerchantPickupCode_Specified(Index: Integer): boolean;
begin
  Result := FMerchantPickupCode_Specified;
end;

procedure PickupMethodSelectedType.SetPickupFulfillmentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPickupFulfillmentTime := ATXSDateTime;
  FPickupFulfillmentTime_Specified := True;
end;

function PickupMethodSelectedType.PickupFulfillmentTime_Specified(Index: Integer): boolean;
begin
  Result := FPickupFulfillmentTime_Specified;
end;

procedure PickupMethodSelectedType.SetPickupLocationUUID(Index: Integer; const Astring: string);
begin
  FPickupLocationUUID := Astring;
  FPickupLocationUUID_Specified := True;
end;

function PickupMethodSelectedType.PickupLocationUUID_Specified(Index: Integer): boolean;
begin
  Result := FPickupLocationUUID_Specified;
end;

procedure PickupOptionsType.SetPickupMethod(Index: Integer; const Astring: string);
begin
  FPickupMethod := Astring;
  FPickupMethod_Specified := True;
end;

function PickupOptionsType.PickupMethod_Specified(Index: Integer): boolean;
begin
  Result := FPickupMethod_Specified;
end;

procedure PickupOptionsType.SetPickupPriority(Index: Integer; const AInteger: Integer);
begin
  FPickupPriority := AInteger;
  FPickupPriority_Specified := True;
end;

function PickupOptionsType.PickupPriority_Specified(Index: Integer): boolean;
begin
  Result := FPickupPriority_Specified;
end;

procedure ReturnPolicyType.SetRefundOption(Index: Integer; const Astring: string);
begin
  FRefundOption := Astring;
  FRefundOption_Specified := True;
end;

function ReturnPolicyType.RefundOption_Specified(Index: Integer): boolean;
begin
  Result := FRefundOption_Specified;
end;

procedure ReturnPolicyType.SetRefund(Index: Integer; const Astring: string);
begin
  FRefund := Astring;
  FRefund_Specified := True;
end;

function ReturnPolicyType.Refund_Specified(Index: Integer): boolean;
begin
  Result := FRefund_Specified;
end;

procedure ReturnPolicyType.SetReturnsWithinOption(Index: Integer; const Astring: string);
begin
  FReturnsWithinOption := Astring;
  FReturnsWithinOption_Specified := True;
end;

function ReturnPolicyType.ReturnsWithinOption_Specified(Index: Integer): boolean;
begin
  Result := FReturnsWithinOption_Specified;
end;

procedure ReturnPolicyType.SetReturnsWithin(Index: Integer; const Astring: string);
begin
  FReturnsWithin := Astring;
  FReturnsWithin_Specified := True;
end;

function ReturnPolicyType.ReturnsWithin_Specified(Index: Integer): boolean;
begin
  Result := FReturnsWithin_Specified;
end;

procedure ReturnPolicyType.SetReturnsAcceptedOption(Index: Integer; const Astring: string);
begin
  FReturnsAcceptedOption := Astring;
  FReturnsAcceptedOption_Specified := True;
end;

function ReturnPolicyType.ReturnsAcceptedOption_Specified(Index: Integer): boolean;
begin
  Result := FReturnsAcceptedOption_Specified;
end;

procedure ReturnPolicyType.SetReturnsAccepted(Index: Integer; const Astring: string);
begin
  FReturnsAccepted := Astring;
  FReturnsAccepted_Specified := True;
end;

function ReturnPolicyType.ReturnsAccepted_Specified(Index: Integer): boolean;
begin
  Result := FReturnsAccepted_Specified;
end;

procedure ReturnPolicyType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReturnPolicyType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReturnPolicyType.SetWarrantyOfferedOption(Index: Integer; const Astring: string);
begin
  FWarrantyOfferedOption := Astring;
  FWarrantyOfferedOption_Specified := True;
end;

function ReturnPolicyType.WarrantyOfferedOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyOfferedOption_Specified;
end;

procedure ReturnPolicyType.SetWarrantyOffered(Index: Integer; const Astring: string);
begin
  FWarrantyOffered := Astring;
  FWarrantyOffered_Specified := True;
end;

function ReturnPolicyType.WarrantyOffered_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyOffered_Specified;
end;

procedure ReturnPolicyType.SetWarrantyTypeOption(Index: Integer; const Astring: string);
begin
  FWarrantyTypeOption := Astring;
  FWarrantyTypeOption_Specified := True;
end;

function ReturnPolicyType.WarrantyTypeOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyTypeOption_Specified;
end;

procedure ReturnPolicyType.SetWarrantyType(Index: Integer; const Astring: string);
begin
  FWarrantyType := Astring;
  FWarrantyType_Specified := True;
end;

function ReturnPolicyType.WarrantyType_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyType_Specified;
end;

procedure ReturnPolicyType.SetWarrantyDurationOption(Index: Integer; const Astring: string);
begin
  FWarrantyDurationOption := Astring;
  FWarrantyDurationOption_Specified := True;
end;

function ReturnPolicyType.WarrantyDurationOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyDurationOption_Specified;
end;

procedure ReturnPolicyType.SetWarrantyDuration(Index: Integer; const Astring: string);
begin
  FWarrantyDuration := Astring;
  FWarrantyDuration_Specified := True;
end;

function ReturnPolicyType.WarrantyDuration_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyDuration_Specified;
end;

procedure ReturnPolicyType.SetShippingCostPaidByOption(Index: Integer; const Astring: string);
begin
  FShippingCostPaidByOption := Astring;
  FShippingCostPaidByOption_Specified := True;
end;

function ReturnPolicyType.ShippingCostPaidByOption_Specified(Index: Integer): boolean;
begin
  Result := FShippingCostPaidByOption_Specified;
end;

procedure ReturnPolicyType.SetShippingCostPaidBy(Index: Integer; const Astring: string);
begin
  FShippingCostPaidBy := Astring;
  FShippingCostPaidBy_Specified := True;
end;

function ReturnPolicyType.ShippingCostPaidBy_Specified(Index: Integer): boolean;
begin
  Result := FShippingCostPaidBy_Specified;
end;

procedure ReturnPolicyType.SetRestockingFeeValue(Index: Integer; const Astring: string);
begin
  FRestockingFeeValue := Astring;
  FRestockingFeeValue_Specified := True;
end;

function ReturnPolicyType.RestockingFeeValue_Specified(Index: Integer): boolean;
begin
  Result := FRestockingFeeValue_Specified;
end;

procedure ReturnPolicyType.SetRestockingFeeValueOption(Index: Integer; const Astring: string);
begin
  FRestockingFeeValueOption := Astring;
  FRestockingFeeValueOption_Specified := True;
end;

function ReturnPolicyType.RestockingFeeValueOption_Specified(Index: Integer): boolean;
begin
  Result := FRestockingFeeValueOption_Specified;
end;

procedure ReturnPolicyType.SetExtendedHolidayReturns(Index: Integer; const ABoolean: Boolean);
begin
  FExtendedHolidayReturns := ABoolean;
  FExtendedHolidayReturns_Specified := True;
end;

function ReturnPolicyType.ExtendedHolidayReturns_Specified(Index: Integer): boolean;
begin
  Result := FExtendedHolidayReturns_Specified;
end;

procedure ReturnPolicyType.SetInternationalRefundOption(Index: Integer; const Astring: string);
begin
  FInternationalRefundOption := Astring;
  FInternationalRefundOption_Specified := True;
end;

function ReturnPolicyType.InternationalRefundOption_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRefundOption_Specified;
end;

procedure ReturnPolicyType.SetInternationalReturnsAcceptedOption(Index: Integer; const Astring: string);
begin
  FInternationalReturnsAcceptedOption := Astring;
  FInternationalReturnsAcceptedOption_Specified := True;
end;

function ReturnPolicyType.InternationalReturnsAcceptedOption_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsAcceptedOption_Specified;
end;

procedure ReturnPolicyType.SetInternationalReturnsWithinOption(Index: Integer; const Astring: string);
begin
  FInternationalReturnsWithinOption := Astring;
  FInternationalReturnsWithinOption_Specified := True;
end;

function ReturnPolicyType.InternationalReturnsWithinOption_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsWithinOption_Specified;
end;

procedure ReturnPolicyType.SetInternationalShippingCostPaidByOption(Index: Integer; const Astring: string);
begin
  FInternationalShippingCostPaidByOption := Astring;
  FInternationalShippingCostPaidByOption_Specified := True;
end;

function ReturnPolicyType.InternationalShippingCostPaidByOption_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingCostPaidByOption_Specified;
end;

destructor MultiLegShippingServiceType.Destroy;
begin
  SysUtils.FreeAndNil(FTotalShippingCost);
  inherited Destroy;
end;

procedure MultiLegShippingServiceType.SetShippingService(Index: Integer; const Astring: string);
begin
  FShippingService := Astring;
  FShippingService_Specified := True;
end;

function MultiLegShippingServiceType.ShippingService_Specified(Index: Integer): boolean;
begin
  Result := FShippingService_Specified;
end;

procedure MultiLegShippingServiceType.SetTotalShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FTotalShippingCost := AAmountType;
  FTotalShippingCost_Specified := True;
end;

function MultiLegShippingServiceType.TotalShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FTotalShippingCost_Specified;
end;

destructor ShippingPackageInfoType.Destroy;
begin
  SysUtils.FreeAndNil(FScheduledDeliveryTimeMin);
  SysUtils.FreeAndNil(FScheduledDeliveryTimeMax);
  SysUtils.FreeAndNil(FActualDeliveryTime);
  SysUtils.FreeAndNil(FEstimatedDeliveryTimeMin);
  SysUtils.FreeAndNil(FEstimatedDeliveryTimeMax);
  SysUtils.FreeAndNil(FHandleByTime);
  SysUtils.FreeAndNil(FMinNativeEstimatedDeliveryTime);
  SysUtils.FreeAndNil(FMaxNativeEstimatedDeliveryTime);
  inherited Destroy;
end;

procedure ShippingPackageInfoType.SetStoreID(Index: Integer; const Astring: string);
begin
  FStoreID := Astring;
  FStoreID_Specified := True;
end;

function ShippingPackageInfoType.StoreID_Specified(Index: Integer): boolean;
begin
  Result := FStoreID_Specified;
end;

procedure ShippingPackageInfoType.SetShippingTrackingEvent(Index: Integer; const Astring: string);
begin
  FShippingTrackingEvent := Astring;
  FShippingTrackingEvent_Specified := True;
end;

function ShippingPackageInfoType.ShippingTrackingEvent_Specified(Index: Integer): boolean;
begin
  Result := FShippingTrackingEvent_Specified;
end;

procedure ShippingPackageInfoType.SetScheduledDeliveryTimeMin(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FScheduledDeliveryTimeMin := ATXSDateTime;
  FScheduledDeliveryTimeMin_Specified := True;
end;

function ShippingPackageInfoType.ScheduledDeliveryTimeMin_Specified(Index: Integer): boolean;
begin
  Result := FScheduledDeliveryTimeMin_Specified;
end;

procedure ShippingPackageInfoType.SetScheduledDeliveryTimeMax(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FScheduledDeliveryTimeMax := ATXSDateTime;
  FScheduledDeliveryTimeMax_Specified := True;
end;

function ShippingPackageInfoType.ScheduledDeliveryTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FScheduledDeliveryTimeMax_Specified;
end;

procedure ShippingPackageInfoType.SetActualDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FActualDeliveryTime := ATXSDateTime;
  FActualDeliveryTime_Specified := True;
end;

function ShippingPackageInfoType.ActualDeliveryTime_Specified(Index: Integer): boolean;
begin
  Result := FActualDeliveryTime_Specified;
end;

procedure ShippingPackageInfoType.SetEstimatedDeliveryTimeMin(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEstimatedDeliveryTimeMin := ATXSDateTime;
  FEstimatedDeliveryTimeMin_Specified := True;
end;

function ShippingPackageInfoType.EstimatedDeliveryTimeMin_Specified(Index: Integer): boolean;
begin
  Result := FEstimatedDeliveryTimeMin_Specified;
end;

procedure ShippingPackageInfoType.SetEstimatedDeliveryTimeMax(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEstimatedDeliveryTimeMax := ATXSDateTime;
  FEstimatedDeliveryTimeMax_Specified := True;
end;

function ShippingPackageInfoType.EstimatedDeliveryTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FEstimatedDeliveryTimeMax_Specified;
end;

procedure ShippingPackageInfoType.SetHandleByTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FHandleByTime := ATXSDateTime;
  FHandleByTime_Specified := True;
end;

function ShippingPackageInfoType.HandleByTime_Specified(Index: Integer): boolean;
begin
  Result := FHandleByTime_Specified;
end;

procedure ShippingPackageInfoType.SetMinNativeEstimatedDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FMinNativeEstimatedDeliveryTime := ATXSDateTime;
  FMinNativeEstimatedDeliveryTime_Specified := True;
end;

function ShippingPackageInfoType.MinNativeEstimatedDeliveryTime_Specified(Index: Integer): boolean;
begin
  Result := FMinNativeEstimatedDeliveryTime_Specified;
end;

procedure ShippingPackageInfoType.SetMaxNativeEstimatedDeliveryTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FMaxNativeEstimatedDeliveryTime := ATXSDateTime;
  FMaxNativeEstimatedDeliveryTime_Specified := True;
end;

function ShippingPackageInfoType.MaxNativeEstimatedDeliveryTime_Specified(Index: Integer): boolean;
begin
  Result := FMaxNativeEstimatedDeliveryTime_Specified;
end;

procedure ReturnsWithinDetailsType.SetReturnsWithinOption(Index: Integer; const Astring: string);
begin
  FReturnsWithinOption := Astring;
  FReturnsWithinOption_Specified := True;
end;

function ReturnsWithinDetailsType.ReturnsWithinOption_Specified(Index: Integer): boolean;
begin
  Result := FReturnsWithinOption_Specified;
end;

procedure ReturnsWithinDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReturnsWithinDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure RestockingFeeValueDetailsType.SetRestockingFeeValueOption(Index: Integer; const Astring: string);
begin
  FRestockingFeeValueOption := Astring;
  FRestockingFeeValueOption_Specified := True;
end;

function RestockingFeeValueDetailsType.RestockingFeeValueOption_Specified(Index: Integer): boolean;
begin
  Result := FRestockingFeeValueOption_Specified;
end;

procedure RestockingFeeValueDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function RestockingFeeValueDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure RefundDetailsType.SetRefundOption(Index: Integer; const Astring: string);
begin
  FRefundOption := Astring;
  FRefundOption_Specified := True;
end;

function RefundDetailsType.RefundOption_Specified(Index: Integer): boolean;
begin
  Result := FRefundOption_Specified;
end;

procedure RefundDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function RefundDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

destructor SellerDiscountsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellerDiscount)-1 do
    SysUtils.FreeAndNil(FSellerDiscount[I]);
  System.SetLength(FSellerDiscount, 0);
  SysUtils.FreeAndNil(FOriginalItemPrice);
  SysUtils.FreeAndNil(FOriginalItemShippingCost);
  inherited Destroy;
end;

procedure SellerDiscountsType.SetOriginalItemPrice(Index: Integer; const AAmountType: AmountType);
begin
  FOriginalItemPrice := AAmountType;
  FOriginalItemPrice_Specified := True;
end;

function SellerDiscountsType.OriginalItemPrice_Specified(Index: Integer): boolean;
begin
  Result := FOriginalItemPrice_Specified;
end;

procedure SellerDiscountsType.SetOriginalItemShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FOriginalItemShippingCost := AAmountType;
  FOriginalItemShippingCost_Specified := True;
end;

function SellerDiscountsType.OriginalItemShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FOriginalItemShippingCost_Specified;
end;

procedure SellerDiscountsType.SetOriginalShippingService(Index: Integer; const Astring: string);
begin
  FOriginalShippingService := Astring;
  FOriginalShippingService_Specified := True;
end;

function SellerDiscountsType.OriginalShippingService_Specified(Index: Integer): boolean;
begin
  Result := FOriginalShippingService_Specified;
end;

procedure SellerDiscountsType.SetSellerDiscount(Index: Integer; const AArray_Of_SellerDiscountType: Array_Of_SellerDiscountType);
begin
  FSellerDiscount := AArray_Of_SellerDiscountType;
  FSellerDiscount_Specified := True;
end;

function SellerDiscountsType.SellerDiscount_Specified(Index: Integer): boolean;
begin
  Result := FSellerDiscount_Specified;
end;

procedure ShippingCostPaidByDetailsType.SetShippingCostPaidByOption(Index: Integer; const Astring: string);
begin
  FShippingCostPaidByOption := Astring;
  FShippingCostPaidByOption_Specified := True;
end;

function ShippingCostPaidByDetailsType.ShippingCostPaidByOption_Specified(Index: Integer): boolean;
begin
  Result := FShippingCostPaidByOption_Specified;
end;

procedure ShippingCostPaidByDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ShippingCostPaidByDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure WarrantyTypeDetailsType.SetWarrantyTypeOption(Index: Integer; const Astring: string);
begin
  FWarrantyTypeOption := Astring;
  FWarrantyTypeOption_Specified := True;
end;

function WarrantyTypeDetailsType.WarrantyTypeOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyTypeOption_Specified;
end;

procedure WarrantyTypeDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function WarrantyTypeDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure WarrantyOfferedDetailsType.SetWarrantyOfferedOption(Index: Integer; const Astring: string);
begin
  FWarrantyOfferedOption := Astring;
  FWarrantyOfferedOption_Specified := True;
end;

function WarrantyOfferedDetailsType.WarrantyOfferedOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyOfferedOption_Specified;
end;

procedure WarrantyOfferedDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function WarrantyOfferedDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ReturnsAcceptedDetailsType.SetReturnsAcceptedOption(Index: Integer; const Astring: string);
begin
  FReturnsAcceptedOption := Astring;
  FReturnsAcceptedOption_Specified := True;
end;

function ReturnsAcceptedDetailsType.ReturnsAcceptedOption_Specified(Index: Integer): boolean;
begin
  Result := FReturnsAcceptedOption_Specified;
end;

procedure ReturnsAcceptedDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ReturnsAcceptedDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure WarrantyDurationDetailsType.SetWarrantyDurationOption(Index: Integer; const Astring: string);
begin
  FWarrantyDurationOption := Astring;
  FWarrantyDurationOption_Specified := True;
end;

function WarrantyDurationDetailsType.WarrantyDurationOption_Specified(Index: Integer): boolean;
begin
  Result := FWarrantyDurationOption_Specified;
end;

procedure WarrantyDurationDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function WarrantyDurationDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

destructor PaymentOptionDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure PaymentOptionDetailsType.SetPaymentOption(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
begin
  FPaymentOption := ABuyerPaymentMethodCodeType;
  FPaymentOption_Specified := True;
end;

function PaymentOptionDetailsType.PaymentOption_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOption_Specified;
end;

procedure PaymentOptionDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function PaymentOptionDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure PaymentOptionDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function PaymentOptionDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure PaymentOptionDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function PaymentOptionDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor SellingManagerOrderStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FShippedTime);
  SysUtils.FreeAndNil(FPaidTime);
  SysUtils.FreeAndNil(FLastEmailSentTime);
  SysUtils.FreeAndNil(FSellerInvoiceTime);
  inherited Destroy;
end;

procedure SellingManagerOrderStatusType.SetCheckoutStatus(Index: Integer; const ACheckoutStatusCodeType: CheckoutStatusCodeType);
begin
  FCheckoutStatus := ACheckoutStatusCodeType;
  FCheckoutStatus_Specified := True;
end;

function SellingManagerOrderStatusType.CheckoutStatus_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutStatus_Specified;
end;

procedure SellingManagerOrderStatusType.SetPaidStatus(Index: Integer; const ASellingManagerPaidStatusCodeType: SellingManagerPaidStatusCodeType);
begin
  FPaidStatus := ASellingManagerPaidStatusCodeType;
  FPaidStatus_Specified := True;
end;

function SellingManagerOrderStatusType.PaidStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaidStatus_Specified;
end;

procedure SellingManagerOrderStatusType.SetShippedStatus(Index: Integer; const ASellingManagerShippedStatusCodeType: SellingManagerShippedStatusCodeType);
begin
  FShippedStatus := ASellingManagerShippedStatusCodeType;
  FShippedStatus_Specified := True;
end;

function SellingManagerOrderStatusType.ShippedStatus_Specified(Index: Integer): boolean;
begin
  Result := FShippedStatus_Specified;
end;

procedure SellingManagerOrderStatusType.SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
begin
  FeBayPaymentStatus := APaymentStatusCodeType;
  FeBayPaymentStatus_Specified := True;
end;

function SellingManagerOrderStatusType.eBayPaymentStatus_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentStatus_Specified;
end;

procedure SellingManagerOrderStatusType.SetPayPalTransactionID(Index: Integer; const Astring: string);
begin
  FPayPalTransactionID := Astring;
  FPayPalTransactionID_Specified := True;
end;

function SellingManagerOrderStatusType.PayPalTransactionID_Specified(Index: Integer): boolean;
begin
  Result := FPayPalTransactionID_Specified;
end;

procedure SellingManagerOrderStatusType.SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
begin
  FPaymentMethodUsed := ABuyerPaymentMethodCodeType;
  FPaymentMethodUsed_Specified := True;
end;

function SellingManagerOrderStatusType.PaymentMethodUsed_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethodUsed_Specified;
end;

procedure SellingManagerOrderStatusType.SetFeedbackReceived(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
begin
  FFeedbackReceived := ACommentTypeCodeType;
  FFeedbackReceived_Specified := True;
end;

function SellingManagerOrderStatusType.FeedbackReceived_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackReceived_Specified;
end;

procedure SellingManagerOrderStatusType.SetFeedbackSent(Index: Integer; const ABoolean: Boolean);
begin
  FFeedbackSent := ABoolean;
  FFeedbackSent_Specified := True;
end;

function SellingManagerOrderStatusType.FeedbackSent_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackSent_Specified;
end;

procedure SellingManagerOrderStatusType.SetTotalEmailsSent(Index: Integer; const AInteger: Integer);
begin
  FTotalEmailsSent := AInteger;
  FTotalEmailsSent_Specified := True;
end;

function SellingManagerOrderStatusType.TotalEmailsSent_Specified(Index: Integer): boolean;
begin
  Result := FTotalEmailsSent_Specified;
end;

procedure SellingManagerOrderStatusType.SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
begin
  FPaymentHoldStatus := APaymentHoldStatusCodeType;
  FPaymentHoldStatus_Specified := True;
end;

function SellingManagerOrderStatusType.PaymentHoldStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldStatus_Specified;
end;

procedure SellingManagerOrderStatusType.SetSellerInvoiceNumber(Index: Integer; const Astring: string);
begin
  FSellerInvoiceNumber := Astring;
  FSellerInvoiceNumber_Specified := True;
end;

function SellingManagerOrderStatusType.SellerInvoiceNumber_Specified(Index: Integer): boolean;
begin
  Result := FSellerInvoiceNumber_Specified;
end;

procedure SellingManagerOrderStatusType.SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippedTime := ATXSDateTime;
  FShippedTime_Specified := True;
end;

function SellingManagerOrderStatusType.ShippedTime_Specified(Index: Integer): boolean;
begin
  Result := FShippedTime_Specified;
end;

procedure SellingManagerOrderStatusType.SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPaidTime := ATXSDateTime;
  FPaidTime_Specified := True;
end;

function SellingManagerOrderStatusType.PaidTime_Specified(Index: Integer): boolean;
begin
  Result := FPaidTime_Specified;
end;

procedure SellingManagerOrderStatusType.SetLastEmailSentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastEmailSentTime := ATXSDateTime;
  FLastEmailSentTime_Specified := True;
end;

function SellingManagerOrderStatusType.LastEmailSentTime_Specified(Index: Integer): boolean;
begin
  Result := FLastEmailSentTime_Specified;
end;

procedure SellingManagerOrderStatusType.SetSellerInvoiceTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FSellerInvoiceTime := ATXSDateTime;
  FSellerInvoiceTime_Specified := True;
end;

function SellingManagerOrderStatusType.SellerInvoiceTime_Specified(Index: Integer): boolean;
begin
  Result := FSellerInvoiceTime_Specified;
end;

procedure SellingManagerOrderStatusType.SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FIntegratedMerchantCreditCardEnabled := ABoolean;
  FIntegratedMerchantCreditCardEnabled_Specified := True;
end;

function SellingManagerOrderStatusType.IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardEnabled_Specified;
end;

destructor CheckoutStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FLastModifiedTime);
  SysUtils.FreeAndNil(FeBayPaymentMismatchDetails);
  inherited Destroy;
end;

procedure CheckoutStatusType.SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
begin
  FeBayPaymentStatus := APaymentStatusCodeType;
  FeBayPaymentStatus_Specified := True;
end;

function CheckoutStatusType.eBayPaymentStatus_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentStatus_Specified;
end;

procedure CheckoutStatusType.SetLastModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastModifiedTime := ATXSDateTime;
  FLastModifiedTime_Specified := True;
end;

function CheckoutStatusType.LastModifiedTime_Specified(Index: Integer): boolean;
begin
  Result := FLastModifiedTime_Specified;
end;

procedure CheckoutStatusType.SetPaymentMethod(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
begin
  FPaymentMethod := ABuyerPaymentMethodCodeType;
  FPaymentMethod_Specified := True;
end;

function CheckoutStatusType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure CheckoutStatusType.SetStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
begin
  FStatus := ACompleteStatusCodeType;
  FStatus_Specified := True;
end;

function CheckoutStatusType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure CheckoutStatusType.SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FIntegratedMerchantCreditCardEnabled := ABoolean;
  FIntegratedMerchantCreditCardEnabled_Specified := True;
end;

function CheckoutStatusType.IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardEnabled_Specified;
end;

procedure CheckoutStatusType.SeteBayPaymentMismatchDetails(Index: Integer; const AeBayPaymentMismatchDetailsType: eBayPaymentMismatchDetailsType);
begin
  FeBayPaymentMismatchDetails := AeBayPaymentMismatchDetailsType;
  FeBayPaymentMismatchDetails_Specified := True;
end;

function CheckoutStatusType.eBayPaymentMismatchDetails_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentMismatchDetails_Specified;
end;

procedure CheckoutStatusType.SetPaymentInstrument(Index: Integer; const ABuyerPaymentInstrumentCodeType: BuyerPaymentInstrumentCodeType);
begin
  FPaymentInstrument := ABuyerPaymentInstrumentCodeType;
  FPaymentInstrument_Specified := True;
end;

function CheckoutStatusType.PaymentInstrument_Specified(Index: Integer): boolean;
begin
  Result := FPaymentInstrument_Specified;
end;

destructor TransactionStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FLastTimeModified);
  SysUtils.FreeAndNil(FeBayPaymentMismatchDetails);
  inherited Destroy;
end;

procedure TransactionStatusType.SeteBayPaymentStatus(Index: Integer; const APaymentStatusCodeType: PaymentStatusCodeType);
begin
  FeBayPaymentStatus := APaymentStatusCodeType;
  FeBayPaymentStatus_Specified := True;
end;

function TransactionStatusType.eBayPaymentStatus_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentStatus_Specified;
end;

procedure TransactionStatusType.SetCheckoutStatus(Index: Integer; const ACheckoutStatusCodeType: CheckoutStatusCodeType);
begin
  FCheckoutStatus := ACheckoutStatusCodeType;
  FCheckoutStatus_Specified := True;
end;

function TransactionStatusType.CheckoutStatus_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutStatus_Specified;
end;

procedure TransactionStatusType.SetLastTimeModified(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastTimeModified := ATXSDateTime;
  FLastTimeModified_Specified := True;
end;

function TransactionStatusType.LastTimeModified_Specified(Index: Integer): boolean;
begin
  Result := FLastTimeModified_Specified;
end;

procedure TransactionStatusType.SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
begin
  FPaymentMethodUsed := ABuyerPaymentMethodCodeType;
  FPaymentMethodUsed_Specified := True;
end;

function TransactionStatusType.PaymentMethodUsed_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethodUsed_Specified;
end;

procedure TransactionStatusType.SetCompleteStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
begin
  FCompleteStatus := ACompleteStatusCodeType;
  FCompleteStatus_Specified := True;
end;

function TransactionStatusType.CompleteStatus_Specified(Index: Integer): boolean;
begin
  Result := FCompleteStatus_Specified;
end;

procedure TransactionStatusType.SetBuyerSelectedShipping(Index: Integer; const ABoolean: Boolean);
begin
  FBuyerSelectedShipping := ABoolean;
  FBuyerSelectedShipping_Specified := True;
end;

function TransactionStatusType.BuyerSelectedShipping_Specified(Index: Integer): boolean;
begin
  Result := FBuyerSelectedShipping_Specified;
end;

procedure TransactionStatusType.SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
begin
  FPaymentHoldStatus := APaymentHoldStatusCodeType;
  FPaymentHoldStatus_Specified := True;
end;

function TransactionStatusType.PaymentHoldStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldStatus_Specified;
end;

procedure TransactionStatusType.SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FIntegratedMerchantCreditCardEnabled := ABoolean;
  FIntegratedMerchantCreditCardEnabled_Specified := True;
end;

function TransactionStatusType.IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardEnabled_Specified;
end;

procedure TransactionStatusType.SeteBayPaymentMismatchDetails(Index: Integer; const AeBayPaymentMismatchDetailsType: eBayPaymentMismatchDetailsType);
begin
  FeBayPaymentMismatchDetails := AeBayPaymentMismatchDetailsType;
  FeBayPaymentMismatchDetails_Specified := True;
end;

function TransactionStatusType.eBayPaymentMismatchDetails_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentMismatchDetails_Specified;
end;

procedure TransactionStatusType.SetInquiryStatus(Index: Integer; const AInquiryStatusCodeType: InquiryStatusCodeType);
begin
  FInquiryStatus := AInquiryStatusCodeType;
  FInquiryStatus_Specified := True;
end;

function TransactionStatusType.InquiryStatus_Specified(Index: Integer): boolean;
begin
  Result := FInquiryStatus_Specified;
end;

procedure TransactionStatusType.SetReturnStatus(Index: Integer; const AReturnStatusCodeType: ReturnStatusCodeType);
begin
  FReturnStatus := AReturnStatusCodeType;
  FReturnStatus_Specified := True;
end;

function TransactionStatusType.ReturnStatus_Specified(Index: Integer): boolean;
begin
  Result := FReturnStatus_Specified;
end;

procedure TransactionStatusType.SetPaymentInstrument(Index: Integer; const ABuyerPaymentInstrumentCodeType: BuyerPaymentInstrumentCodeType);
begin
  FPaymentInstrument := ABuyerPaymentInstrumentCodeType;
  FPaymentInstrument_Specified := True;
end;

function TransactionStatusType.PaymentInstrument_Specified(Index: Integer): boolean;
begin
  Result := FPaymentInstrument_Specified;
end;

procedure TransactionStatusType.SetDigitalStatus(Index: Integer; const ADigitalStatusCodeType: DigitalStatusCodeType);
begin
  FDigitalStatus := ADigitalStatusCodeType;
  FDigitalStatus_Specified := True;
end;

function TransactionStatusType.DigitalStatus_Specified(Index: Integer): boolean;
begin
  Result := FDigitalStatus_Specified;
end;

procedure TransactionStatusType.SetCancelStatus(Index: Integer; const ACancelStatusCodeType: CancelStatusCodeType);
begin
  FCancelStatus := ACancelStatusCodeType;
  FCancelStatus_Specified := True;
end;

function TransactionStatusType.CancelStatus_Specified(Index: Integer): boolean;
begin
  Result := FCancelStatus_Specified;
end;

destructor InventoryStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FStartPrice);
  inherited Destroy;
end;

procedure InventoryStatusType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function InventoryStatusType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure InventoryStatusType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function InventoryStatusType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure InventoryStatusType.SetStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FStartPrice := AAmountType;
  FStartPrice_Specified := True;
end;

function InventoryStatusType.StartPrice_Specified(Index: Integer): boolean;
begin
  Result := FStartPrice_Specified;
end;

procedure InventoryStatusType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function InventoryStatusType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

destructor ExternalTransactionType.Destroy;
begin
  SysUtils.FreeAndNil(FExternalTransactionTime);
  SysUtils.FreeAndNil(FFeeOrCreditAmount);
  SysUtils.FreeAndNil(FPaymentOrRefundAmount);
  inherited Destroy;
end;

procedure ExternalTransactionType.SetExternalTransactionID(Index: Integer; const Astring: string);
begin
  FExternalTransactionID := Astring;
  FExternalTransactionID_Specified := True;
end;

function ExternalTransactionType.ExternalTransactionID_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransactionID_Specified;
end;

procedure ExternalTransactionType.SetExternalTransactionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExternalTransactionTime := ATXSDateTime;
  FExternalTransactionTime_Specified := True;
end;

function ExternalTransactionType.ExternalTransactionTime_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransactionTime_Specified;
end;

procedure ExternalTransactionType.SetFeeOrCreditAmount(Index: Integer; const AAmountType: AmountType);
begin
  FFeeOrCreditAmount := AAmountType;
  FFeeOrCreditAmount_Specified := True;
end;

function ExternalTransactionType.FeeOrCreditAmount_Specified(Index: Integer): boolean;
begin
  Result := FFeeOrCreditAmount_Specified;
end;

procedure ExternalTransactionType.SetPaymentOrRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FPaymentOrRefundAmount := AAmountType;
  FPaymentOrRefundAmount_Specified := True;
end;

function ExternalTransactionType.PaymentOrRefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOrRefundAmount_Specified;
end;

procedure ExternalTransactionType.SetExternalTransactionStatus(Index: Integer; const APaymentTransactionStatusCodeType: PaymentTransactionStatusCodeType);
begin
  FExternalTransactionStatus := APaymentTransactionStatusCodeType;
  FExternalTransactionStatus_Specified := True;
end;

function ExternalTransactionType.ExternalTransactionStatus_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransactionStatus_Specified;
end;

destructor FlatShippingPreferencesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFlatRateInsuranceRangeCost)-1 do
    SysUtils.FreeAndNil(FFlatRateInsuranceRangeCost[I]);
  System.SetLength(FFlatRateInsuranceRangeCost, 0);
  SysUtils.FreeAndNil(FAmountPerAdditionalItem);
  SysUtils.FreeAndNil(FDeductionAmountPerAdditionalItem);
  inherited Destroy;
end;

procedure FlatShippingPreferencesType.SetAmountPerAdditionalItem(Index: Integer; const AAmountType: AmountType);
begin
  FAmountPerAdditionalItem := AAmountType;
  FAmountPerAdditionalItem_Specified := True;
end;

function FlatShippingPreferencesType.AmountPerAdditionalItem_Specified(Index: Integer): boolean;
begin
  Result := FAmountPerAdditionalItem_Specified;
end;

procedure FlatShippingPreferencesType.SetDeductionAmountPerAdditionalItem(Index: Integer; const AAmountType: AmountType);
begin
  FDeductionAmountPerAdditionalItem := AAmountType;
  FDeductionAmountPerAdditionalItem_Specified := True;
end;

function FlatShippingPreferencesType.DeductionAmountPerAdditionalItem_Specified(Index: Integer): boolean;
begin
  Result := FDeductionAmountPerAdditionalItem_Specified;
end;

procedure FlatShippingPreferencesType.SetFlatRateInsuranceRangeCost(Index: Integer; const AArray_Of_FlatRateInsuranceRangeCostType: Array_Of_FlatRateInsuranceRangeCostType);
begin
  FFlatRateInsuranceRangeCost := AArray_Of_FlatRateInsuranceRangeCostType;
  FFlatRateInsuranceRangeCost_Specified := True;
end;

function FlatShippingPreferencesType.FlatRateInsuranceRangeCost_Specified(Index: Integer): boolean;
begin
  Result := FFlatRateInsuranceRangeCost_Specified;
end;

procedure FlatShippingPreferencesType.SetFlatShippingRateOption(Index: Integer; const AFlatShippingRateOptionCodeType: FlatShippingRateOptionCodeType);
begin
  FFlatShippingRateOption := AFlatShippingRateOptionCodeType;
  FFlatShippingRateOption_Specified := True;
end;

function FlatShippingPreferencesType.FlatShippingRateOption_Specified(Index: Integer): boolean;
begin
  Result := FFlatShippingRateOption_Specified;
end;

procedure FlatShippingPreferencesType.SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
begin
  FInsuranceOption := AInsuranceOptionCodeType;
  FInsuranceOption_Specified := True;
end;

function FlatShippingPreferencesType.InsuranceOption_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceOption_Specified;
end;

destructor ShippingInsuranceType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFlatRateInsuranceRangeCost)-1 do
    SysUtils.FreeAndNil(FFlatRateInsuranceRangeCost[I]);
  System.SetLength(FFlatRateInsuranceRangeCost, 0);
  inherited Destroy;
end;

procedure ShippingInsuranceType.SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
begin
  FInsuranceOption := AInsuranceOptionCodeType;
  FInsuranceOption_Specified := True;
end;

function ShippingInsuranceType.InsuranceOption_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceOption_Specified;
end;

procedure ShippingInsuranceType.SetFlatRateInsuranceRangeCost(Index: Integer; const AArray_Of_FlatRateInsuranceRangeCostType: Array_Of_FlatRateInsuranceRangeCostType);
begin
  FFlatRateInsuranceRangeCost := AArray_Of_FlatRateInsuranceRangeCostType;
  FFlatRateInsuranceRangeCost_Specified := True;
end;

function ShippingInsuranceType.FlatRateInsuranceRangeCost_Specified(Index: Integer): boolean;
begin
  Result := FFlatRateInsuranceRangeCost_Specified;
end;

destructor SellerFavoriteItemPreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FMinPrice);
  SysUtils.FreeAndNil(FMaxPrice);
  inherited Destroy;
end;

procedure SellerFavoriteItemPreferencesType.SetSearchKeywords(Index: Integer; const Astring: string);
begin
  FSearchKeywords := Astring;
  FSearchKeywords_Specified := True;
end;

function SellerFavoriteItemPreferencesType.SearchKeywords_Specified(Index: Integer): boolean;
begin
  Result := FSearchKeywords_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetStoreCategoryID(Index: Integer; const AInt64: Int64);
begin
  FStoreCategoryID := AInt64;
  FStoreCategoryID_Specified := True;
end;

function SellerFavoriteItemPreferencesType.StoreCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategoryID_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function SellerFavoriteItemPreferencesType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetSearchSortOrder(Index: Integer; const AStoreItemListSortOrderCodeType: StoreItemListSortOrderCodeType);
begin
  FSearchSortOrder := AStoreItemListSortOrderCodeType;
  FSearchSortOrder_Specified := True;
end;

function SellerFavoriteItemPreferencesType.SearchSortOrder_Specified(Index: Integer): boolean;
begin
  Result := FSearchSortOrder_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetMinPrice(Index: Integer; const AAmountType: AmountType);
begin
  FMinPrice := AAmountType;
  FMinPrice_Specified := True;
end;

function SellerFavoriteItemPreferencesType.MinPrice_Specified(Index: Integer): boolean;
begin
  Result := FMinPrice_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetMaxPrice(Index: Integer; const AAmountType: AmountType);
begin
  FMaxPrice := AAmountType;
  FMaxPrice_Specified := True;
end;

function SellerFavoriteItemPreferencesType.MaxPrice_Specified(Index: Integer): boolean;
begin
  Result := FMaxPrice_Specified;
end;

procedure SellerFavoriteItemPreferencesType.SetFavoriteItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FFavoriteItemID := AItemIDArrayType;
  FFavoriteItemID_Specified := True;
end;

function SellerFavoriteItemPreferencesType.FavoriteItemID_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteItemID_Specified;
end;

destructor PromotionalSaleType.Destroy;
begin
  SysUtils.FreeAndNil(FPromotionalSaleStartTime);
  SysUtils.FreeAndNil(FPromotionalSaleEndTime);
  inherited Destroy;
end;

procedure PromotionalSaleType.SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
begin
  FPromotionalSaleID := AInt64;
  FPromotionalSaleID_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleID_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleID_Specified;
end;

procedure PromotionalSaleType.SetPromotionalSaleName(Index: Integer; const Astring: string);
begin
  FPromotionalSaleName := Astring;
  FPromotionalSaleName_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleName_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleName_Specified;
end;

procedure PromotionalSaleType.SetPromotionalSaleItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FPromotionalSaleItemIDArray := AItemIDArrayType;
  FPromotionalSaleItemIDArray_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleItemIDArray_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleItemIDArray_Specified;
end;

procedure PromotionalSaleType.SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
begin
  FStatus := APromotionalSaleStatusCodeType;
  FStatus_Specified := True;
end;

function PromotionalSaleType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure PromotionalSaleType.SetDiscountType(Index: Integer; const ADiscountCodeType: DiscountCodeType);
begin
  FDiscountType := ADiscountCodeType;
  FDiscountType_Specified := True;
end;

function PromotionalSaleType.DiscountType_Specified(Index: Integer): boolean;
begin
  Result := FDiscountType_Specified;
end;

procedure PromotionalSaleType.SetDiscountValue(Index: Integer; const ADouble: Double);
begin
  FDiscountValue := ADouble;
  FDiscountValue_Specified := True;
end;

function PromotionalSaleType.DiscountValue_Specified(Index: Integer): boolean;
begin
  Result := FDiscountValue_Specified;
end;

procedure PromotionalSaleType.SetPromotionalSaleStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPromotionalSaleStartTime := ATXSDateTime;
  FPromotionalSaleStartTime_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleStartTime_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleStartTime_Specified;
end;

procedure PromotionalSaleType.SetPromotionalSaleEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPromotionalSaleEndTime := ATXSDateTime;
  FPromotionalSaleEndTime_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleEndTime_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleEndTime_Specified;
end;

procedure PromotionalSaleType.SetPromotionalSaleType(Index: Integer; const APromotionalSaleTypeCodeType: PromotionalSaleTypeCodeType);
begin
  FPromotionalSaleType := APromotionalSaleTypeCodeType;
  FPromotionalSaleType_Specified := True;
end;

function PromotionalSaleType.PromotionalSaleType_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleType_Specified;
end;

destructor InternationalShippingServiceOptionsType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingServiceCost);
  SysUtils.FreeAndNil(FShippingServiceAdditionalCost);
  SysUtils.FreeAndNil(FShippingInsuranceCost);
  SysUtils.FreeAndNil(FImportCharge);
  SysUtils.FreeAndNil(FShippingServiceCutOffTime);
  inherited Destroy;
end;

procedure InternationalShippingServiceOptionsType.SetShippingService(Index: Integer; const Astring: string);
begin
  FShippingService := Astring;
  FShippingService_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingService_Specified(Index: Integer): boolean;
begin
  Result := FShippingService_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceCost := AAmountType;
  FShippingServiceCost_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingServiceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCost_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceAdditionalCost := AAmountType;
  FShippingServiceAdditionalCost_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceAdditionalCost_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShippingServicePriority(Index: Integer; const AInteger: Integer);
begin
  FShippingServicePriority := AInteger;
  FShippingServicePriority_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingServicePriority_Specified(Index: Integer): boolean;
begin
  Result := FShippingServicePriority_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShipToLocation(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FShipToLocation := ASellerExcludeShipToLocationPreferencesType;
  FShipToLocation_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShipToLocation_Specified(Index: Integer): boolean;
begin
  Result := FShipToLocation_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingInsuranceCost := AAmountType;
  FShippingInsuranceCost_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingInsuranceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingInsuranceCost_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetImportCharge(Index: Integer; const AAmountType: AmountType);
begin
  FImportCharge := AAmountType;
  FImportCharge_Specified := True;
end;

function InternationalShippingServiceOptionsType.ImportCharge_Specified(Index: Integer): boolean;
begin
  Result := FImportCharge_Specified;
end;

procedure InternationalShippingServiceOptionsType.SetShippingServiceCutOffTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippingServiceCutOffTime := ATXSDateTime;
  FShippingServiceCutOffTime_Specified := True;
end;

function InternationalShippingServiceOptionsType.ShippingServiceCutOffTime_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCutOffTime_Specified;
end;

destructor ShippingServiceOptionsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FShippingPackageInfo)-1 do
    SysUtils.FreeAndNil(FShippingPackageInfo[I]);
  System.SetLength(FShippingPackageInfo, 0);
  SysUtils.FreeAndNil(FShippingInsuranceCost);
  SysUtils.FreeAndNil(FShippingServiceCost);
  SysUtils.FreeAndNil(FShippingServiceAdditionalCost);
  SysUtils.FreeAndNil(FImportCharge);
  SysUtils.FreeAndNil(FShippingServiceCutOffTime);
  inherited Destroy;
end;

procedure ShippingServiceOptionsType.SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingInsuranceCost := AAmountType;
  FShippingInsuranceCost_Specified := True;
end;

function ShippingServiceOptionsType.ShippingInsuranceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingInsuranceCost_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingService(Index: Integer; const Astring: string);
begin
  FShippingService := Astring;
  FShippingService_Specified := True;
end;

function ShippingServiceOptionsType.ShippingService_Specified(Index: Integer): boolean;
begin
  Result := FShippingService_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingServiceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceCost := AAmountType;
  FShippingServiceCost_Specified := True;
end;

function ShippingServiceOptionsType.ShippingServiceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCost_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingServiceAdditionalCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingServiceAdditionalCost := AAmountType;
  FShippingServiceAdditionalCost_Specified := True;
end;

function ShippingServiceOptionsType.ShippingServiceAdditionalCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceAdditionalCost_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingServicePriority(Index: Integer; const AInteger: Integer);
begin
  FShippingServicePriority := AInteger;
  FShippingServicePriority_Specified := True;
end;

function ShippingServiceOptionsType.ShippingServicePriority_Specified(Index: Integer): boolean;
begin
  Result := FShippingServicePriority_Specified;
end;

procedure ShippingServiceOptionsType.SetExpeditedService(Index: Integer; const ABoolean: Boolean);
begin
  FExpeditedService := ABoolean;
  FExpeditedService_Specified := True;
end;

function ShippingServiceOptionsType.ExpeditedService_Specified(Index: Integer): boolean;
begin
  Result := FExpeditedService_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingTimeMin(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMin := AInteger;
  FShippingTimeMin_Specified := True;
end;

function ShippingServiceOptionsType.ShippingTimeMin_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMin_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingTimeMax(Index: Integer; const AInteger: Integer);
begin
  FShippingTimeMax := AInteger;
  FShippingTimeMax_Specified := True;
end;

function ShippingServiceOptionsType.ShippingTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FShippingTimeMax_Specified;
end;

procedure ShippingServiceOptionsType.SetFreeShipping(Index: Integer; const ABoolean: Boolean);
begin
  FFreeShipping := ABoolean;
  FFreeShipping_Specified := True;
end;

function ShippingServiceOptionsType.FreeShipping_Specified(Index: Integer): boolean;
begin
  Result := FFreeShipping_Specified;
end;

procedure ShippingServiceOptionsType.SetLocalPickup(Index: Integer; const ABoolean: Boolean);
begin
  FLocalPickup := ABoolean;
  FLocalPickup_Specified := True;
end;

function ShippingServiceOptionsType.LocalPickup_Specified(Index: Integer): boolean;
begin
  Result := FLocalPickup_Specified;
end;

procedure ShippingServiceOptionsType.SetImportCharge(Index: Integer; const AAmountType: AmountType);
begin
  FImportCharge := AAmountType;
  FImportCharge_Specified := True;
end;

function ShippingServiceOptionsType.ImportCharge_Specified(Index: Integer): boolean;
begin
  Result := FImportCharge_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingPackageInfo(Index: Integer; const AArray_Of_ShippingPackageInfoType: Array_Of_ShippingPackageInfoType);
begin
  FShippingPackageInfo := AArray_Of_ShippingPackageInfoType;
  FShippingPackageInfo_Specified := True;
end;

function ShippingServiceOptionsType.ShippingPackageInfo_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackageInfo_Specified;
end;

procedure ShippingServiceOptionsType.SetShippingServiceCutOffTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippingServiceCutOffTime := ATXSDateTime;
  FShippingServiceCutOffTime_Specified := True;
end;

function ShippingServiceOptionsType.ShippingServiceCutOffTime_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCutOffTime_Specified;
end;

procedure ShippingServiceOptionsType.SetLogisticPlanType(Index: Integer; const Astring: string);
begin
  FLogisticPlanType := Astring;
  FLogisticPlanType_Specified := True;
end;

function ShippingServiceOptionsType.LogisticPlanType_Specified(Index: Integer): boolean;
begin
  Result := FLogisticPlanType_Specified;
end;

destructor BiddingSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemBidDetails)-1 do
    SysUtils.FreeAndNil(FItemBidDetails[I]);
  System.SetLength(FItemBidDetails, 0);
  inherited Destroy;
end;

procedure BiddingSummaryType.SetSummaryDays(Index: Integer; const AInteger: Integer);
begin
  FSummaryDays := AInteger;
  FSummaryDays_Specified := True;
end;

function BiddingSummaryType.SummaryDays_Specified(Index: Integer): boolean;
begin
  Result := FSummaryDays_Specified;
end;

procedure BiddingSummaryType.SetTotalBids(Index: Integer; const AInteger: Integer);
begin
  FTotalBids := AInteger;
  FTotalBids_Specified := True;
end;

function BiddingSummaryType.TotalBids_Specified(Index: Integer): boolean;
begin
  Result := FTotalBids_Specified;
end;

procedure BiddingSummaryType.SetBidActivityWithSeller(Index: Integer; const AInteger: Integer);
begin
  FBidActivityWithSeller := AInteger;
  FBidActivityWithSeller_Specified := True;
end;

function BiddingSummaryType.BidActivityWithSeller_Specified(Index: Integer): boolean;
begin
  Result := FBidActivityWithSeller_Specified;
end;

procedure BiddingSummaryType.SetBidsToUniqueSellers(Index: Integer; const AInteger: Integer);
begin
  FBidsToUniqueSellers := AInteger;
  FBidsToUniqueSellers_Specified := True;
end;

function BiddingSummaryType.BidsToUniqueSellers_Specified(Index: Integer): boolean;
begin
  Result := FBidsToUniqueSellers_Specified;
end;

procedure BiddingSummaryType.SetBidsToUniqueCategories(Index: Integer; const AInteger: Integer);
begin
  FBidsToUniqueCategories := AInteger;
  FBidsToUniqueCategories_Specified := True;
end;

function BiddingSummaryType.BidsToUniqueCategories_Specified(Index: Integer): boolean;
begin
  Result := FBidsToUniqueCategories_Specified;
end;

procedure BiddingSummaryType.SetBidRetractions(Index: Integer; const AInteger: Integer);
begin
  FBidRetractions := AInteger;
  FBidRetractions_Specified := True;
end;

function BiddingSummaryType.BidRetractions_Specified(Index: Integer): boolean;
begin
  Result := FBidRetractions_Specified;
end;

procedure BiddingSummaryType.SetItemBidDetails(Index: Integer; const AArray_Of_ItemBidDetailsType: Array_Of_ItemBidDetailsType);
begin
  FItemBidDetails := AArray_Of_ItemBidDetailsType;
  FItemBidDetails_Specified := True;
end;

function BiddingSummaryType.ItemBidDetails_Specified(Index: Integer): boolean;
begin
  Result := FItemBidDetails_Specified;
end;

destructor ItemBidDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FLastBidTime);
  inherited Destroy;
end;

procedure ItemBidDetailsType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ItemBidDetailsType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ItemBidDetailsType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function ItemBidDetailsType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure ItemBidDetailsType.SetBidCount(Index: Integer; const AInteger: Integer);
begin
  FBidCount := AInteger;
  FBidCount_Specified := True;
end;

function ItemBidDetailsType.BidCount_Specified(Index: Integer): boolean;
begin
  Result := FBidCount_Specified;
end;

procedure ItemBidDetailsType.SetSellerID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSellerID := AUserIDType;
  FSellerID_Specified := True;
end;

function ItemBidDetailsType.SellerID_Specified(Index: Integer): boolean;
begin
  Result := FSellerID_Specified;
end;

procedure ItemBidDetailsType.SetLastBidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastBidTime := ATXSDateTime;
  FLastBidTime_Specified := True;
end;

function ItemBidDetailsType.LastBidTime_Specified(Index: Integer): boolean;
begin
  Result := FLastBidTime_Specified;
end;

destructor BiddingDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FConvertedMaxBid);
  SysUtils.FreeAndNil(FMaxBid);
  inherited Destroy;
end;

procedure BiddingDetailsType.SetConvertedMaxBid(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedMaxBid := AAmountType;
  FConvertedMaxBid_Specified := True;
end;

function BiddingDetailsType.ConvertedMaxBid_Specified(Index: Integer): boolean;
begin
  Result := FConvertedMaxBid_Specified;
end;

procedure BiddingDetailsType.SetMaxBid(Index: Integer; const AAmountType: AmountType);
begin
  FMaxBid := AAmountType;
  FMaxBid_Specified := True;
end;

function BiddingDetailsType.MaxBid_Specified(Index: Integer): boolean;
begin
  Result := FMaxBid_Specified;
end;

procedure BiddingDetailsType.SetQuantityBid(Index: Integer; const AInteger: Integer);
begin
  FQuantityBid := AInteger;
  FQuantityBid_Specified := True;
end;

function BiddingDetailsType.QuantityBid_Specified(Index: Integer): boolean;
begin
  Result := FQuantityBid_Specified;
end;

procedure BiddingDetailsType.SetQuantityWon(Index: Integer; const AInteger: Integer);
begin
  FQuantityWon := AInteger;
  FQuantityWon_Specified := True;
end;

function BiddingDetailsType.QuantityWon_Specified(Index: Integer): boolean;
begin
  Result := FQuantityWon_Specified;
end;

procedure BiddingDetailsType.SetWinning(Index: Integer; const ABoolean: Boolean);
begin
  FWinning := ABoolean;
  FWinning_Specified := True;
end;

function BiddingDetailsType.Winning_Specified(Index: Integer): boolean;
begin
  Result := FWinning_Specified;
end;

procedure BiddingDetailsType.SetBidAssistant(Index: Integer; const ABoolean: Boolean);
begin
  FBidAssistant := ABoolean;
  FBidAssistant_Specified := True;
end;

function BiddingDetailsType.BidAssistant_Specified(Index: Integer): boolean;
begin
  Result := FBidAssistant_Specified;
end;

procedure BrandMPNType.SetBrand(Index: Integer; const Astring: string);
begin
  FBrand := Astring;
  FBrand_Specified := True;
end;

function BrandMPNType.Brand_Specified(Index: Integer): boolean;
begin
  Result := FBrand_Specified;
end;

procedure BrandMPNType.SetMPN(Index: Integer; const Astring: string);
begin
  FMPN := Astring;
  FMPN_Specified := True;
end;

function BrandMPNType.MPN_Specified(Index: Integer): boolean;
begin
  Result := FMPN_Specified;
end;

procedure BuyerPackageEnclosureType.Settype_(Index: Integer; const APaymentInstructionCodeType: PaymentInstructionCodeType);
begin
  Ftype_ := APaymentInstructionCodeType;
  Ftype__Specified := True;
end;

function BuyerPackageEnclosureType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

destructor OrderType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FExternalTransaction)-1 do
    SysUtils.FreeAndNil(FExternalTransaction[I]);
  System.SetLength(FExternalTransaction, 0);
  for I := 0 to System.Length(FTransactionArray)-1 do
    SysUtils.FreeAndNil(FTransactionArray[I]);
  System.SetLength(FTransactionArray, 0);
  for I := 0 to System.Length(FRefundArray)-1 do
    SysUtils.FreeAndNil(FRefundArray[I]);
  System.SetLength(FRefundArray, 0);
  for I := 0 to System.Length(FPickupDetails)-1 do
    SysUtils.FreeAndNil(FPickupDetails[I]);
  System.SetLength(FPickupDetails, 0);
  for I := 0 to System.Length(FCancelDetail)-1 do
    SysUtils.FreeAndNil(FCancelDetail[I]);
  System.SetLength(FCancelDetail, 0);
  for I := 0 to System.Length(FBuyerTaxIdentifier)-1 do
    SysUtils.FreeAndNil(FBuyerTaxIdentifier[I]);
  System.SetLength(FBuyerTaxIdentifier, 0);
  for I := 0 to System.Length(FBuyerPackageEnclosures)-1 do
    SysUtils.FreeAndNil(FBuyerPackageEnclosures[I]);
  System.SetLength(FBuyerPackageEnclosures, 0);
  SysUtils.FreeAndNil(FAdjustmentAmount);
  SysUtils.FreeAndNil(FAmountPaid);
  SysUtils.FreeAndNil(FAmountSaved);
  SysUtils.FreeAndNil(FCheckoutStatus);
  SysUtils.FreeAndNil(FShippingDetails);
  SysUtils.FreeAndNil(FCreatedTime);
  SysUtils.FreeAndNil(FShippingAddress);
  SysUtils.FreeAndNil(FShippingServiceSelected);
  SysUtils.FreeAndNil(FSubtotal);
  SysUtils.FreeAndNil(FTotal);
  SysUtils.FreeAndNil(FPaidTime);
  SysUtils.FreeAndNil(FShippedTime);
  SysUtils.FreeAndNil(FPaymentHoldDetails);
  SysUtils.FreeAndNil(FRefundAmount);
  SysUtils.FreeAndNil(FMultiLegShippingDetails);
  SysUtils.FreeAndNil(FMonetaryDetails);
  SysUtils.FreeAndNil(FPickupMethodSelected);
  SysUtils.FreeAndNil(FShippingConvenienceCharge);
  inherited Destroy;
end;

procedure OrderType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function OrderType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure OrderType.SetOrderStatus(Index: Integer; const AOrderStatusCodeType: OrderStatusCodeType);
begin
  FOrderStatus := AOrderStatusCodeType;
  FOrderStatus_Specified := True;
end;

function OrderType.OrderStatus_Specified(Index: Integer): boolean;
begin
  Result := FOrderStatus_Specified;
end;

procedure OrderType.SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAdjustmentAmount := AAmountType;
  FAdjustmentAmount_Specified := True;
end;

function OrderType.AdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FAdjustmentAmount_Specified;
end;

procedure OrderType.SetAmountPaid(Index: Integer; const AAmountType: AmountType);
begin
  FAmountPaid := AAmountType;
  FAmountPaid_Specified := True;
end;

function OrderType.AmountPaid_Specified(Index: Integer): boolean;
begin
  Result := FAmountPaid_Specified;
end;

procedure OrderType.SetAmountSaved(Index: Integer; const AAmountType: AmountType);
begin
  FAmountSaved := AAmountType;
  FAmountSaved_Specified := True;
end;

function OrderType.AmountSaved_Specified(Index: Integer): boolean;
begin
  Result := FAmountSaved_Specified;
end;

procedure OrderType.SetCheckoutStatus(Index: Integer; const ACheckoutStatusType: CheckoutStatusType);
begin
  FCheckoutStatus := ACheckoutStatusType;
  FCheckoutStatus_Specified := True;
end;

function OrderType.CheckoutStatus_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutStatus_Specified;
end;

procedure OrderType.SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
begin
  FShippingDetails := AShippingDetailsType;
  FShippingDetails_Specified := True;
end;

function OrderType.ShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetails_Specified;
end;

procedure OrderType.SetCreatingUserRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FCreatingUserRole := ATradingRoleCodeType;
  FCreatingUserRole_Specified := True;
end;

function OrderType.CreatingUserRole_Specified(Index: Integer): boolean;
begin
  Result := FCreatingUserRole_Specified;
end;

procedure OrderType.SetCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreatedTime := ATXSDateTime;
  FCreatedTime_Specified := True;
end;

function OrderType.CreatedTime_Specified(Index: Integer): boolean;
begin
  Result := FCreatedTime_Specified;
end;

procedure OrderType.SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
begin
  FPaymentMethods := AArray_Of_BuyerPaymentMethodCodeType;
  FPaymentMethods_Specified := True;
end;

function OrderType.PaymentMethods_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethods_Specified;
end;

procedure OrderType.SetSellerEmail(Index: Integer; const Astring: string);
begin
  FSellerEmail := Astring;
  FSellerEmail_Specified := True;
end;

function OrderType.SellerEmail_Specified(Index: Integer): boolean;
begin
  Result := FSellerEmail_Specified;
end;

procedure OrderType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function OrderType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure OrderType.SetShippingServiceSelected(Index: Integer; const AShippingServiceOptionsType: ShippingServiceOptionsType);
begin
  FShippingServiceSelected := AShippingServiceOptionsType;
  FShippingServiceSelected_Specified := True;
end;

function OrderType.ShippingServiceSelected_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceSelected_Specified;
end;

procedure OrderType.SetSubtotal(Index: Integer; const AAmountType: AmountType);
begin
  FSubtotal := AAmountType;
  FSubtotal_Specified := True;
end;

function OrderType.Subtotal_Specified(Index: Integer): boolean;
begin
  Result := FSubtotal_Specified;
end;

procedure OrderType.SetTotal(Index: Integer; const AAmountType: AmountType);
begin
  FTotal := AAmountType;
  FTotal_Specified := True;
end;

function OrderType.Total_Specified(Index: Integer): boolean;
begin
  Result := FTotal_Specified;
end;

procedure OrderType.SetExternalTransaction(Index: Integer; const AArray_Of_ExternalTransactionType: Array_Of_ExternalTransactionType);
begin
  FExternalTransaction := AArray_Of_ExternalTransactionType;
  FExternalTransaction_Specified := True;
end;

function OrderType.ExternalTransaction_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransaction_Specified;
end;

procedure OrderType.SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
begin
  FTransactionArray := ATransactionArrayType;
  FTransactionArray_Specified := True;
end;

function OrderType.TransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FTransactionArray_Specified;
end;

procedure OrderType.SetBuyerUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FBuyerUserID := AUserIDType;
  FBuyerUserID_Specified := True;
end;

function OrderType.BuyerUserID_Specified(Index: Integer): boolean;
begin
  Result := FBuyerUserID_Specified;
end;

procedure OrderType.SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPaidTime := ATXSDateTime;
  FPaidTime_Specified := True;
end;

function OrderType.PaidTime_Specified(Index: Integer): boolean;
begin
  Result := FPaidTime_Specified;
end;

procedure OrderType.SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippedTime := ATXSDateTime;
  FShippedTime_Specified := True;
end;

function OrderType.ShippedTime_Specified(Index: Integer): boolean;
begin
  Result := FShippedTime_Specified;
end;

procedure OrderType.SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FIntegratedMerchantCreditCardEnabled := ABoolean;
  FIntegratedMerchantCreditCardEnabled_Specified := True;
end;

function OrderType.IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardEnabled_Specified;
end;

procedure OrderType.SetBundlePurchase(Index: Integer; const ABoolean: Boolean);
begin
  FBundlePurchase := ABoolean;
  FBundlePurchase_Specified := True;
end;

function OrderType.BundlePurchase_Specified(Index: Integer): boolean;
begin
  Result := FBundlePurchase_Specified;
end;

procedure OrderType.SetBuyerCheckoutMessage(Index: Integer; const Astring: string);
begin
  FBuyerCheckoutMessage := Astring;
  FBuyerCheckoutMessage_Specified := True;
end;

function OrderType.BuyerCheckoutMessage_Specified(Index: Integer): boolean;
begin
  Result := FBuyerCheckoutMessage_Specified;
end;

procedure OrderType.SetEIASToken(Index: Integer; const Astring: string);
begin
  FEIASToken := Astring;
  FEIASToken_Specified := True;
end;

function OrderType.EIASToken_Specified(Index: Integer): boolean;
begin
  Result := FEIASToken_Specified;
end;

procedure OrderType.SetPaymentHoldStatus(Index: Integer; const APaymentHoldStatusCodeType: PaymentHoldStatusCodeType);
begin
  FPaymentHoldStatus := APaymentHoldStatusCodeType;
  FPaymentHoldStatus_Specified := True;
end;

function OrderType.PaymentHoldStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldStatus_Specified;
end;

procedure OrderType.SetPaymentHoldDetails(Index: Integer; const APaymentHoldDetailType: PaymentHoldDetailType);
begin
  FPaymentHoldDetails := APaymentHoldDetailType;
  FPaymentHoldDetails_Specified := True;
end;

function OrderType.PaymentHoldDetails_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldDetails_Specified;
end;

procedure OrderType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function OrderType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure OrderType.SetRefundStatus(Index: Integer; const Astring: string);
begin
  FRefundStatus := Astring;
  FRefundStatus_Specified := True;
end;

function OrderType.RefundStatus_Specified(Index: Integer): boolean;
begin
  Result := FRefundStatus_Specified;
end;

procedure OrderType.SetRefundArray(Index: Integer; const ARefundArrayType: RefundArrayType);
begin
  FRefundArray := ARefundArrayType;
  FRefundArray_Specified := True;
end;

function OrderType.RefundArray_Specified(Index: Integer): boolean;
begin
  Result := FRefundArray_Specified;
end;

procedure OrderType.SetIsMultiLegShipping(Index: Integer; const ABoolean: Boolean);
begin
  FIsMultiLegShipping := ABoolean;
  FIsMultiLegShipping_Specified := True;
end;

function OrderType.IsMultiLegShipping_Specified(Index: Integer): boolean;
begin
  Result := FIsMultiLegShipping_Specified;
end;

procedure OrderType.SetMultiLegShippingDetails(Index: Integer; const AMultiLegShippingDetailsType: MultiLegShippingDetailsType);
begin
  FMultiLegShippingDetails := AMultiLegShippingDetailsType;
  FMultiLegShippingDetails_Specified := True;
end;

function OrderType.MultiLegShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FMultiLegShippingDetails_Specified;
end;

procedure OrderType.SetMonetaryDetails(Index: Integer; const APaymentsInformationType: PaymentsInformationType);
begin
  FMonetaryDetails := APaymentsInformationType;
  FMonetaryDetails_Specified := True;
end;

function OrderType.MonetaryDetails_Specified(Index: Integer): boolean;
begin
  Result := FMonetaryDetails_Specified;
end;

procedure OrderType.SetPickupDetails(Index: Integer; const APickupDetailsType: PickupDetailsType);
begin
  FPickupDetails := APickupDetailsType;
  FPickupDetails_Specified := True;
end;

function OrderType.PickupDetails_Specified(Index: Integer): boolean;
begin
  Result := FPickupDetails_Specified;
end;

procedure OrderType.SetPickupMethodSelected(Index: Integer; const APickupMethodSelectedType: PickupMethodSelectedType);
begin
  FPickupMethodSelected := APickupMethodSelectedType;
  FPickupMethodSelected_Specified := True;
end;

function OrderType.PickupMethodSelected_Specified(Index: Integer): boolean;
begin
  Result := FPickupMethodSelected_Specified;
end;

procedure OrderType.SetSellerUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSellerUserID := AUserIDType;
  FSellerUserID_Specified := True;
end;

function OrderType.SellerUserID_Specified(Index: Integer): boolean;
begin
  Result := FSellerUserID_Specified;
end;

procedure OrderType.SetSellerEIASToken(Index: Integer; const Astring: string);
begin
  FSellerEIASToken := Astring;
  FSellerEIASToken_Specified := True;
end;

function OrderType.SellerEIASToken_Specified(Index: Integer): boolean;
begin
  Result := FSellerEIASToken_Specified;
end;

procedure OrderType.SetCancelReason(Index: Integer; const Astring: string);
begin
  FCancelReason := Astring;
  FCancelReason_Specified := True;
end;

function OrderType.CancelReason_Specified(Index: Integer): boolean;
begin
  Result := FCancelReason_Specified;
end;

procedure OrderType.SetCancelStatus(Index: Integer; const ACancelStatusCodeType: CancelStatusCodeType);
begin
  FCancelStatus := ACancelStatusCodeType;
  FCancelStatus_Specified := True;
end;

function OrderType.CancelStatus_Specified(Index: Integer): boolean;
begin
  Result := FCancelStatus_Specified;
end;

procedure OrderType.SetCancelReasonDetails(Index: Integer; const Astring: string);
begin
  FCancelReasonDetails := Astring;
  FCancelReasonDetails_Specified := True;
end;

function OrderType.CancelReasonDetails_Specified(Index: Integer): boolean;
begin
  Result := FCancelReasonDetails_Specified;
end;

procedure OrderType.SetShippingConvenienceCharge(Index: Integer; const AAmountType: AmountType);
begin
  FShippingConvenienceCharge := AAmountType;
  FShippingConvenienceCharge_Specified := True;
end;

function OrderType.ShippingConvenienceCharge_Specified(Index: Integer): boolean;
begin
  Result := FShippingConvenienceCharge_Specified;
end;

procedure OrderType.SetCancelDetail(Index: Integer; const AArray_Of_CancelDetailType: Array_Of_CancelDetailType);
begin
  FCancelDetail := AArray_Of_CancelDetailType;
  FCancelDetail_Specified := True;
end;

function OrderType.CancelDetail_Specified(Index: Integer): boolean;
begin
  Result := FCancelDetail_Specified;
end;

procedure OrderType.SetLogisticsPlanType(Index: Integer; const Astring: string);
begin
  FLogisticsPlanType := Astring;
  FLogisticsPlanType_Specified := True;
end;

function OrderType.LogisticsPlanType_Specified(Index: Integer): boolean;
begin
  Result := FLogisticsPlanType_Specified;
end;

procedure OrderType.SetBuyerTaxIdentifier(Index: Integer; const AArray_Of_TaxIdentifierType: Array_Of_TaxIdentifierType);
begin
  FBuyerTaxIdentifier := AArray_Of_TaxIdentifierType;
  FBuyerTaxIdentifier_Specified := True;
end;

function OrderType.BuyerTaxIdentifier_Specified(Index: Integer): boolean;
begin
  Result := FBuyerTaxIdentifier_Specified;
end;

procedure OrderType.SetBuyerPackageEnclosures(Index: Integer; const ABuyerPackageEnclosuresType: BuyerPackageEnclosuresType);
begin
  FBuyerPackageEnclosures := ABuyerPackageEnclosuresType;
  FBuyerPackageEnclosures_Specified := True;
end;

function OrderType.BuyerPackageEnclosures_Specified(Index: Integer): boolean;
begin
  Result := FBuyerPackageEnclosures_Specified;
end;

procedure OrderType.SetExtendedOrderID(Index: Integer; const Astring: string);
begin
  FExtendedOrderID := Astring;
  FExtendedOrderID_Specified := True;
end;

function OrderType.ExtendedOrderID_Specified(Index: Integer): boolean;
begin
  Result := FExtendedOrderID_Specified;
end;

procedure OrderType.SetContainseBayPlusTransaction(Index: Integer; const ABoolean: Boolean);
begin
  FContainseBayPlusTransaction := ABoolean;
  FContainseBayPlusTransaction_Specified := True;
end;

function OrderType.ContainseBayPlusTransaction_Specified(Index: Integer): boolean;
begin
  Result := FContainseBayPlusTransaction_Specified;
end;

procedure OrderType.SeteBayCollectAndRemitTax(Index: Integer; const ABoolean: Boolean);
begin
  FeBayCollectAndRemitTax := ABoolean;
  FeBayCollectAndRemitTax_Specified := True;
end;

function OrderType.eBayCollectAndRemitTax_Specified(Index: Integer): boolean;
begin
  Result := FeBayCollectAndRemitTax_Specified;
end;

procedure OrderType.SetOrderLineItemCount(Index: Integer; const AInt64: Int64);
begin
  FOrderLineItemCount := AInt64;
  FOrderLineItemCount_Specified := True;
end;

function OrderType.OrderLineItemCount_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemCount_Specified;
end;

destructor BusinessSellerDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FAddress);
  SysUtils.FreeAndNil(FVATDetails);
  inherited Destroy;
end;

procedure BusinessSellerDetailsType.SetAddress(Index: Integer; const AAddressType: AddressType);
begin
  FAddress := AAddressType;
  FAddress_Specified := True;
end;

function BusinessSellerDetailsType.Address_Specified(Index: Integer): boolean;
begin
  Result := FAddress_Specified;
end;

procedure BusinessSellerDetailsType.SetFax(Index: Integer; const Astring: string);
begin
  FFax := Astring;
  FFax_Specified := True;
end;

function BusinessSellerDetailsType.Fax_Specified(Index: Integer): boolean;
begin
  Result := FFax_Specified;
end;

procedure BusinessSellerDetailsType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function BusinessSellerDetailsType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure BusinessSellerDetailsType.SetAdditionalContactInformation(Index: Integer; const Astring: string);
begin
  FAdditionalContactInformation := Astring;
  FAdditionalContactInformation_Specified := True;
end;

function BusinessSellerDetailsType.AdditionalContactInformation_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalContactInformation_Specified;
end;

procedure BusinessSellerDetailsType.SetTradeRegistrationNumber(Index: Integer; const Astring: string);
begin
  FTradeRegistrationNumber := Astring;
  FTradeRegistrationNumber_Specified := True;
end;

function BusinessSellerDetailsType.TradeRegistrationNumber_Specified(Index: Integer): boolean;
begin
  Result := FTradeRegistrationNumber_Specified;
end;

procedure BusinessSellerDetailsType.SetLegalInvoice(Index: Integer; const ABoolean: Boolean);
begin
  FLegalInvoice := ABoolean;
  FLegalInvoice_Specified := True;
end;

function BusinessSellerDetailsType.LegalInvoice_Specified(Index: Integer): boolean;
begin
  Result := FLegalInvoice_Specified;
end;

procedure BusinessSellerDetailsType.SetTermsAndConditions(Index: Integer; const Astring: string);
begin
  FTermsAndConditions := Astring;
  FTermsAndConditions_Specified := True;
end;

function BusinessSellerDetailsType.TermsAndConditions_Specified(Index: Integer): boolean;
begin
  Result := FTermsAndConditions_Specified;
end;

procedure BusinessSellerDetailsType.SetVATDetails(Index: Integer; const AVATDetailsType: VATDetailsType);
begin
  FVATDetails := AVATDetailsType;
  FVATDetails_Specified := True;
end;

function BusinessSellerDetailsType.VATDetails_Specified(Index: Integer): boolean;
begin
  Result := FVATDetails_Specified;
end;

procedure Base64BinaryType.SetcontentType(Index: Integer; const Astring: string);
begin
  FcontentType := Astring;
  FcontentType_Specified := True;
end;

function Base64BinaryType.contentType_Specified(Index: Integer): boolean;
begin
  Result := FcontentType_Specified;
end;

destructor BidGroupType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBidGroupItem)-1 do
    SysUtils.FreeAndNil(FBidGroupItem[I]);
  System.SetLength(FBidGroupItem, 0);
  inherited Destroy;
end;

procedure BidGroupType.SetBidGroupItem(Index: Integer; const AArray_Of_BidGroupItemType: Array_Of_BidGroupItemType);
begin
  FBidGroupItem := AArray_Of_BidGroupItemType;
  FBidGroupItem_Specified := True;
end;

function BidGroupType.BidGroupItem_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupItem_Specified;
end;

procedure BidGroupType.SetBidGroupID(Index: Integer; const AInt64: Int64);
begin
  FBidGroupID := AInt64;
  FBidGroupID_Specified := True;
end;

function BidGroupType.BidGroupID_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupID_Specified;
end;

procedure BidGroupType.SetBidGroupName(Index: Integer; const Astring: string);
begin
  FBidGroupName := Astring;
  FBidGroupName_Specified := True;
end;

function BidGroupType.BidGroupName_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupName_Specified;
end;

procedure BidGroupType.SetBidGroupStatus(Index: Integer; const ABidGroupStatusCodeType: BidGroupStatusCodeType);
begin
  FBidGroupStatus := ABidGroupStatusCodeType;
  FBidGroupStatus_Specified := True;
end;

function BidGroupType.BidGroupStatus_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupStatus_Specified;
end;

destructor BidGroupItemType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  SysUtils.FreeAndNil(FMaxBidAmount);
  inherited Destroy;
end;

procedure BidGroupItemType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function BidGroupItemType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure BidGroupItemType.SetBidGroupItemStatus(Index: Integer; const ABidGroupItemStatusCodeType: BidGroupItemStatusCodeType);
begin
  FBidGroupItemStatus := ABidGroupItemStatusCodeType;
  FBidGroupItemStatus_Specified := True;
end;

function BidGroupItemType.BidGroupItemStatus_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupItemStatus_Specified;
end;

procedure BidGroupItemType.SetMaxBidAmount(Index: Integer; const AAmountType: AmountType);
begin
  FMaxBidAmount := AAmountType;
  FMaxBidAmount_Specified := True;
end;

function BidGroupItemType.MaxBidAmount_Specified(Index: Integer): boolean;
begin
  Result := FMaxBidAmount_Specified;
end;

destructor BestOfferDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FBestOffer);
  inherited Destroy;
end;

procedure BestOfferDetailsType.SetBestOfferCount(Index: Integer; const AInteger: Integer);
begin
  FBestOfferCount := AInteger;
  FBestOfferCount_Specified := True;
end;

function BestOfferDetailsType.BestOfferCount_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCount_Specified;
end;

procedure BestOfferDetailsType.SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferEnabled := ABoolean;
  FBestOfferEnabled_Specified := True;
end;

function BestOfferDetailsType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure BestOfferDetailsType.SetBestOffer(Index: Integer; const AAmountType: AmountType);
begin
  FBestOffer := AAmountType;
  FBestOffer_Specified := True;
end;

function BestOfferDetailsType.BestOffer_Specified(Index: Integer): boolean;
begin
  Result := FBestOffer_Specified;
end;

procedure BestOfferDetailsType.SetBestOfferStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
begin
  FBestOfferStatus := ABestOfferStatusCodeType;
  FBestOfferStatus_Specified := True;
end;

function BestOfferDetailsType.BestOfferStatus_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferStatus_Specified;
end;

procedure BestOfferDetailsType.SetBestOfferType(Index: Integer; const ABestOfferTypeCodeType: BestOfferTypeCodeType);
begin
  FBestOfferType := ABestOfferTypeCodeType;
  FBestOfferType_Specified := True;
end;

function BestOfferDetailsType.BestOfferType_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferType_Specified;
end;

procedure BestOfferDetailsType.SetNewBestOffer(Index: Integer; const ABoolean: Boolean);
begin
  FNewBestOffer := ABoolean;
  FNewBestOffer_Specified := True;
end;

function BestOfferDetailsType.NewBestOffer_Specified(Index: Integer): boolean;
begin
  Result := FNewBestOffer_Specified;
end;

destructor BestOfferType.Destroy;
begin
  SysUtils.FreeAndNil(FExpirationTime);
  SysUtils.FreeAndNil(FBuyer);
  SysUtils.FreeAndNil(FPrice);
  inherited Destroy;
end;

procedure BestOfferType.SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
begin
  FBestOfferID := ABestOfferIDType;
  FBestOfferID_Specified := True;
end;

function BestOfferType.BestOfferID_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferID_Specified;
end;

procedure BestOfferType.SetExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FExpirationTime := ATXSDateTime;
  FExpirationTime_Specified := True;
end;

function BestOfferType.ExpirationTime_Specified(Index: Integer): boolean;
begin
  Result := FExpirationTime_Specified;
end;

procedure BestOfferType.SetBuyer(Index: Integer; const AUserType: UserType);
begin
  FBuyer := AUserType;
  FBuyer_Specified := True;
end;

function BestOfferType.Buyer_Specified(Index: Integer): boolean;
begin
  Result := FBuyer_Specified;
end;

procedure BestOfferType.SetPrice(Index: Integer; const AAmountType: AmountType);
begin
  FPrice := AAmountType;
  FPrice_Specified := True;
end;

function BestOfferType.Price_Specified(Index: Integer): boolean;
begin
  Result := FPrice_Specified;
end;

procedure BestOfferType.SetStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
begin
  FStatus := ABestOfferStatusCodeType;
  FStatus_Specified := True;
end;

function BestOfferType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure BestOfferType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function BestOfferType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure BestOfferType.SetBuyerMessage(Index: Integer; const Astring: string);
begin
  FBuyerMessage := Astring;
  FBuyerMessage_Specified := True;
end;

function BestOfferType.BuyerMessage_Specified(Index: Integer): boolean;
begin
  Result := FBuyerMessage_Specified;
end;

procedure BestOfferType.SetSellerMessage(Index: Integer; const Astring: string);
begin
  FSellerMessage := Astring;
  FSellerMessage_Specified := True;
end;

function BestOfferType.SellerMessage_Specified(Index: Integer): boolean;
begin
  Result := FSellerMessage_Specified;
end;

procedure BestOfferType.SetBestOfferCodeType(Index: Integer; const ABestOfferTypeCodeType: BestOfferTypeCodeType);
begin
  FBestOfferCodeType := ABestOfferTypeCodeType;
  FBestOfferCodeType_Specified := True;
end;

function BestOfferType.BestOfferCodeType_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCodeType_Specified;
end;

procedure BestOfferType.SetCallStatus(Index: Integer; const Astring: string);
begin
  FCallStatus := Astring;
  FCallStatus_Specified := True;
end;

function BestOfferType.CallStatus_Specified(Index: Integer): boolean;
begin
  Result := FCallStatus_Specified;
end;

procedure BestOfferType.SetNewBestOffer(Index: Integer; const ABoolean: Boolean);
begin
  FNewBestOffer := ABoolean;
  FNewBestOffer_Specified := True;
end;

function BestOfferType.NewBestOffer_Specified(Index: Integer): boolean;
begin
  Result := FNewBestOffer_Specified;
end;

procedure BestOfferType.SetImmediatePayEligible(Index: Integer; const ABoolean: Boolean);
begin
  FImmediatePayEligible := ABoolean;
  FImmediatePayEligible_Specified := True;
end;

function BestOfferType.ImmediatePayEligible_Specified(Index: Integer): boolean;
begin
  Result := FImmediatePayEligible_Specified;
end;

destructor CancelDetailType.Destroy;
begin
  SysUtils.FreeAndNil(FCancelIntiationDate);
  SysUtils.FreeAndNil(FCancelCompleteDate);
  inherited Destroy;
end;

procedure CancelDetailType.SetCancelReason(Index: Integer; const Astring: string);
begin
  FCancelReason := Astring;
  FCancelReason_Specified := True;
end;

function CancelDetailType.CancelReason_Specified(Index: Integer): boolean;
begin
  Result := FCancelReason_Specified;
end;

procedure CancelDetailType.SetCancelReasonDetails(Index: Integer; const Astring: string);
begin
  FCancelReasonDetails := Astring;
  FCancelReasonDetails_Specified := True;
end;

function CancelDetailType.CancelReasonDetails_Specified(Index: Integer): boolean;
begin
  Result := FCancelReasonDetails_Specified;
end;

procedure CancelDetailType.SetCancelIntiator(Index: Integer; const Astring: string);
begin
  FCancelIntiator := Astring;
  FCancelIntiator_Specified := True;
end;

function CancelDetailType.CancelIntiator_Specified(Index: Integer): boolean;
begin
  Result := FCancelIntiator_Specified;
end;

procedure CancelDetailType.SetCancelIntiationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCancelIntiationDate := ATXSDateTime;
  FCancelIntiationDate_Specified := True;
end;

function CancelDetailType.CancelIntiationDate_Specified(Index: Integer): boolean;
begin
  Result := FCancelIntiationDate_Specified;
end;

procedure CancelDetailType.SetCancelCompleteDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCancelCompleteDate := ATXSDateTime;
  FCancelCompleteDate_Specified := True;
end;

function CancelDetailType.CancelCompleteDate_Specified(Index: Integer): boolean;
begin
  Result := FCancelCompleteDate_Specified;
end;

destructor CalculatedShippingPreferencesType.Destroy;
begin
  SysUtils.FreeAndNil(FCalculatedShippingAmountForEntireOrder);
  inherited Destroy;
end;

procedure CalculatedShippingPreferencesType.SetCalculatedShippingAmountForEntireOrder(Index: Integer; const AAmountType: AmountType);
begin
  FCalculatedShippingAmountForEntireOrder := AAmountType;
  FCalculatedShippingAmountForEntireOrder_Specified := True;
end;

function CalculatedShippingPreferencesType.CalculatedShippingAmountForEntireOrder_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingAmountForEntireOrder_Specified;
end;

procedure CalculatedShippingPreferencesType.SetCalculatedShippingChargeOption(Index: Integer; const ACalculatedShippingChargeOptionCodeType: CalculatedShippingChargeOptionCodeType);
begin
  FCalculatedShippingChargeOption := ACalculatedShippingChargeOptionCodeType;
  FCalculatedShippingChargeOption_Specified := True;
end;

function CalculatedShippingPreferencesType.CalculatedShippingChargeOption_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingChargeOption_Specified;
end;

procedure CalculatedShippingPreferencesType.SetCalculatedShippingRateOption(Index: Integer; const ACalculatedShippingRateOptionCodeType: CalculatedShippingRateOptionCodeType);
begin
  FCalculatedShippingRateOption := ACalculatedShippingRateOptionCodeType;
  FCalculatedShippingRateOption_Specified := True;
end;

function CalculatedShippingPreferencesType.CalculatedShippingRateOption_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingRateOption_Specified;
end;

procedure CalculatedShippingPreferencesType.SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
begin
  FInsuranceOption := AInsuranceOptionCodeType;
  FInsuranceOption_Specified := True;
end;

function CalculatedShippingPreferencesType.InsuranceOption_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceOption_Specified;
end;

destructor CategoryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FProductFinderIDs)-1 do
    SysUtils.FreeAndNil(FProductFinderIDs[I]);
  System.SetLength(FProductFinderIDs, 0);
  for I := 0 to System.Length(FCharacteristicsSets)-1 do
    SysUtils.FreeAndNil(FCharacteristicsSets[I]);
  System.SetLength(FCharacteristicsSets, 0);
  inherited Destroy;
end;

procedure CategoryType.SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferEnabled := ABoolean;
  FBestOfferEnabled_Specified := True;
end;

function CategoryType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure CategoryType.SetAutoPayEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FAutoPayEnabled := ABoolean;
  FAutoPayEnabled_Specified := True;
end;

function CategoryType.AutoPayEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAutoPayEnabled_Specified;
end;

procedure CategoryType.SetB2BVATEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FB2BVATEnabled := ABoolean;
  FB2BVATEnabled_Specified := True;
end;

function CategoryType.B2BVATEnabled_Specified(Index: Integer): boolean;
begin
  Result := FB2BVATEnabled_Specified;
end;

procedure CategoryType.SetCatalogEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCatalogEnabled := ABoolean;
  FCatalogEnabled_Specified := True;
end;

function CategoryType.CatalogEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCatalogEnabled_Specified;
end;

procedure CategoryType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function CategoryType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure CategoryType.SetCategoryLevel(Index: Integer; const AInteger: Integer);
begin
  FCategoryLevel := AInteger;
  FCategoryLevel_Specified := True;
end;

function CategoryType.CategoryLevel_Specified(Index: Integer): boolean;
begin
  Result := FCategoryLevel_Specified;
end;

procedure CategoryType.SetCategoryName(Index: Integer; const Astring: string);
begin
  FCategoryName := Astring;
  FCategoryName_Specified := True;
end;

function CategoryType.CategoryName_Specified(Index: Integer): boolean;
begin
  Result := FCategoryName_Specified;
end;

procedure CategoryType.SetCategoryParentID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCategoryParentID := ASellerExcludeShipToLocationPreferencesType;
  FCategoryParentID_Specified := True;
end;

function CategoryType.CategoryParentID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryParentID_Specified;
end;

procedure CategoryType.SetCategoryParentName(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCategoryParentName := ASellerExcludeShipToLocationPreferencesType;
  FCategoryParentName_Specified := True;
end;

function CategoryType.CategoryParentName_Specified(Index: Integer): boolean;
begin
  Result := FCategoryParentName_Specified;
end;

procedure CategoryType.SetProductSearchPageAvailable(Index: Integer; const ABoolean: Boolean);
begin
  FProductSearchPageAvailable := ABoolean;
  FProductSearchPageAvailable_Specified := True;
end;

function CategoryType.ProductSearchPageAvailable_Specified(Index: Integer): boolean;
begin
  Result := FProductSearchPageAvailable_Specified;
end;

procedure CategoryType.SetProductFinderIDs(Index: Integer; const AArray_Of_ExtendedProductFinderIDType: Array_Of_ExtendedProductFinderIDType);
begin
  FProductFinderIDs := AArray_Of_ExtendedProductFinderIDType;
  FProductFinderIDs_Specified := True;
end;

function CategoryType.ProductFinderIDs_Specified(Index: Integer): boolean;
begin
  Result := FProductFinderIDs_Specified;
end;

procedure CategoryType.SetCharacteristicsSets(Index: Integer; const AArray_Of_CharacteristicsSetType: Array_Of_CharacteristicsSetType);
begin
  FCharacteristicsSets := AArray_Of_CharacteristicsSetType;
  FCharacteristicsSets_Specified := True;
end;

function CategoryType.CharacteristicsSets_Specified(Index: Integer): boolean;
begin
  Result := FCharacteristicsSets_Specified;
end;

procedure CategoryType.SetExpired(Index: Integer; const ABoolean: Boolean);
begin
  FExpired := ABoolean;
  FExpired_Specified := True;
end;

function CategoryType.Expired_Specified(Index: Integer): boolean;
begin
  Result := FExpired_Specified;
end;

procedure CategoryType.SetIntlAutosFixedCat(Index: Integer; const ABoolean: Boolean);
begin
  FIntlAutosFixedCat := ABoolean;
  FIntlAutosFixedCat_Specified := True;
end;

function CategoryType.IntlAutosFixedCat_Specified(Index: Integer): boolean;
begin
  Result := FIntlAutosFixedCat_Specified;
end;

procedure CategoryType.SetLeafCategory(Index: Integer; const ABoolean: Boolean);
begin
  FLeafCategory := ABoolean;
  FLeafCategory_Specified := True;
end;

function CategoryType.LeafCategory_Specified(Index: Integer): boolean;
begin
  Result := FLeafCategory_Specified;
end;

procedure CategoryType.SetVirtual_(Index: Integer; const ABoolean: Boolean);
begin
  FVirtual_ := ABoolean;
  FVirtual__Specified := True;
end;

function CategoryType.Virtual__Specified(Index: Integer): boolean;
begin
  Result := FVirtual__Specified;
end;

procedure CategoryType.SetNumOfItems(Index: Integer; const AInteger: Integer);
begin
  FNumOfItems := AInteger;
  FNumOfItems_Specified := True;
end;

function CategoryType.NumOfItems_Specified(Index: Integer): boolean;
begin
  Result := FNumOfItems_Specified;
end;

procedure CategoryType.SetSellerGuaranteeEligible(Index: Integer; const ABoolean: Boolean);
begin
  FSellerGuaranteeEligible := ABoolean;
  FSellerGuaranteeEligible_Specified := True;
end;

function CategoryType.SellerGuaranteeEligible_Specified(Index: Integer): boolean;
begin
  Result := FSellerGuaranteeEligible_Specified;
end;

procedure CategoryType.SetORPA(Index: Integer; const ABoolean: Boolean);
begin
  FORPA := ABoolean;
  FORPA_Specified := True;
end;

function CategoryType.ORPA_Specified(Index: Integer): boolean;
begin
  Result := FORPA_Specified;
end;

procedure CategoryType.SetORRA(Index: Integer; const ABoolean: Boolean);
begin
  FORRA := ABoolean;
  FORRA_Specified := True;
end;

function CategoryType.ORRA_Specified(Index: Integer): boolean;
begin
  Result := FORRA_Specified;
end;

procedure CategoryType.SetLSD(Index: Integer; const ABoolean: Boolean);
begin
  FLSD := ABoolean;
  FLSD_Specified := True;
end;

function CategoryType.LSD_Specified(Index: Integer): boolean;
begin
  Result := FLSD_Specified;
end;

procedure CategoryType.SetKeywords(Index: Integer; const Astring: string);
begin
  FKeywords := Astring;
  FKeywords_Specified := True;
end;

function CategoryType.Keywords_Specified(Index: Integer): boolean;
begin
  Result := FKeywords_Specified;
end;

procedure ListingDurationDefinitionType.SetdurationSetID(Index: Integer; const AInteger: Integer);
begin
  FdurationSetID := AInteger;
  FdurationSetID_Specified := True;
end;

function ListingDurationDefinitionType.durationSetID_Specified(Index: Integer): boolean;
begin
  Result := FdurationSetID_Specified;
end;

procedure ListingDurationDefinitionType.SetDuration(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
begin
  FDuration := AListingEnhancementDurationReferenceType;
  FDuration_Specified := True;
end;

function ListingDurationDefinitionType.Duration_Specified(Index: Integer): boolean;
begin
  Result := FDuration_Specified;
end;

procedure ListingDurationReferenceType.Settype_(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  Ftype_ := AListingTypeCodeType;
  Ftype__Specified := True;
end;

function ListingDurationReferenceType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

destructor SiteDefaultsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FListingDuration)-1 do
    SysUtils.FreeAndNil(FListingDuration[I]);
  System.SetLength(FListingDuration, 0);
  SysUtils.FreeAndNil(FMaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup1MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup2MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup3MaxFlatShippingCost);
  SysUtils.FreeAndNil(FConditionValues);
  inherited Destroy;
end;

procedure SiteDefaultsType.SetListingDuration(Index: Integer; const AArray_Of_ListingDurationReferenceType: Array_Of_ListingDurationReferenceType);
begin
  FListingDuration := AArray_Of_ListingDurationReferenceType;
  FListingDuration_Specified := True;
end;

function SiteDefaultsType.ListingDuration_Specified(Index: Integer): boolean;
begin
  Result := FListingDuration_Specified;
end;

procedure SiteDefaultsType.SetShippingTermsRequired(Index: Integer; const ABoolean: Boolean);
begin
  FShippingTermsRequired := ABoolean;
  FShippingTermsRequired_Specified := True;
end;

function SiteDefaultsType.ShippingTermsRequired_Specified(Index: Integer): boolean;
begin
  Result := FShippingTermsRequired_Specified;
end;

procedure SiteDefaultsType.SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferEnabled := ABoolean;
  FBestOfferEnabled_Specified := True;
end;

function SiteDefaultsType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SetDutchBINEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FDutchBINEnabled := ABoolean;
  FDutchBINEnabled_Specified := True;
end;

function SiteDefaultsType.DutchBINEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDutchBINEnabled_Specified;
end;

procedure SiteDefaultsType.SetUserConsentRequired(Index: Integer; const ABoolean: Boolean);
begin
  FUserConsentRequired := ABoolean;
  FUserConsentRequired_Specified := True;
end;

function SiteDefaultsType.UserConsentRequired_Specified(Index: Integer): boolean;
begin
  Result := FUserConsentRequired_Specified;
end;

procedure SiteDefaultsType.SetHomePageFeaturedEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FHomePageFeaturedEnabled := ABoolean;
  FHomePageFeaturedEnabled_Specified := True;
end;

function SiteDefaultsType.HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHomePageFeaturedEnabled_Specified;
end;

procedure SiteDefaultsType.SetProPackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FProPackEnabled := ABoolean;
  FProPackEnabled_Specified := True;
end;

function SiteDefaultsType.ProPackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackEnabled_Specified;
end;

procedure SiteDefaultsType.SetBasicUpgradePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBasicUpgradePackEnabled := ABoolean;
  FBasicUpgradePackEnabled_Specified := True;
end;

function SiteDefaultsType.BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBasicUpgradePackEnabled_Specified;
end;

procedure SiteDefaultsType.SetValuePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FValuePackEnabled := ABoolean;
  FValuePackEnabled_Specified := True;
end;

function SiteDefaultsType.ValuePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FValuePackEnabled_Specified;
end;

procedure SiteDefaultsType.SetProPackPlusEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FProPackPlusEnabled := ABoolean;
  FProPackPlusEnabled_Specified := True;
end;

function SiteDefaultsType.ProPackPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackPlusEnabled_Specified;
end;

procedure SiteDefaultsType.SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FAdFormatEnabled := AAdFormatEnabledCodeType;
  FAdFormatEnabled_Specified := True;
end;

function SiteDefaultsType.AdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdFormatEnabled_Specified;
end;

procedure SiteDefaultsType.SetBestOfferCounterEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferCounterEnabled := ABoolean;
  FBestOfferCounterEnabled_Specified := True;
end;

function SiteDefaultsType.BestOfferCounterEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCounterEnabled_Specified;
end;

procedure SiteDefaultsType.SetBestOfferAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferAutoDeclineEnabled := ABoolean;
  FBestOfferAutoDeclineEnabled_Specified := True;
end;

function SiteDefaultsType.BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoDeclineEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketSpecialitySubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketSpecialitySubscription := ABoolean;
  FLocalMarketSpecialitySubscription_Specified := True;
end;

function SiteDefaultsType.LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSpecialitySubscription_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketRegularSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketRegularSubscription := ABoolean;
  FLocalMarketRegularSubscription_Specified := True;
end;

function SiteDefaultsType.LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketRegularSubscription_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketPremiumSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketPremiumSubscription := ABoolean;
  FLocalMarketPremiumSubscription_Specified := True;
end;

function SiteDefaultsType.LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPremiumSubscription_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketNonSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketNonSubscription := ABoolean;
  FLocalMarketNonSubscription_Specified := True;
end;

function SiteDefaultsType.LocalMarketNonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketNonSubscription_Specified;
end;

procedure SiteDefaultsType.SetExpressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FExpressEnabled := ABoolean;
  FExpressEnabled_Specified := True;
end;

function SiteDefaultsType.ExpressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FExpressEnabled_Specified;
end;

procedure SiteDefaultsType.SetExpressPicturesRequired(Index: Integer; const ABoolean: Boolean);
begin
  FExpressPicturesRequired := ABoolean;
  FExpressPicturesRequired_Specified := True;
end;

function SiteDefaultsType.ExpressPicturesRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressPicturesRequired_Specified;
end;

procedure SiteDefaultsType.SetExpressConditionRequired(Index: Integer; const ABoolean: Boolean);
begin
  FExpressConditionRequired := ABoolean;
  FExpressConditionRequired_Specified := True;
end;

function SiteDefaultsType.ExpressConditionRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressConditionRequired_Specified;
end;

procedure SiteDefaultsType.SetMinimumReservePrice(Index: Integer; const ADouble: Double);
begin
  FMinimumReservePrice := ADouble;
  FMinimumReservePrice_Specified := True;
end;

function SiteDefaultsType.MinimumReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumReservePrice_Specified;
end;

procedure SiteDefaultsType.SetSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSellerContactDetailsEnabled := ABoolean;
  FSellerContactDetailsEnabled_Specified := True;
end;

function SiteDefaultsType.SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSellerContactDetailsEnabled_Specified;
end;

procedure SiteDefaultsType.SetTransactionConfirmationRequestEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FTransactionConfirmationRequestEnabled := ABoolean;
  FTransactionConfirmationRequestEnabled_Specified := True;
end;

function SiteDefaultsType.TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
begin
  Result := FTransactionConfirmationRequestEnabled_Specified;
end;

procedure SiteDefaultsType.SetStoreInventoryEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FStoreInventoryEnabled := ABoolean;
  FStoreInventoryEnabled_Specified := True;
end;

function SiteDefaultsType.StoreInventoryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreInventoryEnabled_Specified;
end;

procedure SiteDefaultsType.SetSkypeMeTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSkypeMeTransactionalEnabled := ABoolean;
  FSkypeMeTransactionalEnabled_Specified := True;
end;

function SiteDefaultsType.SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeTransactionalEnabled_Specified;
end;

procedure SiteDefaultsType.SetSkypeMeNonTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSkypeMeNonTransactionalEnabled := ABoolean;
  FSkypeMeNonTransactionalEnabled_Specified := True;
end;

function SiteDefaultsType.SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeNonTransactionalEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalListingDistancesRegular(Index: Integer; const Astring: string);
begin
  FLocalListingDistancesRegular := Astring;
  FLocalListingDistancesRegular_Specified := True;
end;

function SiteDefaultsType.LocalListingDistancesRegular_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesRegular_Specified;
end;

procedure SiteDefaultsType.SetLocalListingDistancesSpecialty(Index: Integer; const Astring: string);
begin
  FLocalListingDistancesSpecialty := Astring;
  FLocalListingDistancesSpecialty_Specified := True;
end;

function SiteDefaultsType.LocalListingDistancesSpecialty_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesSpecialty_Specified;
end;

procedure SiteDefaultsType.SetLocalListingDistancesNonSubscription(Index: Integer; const Astring: string);
begin
  FLocalListingDistancesNonSubscription := Astring;
  FLocalListingDistancesNonSubscription_Specified := True;
end;

function SiteDefaultsType.LocalListingDistancesNonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalListingDistancesNonSubscription_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FClassifiedAdPaymentMethodEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FClassifiedAdPaymentMethodEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPaymentMethodEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdShippingMethodEnabled := ABoolean;
  FClassifiedAdShippingMethodEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdShippingMethodEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FClassifiedAdBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FClassifiedAdBestOfferEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdBestOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdCounterOfferEnabled := ABoolean;
  FClassifiedAdCounterOfferEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCounterOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdAutoDeclineEnabled := ABoolean;
  FClassifiedAdAutoDeclineEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoDeclineEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByPhoneEnabled := ABoolean;
  FClassifiedAdContactByPhoneEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByPhoneEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByEmailEnabled := ABoolean;
  FClassifiedAdContactByEmailEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByEmailEnabled_Specified;
end;

procedure SiteDefaultsType.SetSafePaymentRequired(Index: Integer; const ABoolean: Boolean);
begin
  FSafePaymentRequired := ABoolean;
  FSafePaymentRequired_Specified := True;
end;

function SiteDefaultsType.SafePaymentRequired_Specified(Index: Integer): boolean;
begin
  Result := FSafePaymentRequired_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdPayPerLeadEnabled := ABoolean;
  FClassifiedAdPayPerLeadEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPayPerLeadEnabled_Specified;
end;

procedure SiteDefaultsType.SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledCodeType: ItemSpecificsEnabledCodeType);
begin
  FItemSpecificsEnabled := AItemSpecificsEnabledCodeType;
  FItemSpecificsEnabled_Specified := True;
end;

function SiteDefaultsType.ItemSpecificsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecificsEnabled_Specified;
end;

procedure SiteDefaultsType.SetPaisaPayFullEscrowEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPaisaPayFullEscrowEnabled := ABoolean;
  FPaisaPayFullEscrowEnabled_Specified := True;
end;

function SiteDefaultsType.PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayFullEscrowEnabled_Specified;
end;

procedure SiteDefaultsType.SetISBNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FISBNIdentifierEnabled := ABoolean;
  FISBNIdentifierEnabled_Specified := True;
end;

function SiteDefaultsType.ISBNIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FISBNIdentifierEnabled_Specified;
end;

procedure SiteDefaultsType.SetUPCIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FUPCIdentifierEnabled := ABoolean;
  FUPCIdentifierEnabled_Specified := True;
end;

function SiteDefaultsType.UPCIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FUPCIdentifierEnabled_Specified;
end;

procedure SiteDefaultsType.SetEANIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FEANIdentifierEnabled := ABoolean;
  FEANIdentifierEnabled_Specified := True;
end;

function SiteDefaultsType.EANIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FEANIdentifierEnabled_Specified;
end;

procedure SiteDefaultsType.SetBrandMPNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBrandMPNIdentifierEnabled := ABoolean;
  FBrandMPNIdentifierEnabled_Specified := True;
end;

function SiteDefaultsType.BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBrandMPNIdentifierEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdAutoAcceptEnabled := ABoolean;
  FClassifiedAdAutoAcceptEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoAcceptEnabled_Specified;
end;

procedure SiteDefaultsType.SetBestOfferAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferAutoAcceptEnabled := ABoolean;
  FBestOfferAutoAcceptEnabled_Specified := True;
end;

function SiteDefaultsType.BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoAcceptEnabled_Specified;
end;

procedure SiteDefaultsType.SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeNorthAmericaEnabled := ABoolean;
  FCrossBorderTradeNorthAmericaEnabled_Specified := True;
end;

function SiteDefaultsType.CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeNorthAmericaEnabled_Specified;
end;

procedure SiteDefaultsType.SetCrossBorderTradeGBEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeGBEnabled := ABoolean;
  FCrossBorderTradeGBEnabled_Specified := True;
end;

function SiteDefaultsType.CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeGBEnabled_Specified;
end;

procedure SiteDefaultsType.SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeAustraliaEnabled := ABoolean;
  FCrossBorderTradeAustraliaEnabled_Specified := True;
end;

function SiteDefaultsType.CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeAustraliaEnabled_Specified;
end;

procedure SiteDefaultsType.SetPayPalBuyerProtectionEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalBuyerProtectionEnabled := ABoolean;
  FPayPalBuyerProtectionEnabled_Specified := True;
end;

function SiteDefaultsType.PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPayPalBuyerProtectionEnabled_Specified;
end;

procedure SiteDefaultsType.SetBuyerGuaranteeEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBuyerGuaranteeEnabled := ABoolean;
  FBuyerGuaranteeEnabled_Specified := True;
end;

function SiteDefaultsType.BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBuyerGuaranteeEnabled_Specified;
end;

procedure SiteDefaultsType.SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineCodeType: INEscrowWorkflowTimelineCodeType);
begin
  FINEscrowWorkflowTimeline := AINEscrowWorkflowTimelineCodeType;
  FINEscrowWorkflowTimeline_Specified := True;
end;

function SiteDefaultsType.INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
begin
  Result := FINEscrowWorkflowTimeline_Specified;
end;

procedure SiteDefaultsType.SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCombinedFixedPriceTreatmentEnabled := ABoolean;
  FCombinedFixedPriceTreatmentEnabled_Specified := True;
end;

function SiteDefaultsType.CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCombinedFixedPriceTreatmentEnabled_Specified;
end;

procedure SiteDefaultsType.SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
begin
  FGalleryFeaturedDurations := AListingEnhancementDurationReferenceType;
  FGalleryFeaturedDurations_Specified := True;
end;

function SiteDefaultsType.GalleryFeaturedDurations_Specified(Index: Integer): boolean;
begin
  Result := FGalleryFeaturedDurations_Specified;
end;

procedure SiteDefaultsType.SetPayPalRequired(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalRequired := ABoolean;
  FPayPalRequired_Specified := True;
end;

function SiteDefaultsType.PayPalRequired_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequired_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FeBayMotorsProAdFormatEnabled := AAdFormatEnabledCodeType;
  FeBayMotorsProAdFormatEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAdFormatEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByPhoneEnabled := ABoolean;
  FeBayMotorsProContactByPhoneEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByPhoneEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FeBayMotorsProPhoneCount := AInteger;
  FeBayMotorsProPhoneCount_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPhoneCount_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByAddressEnabled := ABoolean;
  FeBayMotorsProContactByAddressEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByAddressEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProStreetCount(Index: Integer; const AInteger: Integer);
begin
  FeBayMotorsProStreetCount := AInteger;
  FeBayMotorsProStreetCount_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProStreetCount_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProCompanyNameEnabled := ABoolean;
  FeBayMotorsProCompanyNameEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCompanyNameEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByEmailEnabled := ABoolean;
  FeBayMotorsProContactByEmailEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByEmailEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FeBayMotorsProBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FeBayMotorsProBestOfferEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProBestOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProAutoAcceptEnabled := ABoolean;
  FeBayMotorsProAutoAcceptEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoAcceptEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProAutoDeclineEnabled := ABoolean;
  FeBayMotorsProAutoDeclineEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoDeclineEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FeBayMotorsProPaymentMethodCheckOutEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FeBayMotorsProPaymentMethodCheckOutEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPaymentMethodCheckOutEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProShippingMethodEnabled := ABoolean;
  FeBayMotorsProShippingMethodEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProShippingMethodEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProCounterOfferEnabled := ABoolean;
  FeBayMotorsProCounterOfferEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCounterOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProSellerContactDetailsEnabled := ABoolean;
  FeBayMotorsProSellerContactDetailsEnabled_Specified := True;
end;

function SiteDefaultsType.eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProSellerContactDetailsEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FLocalMarketAdFormatEnabled := AAdFormatEnabledCodeType;
  FLocalMarketAdFormatEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAdFormatEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByPhoneEnabled := ABoolean;
  FLocalMarketContactByPhoneEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByPhoneEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FLocalMarketPhoneCount := AInteger;
  FLocalMarketPhoneCount_Specified := True;
end;

function SiteDefaultsType.LocalMarketPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPhoneCount_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByAddressEnabled := ABoolean;
  FLocalMarketContactByAddressEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByAddressEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketStreetCount(Index: Integer; const AInteger: Integer);
begin
  FLocalMarketStreetCount := AInteger;
  FLocalMarketStreetCount_Specified := True;
end;

function SiteDefaultsType.LocalMarketStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketStreetCount_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketCompanyNameEnabled := ABoolean;
  FLocalMarketCompanyNameEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCompanyNameEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByEmailEnabled := ABoolean;
  FLocalMarketContactByEmailEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByEmailEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FLocalMarketBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FLocalMarketBestOfferEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketBestOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketAutoAcceptEnabled := ABoolean;
  FLocalMarketAutoAcceptEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoAcceptEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketAutoDeclineEnabled := ABoolean;
  FLocalMarketAutoDeclineEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoDeclineEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FLocalMarketPaymentMethodCheckOutEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FLocalMarketPaymentMethodCheckOutEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPaymentMethodCheckOutEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketShippingMethodEnabled := ABoolean;
  FLocalMarketShippingMethodEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketShippingMethodEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketCounterOfferEnabled := ABoolean;
  FLocalMarketCounterOfferEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCounterOfferEnabled_Specified;
end;

procedure SiteDefaultsType.SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketSellerContactDetailsEnabled := ABoolean;
  FLocalMarketSellerContactDetailsEnabled_Specified := True;
end;

function SiteDefaultsType.LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSellerContactDetailsEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdPhoneCount := AInteger;
  FClassifiedAdPhoneCount_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPhoneCount_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByAddressEnabled := ABoolean;
  FClassifiedAdContactByAddressEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByAddressEnabled_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdStreetCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdStreetCount := AInteger;
  FClassifiedAdStreetCount_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdStreetCount_Specified;
end;

procedure SiteDefaultsType.SetClassifiedAdCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdCompanyNameEnabled := ABoolean;
  FClassifiedAdCompanyNameEnabled_Specified := True;
end;

function SiteDefaultsType.ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCompanyNameEnabled_Specified;
end;

procedure SiteDefaultsType.SetSpecialitySubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FSpecialitySubscription := AGeographicExposureCodeType;
  FSpecialitySubscription_Specified := True;
end;

function SiteDefaultsType.SpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FSpecialitySubscription_Specified;
end;

procedure SiteDefaultsType.SetRegularSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FRegularSubscription := AGeographicExposureCodeType;
  FRegularSubscription_Specified := True;
end;

function SiteDefaultsType.RegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FRegularSubscription_Specified;
end;

procedure SiteDefaultsType.SetPremiumSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FPremiumSubscription := AGeographicExposureCodeType;
  FPremiumSubscription_Specified := True;
end;

function SiteDefaultsType.PremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FPremiumSubscription_Specified;
end;

procedure SiteDefaultsType.SetNonSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FNonSubscription := AGeographicExposureCodeType;
  FNonSubscription_Specified := True;
end;

function SiteDefaultsType.NonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FNonSubscription_Specified;
end;

procedure SiteDefaultsType.SetPayPalRequiredForStoreOwner(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalRequiredForStoreOwner := ABoolean;
  FPayPalRequiredForStoreOwner_Specified := True;
end;

function SiteDefaultsType.PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequiredForStoreOwner_Specified;
end;

procedure SiteDefaultsType.SetReviseQuantityAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FReviseQuantityAllowed := ABoolean;
  FReviseQuantityAllowed_Specified := True;
end;

function SiteDefaultsType.ReviseQuantityAllowed_Specified(Index: Integer): boolean;
begin
  Result := FReviseQuantityAllowed_Specified;
end;

procedure SiteDefaultsType.SetRevisePriceAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FRevisePriceAllowed := ABoolean;
  FRevisePriceAllowed_Specified := True;
end;

function SiteDefaultsType.RevisePriceAllowed_Specified(Index: Integer): boolean;
begin
  Result := FRevisePriceAllowed_Specified;
end;

procedure SiteDefaultsType.SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FStoreOwnerExtendedListingDurationsEnabled := ABoolean;
  FStoreOwnerExtendedListingDurationsEnabled_Specified := True;
end;

function SiteDefaultsType.StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurationsEnabled_Specified;
end;

procedure SiteDefaultsType.SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsType: StoreOwnerExtendedListingDurationsType);
begin
  FStoreOwnerExtendedListingDurations := AStoreOwnerExtendedListingDurationsType;
  FStoreOwnerExtendedListingDurations_Specified := True;
end;

function SiteDefaultsType.StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurations_Specified;
end;

procedure SiteDefaultsType.SetReturnPolicyEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FReturnPolicyEnabled := ABoolean;
  FReturnPolicyEnabled_Specified := True;
end;

function SiteDefaultsType.ReturnPolicyEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyEnabled_Specified;
end;

procedure SiteDefaultsType.SetHandlingTimeEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FHandlingTimeEnabled := ABoolean;
  FHandlingTimeEnabled_Specified := True;
end;

function SiteDefaultsType.HandlingTimeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHandlingTimeEnabled_Specified;
end;

procedure SiteDefaultsType.SetMaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FMaxFlatShippingCost := AAmountType;
  FMaxFlatShippingCost_Specified := True;
end;

function SiteDefaultsType.MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FMaxFlatShippingCost_Specified;
end;

procedure SiteDefaultsType.SetMaxFlatShippingCostCBTExempt(Index: Integer; const ABoolean: Boolean);
begin
  FMaxFlatShippingCostCBTExempt := ABoolean;
  FMaxFlatShippingCostCBTExempt_Specified := True;
end;

function SiteDefaultsType.MaxFlatShippingCostCBTExempt_Specified(Index: Integer): boolean;
begin
  Result := FMaxFlatShippingCostCBTExempt_Specified;
end;

procedure SiteDefaultsType.SetGroup1MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup1MaxFlatShippingCost := AAmountType;
  FGroup1MaxFlatShippingCost_Specified := True;
end;

function SiteDefaultsType.Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup1MaxFlatShippingCost_Specified;
end;

procedure SiteDefaultsType.SetGroup2MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup2MaxFlatShippingCost := AAmountType;
  FGroup2MaxFlatShippingCost_Specified := True;
end;

function SiteDefaultsType.Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup2MaxFlatShippingCost_Specified;
end;

procedure SiteDefaultsType.SetGroup3MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup3MaxFlatShippingCost := AAmountType;
  FGroup3MaxFlatShippingCost_Specified := True;
end;

function SiteDefaultsType.Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup3MaxFlatShippingCost_Specified;
end;

procedure SiteDefaultsType.SetPaymentMethod(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
begin
  FPaymentMethod := AArray_Of_BuyerPaymentMethodCodeType;
  FPaymentMethod_Specified := True;
end;

function SiteDefaultsType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure SiteDefaultsType.SetVariationsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FVariationsEnabled := ABoolean;
  FVariationsEnabled_Specified := True;
end;

function SiteDefaultsType.VariationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FVariationsEnabled_Specified;
end;

procedure SiteDefaultsType.SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledCodeType: AttributeConversionEnabledCodeType);
begin
  FAttributeConversionEnabled := AAttributeConversionEnabledCodeType;
  FAttributeConversionEnabled_Specified := True;
end;

function SiteDefaultsType.AttributeConversionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAttributeConversionEnabled_Specified;
end;

procedure SiteDefaultsType.SetFreeGalleryPlusEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FFreeGalleryPlusEnabled := ABoolean;
  FFreeGalleryPlusEnabled_Specified := True;
end;

function SiteDefaultsType.FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreeGalleryPlusEnabled_Specified;
end;

procedure SiteDefaultsType.SetFreePicturePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FFreePicturePackEnabled := ABoolean;
  FFreePicturePackEnabled_Specified := True;
end;

function SiteDefaultsType.FreePicturePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreePicturePackEnabled_Specified;
end;

procedure SiteDefaultsType.SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledCodeType: ItemCompatibilityEnabledCodeType);
begin
  FItemCompatibilityEnabled := AItemCompatibilityEnabledCodeType;
  FItemCompatibilityEnabled_Specified := True;
end;

function SiteDefaultsType.ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemCompatibilityEnabled_Specified;
end;

procedure SiteDefaultsType.SetMinItemCompatibility(Index: Integer; const AInteger: Integer);
begin
  FMinItemCompatibility := AInteger;
  FMinItemCompatibility_Specified := True;
end;

function SiteDefaultsType.MinItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMinItemCompatibility_Specified;
end;

procedure SiteDefaultsType.SetMaxItemCompatibility(Index: Integer; const AInteger: Integer);
begin
  FMaxItemCompatibility := AInteger;
  FMaxItemCompatibility_Specified := True;
end;

function SiteDefaultsType.MaxItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMaxItemCompatibility_Specified;
end;

procedure SiteDefaultsType.SetConditionEnabled(Index: Integer; const AConditionEnabledCodeType: ConditionEnabledCodeType);
begin
  FConditionEnabled := AConditionEnabledCodeType;
  FConditionEnabled_Specified := True;
end;

function SiteDefaultsType.ConditionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FConditionEnabled_Specified;
end;

procedure SiteDefaultsType.SetConditionValues(Index: Integer; const AConditionValuesType: ConditionValuesType);
begin
  FConditionValues := AConditionValuesType;
  FConditionValues_Specified := True;
end;

function SiteDefaultsType.ConditionValues_Specified(Index: Integer): boolean;
begin
  Result := FConditionValues_Specified;
end;

procedure SiteDefaultsType.SetValueCategory(Index: Integer; const ABoolean: Boolean);
begin
  FValueCategory := ABoolean;
  FValueCategory_Specified := True;
end;

function SiteDefaultsType.ValueCategory_Specified(Index: Integer): boolean;
begin
  Result := FValueCategory_Specified;
end;

procedure SiteDefaultsType.SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledCodeType: ProductCreationEnabledCodeType);
begin
  FProductCreationEnabled := AProductCreationEnabledCodeType;
  FProductCreationEnabled_Specified := True;
end;

function SiteDefaultsType.ProductCreationEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductCreationEnabled_Specified;
end;

procedure SiteDefaultsType.SetEANEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FEANEnabled := AProductIdentiferEnabledCodeType;
  FEANEnabled_Specified := True;
end;

function SiteDefaultsType.EANEnabled_Specified(Index: Integer): boolean;
begin
  Result := FEANEnabled_Specified;
end;

procedure SiteDefaultsType.SetISBNEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FISBNEnabled := AProductIdentiferEnabledCodeType;
  FISBNEnabled_Specified := True;
end;

function SiteDefaultsType.ISBNEnabled_Specified(Index: Integer): boolean;
begin
  Result := FISBNEnabled_Specified;
end;

procedure SiteDefaultsType.SetUPCEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FUPCEnabled := AProductIdentiferEnabledCodeType;
  FUPCEnabled_Specified := True;
end;

function SiteDefaultsType.UPCEnabled_Specified(Index: Integer): boolean;
begin
  Result := FUPCEnabled_Specified;
end;

procedure SiteDefaultsType.SetMaxGranularFitmentCount(Index: Integer; const AInteger: Integer);
begin
  FMaxGranularFitmentCount := AInteger;
  FMaxGranularFitmentCount_Specified := True;
end;

function SiteDefaultsType.MaxGranularFitmentCount_Specified(Index: Integer): boolean;
begin
  Result := FMaxGranularFitmentCount_Specified;
end;

procedure SiteDefaultsType.SetCompatibleVehicleType(Index: Integer; const Astring: string);
begin
  FCompatibleVehicleType := Astring;
  FCompatibleVehicleType_Specified := True;
end;

function SiteDefaultsType.CompatibleVehicleType_Specified(Index: Integer): boolean;
begin
  Result := FCompatibleVehicleType_Specified;
end;

procedure SiteDefaultsType.SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledCodeType: PaymentOptionsGroupEnabledCodeType);
begin
  FPaymentOptionsGroup := APaymentOptionsGroupEnabledCodeType;
  FPaymentOptionsGroup_Specified := True;
end;

function SiteDefaultsType.PaymentOptionsGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOptionsGroup_Specified;
end;

procedure SiteDefaultsType.SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FShippingProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FShippingProfileCategoryGroup_Specified := True;
end;

function SiteDefaultsType.ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FShippingProfileCategoryGroup_Specified;
end;

procedure SiteDefaultsType.SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FPaymentProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FPaymentProfileCategoryGroup_Specified := True;
end;

function SiteDefaultsType.PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentProfileCategoryGroup_Specified;
end;

procedure SiteDefaultsType.SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FReturnPolicyProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FReturnPolicyProfileCategoryGroup_Specified := True;
end;

function SiteDefaultsType.ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyProfileCategoryGroup_Specified;
end;

procedure SiteDefaultsType.SetVINSupported(Index: Integer; const ABoolean: Boolean);
begin
  FVINSupported := ABoolean;
  FVINSupported_Specified := True;
end;

function SiteDefaultsType.VINSupported_Specified(Index: Integer): boolean;
begin
  Result := FVINSupported_Specified;
end;

procedure SiteDefaultsType.SetVRMSupported(Index: Integer; const ABoolean: Boolean);
begin
  FVRMSupported := ABoolean;
  FVRMSupported_Specified := True;
end;

function SiteDefaultsType.VRMSupported_Specified(Index: Integer): boolean;
begin
  Result := FVRMSupported_Specified;
end;

procedure SiteDefaultsType.SetSellerProvidedTitleSupported(Index: Integer; const ABoolean: Boolean);
begin
  FSellerProvidedTitleSupported := ABoolean;
  FSellerProvidedTitleSupported_Specified := True;
end;

function SiteDefaultsType.SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
begin
  Result := FSellerProvidedTitleSupported_Specified;
end;

procedure SiteDefaultsType.SetDepositSupported(Index: Integer; const ABoolean: Boolean);
begin
  FDepositSupported := ABoolean;
  FDepositSupported_Specified := True;
end;

function SiteDefaultsType.DepositSupported_Specified(Index: Integer): boolean;
begin
  Result := FDepositSupported_Specified;
end;

procedure SiteDefaultsType.SetGlobalShippingEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FGlobalShippingEnabled := ABoolean;
  FGlobalShippingEnabled_Specified := True;
end;

function SiteDefaultsType.GlobalShippingEnabled_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShippingEnabled_Specified;
end;

procedure SiteDefaultsType.SetAdditionalCompatibilityEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FAdditionalCompatibilityEnabled := ABoolean;
  FAdditionalCompatibilityEnabled_Specified := True;
end;

function SiteDefaultsType.AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalCompatibilityEnabled_Specified;
end;

procedure SiteDefaultsType.SetPickupDropOffEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPickupDropOffEnabled := ABoolean;
  FPickupDropOffEnabled_Specified := True;
end;

function SiteDefaultsType.PickupDropOffEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPickupDropOffEnabled_Specified;
end;

procedure SiteDefaultsType.SetDigitalGoodDeliveryEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FDigitalGoodDeliveryEnabled := ABoolean;
  FDigitalGoodDeliveryEnabled_Specified := True;
end;

function SiteDefaultsType.DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDigitalGoodDeliveryEnabled_Specified;
end;

procedure SiteDefaultsType.SetEpidSupported(Index: Integer; const ABoolean: Boolean);
begin
  FEpidSupported := ABoolean;
  FEpidSupported_Specified := True;
end;

function SiteDefaultsType.EpidSupported_Specified(Index: Integer): boolean;
begin
  Result := FEpidSupported_Specified;
end;

procedure SiteDefaultsType.SetKTypeSupported(Index: Integer; const ABoolean: Boolean);
begin
  FKTypeSupported := ABoolean;
  FKTypeSupported_Specified := True;
end;

function SiteDefaultsType.KTypeSupported_Specified(Index: Integer): boolean;
begin
  Result := FKTypeSupported_Specified;
end;

procedure SiteDefaultsType.SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledCodeType: ProductRequiredEnabledCodeType);
begin
  FProductRequiredEnabled := AProductRequiredEnabledCodeType;
  FProductRequiredEnabled_Specified := True;
end;

function SiteDefaultsType.ProductRequiredEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductRequiredEnabled_Specified;
end;

procedure SiteDefaultsType.SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedCodeType: DomesticReturnsAcceptedCodeType);
begin
  FDomesticReturnsAcceptedValues := ADomesticReturnsAcceptedCodeType;
  FDomesticReturnsAcceptedValues_Specified := True;
end;

function SiteDefaultsType.DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsAcceptedValues_Specified;
end;

procedure SiteDefaultsType.SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedCodeType: InternationalReturnsAcceptedCodeType);
begin
  FInternationalReturnsAcceptedValues := AInternationalReturnsAcceptedCodeType;
  FInternationalReturnsAcceptedValues_Specified := True;
end;

function SiteDefaultsType.InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsAcceptedValues_Specified;
end;

procedure SiteDefaultsType.SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationCodeType: DomesticReturnsDurationCodeType);
begin
  FDomesticReturnsDurationValues := ADomesticReturnsDurationCodeType;
  FDomesticReturnsDurationValues_Specified := True;
end;

function SiteDefaultsType.DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsDurationValues_Specified;
end;

procedure SiteDefaultsType.SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationCodeType: InternationalReturnsDurationCodeType);
begin
  FInternationalReturnsDurationValues := AInternationalReturnsDurationCodeType;
  FInternationalReturnsDurationValues_Specified := True;
end;

function SiteDefaultsType.InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsDurationValues_Specified;
end;

procedure SiteDefaultsType.SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeCodeType: DomesticReturnsShipmentPayeeCodeType);
begin
  FDomesticReturnsShipmentPayeeValues := ADomesticReturnsShipmentPayeeCodeType;
  FDomesticReturnsShipmentPayeeValues_Specified := True;
end;

function SiteDefaultsType.DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsShipmentPayeeValues_Specified;
end;

procedure SiteDefaultsType.SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeCodeType: InternationalReturnsShipmentPayeeCodeType);
begin
  FInternationalReturnsShipmentPayeeValues := AInternationalReturnsShipmentPayeeCodeType;
  FInternationalReturnsShipmentPayeeValues_Specified := True;
end;

function SiteDefaultsType.InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsShipmentPayeeValues_Specified;
end;

procedure SiteDefaultsType.SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
begin
  FDomesticRefundMethodValues := ADomesticRefundMethodCodeType;
  FDomesticRefundMethodValues_Specified := True;
end;

function SiteDefaultsType.DomesticRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRefundMethodValues_Specified;
end;

procedure SiteDefaultsType.SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
begin
  FInternationalRefundMethodValues := AInternationalRefundMethodCodeType;
  FInternationalRefundMethodValues_Specified := True;
end;

function SiteDefaultsType.InternationalRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRefundMethodValues_Specified;
end;

procedure SiteDefaultsType.SetReturnPolicyDescriptionEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FReturnPolicyDescriptionEnabled := ABoolean;
  FReturnPolicyDescriptionEnabled_Specified := True;
end;

function SiteDefaultsType.ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyDescriptionEnabled_Specified;
end;

destructor CategoryFeatureType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FListingDuration)-1 do
    SysUtils.FreeAndNil(FListingDuration[I]);
  System.SetLength(FListingDuration, 0);
  SysUtils.FreeAndNil(FMaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup1MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup2MaxFlatShippingCost);
  SysUtils.FreeAndNil(FGroup3MaxFlatShippingCost);
  SysUtils.FreeAndNil(FConditionValues);
  inherited Destroy;
end;

procedure CategoryFeatureType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function CategoryFeatureType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure CategoryFeatureType.SetListingDuration(Index: Integer; const AArray_Of_ListingDurationReferenceType: Array_Of_ListingDurationReferenceType);
begin
  FListingDuration := AArray_Of_ListingDurationReferenceType;
  FListingDuration_Specified := True;
end;

function CategoryFeatureType.ListingDuration_Specified(Index: Integer): boolean;
begin
  Result := FListingDuration_Specified;
end;

procedure CategoryFeatureType.SetShippingTermsRequired(Index: Integer; const ABoolean: Boolean);
begin
  FShippingTermsRequired := ABoolean;
  FShippingTermsRequired_Specified := True;
end;

function CategoryFeatureType.ShippingTermsRequired_Specified(Index: Integer): boolean;
begin
  Result := FShippingTermsRequired_Specified;
end;

procedure CategoryFeatureType.SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferEnabled := ABoolean;
  FBestOfferEnabled_Specified := True;
end;

function CategoryFeatureType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SetDutchBINEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FDutchBINEnabled := ABoolean;
  FDutchBINEnabled_Specified := True;
end;

function CategoryFeatureType.DutchBINEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDutchBINEnabled_Specified;
end;

procedure CategoryFeatureType.SetUserConsentRequired(Index: Integer; const ABoolean: Boolean);
begin
  FUserConsentRequired := ABoolean;
  FUserConsentRequired_Specified := True;
end;

function CategoryFeatureType.UserConsentRequired_Specified(Index: Integer): boolean;
begin
  Result := FUserConsentRequired_Specified;
end;

procedure CategoryFeatureType.SetHomePageFeaturedEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FHomePageFeaturedEnabled := ABoolean;
  FHomePageFeaturedEnabled_Specified := True;
end;

function CategoryFeatureType.HomePageFeaturedEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHomePageFeaturedEnabled_Specified;
end;

procedure CategoryFeatureType.SetProPackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FProPackEnabled := ABoolean;
  FProPackEnabled_Specified := True;
end;

function CategoryFeatureType.ProPackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackEnabled_Specified;
end;

procedure CategoryFeatureType.SetBasicUpgradePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBasicUpgradePackEnabled := ABoolean;
  FBasicUpgradePackEnabled_Specified := True;
end;

function CategoryFeatureType.BasicUpgradePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBasicUpgradePackEnabled_Specified;
end;

procedure CategoryFeatureType.SetValuePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FValuePackEnabled := ABoolean;
  FValuePackEnabled_Specified := True;
end;

function CategoryFeatureType.ValuePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FValuePackEnabled_Specified;
end;

procedure CategoryFeatureType.SetProPackPlusEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FProPackPlusEnabled := ABoolean;
  FProPackPlusEnabled_Specified := True;
end;

function CategoryFeatureType.ProPackPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProPackPlusEnabled_Specified;
end;

procedure CategoryFeatureType.SetAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FAdFormatEnabled := AAdFormatEnabledCodeType;
  FAdFormatEnabled_Specified := True;
end;

function CategoryFeatureType.AdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdFormatEnabled_Specified;
end;

procedure CategoryFeatureType.SetBestOfferCounterEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferCounterEnabled := ABoolean;
  FBestOfferCounterEnabled_Specified := True;
end;

function CategoryFeatureType.BestOfferCounterEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferCounterEnabled_Specified;
end;

procedure CategoryFeatureType.SetBestOfferAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferAutoDeclineEnabled := ABoolean;
  FBestOfferAutoDeclineEnabled_Specified := True;
end;

function CategoryFeatureType.BestOfferAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoDeclineEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketSpecialitySubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketSpecialitySubscription := ABoolean;
  FLocalMarketSpecialitySubscription_Specified := True;
end;

function CategoryFeatureType.LocalMarketSpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSpecialitySubscription_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketRegularSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketRegularSubscription := ABoolean;
  FLocalMarketRegularSubscription_Specified := True;
end;

function CategoryFeatureType.LocalMarketRegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketRegularSubscription_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketPremiumSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketPremiumSubscription := ABoolean;
  FLocalMarketPremiumSubscription_Specified := True;
end;

function CategoryFeatureType.LocalMarketPremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPremiumSubscription_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketNonSubscription(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketNonSubscription := ABoolean;
  FLocalMarketNonSubscription_Specified := True;
end;

function CategoryFeatureType.LocalMarketNonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketNonSubscription_Specified;
end;

procedure CategoryFeatureType.SetExpressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FExpressEnabled := ABoolean;
  FExpressEnabled_Specified := True;
end;

function CategoryFeatureType.ExpressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FExpressEnabled_Specified;
end;

procedure CategoryFeatureType.SetExpressPicturesRequired(Index: Integer; const ABoolean: Boolean);
begin
  FExpressPicturesRequired := ABoolean;
  FExpressPicturesRequired_Specified := True;
end;

function CategoryFeatureType.ExpressPicturesRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressPicturesRequired_Specified;
end;

procedure CategoryFeatureType.SetExpressConditionRequired(Index: Integer; const ABoolean: Boolean);
begin
  FExpressConditionRequired := ABoolean;
  FExpressConditionRequired_Specified := True;
end;

function CategoryFeatureType.ExpressConditionRequired_Specified(Index: Integer): boolean;
begin
  Result := FExpressConditionRequired_Specified;
end;

procedure CategoryFeatureType.SetMinimumReservePrice(Index: Integer; const ADouble: Double);
begin
  FMinimumReservePrice := ADouble;
  FMinimumReservePrice_Specified := True;
end;

function CategoryFeatureType.MinimumReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumReservePrice_Specified;
end;

procedure CategoryFeatureType.SetSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSellerContactDetailsEnabled := ABoolean;
  FSellerContactDetailsEnabled_Specified := True;
end;

function CategoryFeatureType.SellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSellerContactDetailsEnabled_Specified;
end;

procedure CategoryFeatureType.SetTransactionConfirmationRequestEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FTransactionConfirmationRequestEnabled := ABoolean;
  FTransactionConfirmationRequestEnabled_Specified := True;
end;

function CategoryFeatureType.TransactionConfirmationRequestEnabled_Specified(Index: Integer): boolean;
begin
  Result := FTransactionConfirmationRequestEnabled_Specified;
end;

procedure CategoryFeatureType.SetStoreInventoryEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FStoreInventoryEnabled := ABoolean;
  FStoreInventoryEnabled_Specified := True;
end;

function CategoryFeatureType.StoreInventoryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreInventoryEnabled_Specified;
end;

procedure CategoryFeatureType.SetSkypeMeTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSkypeMeTransactionalEnabled := ABoolean;
  FSkypeMeTransactionalEnabled_Specified := True;
end;

function CategoryFeatureType.SkypeMeTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeTransactionalEnabled_Specified;
end;

procedure CategoryFeatureType.SetSkypeMeNonTransactionalEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FSkypeMeNonTransactionalEnabled := ABoolean;
  FSkypeMeNonTransactionalEnabled_Specified := True;
end;

function CategoryFeatureType.SkypeMeNonTransactionalEnabled_Specified(Index: Integer): boolean;
begin
  Result := FSkypeMeNonTransactionalEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdPaymentMethodEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FClassifiedAdPaymentMethodEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FClassifiedAdPaymentMethodEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdPaymentMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPaymentMethodEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdShippingMethodEnabled := ABoolean;
  FClassifiedAdShippingMethodEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdShippingMethodEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FClassifiedAdBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FClassifiedAdBestOfferEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdBestOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdCounterOfferEnabled := ABoolean;
  FClassifiedAdCounterOfferEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCounterOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdAutoDeclineEnabled := ABoolean;
  FClassifiedAdAutoDeclineEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoDeclineEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByPhoneEnabled := ABoolean;
  FClassifiedAdContactByPhoneEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByPhoneEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByEmailEnabled := ABoolean;
  FClassifiedAdContactByEmailEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByEmailEnabled_Specified;
end;

procedure CategoryFeatureType.SetSafePaymentRequired(Index: Integer; const ABoolean: Boolean);
begin
  FSafePaymentRequired := ABoolean;
  FSafePaymentRequired_Specified := True;
end;

function CategoryFeatureType.SafePaymentRequired_Specified(Index: Integer): boolean;
begin
  Result := FSafePaymentRequired_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdPayPerLeadEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdPayPerLeadEnabled := ABoolean;
  FClassifiedAdPayPerLeadEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdPayPerLeadEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPayPerLeadEnabled_Specified;
end;

procedure CategoryFeatureType.SetItemSpecificsEnabled(Index: Integer; const AItemSpecificsEnabledCodeType: ItemSpecificsEnabledCodeType);
begin
  FItemSpecificsEnabled := AItemSpecificsEnabledCodeType;
  FItemSpecificsEnabled_Specified := True;
end;

function CategoryFeatureType.ItemSpecificsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecificsEnabled_Specified;
end;

procedure CategoryFeatureType.SetPaisaPayFullEscrowEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPaisaPayFullEscrowEnabled := ABoolean;
  FPaisaPayFullEscrowEnabled_Specified := True;
end;

function CategoryFeatureType.PaisaPayFullEscrowEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayFullEscrowEnabled_Specified;
end;

procedure CategoryFeatureType.SetBrandMPNIdentifierEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBrandMPNIdentifierEnabled := ABoolean;
  FBrandMPNIdentifierEnabled_Specified := True;
end;

function CategoryFeatureType.BrandMPNIdentifierEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBrandMPNIdentifierEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdAutoAcceptEnabled := ABoolean;
  FClassifiedAdAutoAcceptEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdAutoAcceptEnabled_Specified;
end;

procedure CategoryFeatureType.SetBestOfferAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferAutoAcceptEnabled := ABoolean;
  FBestOfferAutoAcceptEnabled_Specified := True;
end;

function CategoryFeatureType.BestOfferAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferAutoAcceptEnabled_Specified;
end;

procedure CategoryFeatureType.SetCrossBorderTradeNorthAmericaEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeNorthAmericaEnabled := ABoolean;
  FCrossBorderTradeNorthAmericaEnabled_Specified := True;
end;

function CategoryFeatureType.CrossBorderTradeNorthAmericaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeNorthAmericaEnabled_Specified;
end;

procedure CategoryFeatureType.SetCrossBorderTradeGBEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeGBEnabled := ABoolean;
  FCrossBorderTradeGBEnabled_Specified := True;
end;

function CategoryFeatureType.CrossBorderTradeGBEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeGBEnabled_Specified;
end;

procedure CategoryFeatureType.SetCrossBorderTradeAustraliaEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCrossBorderTradeAustraliaEnabled := ABoolean;
  FCrossBorderTradeAustraliaEnabled_Specified := True;
end;

function CategoryFeatureType.CrossBorderTradeAustraliaEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTradeAustraliaEnabled_Specified;
end;

procedure CategoryFeatureType.SetPayPalBuyerProtectionEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalBuyerProtectionEnabled := ABoolean;
  FPayPalBuyerProtectionEnabled_Specified := True;
end;

function CategoryFeatureType.PayPalBuyerProtectionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPayPalBuyerProtectionEnabled_Specified;
end;

procedure CategoryFeatureType.SetBuyerGuaranteeEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBuyerGuaranteeEnabled := ABoolean;
  FBuyerGuaranteeEnabled_Specified := True;
end;

function CategoryFeatureType.BuyerGuaranteeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBuyerGuaranteeEnabled_Specified;
end;

procedure CategoryFeatureType.SetCombinedFixedPriceTreatmentEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FCombinedFixedPriceTreatmentEnabled := ABoolean;
  FCombinedFixedPriceTreatmentEnabled_Specified := True;
end;

function CategoryFeatureType.CombinedFixedPriceTreatmentEnabled_Specified(Index: Integer): boolean;
begin
  Result := FCombinedFixedPriceTreatmentEnabled_Specified;
end;

procedure CategoryFeatureType.SetGalleryFeaturedDurations(Index: Integer; const AListingEnhancementDurationReferenceType: ListingEnhancementDurationReferenceType);
begin
  FGalleryFeaturedDurations := AListingEnhancementDurationReferenceType;
  FGalleryFeaturedDurations_Specified := True;
end;

function CategoryFeatureType.GalleryFeaturedDurations_Specified(Index: Integer): boolean;
begin
  Result := FGalleryFeaturedDurations_Specified;
end;

procedure CategoryFeatureType.SetPayPalRequired(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalRequired := ABoolean;
  FPayPalRequired_Specified := True;
end;

function CategoryFeatureType.PayPalRequired_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequired_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FeBayMotorsProAdFormatEnabled := AAdFormatEnabledCodeType;
  FeBayMotorsProAdFormatEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAdFormatEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByPhoneEnabled := ABoolean;
  FeBayMotorsProContactByPhoneEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByPhoneEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FeBayMotorsProPhoneCount := AInteger;
  FeBayMotorsProPhoneCount_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPhoneCount_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByAddressEnabled := ABoolean;
  FeBayMotorsProContactByAddressEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByAddressEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProStreetCount(Index: Integer; const AInteger: Integer);
begin
  FeBayMotorsProStreetCount := AInteger;
  FeBayMotorsProStreetCount_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProStreetCount_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProCompanyNameEnabled := ABoolean;
  FeBayMotorsProCompanyNameEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCompanyNameEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProContactByEmailEnabled := ABoolean;
  FeBayMotorsProContactByEmailEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProContactByEmailEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FeBayMotorsProBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FeBayMotorsProBestOfferEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProBestOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProAutoAcceptEnabled := ABoolean;
  FeBayMotorsProAutoAcceptEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoAcceptEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProAutoDeclineEnabled := ABoolean;
  FeBayMotorsProAutoDeclineEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProAutoDeclineEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FeBayMotorsProPaymentMethodCheckOutEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FeBayMotorsProPaymentMethodCheckOutEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProPaymentMethodCheckOutEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProShippingMethodEnabled := ABoolean;
  FeBayMotorsProShippingMethodEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProShippingMethodEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProCounterOfferEnabled := ABoolean;
  FeBayMotorsProCounterOfferEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProCounterOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SeteBayMotorsProSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FeBayMotorsProSellerContactDetailsEnabled := ABoolean;
  FeBayMotorsProSellerContactDetailsEnabled_Specified := True;
end;

function CategoryFeatureType.eBayMotorsProSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FeBayMotorsProSellerContactDetailsEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketAdFormatEnabled(Index: Integer; const AAdFormatEnabledCodeType: AdFormatEnabledCodeType);
begin
  FLocalMarketAdFormatEnabled := AAdFormatEnabledCodeType;
  FLocalMarketAdFormatEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketAdFormatEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAdFormatEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketContactByPhoneEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByPhoneEnabled := ABoolean;
  FLocalMarketContactByPhoneEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketContactByPhoneEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByPhoneEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FLocalMarketPhoneCount := AInteger;
  FLocalMarketPhoneCount_Specified := True;
end;

function CategoryFeatureType.LocalMarketPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPhoneCount_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByAddressEnabled := ABoolean;
  FLocalMarketContactByAddressEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByAddressEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketStreetCount(Index: Integer; const AInteger: Integer);
begin
  FLocalMarketStreetCount := AInteger;
  FLocalMarketStreetCount_Specified := True;
end;

function CategoryFeatureType.LocalMarketStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketStreetCount_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketCompanyNameEnabled := ABoolean;
  FLocalMarketCompanyNameEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCompanyNameEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketContactByEmailEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketContactByEmailEnabled := ABoolean;
  FLocalMarketContactByEmailEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketContactByEmailEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketContactByEmailEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketBestOfferEnabled(Index: Integer; const AClassifiedAdBestOfferEnabledCodeType: ClassifiedAdBestOfferEnabledCodeType);
begin
  FLocalMarketBestOfferEnabled := AClassifiedAdBestOfferEnabledCodeType;
  FLocalMarketBestOfferEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketBestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketBestOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketAutoAcceptEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketAutoAcceptEnabled := ABoolean;
  FLocalMarketAutoAcceptEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketAutoAcceptEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoAcceptEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketAutoDeclineEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketAutoDeclineEnabled := ABoolean;
  FLocalMarketAutoDeclineEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketAutoDeclineEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketAutoDeclineEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketPaymentMethodCheckOutEnabled(Index: Integer; const AClassifiedAdPaymentMethodEnabledCodeType: ClassifiedAdPaymentMethodEnabledCodeType);
begin
  FLocalMarketPaymentMethodCheckOutEnabled := AClassifiedAdPaymentMethodEnabledCodeType;
  FLocalMarketPaymentMethodCheckOutEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketPaymentMethodCheckOutEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketPaymentMethodCheckOutEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketShippingMethodEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketShippingMethodEnabled := ABoolean;
  FLocalMarketShippingMethodEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketShippingMethodEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketShippingMethodEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketCounterOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketCounterOfferEnabled := ABoolean;
  FLocalMarketCounterOfferEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketCounterOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketCounterOfferEnabled_Specified;
end;

procedure CategoryFeatureType.SetLocalMarketSellerContactDetailsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FLocalMarketSellerContactDetailsEnabled := ABoolean;
  FLocalMarketSellerContactDetailsEnabled_Specified := True;
end;

function CategoryFeatureType.LocalMarketSellerContactDetailsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FLocalMarketSellerContactDetailsEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdPhoneCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdPhoneCount := AInteger;
  FClassifiedAdPhoneCount_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdPhoneCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPhoneCount_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdContactByAddressEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdContactByAddressEnabled := ABoolean;
  FClassifiedAdContactByAddressEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdContactByAddressEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdContactByAddressEnabled_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdStreetCount(Index: Integer; const AInteger: Integer);
begin
  FClassifiedAdStreetCount := AInteger;
  FClassifiedAdStreetCount_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdStreetCount_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdStreetCount_Specified;
end;

procedure CategoryFeatureType.SetClassifiedAdCompanyNameEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FClassifiedAdCompanyNameEnabled := ABoolean;
  FClassifiedAdCompanyNameEnabled_Specified := True;
end;

function CategoryFeatureType.ClassifiedAdCompanyNameEnabled_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdCompanyNameEnabled_Specified;
end;

procedure CategoryFeatureType.SetSpecialitySubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FSpecialitySubscription := AGeographicExposureCodeType;
  FSpecialitySubscription_Specified := True;
end;

function CategoryFeatureType.SpecialitySubscription_Specified(Index: Integer): boolean;
begin
  Result := FSpecialitySubscription_Specified;
end;

procedure CategoryFeatureType.SetRegularSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FRegularSubscription := AGeographicExposureCodeType;
  FRegularSubscription_Specified := True;
end;

function CategoryFeatureType.RegularSubscription_Specified(Index: Integer): boolean;
begin
  Result := FRegularSubscription_Specified;
end;

procedure CategoryFeatureType.SetPremiumSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FPremiumSubscription := AGeographicExposureCodeType;
  FPremiumSubscription_Specified := True;
end;

function CategoryFeatureType.PremiumSubscription_Specified(Index: Integer): boolean;
begin
  Result := FPremiumSubscription_Specified;
end;

procedure CategoryFeatureType.SetNonSubscription(Index: Integer; const AGeographicExposureCodeType: GeographicExposureCodeType);
begin
  FNonSubscription := AGeographicExposureCodeType;
  FNonSubscription_Specified := True;
end;

function CategoryFeatureType.NonSubscription_Specified(Index: Integer): boolean;
begin
  Result := FNonSubscription_Specified;
end;

procedure CategoryFeatureType.SetINEscrowWorkflowTimeline(Index: Integer; const AINEscrowWorkflowTimelineCodeType: INEscrowWorkflowTimelineCodeType);
begin
  FINEscrowWorkflowTimeline := AINEscrowWorkflowTimelineCodeType;
  FINEscrowWorkflowTimeline_Specified := True;
end;

function CategoryFeatureType.INEscrowWorkflowTimeline_Specified(Index: Integer): boolean;
begin
  Result := FINEscrowWorkflowTimeline_Specified;
end;

procedure CategoryFeatureType.SetPayPalRequiredForStoreOwner(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalRequiredForStoreOwner := ABoolean;
  FPayPalRequiredForStoreOwner_Specified := True;
end;

function CategoryFeatureType.PayPalRequiredForStoreOwner_Specified(Index: Integer): boolean;
begin
  Result := FPayPalRequiredForStoreOwner_Specified;
end;

procedure CategoryFeatureType.SetReviseQuantityAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FReviseQuantityAllowed := ABoolean;
  FReviseQuantityAllowed_Specified := True;
end;

function CategoryFeatureType.ReviseQuantityAllowed_Specified(Index: Integer): boolean;
begin
  Result := FReviseQuantityAllowed_Specified;
end;

procedure CategoryFeatureType.SetRevisePriceAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FRevisePriceAllowed := ABoolean;
  FRevisePriceAllowed_Specified := True;
end;

function CategoryFeatureType.RevisePriceAllowed_Specified(Index: Integer): boolean;
begin
  Result := FRevisePriceAllowed_Specified;
end;

procedure CategoryFeatureType.SetStoreOwnerExtendedListingDurationsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FStoreOwnerExtendedListingDurationsEnabled := ABoolean;
  FStoreOwnerExtendedListingDurationsEnabled_Specified := True;
end;

function CategoryFeatureType.StoreOwnerExtendedListingDurationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurationsEnabled_Specified;
end;

procedure CategoryFeatureType.SetStoreOwnerExtendedListingDurations(Index: Integer; const AStoreOwnerExtendedListingDurationsType: StoreOwnerExtendedListingDurationsType);
begin
  FStoreOwnerExtendedListingDurations := AStoreOwnerExtendedListingDurationsType;
  FStoreOwnerExtendedListingDurations_Specified := True;
end;

function CategoryFeatureType.StoreOwnerExtendedListingDurations_Specified(Index: Integer): boolean;
begin
  Result := FStoreOwnerExtendedListingDurations_Specified;
end;

procedure CategoryFeatureType.SetReturnPolicyEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FReturnPolicyEnabled := ABoolean;
  FReturnPolicyEnabled_Specified := True;
end;

function CategoryFeatureType.ReturnPolicyEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyEnabled_Specified;
end;

procedure CategoryFeatureType.SetHandlingTimeEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FHandlingTimeEnabled := ABoolean;
  FHandlingTimeEnabled_Specified := True;
end;

function CategoryFeatureType.HandlingTimeEnabled_Specified(Index: Integer): boolean;
begin
  Result := FHandlingTimeEnabled_Specified;
end;

procedure CategoryFeatureType.SetMaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FMaxFlatShippingCost := AAmountType;
  FMaxFlatShippingCost_Specified := True;
end;

function CategoryFeatureType.MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FMaxFlatShippingCost_Specified;
end;

procedure CategoryFeatureType.SetGroup1MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup1MaxFlatShippingCost := AAmountType;
  FGroup1MaxFlatShippingCost_Specified := True;
end;

function CategoryFeatureType.Group1MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup1MaxFlatShippingCost_Specified;
end;

procedure CategoryFeatureType.SetGroup2MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup2MaxFlatShippingCost := AAmountType;
  FGroup2MaxFlatShippingCost_Specified := True;
end;

function CategoryFeatureType.Group2MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup2MaxFlatShippingCost_Specified;
end;

procedure CategoryFeatureType.SetGroup3MaxFlatShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FGroup3MaxFlatShippingCost := AAmountType;
  FGroup3MaxFlatShippingCost_Specified := True;
end;

function CategoryFeatureType.Group3MaxFlatShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FGroup3MaxFlatShippingCost_Specified;
end;

procedure CategoryFeatureType.SetPaymentMethod(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
begin
  FPaymentMethod := AArray_Of_BuyerPaymentMethodCodeType;
  FPaymentMethod_Specified := True;
end;

function CategoryFeatureType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure CategoryFeatureType.SetVariationsEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FVariationsEnabled := ABoolean;
  FVariationsEnabled_Specified := True;
end;

function CategoryFeatureType.VariationsEnabled_Specified(Index: Integer): boolean;
begin
  Result := FVariationsEnabled_Specified;
end;

procedure CategoryFeatureType.SetAttributeConversionEnabled(Index: Integer; const AAttributeConversionEnabledCodeType: AttributeConversionEnabledCodeType);
begin
  FAttributeConversionEnabled := AAttributeConversionEnabledCodeType;
  FAttributeConversionEnabled_Specified := True;
end;

function CategoryFeatureType.AttributeConversionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAttributeConversionEnabled_Specified;
end;

procedure CategoryFeatureType.SetFreeGalleryPlusEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FFreeGalleryPlusEnabled := ABoolean;
  FFreeGalleryPlusEnabled_Specified := True;
end;

function CategoryFeatureType.FreeGalleryPlusEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreeGalleryPlusEnabled_Specified;
end;

procedure CategoryFeatureType.SetFreePicturePackEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FFreePicturePackEnabled := ABoolean;
  FFreePicturePackEnabled_Specified := True;
end;

function CategoryFeatureType.FreePicturePackEnabled_Specified(Index: Integer): boolean;
begin
  Result := FFreePicturePackEnabled_Specified;
end;

procedure CategoryFeatureType.SetItemCompatibilityEnabled(Index: Integer; const AItemCompatibilityEnabledCodeType: ItemCompatibilityEnabledCodeType);
begin
  FItemCompatibilityEnabled := AItemCompatibilityEnabledCodeType;
  FItemCompatibilityEnabled_Specified := True;
end;

function CategoryFeatureType.ItemCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FItemCompatibilityEnabled_Specified;
end;

procedure CategoryFeatureType.SetMinItemCompatibility(Index: Integer; const AInteger: Integer);
begin
  FMinItemCompatibility := AInteger;
  FMinItemCompatibility_Specified := True;
end;

function CategoryFeatureType.MinItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMinItemCompatibility_Specified;
end;

procedure CategoryFeatureType.SetMaxItemCompatibility(Index: Integer; const AInteger: Integer);
begin
  FMaxItemCompatibility := AInteger;
  FMaxItemCompatibility_Specified := True;
end;

function CategoryFeatureType.MaxItemCompatibility_Specified(Index: Integer): boolean;
begin
  Result := FMaxItemCompatibility_Specified;
end;

procedure CategoryFeatureType.SetConditionEnabled(Index: Integer; const AConditionEnabledCodeType: ConditionEnabledCodeType);
begin
  FConditionEnabled := AConditionEnabledCodeType;
  FConditionEnabled_Specified := True;
end;

function CategoryFeatureType.ConditionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FConditionEnabled_Specified;
end;

procedure CategoryFeatureType.SetConditionValues(Index: Integer; const AConditionValuesType: ConditionValuesType);
begin
  FConditionValues := AConditionValuesType;
  FConditionValues_Specified := True;
end;

function CategoryFeatureType.ConditionValues_Specified(Index: Integer): boolean;
begin
  Result := FConditionValues_Specified;
end;

procedure CategoryFeatureType.SetValueCategory(Index: Integer; const ABoolean: Boolean);
begin
  FValueCategory := ABoolean;
  FValueCategory_Specified := True;
end;

function CategoryFeatureType.ValueCategory_Specified(Index: Integer): boolean;
begin
  Result := FValueCategory_Specified;
end;

procedure CategoryFeatureType.SetProductCreationEnabled(Index: Integer; const AProductCreationEnabledCodeType: ProductCreationEnabledCodeType);
begin
  FProductCreationEnabled := AProductCreationEnabledCodeType;
  FProductCreationEnabled_Specified := True;
end;

function CategoryFeatureType.ProductCreationEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductCreationEnabled_Specified;
end;

procedure CategoryFeatureType.SetEANEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FEANEnabled := AProductIdentiferEnabledCodeType;
  FEANEnabled_Specified := True;
end;

function CategoryFeatureType.EANEnabled_Specified(Index: Integer): boolean;
begin
  Result := FEANEnabled_Specified;
end;

procedure CategoryFeatureType.SetISBNEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FISBNEnabled := AProductIdentiferEnabledCodeType;
  FISBNEnabled_Specified := True;
end;

function CategoryFeatureType.ISBNEnabled_Specified(Index: Integer): boolean;
begin
  Result := FISBNEnabled_Specified;
end;

procedure CategoryFeatureType.SetUPCEnabled(Index: Integer; const AProductIdentiferEnabledCodeType: ProductIdentiferEnabledCodeType);
begin
  FUPCEnabled := AProductIdentiferEnabledCodeType;
  FUPCEnabled_Specified := True;
end;

function CategoryFeatureType.UPCEnabled_Specified(Index: Integer): boolean;
begin
  Result := FUPCEnabled_Specified;
end;

procedure CategoryFeatureType.SetMaxGranularFitmentCount(Index: Integer; const AInteger: Integer);
begin
  FMaxGranularFitmentCount := AInteger;
  FMaxGranularFitmentCount_Specified := True;
end;

function CategoryFeatureType.MaxGranularFitmentCount_Specified(Index: Integer): boolean;
begin
  Result := FMaxGranularFitmentCount_Specified;
end;

procedure CategoryFeatureType.SetCompatibleVehicleType(Index: Integer; const Astring: string);
begin
  FCompatibleVehicleType := Astring;
  FCompatibleVehicleType_Specified := True;
end;

function CategoryFeatureType.CompatibleVehicleType_Specified(Index: Integer): boolean;
begin
  Result := FCompatibleVehicleType_Specified;
end;

procedure CategoryFeatureType.SetPaymentOptionsGroup(Index: Integer; const APaymentOptionsGroupEnabledCodeType: PaymentOptionsGroupEnabledCodeType);
begin
  FPaymentOptionsGroup := APaymentOptionsGroupEnabledCodeType;
  FPaymentOptionsGroup_Specified := True;
end;

function CategoryFeatureType.PaymentOptionsGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOptionsGroup_Specified;
end;

procedure CategoryFeatureType.SetShippingProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FShippingProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FShippingProfileCategoryGroup_Specified := True;
end;

function CategoryFeatureType.ShippingProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FShippingProfileCategoryGroup_Specified;
end;

procedure CategoryFeatureType.SetPaymentProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FPaymentProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FPaymentProfileCategoryGroup_Specified := True;
end;

function CategoryFeatureType.PaymentProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FPaymentProfileCategoryGroup_Specified;
end;

procedure CategoryFeatureType.SetReturnPolicyProfileCategoryGroup(Index: Integer; const AProfileCategoryGroupCodeType: ProfileCategoryGroupCodeType);
begin
  FReturnPolicyProfileCategoryGroup := AProfileCategoryGroupCodeType;
  FReturnPolicyProfileCategoryGroup_Specified := True;
end;

function CategoryFeatureType.ReturnPolicyProfileCategoryGroup_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyProfileCategoryGroup_Specified;
end;

procedure CategoryFeatureType.SetVINSupported(Index: Integer; const ABoolean: Boolean);
begin
  FVINSupported := ABoolean;
  FVINSupported_Specified := True;
end;

function CategoryFeatureType.VINSupported_Specified(Index: Integer): boolean;
begin
  Result := FVINSupported_Specified;
end;

procedure CategoryFeatureType.SetVRMSupported(Index: Integer; const ABoolean: Boolean);
begin
  FVRMSupported := ABoolean;
  FVRMSupported_Specified := True;
end;

function CategoryFeatureType.VRMSupported_Specified(Index: Integer): boolean;
begin
  Result := FVRMSupported_Specified;
end;

procedure CategoryFeatureType.SetSellerProvidedTitleSupported(Index: Integer; const ABoolean: Boolean);
begin
  FSellerProvidedTitleSupported := ABoolean;
  FSellerProvidedTitleSupported_Specified := True;
end;

function CategoryFeatureType.SellerProvidedTitleSupported_Specified(Index: Integer): boolean;
begin
  Result := FSellerProvidedTitleSupported_Specified;
end;

procedure CategoryFeatureType.SetDepositSupported(Index: Integer; const ABoolean: Boolean);
begin
  FDepositSupported := ABoolean;
  FDepositSupported_Specified := True;
end;

function CategoryFeatureType.DepositSupported_Specified(Index: Integer): boolean;
begin
  Result := FDepositSupported_Specified;
end;

procedure CategoryFeatureType.SetGlobalShippingEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FGlobalShippingEnabled := ABoolean;
  FGlobalShippingEnabled_Specified := True;
end;

function CategoryFeatureType.GlobalShippingEnabled_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShippingEnabled_Specified;
end;

procedure CategoryFeatureType.SetAdditionalCompatibilityEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FAdditionalCompatibilityEnabled := ABoolean;
  FAdditionalCompatibilityEnabled_Specified := True;
end;

function CategoryFeatureType.AdditionalCompatibilityEnabled_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalCompatibilityEnabled_Specified;
end;

procedure CategoryFeatureType.SetPickupDropOffEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FPickupDropOffEnabled := ABoolean;
  FPickupDropOffEnabled_Specified := True;
end;

function CategoryFeatureType.PickupDropOffEnabled_Specified(Index: Integer): boolean;
begin
  Result := FPickupDropOffEnabled_Specified;
end;

procedure CategoryFeatureType.SetDigitalGoodDeliveryEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FDigitalGoodDeliveryEnabled := ABoolean;
  FDigitalGoodDeliveryEnabled_Specified := True;
end;

function CategoryFeatureType.DigitalGoodDeliveryEnabled_Specified(Index: Integer): boolean;
begin
  Result := FDigitalGoodDeliveryEnabled_Specified;
end;

procedure CategoryFeatureType.SetEpidSupported(Index: Integer; const ABoolean: Boolean);
begin
  FEpidSupported := ABoolean;
  FEpidSupported_Specified := True;
end;

function CategoryFeatureType.EpidSupported_Specified(Index: Integer): boolean;
begin
  Result := FEpidSupported_Specified;
end;

procedure CategoryFeatureType.SetKTypeSupported(Index: Integer; const ABoolean: Boolean);
begin
  FKTypeSupported := ABoolean;
  FKTypeSupported_Specified := True;
end;

function CategoryFeatureType.KTypeSupported_Specified(Index: Integer): boolean;
begin
  Result := FKTypeSupported_Specified;
end;

procedure CategoryFeatureType.SetProductRequiredEnabled(Index: Integer; const AProductRequiredEnabledCodeType: ProductRequiredEnabledCodeType);
begin
  FProductRequiredEnabled := AProductRequiredEnabledCodeType;
  FProductRequiredEnabled_Specified := True;
end;

function CategoryFeatureType.ProductRequiredEnabled_Specified(Index: Integer): boolean;
begin
  Result := FProductRequiredEnabled_Specified;
end;

procedure CategoryFeatureType.SetDomesticReturnsAcceptedValues(Index: Integer; const ADomesticReturnsAcceptedCodeType: DomesticReturnsAcceptedCodeType);
begin
  FDomesticReturnsAcceptedValues := ADomesticReturnsAcceptedCodeType;
  FDomesticReturnsAcceptedValues_Specified := True;
end;

function CategoryFeatureType.DomesticReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsAcceptedValues_Specified;
end;

procedure CategoryFeatureType.SetInternationalReturnsAcceptedValues(Index: Integer; const AInternationalReturnsAcceptedCodeType: InternationalReturnsAcceptedCodeType);
begin
  FInternationalReturnsAcceptedValues := AInternationalReturnsAcceptedCodeType;
  FInternationalReturnsAcceptedValues_Specified := True;
end;

function CategoryFeatureType.InternationalReturnsAcceptedValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsAcceptedValues_Specified;
end;

procedure CategoryFeatureType.SetDomesticReturnsDurationValues(Index: Integer; const ADomesticReturnsDurationCodeType: DomesticReturnsDurationCodeType);
begin
  FDomesticReturnsDurationValues := ADomesticReturnsDurationCodeType;
  FDomesticReturnsDurationValues_Specified := True;
end;

function CategoryFeatureType.DomesticReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsDurationValues_Specified;
end;

procedure CategoryFeatureType.SetInternationalReturnsDurationValues(Index: Integer; const AInternationalReturnsDurationCodeType: InternationalReturnsDurationCodeType);
begin
  FInternationalReturnsDurationValues := AInternationalReturnsDurationCodeType;
  FInternationalReturnsDurationValues_Specified := True;
end;

function CategoryFeatureType.InternationalReturnsDurationValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsDurationValues_Specified;
end;

procedure CategoryFeatureType.SetDomesticReturnsShipmentPayeeValues(Index: Integer; const ADomesticReturnsShipmentPayeeCodeType: DomesticReturnsShipmentPayeeCodeType);
begin
  FDomesticReturnsShipmentPayeeValues := ADomesticReturnsShipmentPayeeCodeType;
  FDomesticReturnsShipmentPayeeValues_Specified := True;
end;

function CategoryFeatureType.DomesticReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticReturnsShipmentPayeeValues_Specified;
end;

procedure CategoryFeatureType.SetInternationalReturnsShipmentPayeeValues(Index: Integer; const AInternationalReturnsShipmentPayeeCodeType: InternationalReturnsShipmentPayeeCodeType);
begin
  FInternationalReturnsShipmentPayeeValues := AInternationalReturnsShipmentPayeeCodeType;
  FInternationalReturnsShipmentPayeeValues_Specified := True;
end;

function CategoryFeatureType.InternationalReturnsShipmentPayeeValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnsShipmentPayeeValues_Specified;
end;

procedure CategoryFeatureType.SetDomesticRefundMethodValues(Index: Integer; const ADomesticRefundMethodCodeType: DomesticRefundMethodCodeType);
begin
  FDomesticRefundMethodValues := ADomesticRefundMethodCodeType;
  FDomesticRefundMethodValues_Specified := True;
end;

function CategoryFeatureType.DomesticRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRefundMethodValues_Specified;
end;

procedure CategoryFeatureType.SetInternationalRefundMethodValues(Index: Integer; const AInternationalRefundMethodCodeType: InternationalRefundMethodCodeType);
begin
  FInternationalRefundMethodValues := AInternationalRefundMethodCodeType;
  FInternationalRefundMethodValues_Specified := True;
end;

function CategoryFeatureType.InternationalRefundMethodValues_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRefundMethodValues_Specified;
end;

procedure CategoryFeatureType.SetReturnPolicyDescriptionEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FReturnPolicyDescriptionEnabled := ABoolean;
  FReturnPolicyDescriptionEnabled_Specified := True;
end;

function CategoryFeatureType.ReturnPolicyDescriptionEnabled_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyDescriptionEnabled_Specified;
end;

procedure MaximumItemRequirementsType.SetMaximumItemCount(Index: Integer; const AInteger: Integer);
begin
  FMaximumItemCount := AInteger;
  FMaximumItemCount_Specified := True;
end;

function MaximumItemRequirementsType.MaximumItemCount_Specified(Index: Integer): boolean;
begin
  Result := FMaximumItemCount_Specified;
end;

procedure MaximumItemRequirementsType.SetMinimumFeedbackScore(Index: Integer; const AInteger: Integer);
begin
  FMinimumFeedbackScore := AInteger;
  FMinimumFeedbackScore_Specified := True;
end;

function MaximumItemRequirementsType.MinimumFeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FMinimumFeedbackScore_Specified;
end;

procedure MaximumUnpaidItemStrikesInfoType.SetCount(Index: Integer; const AInteger: Integer);
begin
  FCount := AInteger;
  FCount_Specified := True;
end;

function MaximumUnpaidItemStrikesInfoType.Count_Specified(Index: Integer): boolean;
begin
  Result := FCount_Specified;
end;

procedure MaximumUnpaidItemStrikesInfoType.SetPeriod(Index: Integer; const APeriodCodeType: PeriodCodeType);
begin
  FPeriod := APeriodCodeType;
  FPeriod_Specified := True;
end;

function MaximumUnpaidItemStrikesInfoType.Period_Specified(Index: Integer): boolean;
begin
  Result := FPeriod_Specified;
end;

procedure BuyerProtectionDetailsType.SetBuyerProtectionSource(Index: Integer; const ABuyerProtectionSourceCodeType: BuyerProtectionSourceCodeType);
begin
  FBuyerProtectionSource := ABuyerProtectionSourceCodeType;
  FBuyerProtectionSource_Specified := True;
end;

function BuyerProtectionDetailsType.BuyerProtectionSource_Specified(Index: Integer): boolean;
begin
  Result := FBuyerProtectionSource_Specified;
end;

procedure BuyerProtectionDetailsType.SetBuyerProtectionStatus(Index: Integer; const ABuyerProtectionCodeType: BuyerProtectionCodeType);
begin
  FBuyerProtectionStatus := ABuyerProtectionCodeType;
  FBuyerProtectionStatus_Specified := True;
end;

function BuyerProtectionDetailsType.BuyerProtectionStatus_Specified(Index: Integer): boolean;
begin
  Result := FBuyerProtectionStatus_Specified;
end;

destructor BuyerRequirementDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FMaximumItemRequirements);
  SysUtils.FreeAndNil(FMaximumUnpaidItemStrikesInfo);
  inherited Destroy;
end;

procedure BuyerRequirementDetailsType.SetShipToRegistrationCountry(Index: Integer; const ABoolean: Boolean);
begin
  FShipToRegistrationCountry := ABoolean;
  FShipToRegistrationCountry_Specified := True;
end;

function BuyerRequirementDetailsType.ShipToRegistrationCountry_Specified(Index: Integer): boolean;
begin
  Result := FShipToRegistrationCountry_Specified;
end;

procedure BuyerRequirementDetailsType.SetZeroFeedbackScore(Index: Integer; const ABoolean: Boolean);
begin
  FZeroFeedbackScore := ABoolean;
  FZeroFeedbackScore_Specified := True;
end;

function BuyerRequirementDetailsType.ZeroFeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FZeroFeedbackScore_Specified;
end;

procedure BuyerRequirementDetailsType.SetMaximumItemRequirements(Index: Integer; const AMaximumItemRequirementsType: MaximumItemRequirementsType);
begin
  FMaximumItemRequirements := AMaximumItemRequirementsType;
  FMaximumItemRequirements_Specified := True;
end;

function BuyerRequirementDetailsType.MaximumItemRequirements_Specified(Index: Integer): boolean;
begin
  Result := FMaximumItemRequirements_Specified;
end;

procedure BuyerRequirementDetailsType.SetMaximumUnpaidItemStrikesInfo(Index: Integer; const AMaximumUnpaidItemStrikesInfoType: MaximumUnpaidItemStrikesInfoType);
begin
  FMaximumUnpaidItemStrikesInfo := AMaximumUnpaidItemStrikesInfoType;
  FMaximumUnpaidItemStrikesInfo_Specified := True;
end;

function BuyerRequirementDetailsType.MaximumUnpaidItemStrikesInfo_Specified(Index: Integer): boolean;
begin
  Result := FMaximumUnpaidItemStrikesInfo_Specified;
end;

procedure BuyerRoleMetricsType.SetPositiveFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FPositiveFeedbackLeftCount := AInteger;
  FPositiveFeedbackLeftCount_Specified := True;
end;

function BuyerRoleMetricsType.PositiveFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FPositiveFeedbackLeftCount_Specified;
end;

procedure BuyerRoleMetricsType.SetNegativeFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FNegativeFeedbackLeftCount := AInteger;
  FNegativeFeedbackLeftCount_Specified := True;
end;

function BuyerRoleMetricsType.NegativeFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FNegativeFeedbackLeftCount_Specified;
end;

procedure BuyerRoleMetricsType.SetNeutralFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FNeutralFeedbackLeftCount := AInteger;
  FNeutralFeedbackLeftCount_Specified := True;
end;

function BuyerRoleMetricsType.NeutralFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FNeutralFeedbackLeftCount_Specified;
end;

procedure BuyerRoleMetricsType.SetFeedbackLeftPercent(Index: Integer; const ASingle: Single);
begin
  FFeedbackLeftPercent := ASingle;
  FFeedbackLeftPercent_Specified := True;
end;

function BuyerRoleMetricsType.FeedbackLeftPercent_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackLeftPercent_Specified;
end;

destructor DiscountProfileType.Destroy;
begin
  SysUtils.FreeAndNil(FEachAdditionalAmount);
  SysUtils.FreeAndNil(FEachAdditionalAmountOff);
  SysUtils.FreeAndNil(FWeightOff);
  inherited Destroy;
end;

procedure DiscountProfileType.SetDiscountProfileID(Index: Integer; const Astring: string);
begin
  FDiscountProfileID := Astring;
  FDiscountProfileID_Specified := True;
end;

function DiscountProfileType.DiscountProfileID_Specified(Index: Integer): boolean;
begin
  Result := FDiscountProfileID_Specified;
end;

procedure DiscountProfileType.SetDiscountProfileName(Index: Integer; const Astring: string);
begin
  FDiscountProfileName := Astring;
  FDiscountProfileName_Specified := True;
end;

function DiscountProfileType.DiscountProfileName_Specified(Index: Integer): boolean;
begin
  Result := FDiscountProfileName_Specified;
end;

procedure DiscountProfileType.SetEachAdditionalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FEachAdditionalAmount := AAmountType;
  FEachAdditionalAmount_Specified := True;
end;

function DiscountProfileType.EachAdditionalAmount_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalAmount_Specified;
end;

procedure DiscountProfileType.SetEachAdditionalAmountOff(Index: Integer; const AAmountType: AmountType);
begin
  FEachAdditionalAmountOff := AAmountType;
  FEachAdditionalAmountOff_Specified := True;
end;

function DiscountProfileType.EachAdditionalAmountOff_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalAmountOff_Specified;
end;

procedure DiscountProfileType.SetEachAdditionalPercentOff(Index: Integer; const ASingle: Single);
begin
  FEachAdditionalPercentOff := ASingle;
  FEachAdditionalPercentOff_Specified := True;
end;

function DiscountProfileType.EachAdditionalPercentOff_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalPercentOff_Specified;
end;

procedure DiscountProfileType.SetWeightOff(Index: Integer; const AMeasureType: MeasureType);
begin
  FWeightOff := AMeasureType;
  FWeightOff_Specified := True;
end;

function DiscountProfileType.WeightOff_Specified(Index: Integer): boolean;
begin
  Result := FWeightOff_Specified;
end;

procedure DiscountProfileType.SetMappedDiscountProfileID(Index: Integer; const Astring: string);
begin
  FMappedDiscountProfileID := Astring;
  FMappedDiscountProfileID_Specified := True;
end;

function DiscountProfileType.MappedDiscountProfileID_Specified(Index: Integer): boolean;
begin
  Result := FMappedDiscountProfileID_Specified;
end;

procedure VATDetailsType.SetBusinessSeller(Index: Integer; const ABoolean: Boolean);
begin
  FBusinessSeller := ABoolean;
  FBusinessSeller_Specified := True;
end;

function VATDetailsType.BusinessSeller_Specified(Index: Integer): boolean;
begin
  Result := FBusinessSeller_Specified;
end;

procedure VATDetailsType.SetRestrictedToBusiness(Index: Integer; const ABoolean: Boolean);
begin
  FRestrictedToBusiness := ABoolean;
  FRestrictedToBusiness_Specified := True;
end;

function VATDetailsType.RestrictedToBusiness_Specified(Index: Integer): boolean;
begin
  Result := FRestrictedToBusiness_Specified;
end;

procedure VATDetailsType.SetVATPercent(Index: Integer; const ASingle: Single);
begin
  FVATPercent := ASingle;
  FVATPercent_Specified := True;
end;

function VATDetailsType.VATPercent_Specified(Index: Integer): boolean;
begin
  Result := FVATPercent_Specified;
end;

procedure VATDetailsType.SetVATSite(Index: Integer; const Astring: string);
begin
  FVATSite := Astring;
  FVATSite_Specified := True;
end;

function VATDetailsType.VATSite_Specified(Index: Integer): boolean;
begin
  Result := FVATSite_Specified;
end;

procedure VATDetailsType.SetVATID(Index: Integer; const Astring: string);
begin
  FVATID := Astring;
  FVATID_Specified := True;
end;

function VATDetailsType.VATID_Specified(Index: Integer): boolean;
begin
  Result := FVATID_Specified;
end;

destructor SalesTaxType.Destroy;
begin
  SysUtils.FreeAndNil(FSalesTaxAmount);
  inherited Destroy;
end;

procedure SalesTaxType.SetSalesTaxPercent(Index: Integer; const ASingle: Single);
begin
  FSalesTaxPercent := ASingle;
  FSalesTaxPercent_Specified := True;
end;

function SalesTaxType.SalesTaxPercent_Specified(Index: Integer): boolean;
begin
  Result := FSalesTaxPercent_Specified;
end;

procedure SalesTaxType.SetSalesTaxState(Index: Integer; const Astring: string);
begin
  FSalesTaxState := Astring;
  FSalesTaxState_Specified := True;
end;

function SalesTaxType.SalesTaxState_Specified(Index: Integer): boolean;
begin
  Result := FSalesTaxState_Specified;
end;

procedure SalesTaxType.SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
begin
  FShippingIncludedInTax := ABoolean;
  FShippingIncludedInTax_Specified := True;
end;

function SalesTaxType.ShippingIncludedInTax_Specified(Index: Integer): boolean;
begin
  Result := FShippingIncludedInTax_Specified;
end;

procedure SalesTaxType.SetSalesTaxAmount(Index: Integer; const AAmountType: AmountType);
begin
  FSalesTaxAmount := AAmountType;
  FSalesTaxAmount_Specified := True;
end;

function SalesTaxType.SalesTaxAmount_Specified(Index: Integer): boolean;
begin
  Result := FSalesTaxAmount_Specified;
end;

procedure CharityType.SetCharityName(Index: Integer; const Astring: string);
begin
  FCharityName := Astring;
  FCharityName_Specified := True;
end;

function CharityType.CharityName_Specified(Index: Integer): boolean;
begin
  Result := FCharityName_Specified;
end;

procedure CharityType.SetCharityNumber(Index: Integer; const AInteger: Integer);
begin
  FCharityNumber := AInteger;
  FCharityNumber_Specified := True;
end;

function CharityType.CharityNumber_Specified(Index: Integer): boolean;
begin
  Result := FCharityNumber_Specified;
end;

procedure CharityType.SetDonationPercent(Index: Integer; const ASingle: Single);
begin
  FDonationPercent := ASingle;
  FDonationPercent_Specified := True;
end;

function CharityType.DonationPercent_Specified(Index: Integer): boolean;
begin
  Result := FDonationPercent_Specified;
end;

procedure CharityType.SetCharityID(Index: Integer; const Astring: string);
begin
  FCharityID := Astring;
  FCharityID_Specified := True;
end;

function CharityType.CharityID_Specified(Index: Integer): boolean;
begin
  Result := FCharityID_Specified;
end;

procedure CharityType.SetMission(Index: Integer; const Astring: string);
begin
  FMission := Astring;
  FMission_Specified := True;
end;

function CharityType.Mission_Specified(Index: Integer): boolean;
begin
  Result := FMission_Specified;
end;

procedure CharityType.SetLogoURL(Index: Integer; const Astring: string);
begin
  FLogoURL := Astring;
  FLogoURL_Specified := True;
end;

function CharityType.LogoURL_Specified(Index: Integer): boolean;
begin
  Result := FLogoURL_Specified;
end;

procedure CharityType.SetStatus(Index: Integer; const ACharityStatusCodeType: CharityStatusCodeType);
begin
  FStatus := ACharityStatusCodeType;
  FStatus_Specified := True;
end;

function CharityType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure CharityType.SetCharityListing(Index: Integer; const ABoolean: Boolean);
begin
  FCharityListing := ABoolean;
  FCharityListing_Specified := True;
end;

function CharityType.CharityListing_Specified(Index: Integer): boolean;
begin
  Result := FCharityListing_Specified;
end;

destructor SellingManagerAutoSecondChanceOfferType.Destroy;
begin
  SysUtils.FreeAndNil(FAmount);
  inherited Destroy;
end;

procedure SellingManagerAutoSecondChanceOfferType.SetSecondChanceOfferCondition(Index: Integer; const ASellingManagerAutoSecondChanceOfferTypeCodeType: SellingManagerAutoSecondChanceOfferTypeCodeType);
begin
  FSecondChanceOfferCondition := ASellingManagerAutoSecondChanceOfferTypeCodeType;
  FSecondChanceOfferCondition_Specified := True;
end;

function SellingManagerAutoSecondChanceOfferType.SecondChanceOfferCondition_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOfferCondition_Specified;
end;

procedure SellingManagerAutoSecondChanceOfferType.SetAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAmount := AAmountType;
  FAmount_Specified := True;
end;

function SellingManagerAutoSecondChanceOfferType.Amount_Specified(Index: Integer): boolean;
begin
  Result := FAmount_Specified;
end;

procedure SellingManagerAutoSecondChanceOfferType.SetProfitPercent(Index: Integer; const ASingle: Single);
begin
  FProfitPercent := ASingle;
  FProfitPercent_Specified := True;
end;

function SellingManagerAutoSecondChanceOfferType.ProfitPercent_Specified(Index: Integer): boolean;
begin
  Result := FProfitPercent_Specified;
end;

procedure SellingManagerAutoSecondChanceOfferType.SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
begin
  FDuration := ASecondChanceOfferDurationCodeType;
  FDuration_Specified := True;
end;

function SellingManagerAutoSecondChanceOfferType.Duration_Specified(Index: Integer): boolean;
begin
  Result := FDuration_Specified;
end;

procedure SellingManagerAutoSecondChanceOfferType.SetListingHoldInventoryLevel(Index: Integer; const AInteger: Integer);
begin
  FListingHoldInventoryLevel := AInteger;
  FListingHoldInventoryLevel_Specified := True;
end;

function SellingManagerAutoSecondChanceOfferType.ListingHoldInventoryLevel_Specified(Index: Integer): boolean;
begin
  Result := FListingHoldInventoryLevel_Specified;
end;

destructor TaxJurisdictionType.Destroy;
begin
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure TaxJurisdictionType.SetJurisdictionID(Index: Integer; const Astring: string);
begin
  FJurisdictionID := Astring;
  FJurisdictionID_Specified := True;
end;

function TaxJurisdictionType.JurisdictionID_Specified(Index: Integer): boolean;
begin
  Result := FJurisdictionID_Specified;
end;

procedure TaxJurisdictionType.SetSalesTaxPercent(Index: Integer; const ASingle: Single);
begin
  FSalesTaxPercent := ASingle;
  FSalesTaxPercent_Specified := True;
end;

function TaxJurisdictionType.SalesTaxPercent_Specified(Index: Integer): boolean;
begin
  Result := FSalesTaxPercent_Specified;
end;

procedure TaxJurisdictionType.SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
begin
  FShippingIncludedInTax := ABoolean;
  FShippingIncludedInTax_Specified := True;
end;

function TaxJurisdictionType.ShippingIncludedInTax_Specified(Index: Integer): boolean;
begin
  Result := FShippingIncludedInTax_Specified;
end;

procedure TaxJurisdictionType.SetJurisdictionName(Index: Integer; const Astring: string);
begin
  FJurisdictionName := Astring;
  FJurisdictionName_Specified := True;
end;

function TaxJurisdictionType.JurisdictionName_Specified(Index: Integer): boolean;
begin
  Result := FJurisdictionName_Specified;
end;

procedure TaxJurisdictionType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function TaxJurisdictionType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure TaxJurisdictionType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function TaxJurisdictionType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

destructor ListingStartPriceDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FStartPrice);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure ListingStartPriceDetailsType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ListingStartPriceDetailsType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ListingStartPriceDetailsType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function ListingStartPriceDetailsType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure ListingStartPriceDetailsType.SetStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FStartPrice := AAmountType;
  FStartPrice_Specified := True;
end;

function ListingStartPriceDetailsType.StartPrice_Specified(Index: Integer): boolean;
begin
  Result := FStartPrice_Specified;
end;

procedure ListingStartPriceDetailsType.SetDetailVersion(Index: Integer; const Astring: string);
begin
  FDetailVersion := Astring;
  FDetailVersion_Specified := True;
end;

function ListingStartPriceDetailsType.DetailVersion_Specified(Index: Integer): boolean;
begin
  Result := FDetailVersion_Specified;
end;

procedure ListingStartPriceDetailsType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function ListingStartPriceDetailsType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure ListingStartPriceDetailsType.SetMinBuyItNowPricePercent(Index: Integer; const ASingle: Single);
begin
  FMinBuyItNowPricePercent := ASingle;
  FMinBuyItNowPricePercent_Specified := True;
end;

function ListingStartPriceDetailsType.MinBuyItNowPricePercent_Specified(Index: Integer): boolean;
begin
  Result := FMinBuyItNowPricePercent_Specified;
end;

procedure SellerFeeDiscountDashboardType.SetPercent(Index: Integer; const ASingle: Single);
begin
  FPercent := ASingle;
  FPercent_Specified := True;
end;

function SellerFeeDiscountDashboardType.Percent_Specified(Index: Integer): boolean;
begin
  Result := FPercent_Specified;
end;

procedure SellerRoleMetricsType.SetPositiveFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FPositiveFeedbackLeftCount := AInteger;
  FPositiveFeedbackLeftCount_Specified := True;
end;

function SellerRoleMetricsType.PositiveFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FPositiveFeedbackLeftCount_Specified;
end;

procedure SellerRoleMetricsType.SetNegativeFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FNegativeFeedbackLeftCount := AInteger;
  FNegativeFeedbackLeftCount_Specified := True;
end;

function SellerRoleMetricsType.NegativeFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FNegativeFeedbackLeftCount_Specified;
end;

procedure SellerRoleMetricsType.SetNeutralFeedbackLeftCount(Index: Integer; const AInteger: Integer);
begin
  FNeutralFeedbackLeftCount := AInteger;
  FNeutralFeedbackLeftCount_Specified := True;
end;

function SellerRoleMetricsType.NeutralFeedbackLeftCount_Specified(Index: Integer): boolean;
begin
  Result := FNeutralFeedbackLeftCount_Specified;
end;

procedure SellerRoleMetricsType.SetFeedbackLeftPercent(Index: Integer; const ASingle: Single);
begin
  FFeedbackLeftPercent := ASingle;
  FFeedbackLeftPercent_Specified := True;
end;

function SellerRoleMetricsType.FeedbackLeftPercent_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackLeftPercent_Specified;
end;

procedure SellerRoleMetricsType.SetRepeatBuyerCount(Index: Integer; const AInteger: Integer);
begin
  FRepeatBuyerCount := AInteger;
  FRepeatBuyerCount_Specified := True;
end;

function SellerRoleMetricsType.RepeatBuyerCount_Specified(Index: Integer): boolean;
begin
  Result := FRepeatBuyerCount_Specified;
end;

procedure SellerRoleMetricsType.SetRepeatBuyerPercent(Index: Integer; const ASingle: Single);
begin
  FRepeatBuyerPercent := ASingle;
  FRepeatBuyerPercent_Specified := True;
end;

function SellerRoleMetricsType.RepeatBuyerPercent_Specified(Index: Integer): boolean;
begin
  Result := FRepeatBuyerPercent_Specified;
end;

procedure SellerRoleMetricsType.SetUniqueBuyerCount(Index: Integer; const AInteger: Integer);
begin
  FUniqueBuyerCount := AInteger;
  FUniqueBuyerCount_Specified := True;
end;

function SellerRoleMetricsType.UniqueBuyerCount_Specified(Index: Integer): boolean;
begin
  Result := FUniqueBuyerCount_Specified;
end;

procedure SellerRoleMetricsType.SetTransactionPercent(Index: Integer; const ASingle: Single);
begin
  FTransactionPercent := ASingle;
  FTransactionPercent_Specified := True;
end;

function SellerRoleMetricsType.TransactionPercent_Specified(Index: Integer): boolean;
begin
  Result := FTransactionPercent_Specified;
end;

procedure SellerRoleMetricsType.SetCrossBorderTransactionCount(Index: Integer; const AInteger: Integer);
begin
  FCrossBorderTransactionCount := AInteger;
  FCrossBorderTransactionCount_Specified := True;
end;

function SellerRoleMetricsType.CrossBorderTransactionCount_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTransactionCount_Specified;
end;

procedure SellerRoleMetricsType.SetCrossBorderTransactionPercent(Index: Integer; const ASingle: Single);
begin
  FCrossBorderTransactionPercent := ASingle;
  FCrossBorderTransactionPercent_Specified := True;
end;

function SellerRoleMetricsType.CrossBorderTransactionPercent_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTransactionPercent_Specified;
end;

procedure VATRateType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VATRateType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VATRateType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function VATRateType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure VATRateType.SetVATPercent(Index: Integer; const ASingle: Single);
begin
  FVATPercent := ASingle;
  FVATPercent_Specified := True;
end;

function VATRateType.VATPercent_Specified(Index: Integer): boolean;
begin
  Result := FVATPercent_Specified;
end;

procedure VATRateType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function VATRateType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

destructor SellingManagerTemplateDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  SysUtils.FreeAndNil(FTemplate);
  inherited Destroy;
end;

procedure SellingManagerTemplateDetailsType.SetSaleTemplateID(Index: Integer; const Astring: string);
begin
  FSaleTemplateID := Astring;
  FSaleTemplateID_Specified := True;
end;

function SellingManagerTemplateDetailsType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure SellingManagerTemplateDetailsType.SetSaleTemplateName(Index: Integer; const Astring: string);
begin
  FSaleTemplateName := Astring;
  FSaleTemplateName_Specified := True;
end;

function SellingManagerTemplateDetailsType.SaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateName_Specified;
end;

procedure SellingManagerTemplateDetailsType.SetSuccessPercent(Index: Integer; const ASingle: Single);
begin
  FSuccessPercent := ASingle;
  FSuccessPercent_Specified := True;
end;

function SellingManagerTemplateDetailsType.SuccessPercent_Specified(Index: Integer): boolean;
begin
  Result := FSuccessPercent_Specified;
end;

procedure SellingManagerTemplateDetailsType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function SellingManagerTemplateDetailsType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure SellingManagerTemplateDetailsType.SetTemplate(Index: Integer; const AItemType: ItemType);
begin
  FTemplate := AItemType;
  FTemplate_Specified := True;
end;

function SellingManagerTemplateDetailsType.Template_Specified(Index: Integer): boolean;
begin
  Result := FTemplate_Specified;
end;

destructor SellingManagerProductInventoryStatusType.Destroy;
begin
  SysUtils.FreeAndNil(FAverageSellingPrice);
  inherited Destroy;
end;

procedure SellingManagerProductInventoryStatusType.SetQuantityScheduled(Index: Integer; const AInteger: Integer);
begin
  FQuantityScheduled := AInteger;
  FQuantityScheduled_Specified := True;
end;

function SellingManagerProductInventoryStatusType.QuantityScheduled_Specified(Index: Integer): boolean;
begin
  Result := FQuantityScheduled_Specified;
end;

procedure SellingManagerProductInventoryStatusType.SetQuantityActive(Index: Integer; const AInteger: Integer);
begin
  FQuantityActive := AInteger;
  FQuantityActive_Specified := True;
end;

function SellingManagerProductInventoryStatusType.QuantityActive_Specified(Index: Integer): boolean;
begin
  Result := FQuantityActive_Specified;
end;

procedure SellingManagerProductInventoryStatusType.SetQuantitySold(Index: Integer; const AInteger: Integer);
begin
  FQuantitySold := AInteger;
  FQuantitySold_Specified := True;
end;

function SellingManagerProductInventoryStatusType.QuantitySold_Specified(Index: Integer): boolean;
begin
  Result := FQuantitySold_Specified;
end;

procedure SellingManagerProductInventoryStatusType.SetQuantityUnsold(Index: Integer; const AInteger: Integer);
begin
  FQuantityUnsold := AInteger;
  FQuantityUnsold_Specified := True;
end;

function SellingManagerProductInventoryStatusType.QuantityUnsold_Specified(Index: Integer): boolean;
begin
  Result := FQuantityUnsold_Specified;
end;

procedure SellingManagerProductInventoryStatusType.SetSuccessPercent(Index: Integer; const ASingle: Single);
begin
  FSuccessPercent := ASingle;
  FSuccessPercent_Specified := True;
end;

function SellingManagerProductInventoryStatusType.SuccessPercent_Specified(Index: Integer): boolean;
begin
  Result := FSuccessPercent_Specified;
end;

procedure SellingManagerProductInventoryStatusType.SetAverageSellingPrice(Index: Integer; const AAmountType: AmountType);
begin
  FAverageSellingPrice := AAmountType;
  FAverageSellingPrice_Specified := True;
end;

function SellingManagerProductInventoryStatusType.AverageSellingPrice_Specified(Index: Integer): boolean;
begin
  Result := FAverageSellingPrice_Specified;
end;

destructor TaxIdentifierType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAttribute)-1 do
    SysUtils.FreeAndNil(FAttribute[I]);
  System.SetLength(FAttribute, 0);
  inherited Destroy;
end;

procedure TaxIdentifierType.SetType_(Index: Integer; const AValueTypeCodeType: ValueTypeCodeType);
begin
  FType_ := AValueTypeCodeType;
  FType__Specified := True;
end;

function TaxIdentifierType.Type__Specified(Index: Integer): boolean;
begin
  Result := FType__Specified;
end;

procedure TaxIdentifierType.SetID(Index: Integer; const Astring: string);
begin
  FID := Astring;
  FID_Specified := True;
end;

function TaxIdentifierType.ID_Specified(Index: Integer): boolean;
begin
  Result := FID_Specified;
end;

procedure TaxIdentifierType.SetAttribute(Index: Integer; const AArray_Of_TaxIdentifierAttributeType: Array_Of_TaxIdentifierAttributeType);
begin
  FAttribute := AArray_Of_TaxIdentifierAttributeType;
  FAttribute_Specified := True;
end;

function TaxIdentifierType.Attribute_Specified(Index: Integer): boolean;
begin
  Result := FAttribute_Specified;
end;

destructor CalculatedHandlingDiscountType.Destroy;
begin
  SysUtils.FreeAndNil(FOrderHandlingAmount);
  SysUtils.FreeAndNil(FEachAdditionalAmount);
  SysUtils.FreeAndNil(FEachAdditionalOffAmount);
  inherited Destroy;
end;

procedure CalculatedHandlingDiscountType.SetDiscountName(Index: Integer; const AHandlingNameCodeType: HandlingNameCodeType);
begin
  FDiscountName := AHandlingNameCodeType;
  FDiscountName_Specified := True;
end;

function CalculatedHandlingDiscountType.DiscountName_Specified(Index: Integer): boolean;
begin
  Result := FDiscountName_Specified;
end;

procedure CalculatedHandlingDiscountType.SetOrderHandlingAmount(Index: Integer; const AAmountType: AmountType);
begin
  FOrderHandlingAmount := AAmountType;
  FOrderHandlingAmount_Specified := True;
end;

function CalculatedHandlingDiscountType.OrderHandlingAmount_Specified(Index: Integer): boolean;
begin
  Result := FOrderHandlingAmount_Specified;
end;

procedure CalculatedHandlingDiscountType.SetEachAdditionalAmount(Index: Integer; const AAmountType: AmountType);
begin
  FEachAdditionalAmount := AAmountType;
  FEachAdditionalAmount_Specified := True;
end;

function CalculatedHandlingDiscountType.EachAdditionalAmount_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalAmount_Specified;
end;

procedure CalculatedHandlingDiscountType.SetEachAdditionalOffAmount(Index: Integer; const AAmountType: AmountType);
begin
  FEachAdditionalOffAmount := AAmountType;
  FEachAdditionalOffAmount_Specified := True;
end;

function CalculatedHandlingDiscountType.EachAdditionalOffAmount_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalOffAmount_Specified;
end;

procedure CalculatedHandlingDiscountType.SetEachAdditionalPercentOff(Index: Integer; const ASingle: Single);
begin
  FEachAdditionalPercentOff := ASingle;
  FEachAdditionalPercentOff_Specified := True;
end;

function CalculatedHandlingDiscountType.EachAdditionalPercentOff_Specified(Index: Integer): boolean;
begin
  Result := FEachAdditionalPercentOff_Specified;
end;

destructor CalculatedShippingDiscountType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDiscountProfile)-1 do
    SysUtils.FreeAndNil(FDiscountProfile[I]);
  System.SetLength(FDiscountProfile, 0);
  inherited Destroy;
end;

procedure CalculatedShippingDiscountType.SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
begin
  FDiscountName := ADiscountNameCodeType;
  FDiscountName_Specified := True;
end;

function CalculatedShippingDiscountType.DiscountName_Specified(Index: Integer): boolean;
begin
  Result := FDiscountName_Specified;
end;

procedure CalculatedShippingDiscountType.SetDiscountProfile(Index: Integer; const AArray_Of_DiscountProfileType: Array_Of_DiscountProfileType);
begin
  FDiscountProfile := AArray_Of_DiscountProfileType;
  FDiscountProfile_Specified := True;
end;

function CalculatedShippingDiscountType.DiscountProfile_Specified(Index: Integer): boolean;
begin
  Result := FDiscountProfile_Specified;
end;

destructor FlatShippingDiscountType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDiscountProfile)-1 do
    SysUtils.FreeAndNil(FDiscountProfile[I]);
  System.SetLength(FDiscountProfile, 0);
  inherited Destroy;
end;

procedure FlatShippingDiscountType.SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
begin
  FDiscountName := ADiscountNameCodeType;
  FDiscountName_Specified := True;
end;

function FlatShippingDiscountType.DiscountName_Specified(Index: Integer): boolean;
begin
  Result := FDiscountName_Specified;
end;

procedure FlatShippingDiscountType.SetDiscountProfile(Index: Integer; const AArray_Of_DiscountProfileType: Array_Of_DiscountProfileType);
begin
  FDiscountProfile := AArray_Of_DiscountProfileType;
  FDiscountProfile_Specified := True;
end;

function FlatShippingDiscountType.DiscountProfile_Specified(Index: Integer): boolean;
begin
  Result := FDiscountProfile_Specified;
end;

destructor PromotionalShippingDiscountDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingCost);
  SysUtils.FreeAndNil(FOrderAmount);
  inherited Destroy;
end;

procedure PromotionalShippingDiscountDetailsType.SetDiscountName(Index: Integer; const ADiscountNameCodeType: DiscountNameCodeType);
begin
  FDiscountName := ADiscountNameCodeType;
  FDiscountName_Specified := True;
end;

function PromotionalShippingDiscountDetailsType.DiscountName_Specified(Index: Integer): boolean;
begin
  Result := FDiscountName_Specified;
end;

procedure PromotionalShippingDiscountDetailsType.SetShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingCost := AAmountType;
  FShippingCost_Specified := True;
end;

function PromotionalShippingDiscountDetailsType.ShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingCost_Specified;
end;

procedure PromotionalShippingDiscountDetailsType.SetOrderAmount(Index: Integer; const AAmountType: AmountType);
begin
  FOrderAmount := AAmountType;
  FOrderAmount_Specified := True;
end;

function PromotionalShippingDiscountDetailsType.OrderAmount_Specified(Index: Integer): boolean;
begin
  Result := FOrderAmount_Specified;
end;

procedure PromotionalShippingDiscountDetailsType.SetItemCount(Index: Integer; const AInteger: Integer);
begin
  FItemCount := AInteger;
  FItemCount_Specified := True;
end;

function PromotionalShippingDiscountDetailsType.ItemCount_Specified(Index: Integer): boolean;
begin
  Result := FItemCount_Specified;
end;

destructor BuyerSatisfactionDashboardType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlert)-1 do
    SysUtils.FreeAndNil(FAlert[I]);
  System.SetLength(FAlert, 0);
  inherited Destroy;
end;

procedure BuyerSatisfactionDashboardType.SetStatus(Index: Integer; const ABuyerSatisfactionStatusCodeType: BuyerSatisfactionStatusCodeType);
begin
  FStatus := ABuyerSatisfactionStatusCodeType;
  FStatus_Specified := True;
end;

function BuyerSatisfactionDashboardType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure BuyerSatisfactionDashboardType.SetAlert(Index: Integer; const AArray_Of_SellerDashboardAlertType: Array_Of_SellerDashboardAlertType);
begin
  FAlert := AArray_Of_SellerDashboardAlertType;
  FAlert_Specified := True;
end;

function BuyerSatisfactionDashboardType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

procedure SellerDashboardAlertType.SetSeverity(Index: Integer; const ASellerDashboardAlertSeverityCodeType: SellerDashboardAlertSeverityCodeType);
begin
  FSeverity := ASellerDashboardAlertSeverityCodeType;
  FSeverity_Specified := True;
end;

function SellerDashboardAlertType.Severity_Specified(Index: Integer): boolean;
begin
  Result := FSeverity_Specified;
end;

procedure SellerDashboardAlertType.SetText(Index: Integer; const Astring: string);
begin
  FText := Astring;
  FText_Specified := True;
end;

function SellerDashboardAlertType.Text_Specified(Index: Integer): boolean;
begin
  Result := FText_Specified;
end;

destructor BuyerType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBuyerTaxIdentifier)-1 do
    SysUtils.FreeAndNil(FBuyerTaxIdentifier[I]);
  System.SetLength(FBuyerTaxIdentifier, 0);
  SysUtils.FreeAndNil(FShippingAddress);
  inherited Destroy;
end;

procedure BuyerType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function BuyerType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure BuyerType.SetBuyerTaxIdentifier(Index: Integer; const AArray_Of_TaxIdentifierType: Array_Of_TaxIdentifierType);
begin
  FBuyerTaxIdentifier := AArray_Of_TaxIdentifierType;
  FBuyerTaxIdentifier_Specified := True;
end;

function BuyerType.BuyerTaxIdentifier_Specified(Index: Integer): boolean;
begin
  Result := FBuyerTaxIdentifier_Specified;
end;

destructor NonProfitAddressType.Destroy;
begin
  SysUtils.FreeAndNil(FLatitude);
  SysUtils.FreeAndNil(FLongitude);
  inherited Destroy;
end;

procedure NonProfitAddressType.SetAddressLine1(Index: Integer; const Astring: string);
begin
  FAddressLine1 := Astring;
  FAddressLine1_Specified := True;
end;

function NonProfitAddressType.AddressLine1_Specified(Index: Integer): boolean;
begin
  Result := FAddressLine1_Specified;
end;

procedure NonProfitAddressType.SetAddressLine2(Index: Integer; const Astring: string);
begin
  FAddressLine2 := Astring;
  FAddressLine2_Specified := True;
end;

function NonProfitAddressType.AddressLine2_Specified(Index: Integer): boolean;
begin
  Result := FAddressLine2_Specified;
end;

procedure NonProfitAddressType.SetCity(Index: Integer; const Astring: string);
begin
  FCity := Astring;
  FCity_Specified := True;
end;

function NonProfitAddressType.City_Specified(Index: Integer): boolean;
begin
  Result := FCity_Specified;
end;

procedure NonProfitAddressType.SetState(Index: Integer; const Astring: string);
begin
  FState := Astring;
  FState_Specified := True;
end;

function NonProfitAddressType.State_Specified(Index: Integer): boolean;
begin
  Result := FState_Specified;
end;

procedure NonProfitAddressType.SetZipCode(Index: Integer; const Astring: string);
begin
  FZipCode := Astring;
  FZipCode_Specified := True;
end;

function NonProfitAddressType.ZipCode_Specified(Index: Integer): boolean;
begin
  Result := FZipCode_Specified;
end;

procedure NonProfitAddressType.SetLatitude(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FLatitude := ATXSDecimal;
  FLatitude_Specified := True;
end;

function NonProfitAddressType.Latitude_Specified(Index: Integer): boolean;
begin
  Result := FLatitude_Specified;
end;

procedure NonProfitAddressType.SetLongitude(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FLongitude := ATXSDecimal;
  FLongitude_Specified := True;
end;

function NonProfitAddressType.Longitude_Specified(Index: Integer): boolean;
begin
  Result := FLongitude_Specified;
end;

procedure NonProfitAddressType.SetAddressType(Index: Integer; const AAddressTypeCodeType: AddressTypeCodeType);
begin
  FAddressType := AAddressTypeCodeType;
  FAddressType_Specified := True;
end;

function NonProfitAddressType.AddressType_Specified(Index: Integer): boolean;
begin
  Result := FAddressType_Specified;
end;

destructor TransactionType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FExternalTransaction)-1 do
    SysUtils.FreeAndNil(FExternalTransaction[I]);
  System.SetLength(FExternalTransaction, 0);
  for I := 0 to System.Length(FRefundArray)-1 do
    SysUtils.FreeAndNil(FRefundArray[I]);
  System.SetLength(FRefundArray, 0);
  for I := 0 to System.Length(FPickupDetails)-1 do
    SysUtils.FreeAndNil(FPickupDetails[I]);
  System.SetLength(FPickupDetails, 0);
  for I := 0 to System.Length(FBuyerPackageEnclosures)-1 do
    SysUtils.FreeAndNil(FBuyerPackageEnclosures[I]);
  System.SetLength(FBuyerPackageEnclosures, 0);
  SysUtils.FreeAndNil(FAmountPaid);
  SysUtils.FreeAndNil(FAdjustmentAmount);
  SysUtils.FreeAndNil(FConvertedAdjustmentAmount);
  SysUtils.FreeAndNil(FBuyer);
  SysUtils.FreeAndNil(FShippingDetails);
  SysUtils.FreeAndNil(FConvertedAmountPaid);
  SysUtils.FreeAndNil(FConvertedTransactionPrice);
  SysUtils.FreeAndNil(FCreatedDate);
  SysUtils.FreeAndNil(FItem);
  SysUtils.FreeAndNil(FStatus);
  SysUtils.FreeAndNil(FTransactionPrice);
  SysUtils.FreeAndNil(FVATPercent);
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  SysUtils.FreeAndNil(FShippingServiceSelected);
  SysUtils.FreeAndNil(FDutchAuctionBid);
  SysUtils.FreeAndNil(FPaidTime);
  SysUtils.FreeAndNil(FShippedTime);
  SysUtils.FreeAndNil(FTotalPrice);
  SysUtils.FreeAndNil(FFeedbackLeft);
  SysUtils.FreeAndNil(FFeedbackReceived);
  SysUtils.FreeAndNil(FContainingOrder);
  SysUtils.FreeAndNil(FFinalValueFee);
  SysUtils.FreeAndNil(FListingCheckoutRedirectPreference);
  SysUtils.FreeAndNil(FBuyerGuaranteePrice);
  SysUtils.FreeAndNil(FVariation);
  SysUtils.FreeAndNil(FTotalTransactionPrice);
  SysUtils.FreeAndNil(FTaxes);
  SysUtils.FreeAndNil(FActualShippingCost);
  SysUtils.FreeAndNil(FActualHandlingCost);
  SysUtils.FreeAndNil(FPaymentHoldDetails);
  SysUtils.FreeAndNil(FSellerDiscounts);
  SysUtils.FreeAndNil(FRefundAmount);
  SysUtils.FreeAndNil(FMultiLegShippingDetails);
  SysUtils.FreeAndNil(FInvoiceSentTime);
  SysUtils.FreeAndNil(FUnpaidItem);
  SysUtils.FreeAndNil(FMonetaryDetails);
  SysUtils.FreeAndNil(FPickupMethodSelected);
  SysUtils.FreeAndNil(FShippingConvenienceCharge);
  SysUtils.FreeAndNil(FGiftSummary);
  SysUtils.FreeAndNil(FDigitalDeliverySelected);
  SysUtils.FreeAndNil(FeBayCollectAndRemitTaxes);
  inherited Destroy;
end;

procedure TransactionType.SetAmountPaid(Index: Integer; const AAmountType: AmountType);
begin
  FAmountPaid := AAmountType;
  FAmountPaid_Specified := True;
end;

function TransactionType.AmountPaid_Specified(Index: Integer): boolean;
begin
  Result := FAmountPaid_Specified;
end;

procedure TransactionType.SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAdjustmentAmount := AAmountType;
  FAdjustmentAmount_Specified := True;
end;

function TransactionType.AdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FAdjustmentAmount_Specified;
end;

procedure TransactionType.SetConvertedAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedAdjustmentAmount := AAmountType;
  FConvertedAdjustmentAmount_Specified := True;
end;

function TransactionType.ConvertedAdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FConvertedAdjustmentAmount_Specified;
end;

procedure TransactionType.SetBuyer(Index: Integer; const AUserType: UserType);
begin
  FBuyer := AUserType;
  FBuyer_Specified := True;
end;

function TransactionType.Buyer_Specified(Index: Integer): boolean;
begin
  Result := FBuyer_Specified;
end;

procedure TransactionType.SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
begin
  FShippingDetails := AShippingDetailsType;
  FShippingDetails_Specified := True;
end;

function TransactionType.ShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetails_Specified;
end;

procedure TransactionType.SetConvertedAmountPaid(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedAmountPaid := AAmountType;
  FConvertedAmountPaid_Specified := True;
end;

function TransactionType.ConvertedAmountPaid_Specified(Index: Integer): boolean;
begin
  Result := FConvertedAmountPaid_Specified;
end;

procedure TransactionType.SetConvertedTransactionPrice(Index: Integer; const AAmountType: AmountType);
begin
  FConvertedTransactionPrice := AAmountType;
  FConvertedTransactionPrice_Specified := True;
end;

function TransactionType.ConvertedTransactionPrice_Specified(Index: Integer): boolean;
begin
  Result := FConvertedTransactionPrice_Specified;
end;

procedure TransactionType.SetCreatedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreatedDate := ATXSDateTime;
  FCreatedDate_Specified := True;
end;

function TransactionType.CreatedDate_Specified(Index: Integer): boolean;
begin
  Result := FCreatedDate_Specified;
end;

procedure TransactionType.SetDepositType(Index: Integer; const ADepositTypeCodeType: DepositTypeCodeType);
begin
  FDepositType := ADepositTypeCodeType;
  FDepositType_Specified := True;
end;

function TransactionType.DepositType_Specified(Index: Integer): boolean;
begin
  Result := FDepositType_Specified;
end;

procedure TransactionType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function TransactionType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure TransactionType.SetQuantityPurchased(Index: Integer; const AInteger: Integer);
begin
  FQuantityPurchased := AInteger;
  FQuantityPurchased_Specified := True;
end;

function TransactionType.QuantityPurchased_Specified(Index: Integer): boolean;
begin
  Result := FQuantityPurchased_Specified;
end;

procedure TransactionType.SetStatus(Index: Integer; const ATransactionStatusType: TransactionStatusType);
begin
  FStatus := ATransactionStatusType;
  FStatus_Specified := True;
end;

function TransactionType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure TransactionType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function TransactionType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure TransactionType.SetTransactionPrice(Index: Integer; const AAmountType: AmountType);
begin
  FTransactionPrice := AAmountType;
  FTransactionPrice_Specified := True;
end;

function TransactionType.TransactionPrice_Specified(Index: Integer): boolean;
begin
  Result := FTransactionPrice_Specified;
end;

procedure TransactionType.SetBestOfferSale(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferSale := ABoolean;
  FBestOfferSale_Specified := True;
end;

function TransactionType.BestOfferSale_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferSale_Specified;
end;

procedure TransactionType.SetVATPercent(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FVATPercent := ATXSDecimal;
  FVATPercent_Specified := True;
end;

function TransactionType.VATPercent_Specified(Index: Integer): boolean;
begin
  Result := FVATPercent_Specified;
end;

procedure TransactionType.SetExternalTransaction(Index: Integer; const AArray_Of_ExternalTransactionType: Array_Of_ExternalTransactionType);
begin
  FExternalTransaction := AArray_Of_ExternalTransactionType;
  FExternalTransaction_Specified := True;
end;

function TransactionType.ExternalTransaction_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransaction_Specified;
end;

procedure TransactionType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function TransactionType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure TransactionType.SetShippingServiceSelected(Index: Integer; const AShippingServiceOptionsType: ShippingServiceOptionsType);
begin
  FShippingServiceSelected := AShippingServiceOptionsType;
  FShippingServiceSelected_Specified := True;
end;

function TransactionType.ShippingServiceSelected_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceSelected_Specified;
end;

procedure TransactionType.SetBuyerMessage(Index: Integer; const Astring: string);
begin
  FBuyerMessage := Astring;
  FBuyerMessage_Specified := True;
end;

function TransactionType.BuyerMessage_Specified(Index: Integer): boolean;
begin
  Result := FBuyerMessage_Specified;
end;

procedure TransactionType.SetDutchAuctionBid(Index: Integer; const AAmountType: AmountType);
begin
  FDutchAuctionBid := AAmountType;
  FDutchAuctionBid_Specified := True;
end;

function TransactionType.DutchAuctionBid_Specified(Index: Integer): boolean;
begin
  Result := FDutchAuctionBid_Specified;
end;

procedure TransactionType.SetBuyerPaidStatus(Index: Integer; const APaidStatusCodeType: PaidStatusCodeType);
begin
  FBuyerPaidStatus := APaidStatusCodeType;
  FBuyerPaidStatus_Specified := True;
end;

function TransactionType.BuyerPaidStatus_Specified(Index: Integer): boolean;
begin
  Result := FBuyerPaidStatus_Specified;
end;

procedure TransactionType.SetSellerPaidStatus(Index: Integer; const APaidStatusCodeType: PaidStatusCodeType);
begin
  FSellerPaidStatus := APaidStatusCodeType;
  FSellerPaidStatus_Specified := True;
end;

function TransactionType.SellerPaidStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaidStatus_Specified;
end;

procedure TransactionType.SetPaidTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPaidTime := ATXSDateTime;
  FPaidTime_Specified := True;
end;

function TransactionType.PaidTime_Specified(Index: Integer): boolean;
begin
  Result := FPaidTime_Specified;
end;

procedure TransactionType.SetShippedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippedTime := ATXSDateTime;
  FShippedTime_Specified := True;
end;

function TransactionType.ShippedTime_Specified(Index: Integer): boolean;
begin
  Result := FShippedTime_Specified;
end;

procedure TransactionType.SetTotalPrice(Index: Integer; const AAmountType: AmountType);
begin
  FTotalPrice := AAmountType;
  FTotalPrice_Specified := True;
end;

function TransactionType.TotalPrice_Specified(Index: Integer): boolean;
begin
  Result := FTotalPrice_Specified;
end;

procedure TransactionType.SetFeedbackLeft(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
begin
  FFeedbackLeft := AFeedbackInfoType;
  FFeedbackLeft_Specified := True;
end;

function TransactionType.FeedbackLeft_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackLeft_Specified;
end;

procedure TransactionType.SetFeedbackReceived(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
begin
  FFeedbackReceived := AFeedbackInfoType;
  FFeedbackReceived_Specified := True;
end;

function TransactionType.FeedbackReceived_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackReceived_Specified;
end;

procedure TransactionType.SetContainingOrder(Index: Integer; const AOrderType: OrderType);
begin
  FContainingOrder := AOrderType;
  FContainingOrder_Specified := True;
end;

function TransactionType.ContainingOrder_Specified(Index: Integer): boolean;
begin
  Result := FContainingOrder_Specified;
end;

procedure TransactionType.SetFinalValueFee(Index: Integer; const AAmountType: AmountType);
begin
  FFinalValueFee := AAmountType;
  FFinalValueFee_Specified := True;
end;

function TransactionType.FinalValueFee_Specified(Index: Integer): boolean;
begin
  Result := FFinalValueFee_Specified;
end;

procedure TransactionType.SetListingCheckoutRedirectPreference(Index: Integer; const AListingCheckoutRedirectPreferenceType: ListingCheckoutRedirectPreferenceType);
begin
  FListingCheckoutRedirectPreference := AListingCheckoutRedirectPreferenceType;
  FListingCheckoutRedirectPreference_Specified := True;
end;

function TransactionType.ListingCheckoutRedirectPreference_Specified(Index: Integer): boolean;
begin
  Result := FListingCheckoutRedirectPreference_Specified;
end;

procedure TransactionType.SetRefundArray(Index: Integer; const ARefundArrayType: RefundArrayType);
begin
  FRefundArray := ARefundArrayType;
  FRefundArray_Specified := True;
end;

function TransactionType.RefundArray_Specified(Index: Integer): boolean;
begin
  Result := FRefundArray_Specified;
end;

procedure TransactionType.SetTransactionSiteID(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FTransactionSiteID := ASiteCodeType;
  FTransactionSiteID_Specified := True;
end;

function TransactionType.TransactionSiteID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionSiteID_Specified;
end;

procedure TransactionType.SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
begin
  FPlatform_ := ATransactionPlatformCodeType;
  FPlatform__Specified := True;
end;

function TransactionType.Platform__Specified(Index: Integer): boolean;
begin
  Result := FPlatform__Specified;
end;

procedure TransactionType.SetCartID(Index: Integer; const Astring: string);
begin
  FCartID := Astring;
  FCartID_Specified := True;
end;

function TransactionType.CartID_Specified(Index: Integer): boolean;
begin
  Result := FCartID_Specified;
end;

procedure TransactionType.SetSellerContactBuyerByEmail(Index: Integer; const ABoolean: Boolean);
begin
  FSellerContactBuyerByEmail := ABoolean;
  FSellerContactBuyerByEmail_Specified := True;
end;

function TransactionType.SellerContactBuyerByEmail_Specified(Index: Integer): boolean;
begin
  Result := FSellerContactBuyerByEmail_Specified;
end;

procedure TransactionType.SetPayPalEmailAddress(Index: Integer; const Astring: string);
begin
  FPayPalEmailAddress := Astring;
  FPayPalEmailAddress_Specified := True;
end;

function TransactionType.PayPalEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FPayPalEmailAddress_Specified;
end;

procedure TransactionType.SetPaisaPayID(Index: Integer; const Astring: string);
begin
  FPaisaPayID := Astring;
  FPaisaPayID_Specified := True;
end;

function TransactionType.PaisaPayID_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayID_Specified;
end;

procedure TransactionType.SetBuyerGuaranteePrice(Index: Integer; const AAmountType: AmountType);
begin
  FBuyerGuaranteePrice := AAmountType;
  FBuyerGuaranteePrice_Specified := True;
end;

function TransactionType.BuyerGuaranteePrice_Specified(Index: Integer): boolean;
begin
  Result := FBuyerGuaranteePrice_Specified;
end;

procedure TransactionType.SetVariation(Index: Integer; const AVariationType: VariationType);
begin
  FVariation := AVariationType;
  FVariation_Specified := True;
end;

function TransactionType.Variation_Specified(Index: Integer): boolean;
begin
  Result := FVariation_Specified;
end;

procedure TransactionType.SetBuyerCheckoutMessage(Index: Integer; const Astring: string);
begin
  FBuyerCheckoutMessage := Astring;
  FBuyerCheckoutMessage_Specified := True;
end;

function TransactionType.BuyerCheckoutMessage_Specified(Index: Integer): boolean;
begin
  Result := FBuyerCheckoutMessage_Specified;
end;

procedure TransactionType.SetTotalTransactionPrice(Index: Integer; const AAmountType: AmountType);
begin
  FTotalTransactionPrice := AAmountType;
  FTotalTransactionPrice_Specified := True;
end;

function TransactionType.TotalTransactionPrice_Specified(Index: Integer): boolean;
begin
  Result := FTotalTransactionPrice_Specified;
end;

procedure TransactionType.SetTaxes(Index: Integer; const ATaxesType: TaxesType);
begin
  FTaxes := ATaxesType;
  FTaxes_Specified := True;
end;

function TransactionType.Taxes_Specified(Index: Integer): boolean;
begin
  Result := FTaxes_Specified;
end;

procedure TransactionType.SetBundlePurchase(Index: Integer; const ABoolean: Boolean);
begin
  FBundlePurchase := ABoolean;
  FBundlePurchase_Specified := True;
end;

function TransactionType.BundlePurchase_Specified(Index: Integer): boolean;
begin
  Result := FBundlePurchase_Specified;
end;

procedure TransactionType.SetActualShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FActualShippingCost := AAmountType;
  FActualShippingCost_Specified := True;
end;

function TransactionType.ActualShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FActualShippingCost_Specified;
end;

procedure TransactionType.SetActualHandlingCost(Index: Integer; const AAmountType: AmountType);
begin
  FActualHandlingCost := AAmountType;
  FActualHandlingCost_Specified := True;
end;

function TransactionType.ActualHandlingCost_Specified(Index: Integer): boolean;
begin
  Result := FActualHandlingCost_Specified;
end;

procedure TransactionType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function TransactionType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure TransactionType.SeteBayPaymentID(Index: Integer; const Astring: string);
begin
  FeBayPaymentID := Astring;
  FeBayPaymentID_Specified := True;
end;

function TransactionType.eBayPaymentID_Specified(Index: Integer): boolean;
begin
  Result := FeBayPaymentID_Specified;
end;

procedure TransactionType.SetPaymentHoldDetails(Index: Integer; const APaymentHoldDetailType: PaymentHoldDetailType);
begin
  FPaymentHoldDetails := APaymentHoldDetailType;
  FPaymentHoldDetails_Specified := True;
end;

function TransactionType.PaymentHoldDetails_Specified(Index: Integer): boolean;
begin
  Result := FPaymentHoldDetails_Specified;
end;

procedure TransactionType.SetSellerDiscounts(Index: Integer; const ASellerDiscountsType: SellerDiscountsType);
begin
  FSellerDiscounts := ASellerDiscountsType;
  FSellerDiscounts_Specified := True;
end;

function TransactionType.SellerDiscounts_Specified(Index: Integer): boolean;
begin
  Result := FSellerDiscounts_Specified;
end;

procedure TransactionType.SetRefundAmount(Index: Integer; const AAmountType: AmountType);
begin
  FRefundAmount := AAmountType;
  FRefundAmount_Specified := True;
end;

function TransactionType.RefundAmount_Specified(Index: Integer): boolean;
begin
  Result := FRefundAmount_Specified;
end;

procedure TransactionType.SetRefundStatus(Index: Integer; const Astring: string);
begin
  FRefundStatus := Astring;
  FRefundStatus_Specified := True;
end;

function TransactionType.RefundStatus_Specified(Index: Integer): boolean;
begin
  Result := FRefundStatus_Specified;
end;

procedure TransactionType.SetCodiceFiscale(Index: Integer; const Astring: string);
begin
  FCodiceFiscale := Astring;
  FCodiceFiscale_Specified := True;
end;

function TransactionType.CodiceFiscale_Specified(Index: Integer): boolean;
begin
  Result := FCodiceFiscale_Specified;
end;

procedure TransactionType.SetIsMultiLegShipping(Index: Integer; const ABoolean: Boolean);
begin
  FIsMultiLegShipping := ABoolean;
  FIsMultiLegShipping_Specified := True;
end;

function TransactionType.IsMultiLegShipping_Specified(Index: Integer): boolean;
begin
  Result := FIsMultiLegShipping_Specified;
end;

procedure TransactionType.SetMultiLegShippingDetails(Index: Integer; const AMultiLegShippingDetailsType: MultiLegShippingDetailsType);
begin
  FMultiLegShippingDetails := AMultiLegShippingDetailsType;
  FMultiLegShippingDetails_Specified := True;
end;

function TransactionType.MultiLegShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FMultiLegShippingDetails_Specified;
end;

procedure TransactionType.SetInvoiceSentTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInvoiceSentTime := ATXSDateTime;
  FInvoiceSentTime_Specified := True;
end;

function TransactionType.InvoiceSentTime_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceSentTime_Specified;
end;

procedure TransactionType.SetUnpaidItem(Index: Integer; const AUnpaidItemType: UnpaidItemType);
begin
  FUnpaidItem := AUnpaidItemType;
  FUnpaidItem_Specified := True;
end;

function TransactionType.UnpaidItem_Specified(Index: Integer): boolean;
begin
  Result := FUnpaidItem_Specified;
end;

procedure TransactionType.SetIntangibleItem(Index: Integer; const ABoolean: Boolean);
begin
  FIntangibleItem := ABoolean;
  FIntangibleItem_Specified := True;
end;

function TransactionType.IntangibleItem_Specified(Index: Integer): boolean;
begin
  Result := FIntangibleItem_Specified;
end;

procedure TransactionType.SetMonetaryDetails(Index: Integer; const APaymentsInformationType: PaymentsInformationType);
begin
  FMonetaryDetails := APaymentsInformationType;
  FMonetaryDetails_Specified := True;
end;

function TransactionType.MonetaryDetails_Specified(Index: Integer): boolean;
begin
  Result := FMonetaryDetails_Specified;
end;

procedure TransactionType.SetPickupDetails(Index: Integer; const APickupDetailsType: PickupDetailsType);
begin
  FPickupDetails := APickupDetailsType;
  FPickupDetails_Specified := True;
end;

function TransactionType.PickupDetails_Specified(Index: Integer): boolean;
begin
  Result := FPickupDetails_Specified;
end;

procedure TransactionType.SetPickupMethodSelected(Index: Integer; const APickupMethodSelectedType: PickupMethodSelectedType);
begin
  FPickupMethodSelected := APickupMethodSelectedType;
  FPickupMethodSelected_Specified := True;
end;

function TransactionType.PickupMethodSelected_Specified(Index: Integer): boolean;
begin
  Result := FPickupMethodSelected_Specified;
end;

procedure TransactionType.SetShippingConvenienceCharge(Index: Integer; const AAmountType: AmountType);
begin
  FShippingConvenienceCharge := AAmountType;
  FShippingConvenienceCharge_Specified := True;
end;

function TransactionType.ShippingConvenienceCharge_Specified(Index: Integer): boolean;
begin
  Result := FShippingConvenienceCharge_Specified;
end;

procedure TransactionType.SetLogisticsPlanType(Index: Integer; const Astring: string);
begin
  FLogisticsPlanType := Astring;
  FLogisticsPlanType_Specified := True;
end;

function TransactionType.LogisticsPlanType_Specified(Index: Integer): boolean;
begin
  Result := FLogisticsPlanType_Specified;
end;

procedure TransactionType.SetBuyerPackageEnclosures(Index: Integer; const ABuyerPackageEnclosuresType: BuyerPackageEnclosuresType);
begin
  FBuyerPackageEnclosures := ABuyerPackageEnclosuresType;
  FBuyerPackageEnclosures_Specified := True;
end;

function TransactionType.BuyerPackageEnclosures_Specified(Index: Integer): boolean;
begin
  Result := FBuyerPackageEnclosures_Specified;
end;

procedure TransactionType.SetInventoryReservationID(Index: Integer; const Astring: string);
begin
  FInventoryReservationID := Astring;
  FInventoryReservationID_Specified := True;
end;

function TransactionType.InventoryReservationID_Specified(Index: Integer): boolean;
begin
  Result := FInventoryReservationID_Specified;
end;

procedure TransactionType.SetExtendedOrderID(Index: Integer; const Astring: string);
begin
  FExtendedOrderID := Astring;
  FExtendedOrderID_Specified := True;
end;

function TransactionType.ExtendedOrderID_Specified(Index: Integer): boolean;
begin
  Result := FExtendedOrderID_Specified;
end;

procedure TransactionType.SeteBayPlusTransaction(Index: Integer; const ABoolean: Boolean);
begin
  FeBayPlusTransaction := ABoolean;
  FeBayPlusTransaction_Specified := True;
end;

function TransactionType.eBayPlusTransaction_Specified(Index: Integer): boolean;
begin
  Result := FeBayPlusTransaction_Specified;
end;

procedure TransactionType.SetGiftSummary(Index: Integer; const AGiftSummaryType: GiftSummaryType);
begin
  FGiftSummary := AGiftSummaryType;
  FGiftSummary_Specified := True;
end;

function TransactionType.GiftSummary_Specified(Index: Integer): boolean;
begin
  Result := FGiftSummary_Specified;
end;

procedure TransactionType.SetDigitalDeliverySelected(Index: Integer; const ADigitalDeliverySelectedType: DigitalDeliverySelectedType);
begin
  FDigitalDeliverySelected := ADigitalDeliverySelectedType;
  FDigitalDeliverySelected_Specified := True;
end;

function TransactionType.DigitalDeliverySelected_Specified(Index: Integer): boolean;
begin
  Result := FDigitalDeliverySelected_Specified;
end;

procedure TransactionType.SetGift(Index: Integer; const ABoolean: Boolean);
begin
  FGift := ABoolean;
  FGift_Specified := True;
end;

function TransactionType.Gift_Specified(Index: Integer): boolean;
begin
  Result := FGift_Specified;
end;

procedure TransactionType.SetGuaranteedShipping(Index: Integer; const ABoolean: Boolean);
begin
  FGuaranteedShipping := ABoolean;
  FGuaranteedShipping_Specified := True;
end;

function TransactionType.GuaranteedShipping_Specified(Index: Integer): boolean;
begin
  Result := FGuaranteedShipping_Specified;
end;

procedure TransactionType.SetGuaranteedDelivery(Index: Integer; const ABoolean: Boolean);
begin
  FGuaranteedDelivery := ABoolean;
  FGuaranteedDelivery_Specified := True;
end;

function TransactionType.GuaranteedDelivery_Specified(Index: Integer): boolean;
begin
  Result := FGuaranteedDelivery_Specified;
end;

procedure TransactionType.SeteBayCollectAndRemitTax(Index: Integer; const ABoolean: Boolean);
begin
  FeBayCollectAndRemitTax := ABoolean;
  FeBayCollectAndRemitTax_Specified := True;
end;

function TransactionType.eBayCollectAndRemitTax_Specified(Index: Integer): boolean;
begin
  Result := FeBayCollectAndRemitTax_Specified;
end;

procedure TransactionType.SeteBayCollectAndRemitTaxes(Index: Integer; const ATaxesType: TaxesType);
begin
  FeBayCollectAndRemitTaxes := ATaxesType;
  FeBayCollectAndRemitTaxes_Specified := True;
end;

function TransactionType.eBayCollectAndRemitTaxes_Specified(Index: Integer): boolean;
begin
  Result := FeBayCollectAndRemitTaxes_Specified;
end;

procedure ErrorParameterType.SetParamID(Index: Integer; const Astring: string);
begin
  FParamID := Astring;
  FParamID_Specified := True;
end;

function ErrorParameterType.ParamID_Specified(Index: Integer): boolean;
begin
  Result := FParamID_Specified;
end;

procedure ErrorParameterType.SetValue(Index: Integer; const Astring: string);
begin
  FValue := Astring;
  FValue_Specified := True;
end;

function ErrorParameterType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

destructor MeasureType.Destroy;
begin
  SysUtils.FreeAndNil(FText);
  inherited Destroy;
end;

procedure MeasureType.Setunit_(Index: Integer; const Astring: string);
begin
  Funit_ := Astring;
  Funit__Specified := True;
end;

function MeasureType.unit__Specified(Index: Integer): boolean;
begin
  Result := Funit__Specified;
end;

procedure MeasureType.SetmeasurementSystem(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
begin
  FmeasurementSystem := AMeasurementSystemCodeType;
  FmeasurementSystem_Specified := True;
end;

function MeasureType.measurementSystem_Specified(Index: Integer): boolean;
begin
  Result := FmeasurementSystem_Specified;
end;

destructor CalculatedShippingRateType.Destroy;
begin
  SysUtils.FreeAndNil(FPackagingHandlingCosts);
  SysUtils.FreeAndNil(FInternationalPackagingHandlingCosts);
  inherited Destroy;
end;

procedure CalculatedShippingRateType.SetOriginatingPostalCode(Index: Integer; const Astring: string);
begin
  FOriginatingPostalCode := Astring;
  FOriginatingPostalCode_Specified := True;
end;

function CalculatedShippingRateType.OriginatingPostalCode_Specified(Index: Integer): boolean;
begin
  Result := FOriginatingPostalCode_Specified;
end;

procedure CalculatedShippingRateType.SetMeasurementUnit(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
begin
  FMeasurementUnit := AMeasurementSystemCodeType;
  FMeasurementUnit_Specified := True;
end;

function CalculatedShippingRateType.MeasurementUnit_Specified(Index: Integer): boolean;
begin
  Result := FMeasurementUnit_Specified;
end;

procedure CalculatedShippingRateType.SetPackagingHandlingCosts(Index: Integer; const AAmountType: AmountType);
begin
  FPackagingHandlingCosts := AAmountType;
  FPackagingHandlingCosts_Specified := True;
end;

function CalculatedShippingRateType.PackagingHandlingCosts_Specified(Index: Integer): boolean;
begin
  Result := FPackagingHandlingCosts_Specified;
end;

procedure CalculatedShippingRateType.SetShippingIrregular(Index: Integer; const ABoolean: Boolean);
begin
  FShippingIrregular := ABoolean;
  FShippingIrregular_Specified := True;
end;

function CalculatedShippingRateType.ShippingIrregular_Specified(Index: Integer): boolean;
begin
  Result := FShippingIrregular_Specified;
end;

procedure CalculatedShippingRateType.SetInternationalPackagingHandlingCosts(Index: Integer; const AAmountType: AmountType);
begin
  FInternationalPackagingHandlingCosts := AAmountType;
  FInternationalPackagingHandlingCosts_Specified := True;
end;

function CalculatedShippingRateType.InternationalPackagingHandlingCosts_Specified(Index: Integer): boolean;
begin
  Result := FInternationalPackagingHandlingCosts_Specified;
end;

destructor ShipPackageDetailsType.Destroy;
begin
  SysUtils.FreeAndNil(FPackageDepth);
  SysUtils.FreeAndNil(FPackageLength);
  SysUtils.FreeAndNil(FPackageWidth);
  SysUtils.FreeAndNil(FWeightMajor);
  SysUtils.FreeAndNil(FWeightMinor);
  inherited Destroy;
end;

procedure ShipPackageDetailsType.SetMeasurementUnit(Index: Integer; const AMeasurementSystemCodeType: MeasurementSystemCodeType);
begin
  FMeasurementUnit := AMeasurementSystemCodeType;
  FMeasurementUnit_Specified := True;
end;

function ShipPackageDetailsType.MeasurementUnit_Specified(Index: Integer): boolean;
begin
  Result := FMeasurementUnit_Specified;
end;

procedure ShipPackageDetailsType.SetPackageDepth(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageDepth := AMeasureType;
  FPackageDepth_Specified := True;
end;

function ShipPackageDetailsType.PackageDepth_Specified(Index: Integer): boolean;
begin
  Result := FPackageDepth_Specified;
end;

procedure ShipPackageDetailsType.SetPackageLength(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageLength := AMeasureType;
  FPackageLength_Specified := True;
end;

function ShipPackageDetailsType.PackageLength_Specified(Index: Integer): boolean;
begin
  Result := FPackageLength_Specified;
end;

procedure ShipPackageDetailsType.SetPackageWidth(Index: Integer; const AMeasureType: MeasureType);
begin
  FPackageWidth := AMeasureType;
  FPackageWidth_Specified := True;
end;

function ShipPackageDetailsType.PackageWidth_Specified(Index: Integer): boolean;
begin
  Result := FPackageWidth_Specified;
end;

procedure ShipPackageDetailsType.SetShippingIrregular(Index: Integer; const ABoolean: Boolean);
begin
  FShippingIrregular := ABoolean;
  FShippingIrregular_Specified := True;
end;

function ShipPackageDetailsType.ShippingIrregular_Specified(Index: Integer): boolean;
begin
  Result := FShippingIrregular_Specified;
end;

procedure ShipPackageDetailsType.SetShippingPackage(Index: Integer; const AShippingPackageCodeType: ShippingPackageCodeType);
begin
  FShippingPackage := AShippingPackageCodeType;
  FShippingPackage_Specified := True;
end;

function ShipPackageDetailsType.ShippingPackage_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackage_Specified;
end;

procedure ShipPackageDetailsType.SetWeightMajor(Index: Integer; const AMeasureType: MeasureType);
begin
  FWeightMajor := AMeasureType;
  FWeightMajor_Specified := True;
end;

function ShipPackageDetailsType.WeightMajor_Specified(Index: Integer): boolean;
begin
  Result := FWeightMajor_Specified;
end;

procedure ShipPackageDetailsType.SetWeightMinor(Index: Integer; const AMeasureType: MeasureType);
begin
  FWeightMinor := AMeasureType;
  FWeightMinor_Specified := True;
end;

function ShipPackageDetailsType.WeightMinor_Specified(Index: Integer): boolean;
begin
  Result := FWeightMinor_Specified;
end;

destructor AdditionalAccountType.Destroy;
begin
  SysUtils.FreeAndNil(FBalance);
  inherited Destroy;
end;

procedure AdditionalAccountType.SetBalance(Index: Integer; const AAmountType: AmountType);
begin
  FBalance := AAmountType;
  FBalance_Specified := True;
end;

function AdditionalAccountType.Balance_Specified(Index: Integer): boolean;
begin
  Result := FBalance_Specified;
end;

procedure AdditionalAccountType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function AdditionalAccountType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure AdditionalAccountType.SetAccountCode(Index: Integer; const Astring: string);
begin
  FAccountCode := Astring;
  FAccountCode_Specified := True;
end;

function AdditionalAccountType.AccountCode_Specified(Index: Integer): boolean;
begin
  Result := FAccountCode_Specified;
end;

destructor UserType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCharityAffiliations)-1 do
    SysUtils.FreeAndNil(FCharityAffiliations[I]);
  System.SetLength(FCharityAffiliations, 0);
  for I := 0 to System.Length(FMembership)-1 do
    SysUtils.FreeAndNil(FMembership[I]);
  System.SetLength(FMembership, 0);
  SysUtils.FreeAndNil(FRegistrationAddress);
  SysUtils.FreeAndNil(FRegistrationDate);
  SysUtils.FreeAndNil(FUserIDLastChanged);
  SysUtils.FreeAndNil(FBuyerInfo);
  SysUtils.FreeAndNil(FSellerInfo);
  SysUtils.FreeAndNil(FBiddingSummary);
  SysUtils.FreeAndNil(FShippingAddress);
  inherited Destroy;
end;

procedure UserType.SetAboutMePage(Index: Integer; const ABoolean: Boolean);
begin
  FAboutMePage := ABoolean;
  FAboutMePage_Specified := True;
end;

function UserType.AboutMePage_Specified(Index: Integer): boolean;
begin
  Result := FAboutMePage_Specified;
end;

procedure UserType.SetEIASToken(Index: Integer; const Astring: string);
begin
  FEIASToken := Astring;
  FEIASToken_Specified := True;
end;

function UserType.EIASToken_Specified(Index: Integer): boolean;
begin
  Result := FEIASToken_Specified;
end;

procedure UserType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function UserType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure UserType.SetFeedbackScore(Index: Integer; const AInteger: Integer);
begin
  FFeedbackScore := AInteger;
  FFeedbackScore_Specified := True;
end;

function UserType.FeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackScore_Specified;
end;

procedure UserType.SetUniqueNegativeFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniqueNegativeFeedbackCount := AInteger;
  FUniqueNegativeFeedbackCount_Specified := True;
end;

function UserType.UniqueNegativeFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniqueNegativeFeedbackCount_Specified;
end;

procedure UserType.SetUniquePositiveFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniquePositiveFeedbackCount := AInteger;
  FUniquePositiveFeedbackCount_Specified := True;
end;

function UserType.UniquePositiveFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniquePositiveFeedbackCount_Specified;
end;

procedure UserType.SetPositiveFeedbackPercent(Index: Integer; const ASingle: Single);
begin
  FPositiveFeedbackPercent := ASingle;
  FPositiveFeedbackPercent_Specified := True;
end;

function UserType.PositiveFeedbackPercent_Specified(Index: Integer): boolean;
begin
  Result := FPositiveFeedbackPercent_Specified;
end;

procedure UserType.SetFeedbackPrivate(Index: Integer; const ABoolean: Boolean);
begin
  FFeedbackPrivate := ABoolean;
  FFeedbackPrivate_Specified := True;
end;

function UserType.FeedbackPrivate_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackPrivate_Specified;
end;

procedure UserType.SetFeedbackRatingStar(Index: Integer; const AFeedbackRatingStarCodeType: FeedbackRatingStarCodeType);
begin
  FFeedbackRatingStar := AFeedbackRatingStarCodeType;
  FFeedbackRatingStar_Specified := True;
end;

function UserType.FeedbackRatingStar_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackRatingStar_Specified;
end;

procedure UserType.SetIDVerified(Index: Integer; const ABoolean: Boolean);
begin
  FIDVerified := ABoolean;
  FIDVerified_Specified := True;
end;

function UserType.IDVerified_Specified(Index: Integer): boolean;
begin
  Result := FIDVerified_Specified;
end;

procedure UserType.SeteBayGoodStanding(Index: Integer; const ABoolean: Boolean);
begin
  FeBayGoodStanding := ABoolean;
  FeBayGoodStanding_Specified := True;
end;

function UserType.eBayGoodStanding_Specified(Index: Integer): boolean;
begin
  Result := FeBayGoodStanding_Specified;
end;

procedure UserType.SetNewUser(Index: Integer; const ABoolean: Boolean);
begin
  FNewUser := ABoolean;
  FNewUser_Specified := True;
end;

function UserType.NewUser_Specified(Index: Integer): boolean;
begin
  Result := FNewUser_Specified;
end;

procedure UserType.SetRegistrationAddress(Index: Integer; const AAddressType: AddressType);
begin
  FRegistrationAddress := AAddressType;
  FRegistrationAddress_Specified := True;
end;

function UserType.RegistrationAddress_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationAddress_Specified;
end;

procedure UserType.SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRegistrationDate := ATXSDateTime;
  FRegistrationDate_Specified := True;
end;

function UserType.RegistrationDate_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationDate_Specified;
end;

procedure UserType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function UserType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure UserType.SetStatus(Index: Integer; const AUserStatusCodeType: UserStatusCodeType);
begin
  FStatus := AUserStatusCodeType;
  FStatus_Specified := True;
end;

function UserType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure UserType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function UserType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure UserType.SetUserIDChanged(Index: Integer; const ABoolean: Boolean);
begin
  FUserIDChanged := ABoolean;
  FUserIDChanged_Specified := True;
end;

function UserType.UserIDChanged_Specified(Index: Integer): boolean;
begin
  Result := FUserIDChanged_Specified;
end;

procedure UserType.SetUserIDLastChanged(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUserIDLastChanged := ATXSDateTime;
  FUserIDLastChanged_Specified := True;
end;

function UserType.UserIDLastChanged_Specified(Index: Integer): boolean;
begin
  Result := FUserIDLastChanged_Specified;
end;

procedure UserType.SetVATStatus(Index: Integer; const AVATStatusCodeType: VATStatusCodeType);
begin
  FVATStatus := AVATStatusCodeType;
  FVATStatus_Specified := True;
end;

function UserType.VATStatus_Specified(Index: Integer): boolean;
begin
  Result := FVATStatus_Specified;
end;

procedure UserType.SetBuyerInfo(Index: Integer; const ABuyerType: BuyerType);
begin
  FBuyerInfo := ABuyerType;
  FBuyerInfo_Specified := True;
end;

function UserType.BuyerInfo_Specified(Index: Integer): boolean;
begin
  Result := FBuyerInfo_Specified;
end;

procedure UserType.SetSellerInfo(Index: Integer; const ASellerType: SellerType);
begin
  FSellerInfo := ASellerType;
  FSellerInfo_Specified := True;
end;

function UserType.SellerInfo_Specified(Index: Integer): boolean;
begin
  Result := FSellerInfo_Specified;
end;

procedure UserType.SetBusinessRole(Index: Integer; const ABusinessRoleType: BusinessRoleType);
begin
  FBusinessRole := ABusinessRoleType;
  FBusinessRole_Specified := True;
end;

function UserType.BusinessRole_Specified(Index: Integer): boolean;
begin
  Result := FBusinessRole_Specified;
end;

procedure UserType.SetCharityAffiliations(Index: Integer; const ACharityAffiliationsType: CharityAffiliationsType);
begin
  FCharityAffiliations := ACharityAffiliationsType;
  FCharityAffiliations_Specified := True;
end;

function UserType.CharityAffiliations_Specified(Index: Integer): boolean;
begin
  Result := FCharityAffiliations_Specified;
end;

procedure UserType.SetPayPalAccountLevel(Index: Integer; const APayPalAccountLevelCodeType: PayPalAccountLevelCodeType);
begin
  FPayPalAccountLevel := APayPalAccountLevelCodeType;
  FPayPalAccountLevel_Specified := True;
end;

function UserType.PayPalAccountLevel_Specified(Index: Integer): boolean;
begin
  Result := FPayPalAccountLevel_Specified;
end;

procedure UserType.SetPayPalAccountType(Index: Integer; const APayPalAccountTypeCodeType: PayPalAccountTypeCodeType);
begin
  FPayPalAccountType := APayPalAccountTypeCodeType;
  FPayPalAccountType_Specified := True;
end;

function UserType.PayPalAccountType_Specified(Index: Integer): boolean;
begin
  Result := FPayPalAccountType_Specified;
end;

procedure UserType.SetPayPalAccountStatus(Index: Integer; const APayPalAccountStatusCodeType: PayPalAccountStatusCodeType);
begin
  FPayPalAccountStatus := APayPalAccountStatusCodeType;
  FPayPalAccountStatus_Specified := True;
end;

function UserType.PayPalAccountStatus_Specified(Index: Integer): boolean;
begin
  Result := FPayPalAccountStatus_Specified;
end;

procedure UserType.SetUserSubscription(Index: Integer; const AArray_Of_EBaySubscriptionTypeCodeType: Array_Of_EBaySubscriptionTypeCodeType);
begin
  FUserSubscription := AArray_Of_EBaySubscriptionTypeCodeType;
  FUserSubscription_Specified := True;
end;

function UserType.UserSubscription_Specified(Index: Integer): boolean;
begin
  Result := FUserSubscription_Specified;
end;

procedure UserType.SetSiteVerified(Index: Integer; const ABoolean: Boolean);
begin
  FSiteVerified := ABoolean;
  FSiteVerified_Specified := True;
end;

function UserType.SiteVerified_Specified(Index: Integer): boolean;
begin
  Result := FSiteVerified_Specified;
end;

procedure UserType.SetSkypeID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSkypeID := ASellerExcludeShipToLocationPreferencesType;
  FSkypeID_Specified := True;
end;

function UserType.SkypeID_Specified(Index: Integer): boolean;
begin
  Result := FSkypeID_Specified;
end;

procedure UserType.SeteBayWikiReadOnly(Index: Integer; const ABoolean: Boolean);
begin
  FeBayWikiReadOnly := ABoolean;
  FeBayWikiReadOnly_Specified := True;
end;

function UserType.eBayWikiReadOnly_Specified(Index: Integer): boolean;
begin
  Result := FeBayWikiReadOnly_Specified;
end;

procedure UserType.SetTUVLevel(Index: Integer; const AInteger: Integer);
begin
  FTUVLevel := AInteger;
  FTUVLevel_Specified := True;
end;

function UserType.TUVLevel_Specified(Index: Integer): boolean;
begin
  Result := FTUVLevel_Specified;
end;

procedure UserType.SetVATID(Index: Integer; const Astring: string);
begin
  FVATID := Astring;
  FVATID_Specified := True;
end;

function UserType.VATID_Specified(Index: Integer): boolean;
begin
  Result := FVATID_Specified;
end;

procedure UserType.SetSellerPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
begin
  FSellerPaymentMethod := ASellerPaymentMethodCodeType;
  FSellerPaymentMethod_Specified := True;
end;

function UserType.SellerPaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentMethod_Specified;
end;

procedure UserType.SetBiddingSummary(Index: Integer; const ABiddingSummaryType: BiddingSummaryType);
begin
  FBiddingSummary := ABiddingSummaryType;
  FBiddingSummary_Specified := True;
end;

function UserType.BiddingSummary_Specified(Index: Integer): boolean;
begin
  Result := FBiddingSummary_Specified;
end;

procedure UserType.SetUserAnonymized(Index: Integer; const ABoolean: Boolean);
begin
  FUserAnonymized := ABoolean;
  FUserAnonymized_Specified := True;
end;

function UserType.UserAnonymized_Specified(Index: Integer): boolean;
begin
  Result := FUserAnonymized_Specified;
end;

procedure UserType.SetUniqueNeutralFeedbackCount(Index: Integer; const AInteger: Integer);
begin
  FUniqueNeutralFeedbackCount := AInteger;
  FUniqueNeutralFeedbackCount_Specified := True;
end;

function UserType.UniqueNeutralFeedbackCount_Specified(Index: Integer): boolean;
begin
  Result := FUniqueNeutralFeedbackCount_Specified;
end;

procedure UserType.SetEnterpriseSeller(Index: Integer; const ABoolean: Boolean);
begin
  FEnterpriseSeller := ABoolean;
  FEnterpriseSeller_Specified := True;
end;

function UserType.EnterpriseSeller_Specified(Index: Integer): boolean;
begin
  Result := FEnterpriseSeller_Specified;
end;

procedure UserType.SetBillingEmail(Index: Integer; const Astring: string);
begin
  FBillingEmail := Astring;
  FBillingEmail_Specified := True;
end;

function UserType.BillingEmail_Specified(Index: Integer): boolean;
begin
  Result := FBillingEmail_Specified;
end;

procedure UserType.SetQualifiesForSelling(Index: Integer; const ABoolean: Boolean);
begin
  FQualifiesForSelling := ABoolean;
  FQualifiesForSelling_Specified := True;
end;

function UserType.QualifiesForSelling_Specified(Index: Integer): boolean;
begin
  Result := FQualifiesForSelling_Specified;
end;

procedure UserType.SetStaticAlias(Index: Integer; const Astring: string);
begin
  FStaticAlias := Astring;
  FStaticAlias_Specified := True;
end;

function UserType.StaticAlias_Specified(Index: Integer): boolean;
begin
  Result := FStaticAlias_Specified;
end;

procedure UserType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function UserType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure UserType.SetMembership(Index: Integer; const AMembershipDetailsType: MembershipDetailsType);
begin
  FMembership := AMembershipDetailsType;
  FMembership_Specified := True;
end;

function UserType.Membership_Specified(Index: Integer): boolean;
begin
  Result := FMembership_Specified;
end;

procedure UserType.SetUserFirstName(Index: Integer; const Astring: string);
begin
  FUserFirstName := Astring;
  FUserFirstName_Specified := True;
end;

function UserType.UserFirstName_Specified(Index: Integer): boolean;
begin
  Result := FUserFirstName_Specified;
end;

procedure UserType.SetUserLastName(Index: Integer; const Astring: string);
begin
  FUserLastName := Astring;
  FUserLastName_Specified := True;
end;

function UserType.UserLastName_Specified(Index: Integer): boolean;
begin
  Result := FUserLastName_Specified;
end;

destructor AccountSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAdditionalAccount)-1 do
    SysUtils.FreeAndNil(FAdditionalAccount[I]);
  System.SetLength(FAdditionalAccount, 0);
  SysUtils.FreeAndNil(FInvoicePayment);
  SysUtils.FreeAndNil(FInvoiceCredit);
  SysUtils.FreeAndNil(FInvoiceNewFee);
  SysUtils.FreeAndNil(FAmountPastDue);
  SysUtils.FreeAndNil(FBankModifyDate);
  SysUtils.FreeAndNil(FCreditCardExpiration);
  SysUtils.FreeAndNil(FCreditCardModifyDate);
  SysUtils.FreeAndNil(FCurrentBalance);
  SysUtils.FreeAndNil(FInvoiceBalance);
  SysUtils.FreeAndNil(FInvoiceDate);
  SysUtils.FreeAndNil(FLastAmountPaid);
  SysUtils.FreeAndNil(FLastPaymentDate);
  inherited Destroy;
end;

procedure AccountSummaryType.SetAccountState(Index: Integer; const AAccountStateCodeType: AccountStateCodeType);
begin
  FAccountState := AAccountStateCodeType;
  FAccountState_Specified := True;
end;

function AccountSummaryType.AccountState_Specified(Index: Integer): boolean;
begin
  Result := FAccountState_Specified;
end;

procedure AccountSummaryType.SetInvoicePayment(Index: Integer; const AAmountType: AmountType);
begin
  FInvoicePayment := AAmountType;
  FInvoicePayment_Specified := True;
end;

function AccountSummaryType.InvoicePayment_Specified(Index: Integer): boolean;
begin
  Result := FInvoicePayment_Specified;
end;

procedure AccountSummaryType.SetInvoiceCredit(Index: Integer; const AAmountType: AmountType);
begin
  FInvoiceCredit := AAmountType;
  FInvoiceCredit_Specified := True;
end;

function AccountSummaryType.InvoiceCredit_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceCredit_Specified;
end;

procedure AccountSummaryType.SetInvoiceNewFee(Index: Integer; const AAmountType: AmountType);
begin
  FInvoiceNewFee := AAmountType;
  FInvoiceNewFee_Specified := True;
end;

function AccountSummaryType.InvoiceNewFee_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceNewFee_Specified;
end;

procedure AccountSummaryType.SetAdditionalAccount(Index: Integer; const AArray_Of_AdditionalAccountType: Array_Of_AdditionalAccountType);
begin
  FAdditionalAccount := AArray_Of_AdditionalAccountType;
  FAdditionalAccount_Specified := True;
end;

function AccountSummaryType.AdditionalAccount_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalAccount_Specified;
end;

procedure AccountSummaryType.SetAmountPastDue(Index: Integer; const AAmountType: AmountType);
begin
  FAmountPastDue := AAmountType;
  FAmountPastDue_Specified := True;
end;

function AccountSummaryType.AmountPastDue_Specified(Index: Integer): boolean;
begin
  Result := FAmountPastDue_Specified;
end;

procedure AccountSummaryType.SetBankAccountInfo(Index: Integer; const Astring: string);
begin
  FBankAccountInfo := Astring;
  FBankAccountInfo_Specified := True;
end;

function AccountSummaryType.BankAccountInfo_Specified(Index: Integer): boolean;
begin
  Result := FBankAccountInfo_Specified;
end;

procedure AccountSummaryType.SetBankModifyDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBankModifyDate := ATXSDateTime;
  FBankModifyDate_Specified := True;
end;

function AccountSummaryType.BankModifyDate_Specified(Index: Integer): boolean;
begin
  Result := FBankModifyDate_Specified;
end;

procedure AccountSummaryType.SetBillingCycleDate(Index: Integer; const AInteger: Integer);
begin
  FBillingCycleDate := AInteger;
  FBillingCycleDate_Specified := True;
end;

function AccountSummaryType.BillingCycleDate_Specified(Index: Integer): boolean;
begin
  Result := FBillingCycleDate_Specified;
end;

procedure AccountSummaryType.SetCreditCardExpiration(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreditCardExpiration := ATXSDateTime;
  FCreditCardExpiration_Specified := True;
end;

function AccountSummaryType.CreditCardExpiration_Specified(Index: Integer): boolean;
begin
  Result := FCreditCardExpiration_Specified;
end;

procedure AccountSummaryType.SetCreditCardInfo(Index: Integer; const Astring: string);
begin
  FCreditCardInfo := Astring;
  FCreditCardInfo_Specified := True;
end;

function AccountSummaryType.CreditCardInfo_Specified(Index: Integer): boolean;
begin
  Result := FCreditCardInfo_Specified;
end;

procedure AccountSummaryType.SetCreditCardModifyDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreditCardModifyDate := ATXSDateTime;
  FCreditCardModifyDate_Specified := True;
end;

function AccountSummaryType.CreditCardModifyDate_Specified(Index: Integer): boolean;
begin
  Result := FCreditCardModifyDate_Specified;
end;

procedure AccountSummaryType.SetCurrentBalance(Index: Integer; const AAmountType: AmountType);
begin
  FCurrentBalance := AAmountType;
  FCurrentBalance_Specified := True;
end;

function AccountSummaryType.CurrentBalance_Specified(Index: Integer): boolean;
begin
  Result := FCurrentBalance_Specified;
end;

procedure AccountSummaryType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function AccountSummaryType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure AccountSummaryType.SetInvoiceBalance(Index: Integer; const AAmountType: AmountType);
begin
  FInvoiceBalance := AAmountType;
  FInvoiceBalance_Specified := True;
end;

function AccountSummaryType.InvoiceBalance_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceBalance_Specified;
end;

procedure AccountSummaryType.SetInvoiceDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInvoiceDate := ATXSDateTime;
  FInvoiceDate_Specified := True;
end;

function AccountSummaryType.InvoiceDate_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceDate_Specified;
end;

procedure AccountSummaryType.SetLastAmountPaid(Index: Integer; const AAmountType: AmountType);
begin
  FLastAmountPaid := AAmountType;
  FLastAmountPaid_Specified := True;
end;

function AccountSummaryType.LastAmountPaid_Specified(Index: Integer): boolean;
begin
  Result := FLastAmountPaid_Specified;
end;

procedure AccountSummaryType.SetLastPaymentDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastPaymentDate := ATXSDateTime;
  FLastPaymentDate_Specified := True;
end;

function AccountSummaryType.LastPaymentDate_Specified(Index: Integer): boolean;
begin
  Result := FLastPaymentDate_Specified;
end;

procedure AccountSummaryType.SetPastDue(Index: Integer; const ABoolean: Boolean);
begin
  FPastDue := ABoolean;
  FPastDue_Specified := True;
end;

function AccountSummaryType.PastDue_Specified(Index: Integer): boolean;
begin
  Result := FPastDue_Specified;
end;

procedure AccountSummaryType.SetPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
begin
  FPaymentMethod := ASellerPaymentMethodCodeType;
  FPaymentMethod_Specified := True;
end;

function AccountSummaryType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

destructor SellerType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCharityAffiliationDetails)-1 do
    SysUtils.FreeAndNil(FCharityAffiliationDetails[I]);
  System.SetLength(FCharityAffiliationDetails, 0);
  SysUtils.FreeAndNil(FSellerPaymentAddress);
  SysUtils.FreeAndNil(FSchedulingInfo);
  SysUtils.FreeAndNil(FProStoresPreference);
  SysUtils.FreeAndNil(FFeatureEligibility);
  SysUtils.FreeAndNil(FSellereBayPaymentProcessConsent);
  inherited Destroy;
end;

procedure SellerType.SetPaisaPayStatus(Index: Integer; const AInteger: Integer);
begin
  FPaisaPayStatus := AInteger;
  FPaisaPayStatus_Specified := True;
end;

function SellerType.PaisaPayStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayStatus_Specified;
end;

procedure SellerType.SetBillingCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FBillingCurrency := ACurrencyCodeType;
  FBillingCurrency_Specified := True;
end;

function SellerType.BillingCurrency_Specified(Index: Integer): boolean;
begin
  Result := FBillingCurrency_Specified;
end;

procedure SellerType.SetMerchandizingPref(Index: Integer; const AMerchandizingPrefCodeType: MerchandizingPrefCodeType);
begin
  FMerchandizingPref := AMerchandizingPrefCodeType;
  FMerchandizingPref_Specified := True;
end;

function SellerType.MerchandizingPref_Specified(Index: Integer): boolean;
begin
  Result := FMerchandizingPref_Specified;
end;

procedure SellerType.SetSellerGuaranteeLevel(Index: Integer; const ASellerGuaranteeLevelCodeType: SellerGuaranteeLevelCodeType);
begin
  FSellerGuaranteeLevel := ASellerGuaranteeLevelCodeType;
  FSellerGuaranteeLevel_Specified := True;
end;

function SellerType.SellerGuaranteeLevel_Specified(Index: Integer): boolean;
begin
  Result := FSellerGuaranteeLevel_Specified;
end;

procedure SellerType.SetSellerLevel(Index: Integer; const ASellerLevelCodeType: SellerLevelCodeType);
begin
  FSellerLevel := ASellerLevelCodeType;
  FSellerLevel_Specified := True;
end;

function SellerType.SellerLevel_Specified(Index: Integer): boolean;
begin
  Result := FSellerLevel_Specified;
end;

procedure SellerType.SetSellerPaymentAddress(Index: Integer; const AAddressType: AddressType);
begin
  FSellerPaymentAddress := AAddressType;
  FSellerPaymentAddress_Specified := True;
end;

function SellerType.SellerPaymentAddress_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentAddress_Specified;
end;

procedure SellerType.SetSchedulingInfo(Index: Integer; const ASchedulingInfoType: SchedulingInfoType);
begin
  FSchedulingInfo := ASchedulingInfoType;
  FSchedulingInfo_Specified := True;
end;

function SellerType.SchedulingInfo_Specified(Index: Integer): boolean;
begin
  Result := FSchedulingInfo_Specified;
end;

procedure SellerType.SetStoreURL(Index: Integer; const Astring: string);
begin
  FStoreURL := Astring;
  FStoreURL_Specified := True;
end;

function SellerType.StoreURL_Specified(Index: Integer): boolean;
begin
  Result := FStoreURL_Specified;
end;

procedure SellerType.SetSellerBusinessType(Index: Integer; const ASellerBusinessCodeType: SellerBusinessCodeType);
begin
  FSellerBusinessType := ASellerBusinessCodeType;
  FSellerBusinessType_Specified := True;
end;

function SellerType.SellerBusinessType_Specified(Index: Integer): boolean;
begin
  Result := FSellerBusinessType_Specified;
end;

procedure SellerType.SetRegisteredBusinessSeller(Index: Integer; const ABoolean: Boolean);
begin
  FRegisteredBusinessSeller := ABoolean;
  FRegisteredBusinessSeller_Specified := True;
end;

function SellerType.RegisteredBusinessSeller_Specified(Index: Integer): boolean;
begin
  Result := FRegisteredBusinessSeller_Specified;
end;

procedure SellerType.SetStoreSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FStoreSite := ASiteCodeType;
  FStoreSite_Specified := True;
end;

function SellerType.StoreSite_Specified(Index: Integer): boolean;
begin
  Result := FStoreSite_Specified;
end;

procedure SellerType.SetPaymentMethod(Index: Integer; const ASellerPaymentMethodCodeType: SellerPaymentMethodCodeType);
begin
  FPaymentMethod := ASellerPaymentMethodCodeType;
  FPaymentMethod_Specified := True;
end;

function SellerType.PaymentMethod_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethod_Specified;
end;

procedure SellerType.SetProStoresPreference(Index: Integer; const AProStoresCheckoutPreferenceType: ProStoresCheckoutPreferenceType);
begin
  FProStoresPreference := AProStoresCheckoutPreferenceType;
  FProStoresPreference_Specified := True;
end;

function SellerType.ProStoresPreference_Specified(Index: Integer): boolean;
begin
  Result := FProStoresPreference_Specified;
end;

procedure SellerType.SetCharityRegistered(Index: Integer; const ABoolean: Boolean);
begin
  FCharityRegistered := ABoolean;
  FCharityRegistered_Specified := True;
end;

function SellerType.CharityRegistered_Specified(Index: Integer): boolean;
begin
  Result := FCharityRegistered_Specified;
end;

procedure SellerType.SetSafePaymentExempt(Index: Integer; const ABoolean: Boolean);
begin
  FSafePaymentExempt := ABoolean;
  FSafePaymentExempt_Specified := True;
end;

function SellerType.SafePaymentExempt_Specified(Index: Integer): boolean;
begin
  Result := FSafePaymentExempt_Specified;
end;

procedure SellerType.SetPaisaPayEscrowEMIStatus(Index: Integer; const AInteger: Integer);
begin
  FPaisaPayEscrowEMIStatus := AInteger;
  FPaisaPayEscrowEMIStatus_Specified := True;
end;

function SellerType.PaisaPayEscrowEMIStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaisaPayEscrowEMIStatus_Specified;
end;

procedure SellerType.SetCharityAffiliationDetails(Index: Integer; const ACharityAffiliationDetailsType: CharityAffiliationDetailsType);
begin
  FCharityAffiliationDetails := ACharityAffiliationDetailsType;
  FCharityAffiliationDetails_Specified := True;
end;

function SellerType.CharityAffiliationDetails_Specified(Index: Integer): boolean;
begin
  Result := FCharityAffiliationDetails_Specified;
end;

procedure SellerType.SetTransactionPercent(Index: Integer; const ASingle: Single);
begin
  FTransactionPercent := ASingle;
  FTransactionPercent_Specified := True;
end;

function SellerType.TransactionPercent_Specified(Index: Integer): boolean;
begin
  Result := FTransactionPercent_Specified;
end;

procedure SellerType.SetIntegratedMerchantCreditCardInfo(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
begin
  FIntegratedMerchantCreditCardInfo := AIntegratedMerchantCreditCardInfoType;
  FIntegratedMerchantCreditCardInfo_Specified := True;
end;

function SellerType.IntegratedMerchantCreditCardInfo_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardInfo_Specified;
end;

procedure SellerType.SetFeatureEligibility(Index: Integer; const AFeatureEligibilityType: FeatureEligibilityType);
begin
  FFeatureEligibility := AFeatureEligibilityType;
  FFeatureEligibility_Specified := True;
end;

function SellerType.FeatureEligibility_Specified(Index: Integer): boolean;
begin
  Result := FFeatureEligibility_Specified;
end;

procedure SellerType.SetTopRatedSeller(Index: Integer; const ABoolean: Boolean);
begin
  FTopRatedSeller := ABoolean;
  FTopRatedSeller_Specified := True;
end;

function SellerType.TopRatedSeller_Specified(Index: Integer): boolean;
begin
  Result := FTopRatedSeller_Specified;
end;

procedure SellerType.SetTopRatedSellerDetails(Index: Integer; const ATopRatedSellerDetailsType: TopRatedSellerDetailsType);
begin
  FTopRatedSellerDetails := ATopRatedSellerDetailsType;
  FTopRatedSellerDetails_Specified := True;
end;

function SellerType.TopRatedSellerDetails_Specified(Index: Integer): boolean;
begin
  Result := FTopRatedSellerDetails_Specified;
end;

procedure SellerType.SetRecoupmentPolicyConsent(Index: Integer; const ARecoupmentPolicyConsentType: RecoupmentPolicyConsentType);
begin
  FRecoupmentPolicyConsent := ARecoupmentPolicyConsentType;
  FRecoupmentPolicyConsent_Specified := True;
end;

function SellerType.RecoupmentPolicyConsent_Specified(Index: Integer): boolean;
begin
  Result := FRecoupmentPolicyConsent_Specified;
end;

procedure SellerType.SetDomesticRateTable(Index: Integer; const ABoolean: Boolean);
begin
  FDomesticRateTable := ABoolean;
  FDomesticRateTable_Specified := True;
end;

function SellerType.DomesticRateTable_Specified(Index: Integer): boolean;
begin
  Result := FDomesticRateTable_Specified;
end;

procedure SellerType.SetInternationalRateTable(Index: Integer; const ABoolean: Boolean);
begin
  FInternationalRateTable := ABoolean;
  FInternationalRateTable_Specified := True;
end;

function SellerType.InternationalRateTable_Specified(Index: Integer): boolean;
begin
  Result := FInternationalRateTable_Specified;
end;

procedure SellerType.SetSellereBayPaymentProcessStatus(Index: Integer; const ASellereBayPaymentProcessStatusCodeType: SellereBayPaymentProcessStatusCodeType);
begin
  FSellereBayPaymentProcessStatus := ASellereBayPaymentProcessStatusCodeType;
  FSellereBayPaymentProcessStatus_Specified := True;
end;

function SellerType.SellereBayPaymentProcessStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellereBayPaymentProcessStatus_Specified;
end;

procedure SellerType.SetSellereBayPaymentProcessConsent(Index: Integer; const ASellereBayPaymentProcessConsentCodeType: SellereBayPaymentProcessConsentCodeType);
begin
  FSellereBayPaymentProcessConsent := ASellereBayPaymentProcessConsentCodeType;
  FSellereBayPaymentProcessConsent_Specified := True;
end;

function SellerType.SellereBayPaymentProcessConsent_Specified(Index: Integer): boolean;
begin
  Result := FSellereBayPaymentProcessConsent_Specified;
end;

destructor QuantityType.Destroy;
begin
  SysUtils.FreeAndNil(FText);
  inherited Destroy;
end;

procedure QuantityType.Setunit_(Index: Integer; const Astring: string);
begin
  Funit_ := Astring;
  Funit__Specified := True;
end;

function QuantityType.unit__Specified(Index: Integer): boolean;
begin
  Result := Funit__Specified;
end;

destructor AccountEntryType.Destroy;
begin
  SysUtils.FreeAndNil(FBalance);
  SysUtils.FreeAndNil(FDate);
  SysUtils.FreeAndNil(FGrossDetailAmount);
  SysUtils.FreeAndNil(FConversionRate);
  SysUtils.FreeAndNil(FNetDetailAmount);
  SysUtils.FreeAndNil(FVATPercent);
  inherited Destroy;
end;

procedure AccountEntryType.SetAccountDetailsEntryType(Index: Integer; const AAccountDetailEntryCodeType: AccountDetailEntryCodeType);
begin
  FAccountDetailsEntryType := AAccountDetailEntryCodeType;
  FAccountDetailsEntryType_Specified := True;
end;

function AccountEntryType.AccountDetailsEntryType_Specified(Index: Integer): boolean;
begin
  Result := FAccountDetailsEntryType_Specified;
end;

procedure AccountEntryType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AccountEntryType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure AccountEntryType.SetBalance(Index: Integer; const AAmountType: AmountType);
begin
  FBalance := AAmountType;
  FBalance_Specified := True;
end;

function AccountEntryType.Balance_Specified(Index: Integer): boolean;
begin
  Result := FBalance_Specified;
end;

procedure AccountEntryType.SetDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDate := ATXSDateTime;
  FDate_Specified := True;
end;

function AccountEntryType.Date_Specified(Index: Integer): boolean;
begin
  Result := FDate_Specified;
end;

procedure AccountEntryType.SetGrossDetailAmount(Index: Integer; const AAmountType: AmountType);
begin
  FGrossDetailAmount := AAmountType;
  FGrossDetailAmount_Specified := True;
end;

function AccountEntryType.GrossDetailAmount_Specified(Index: Integer): boolean;
begin
  Result := FGrossDetailAmount_Specified;
end;

procedure AccountEntryType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AccountEntryType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AccountEntryType.SetMemo(Index: Integer; const Astring: string);
begin
  FMemo := Astring;
  FMemo_Specified := True;
end;

function AccountEntryType.Memo_Specified(Index: Integer): boolean;
begin
  Result := FMemo_Specified;
end;

procedure AccountEntryType.SetConversionRate(Index: Integer; const AAmountType: AmountType);
begin
  FConversionRate := AAmountType;
  FConversionRate_Specified := True;
end;

function AccountEntryType.ConversionRate_Specified(Index: Integer): boolean;
begin
  Result := FConversionRate_Specified;
end;

procedure AccountEntryType.SetNetDetailAmount(Index: Integer; const AAmountType: AmountType);
begin
  FNetDetailAmount := AAmountType;
  FNetDetailAmount_Specified := True;
end;

function AccountEntryType.NetDetailAmount_Specified(Index: Integer): boolean;
begin
  Result := FNetDetailAmount_Specified;
end;

procedure AccountEntryType.SetRefNumber(Index: Integer; const Astring: string);
begin
  FRefNumber := Astring;
  FRefNumber_Specified := True;
end;

function AccountEntryType.RefNumber_Specified(Index: Integer): boolean;
begin
  Result := FRefNumber_Specified;
end;

procedure AccountEntryType.SetVATPercent(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FVATPercent := ATXSDecimal;
  FVATPercent_Specified := True;
end;

function AccountEntryType.VATPercent_Specified(Index: Integer): boolean;
begin
  Result := FVATPercent_Specified;
end;

procedure AccountEntryType.SetTitle(Index: Integer; const Astring: string);
begin
  FTitle := Astring;
  FTitle_Specified := True;
end;

function AccountEntryType.Title_Specified(Index: Integer): boolean;
begin
  Result := FTitle_Specified;
end;

procedure AccountEntryType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function AccountEntryType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure AccountEntryType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function AccountEntryType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure AccountEntryType.SetReceivedTopRatedDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FReceivedTopRatedDiscount := ABoolean;
  FReceivedTopRatedDiscount_Specified := True;
end;

function AccountEntryType.ReceivedTopRatedDiscount_Specified(Index: Integer): boolean;
begin
  Result := FReceivedTopRatedDiscount_Specified;
end;

procedure AccountEntryType.SetOrderId(Index: Integer; const Astring: string);
begin
  FOrderId := Astring;
  FOrderId_Specified := True;
end;

function AccountEntryType.OrderId_Specified(Index: Integer): boolean;
begin
  Result := FOrderId_Specified;
end;

procedure AddMemberMessagesAAQToBidderResponseContainerType.SetCorrelationID(Index: Integer; const Astring: string);
begin
  FCorrelationID := Astring;
  FCorrelationID_Specified := True;
end;

function AddMemberMessagesAAQToBidderResponseContainerType.CorrelationID_Specified(Index: Integer): boolean;
begin
  Result := FCorrelationID_Specified;
end;

procedure AddMemberMessagesAAQToBidderResponseContainerType.SetAck(Index: Integer; const AAckCodeType: AckCodeType);
begin
  FAck := AAckCodeType;
  FAck_Specified := True;
end;

function AddMemberMessagesAAQToBidderResponseContainerType.Ack_Specified(Index: Integer): boolean;
begin
  Result := FAck_Specified;
end;

destructor AbstractResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FErrors)-1 do
    SysUtils.FreeAndNil(FErrors[I]);
  System.SetLength(FErrors, 0);
  SysUtils.FreeAndNil(FTimestamp);
  SysUtils.FreeAndNil(FDuplicateInvocationDetails);
  SysUtils.FreeAndNil(FBotBlock);
  inherited Destroy;
end;

procedure AbstractResponseType.SetTimestamp(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimestamp := ATXSDateTime;
  FTimestamp_Specified := True;
end;

function AbstractResponseType.Timestamp_Specified(Index: Integer): boolean;
begin
  Result := FTimestamp_Specified;
end;

procedure AbstractResponseType.SetAck(Index: Integer; const AAckCodeType: AckCodeType);
begin
  FAck := AAckCodeType;
  FAck_Specified := True;
end;

function AbstractResponseType.Ack_Specified(Index: Integer): boolean;
begin
  Result := FAck_Specified;
end;

procedure AbstractResponseType.SetCorrelationID(Index: Integer; const Astring: string);
begin
  FCorrelationID := Astring;
  FCorrelationID_Specified := True;
end;

function AbstractResponseType.CorrelationID_Specified(Index: Integer): boolean;
begin
  Result := FCorrelationID_Specified;
end;

procedure AbstractResponseType.SetErrors(Index: Integer; const AArray_Of_ErrorType: Array_Of_ErrorType);
begin
  FErrors := AArray_Of_ErrorType;
  FErrors_Specified := True;
end;

function AbstractResponseType.Errors_Specified(Index: Integer): boolean;
begin
  Result := FErrors_Specified;
end;

procedure AbstractResponseType.SetMessage_(Index: Integer; const Astring: string);
begin
  FMessage_ := Astring;
  FMessage__Specified := True;
end;

function AbstractResponseType.Message__Specified(Index: Integer): boolean;
begin
  Result := FMessage__Specified;
end;

procedure AbstractResponseType.SetVersion(Index: Integer; const Astring: string);
begin
  FVersion := Astring;
  FVersion_Specified := True;
end;

function AbstractResponseType.Version_Specified(Index: Integer): boolean;
begin
  Result := FVersion_Specified;
end;

procedure AbstractResponseType.SetBuild(Index: Integer; const Astring: string);
begin
  FBuild := Astring;
  FBuild_Specified := True;
end;

function AbstractResponseType.Build_Specified(Index: Integer): boolean;
begin
  Result := FBuild_Specified;
end;

procedure AbstractResponseType.SetNotificationEventName(Index: Integer; const Astring: string);
begin
  FNotificationEventName := Astring;
  FNotificationEventName_Specified := True;
end;

function AbstractResponseType.NotificationEventName_Specified(Index: Integer): boolean;
begin
  Result := FNotificationEventName_Specified;
end;

procedure AbstractResponseType.SetDuplicateInvocationDetails(Index: Integer; const ADuplicateInvocationDetailsType: DuplicateInvocationDetailsType);
begin
  FDuplicateInvocationDetails := ADuplicateInvocationDetailsType;
  FDuplicateInvocationDetails_Specified := True;
end;

function AbstractResponseType.DuplicateInvocationDetails_Specified(Index: Integer): boolean;
begin
  Result := FDuplicateInvocationDetails_Specified;
end;

procedure AbstractResponseType.SetRecipientUserID(Index: Integer; const Astring: string);
begin
  FRecipientUserID := Astring;
  FRecipientUserID_Specified := True;
end;

function AbstractResponseType.RecipientUserID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientUserID_Specified;
end;

procedure AbstractResponseType.SetEIASToken(Index: Integer; const Astring: string);
begin
  FEIASToken := Astring;
  FEIASToken_Specified := True;
end;

function AbstractResponseType.EIASToken_Specified(Index: Integer): boolean;
begin
  Result := FEIASToken_Specified;
end;

procedure AbstractResponseType.SetNotificationSignature(Index: Integer; const Astring: string);
begin
  FNotificationSignature := Astring;
  FNotificationSignature_Specified := True;
end;

function AbstractResponseType.NotificationSignature_Specified(Index: Integer): boolean;
begin
  Result := FNotificationSignature_Specified;
end;

procedure AbstractResponseType.SetHardExpirationWarning(Index: Integer; const Astring: string);
begin
  FHardExpirationWarning := Astring;
  FHardExpirationWarning_Specified := True;
end;

function AbstractResponseType.HardExpirationWarning_Specified(Index: Integer): boolean;
begin
  Result := FHardExpirationWarning_Specified;
end;

procedure AbstractResponseType.SetBotBlock(Index: Integer; const ABotBlockResponseType: BotBlockResponseType);
begin
  FBotBlock := ABotBlockResponseType;
  FBotBlock_Specified := True;
end;

function AbstractResponseType.BotBlock_Specified(Index: Integer): boolean;
begin
  Result := FBotBlock_Specified;
end;

procedure AbstractResponseType.SetExternalUserData(Index: Integer; const Astring: string);
begin
  FExternalUserData := Astring;
  FExternalUserData_Specified := True;
end;

function AbstractResponseType.ExternalUserData_Specified(Index: Integer): boolean;
begin
  Result := FExternalUserData_Specified;
end;

constructor SellerReverseDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SaveItemToSellingManagerTemplateResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SaveItemToSellingManagerTemplateResponseType.SetTemplateID(Index: Integer; const AInt64: Int64);
begin
  FTemplateID := AInt64;
  FTemplateID_Specified := True;
end;

function SaveItemToSellingManagerTemplateResponseType.TemplateID_Specified(Index: Integer): boolean;
begin
  Result := FTemplateID_Specified;
end;

constructor ReviseSellingManagerTemplateResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerTemplateResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  inherited Destroy;
end;

procedure ReviseSellingManagerTemplateResponseType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
begin
  FVerifyOnly := ABoolean;
  FVerifyOnly_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.VerifyOnly_Specified(Index: Integer): boolean;
begin
  Result := FVerifyOnly_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetSaleTemplateName(Index: Integer; const Astring: string);
begin
  FSaleTemplateName := Astring;
  FSaleTemplateName_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.SaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateName_Specified;
end;

procedure ReviseSellingManagerTemplateResponseType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function ReviseSellingManagerTemplateResponseType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

constructor ReviseSellingManagerSaleRecordResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RevokeTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ItemsCanceledEventType.SetCanceledItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FCanceledItemIDArray := AItemIDArrayType;
  FCanceledItemIDArray_Specified := True;
end;

function ItemsCanceledEventType.CanceledItemIDArray_Specified(Index: Integer): boolean;
begin
  Result := FCanceledItemIDArray_Specified;
end;

procedure ItemsCanceledEventType.SetEligibleForRelist(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleForRelist := ABoolean;
  FEligibleForRelist_Specified := True;
end;

function ItemsCanceledEventType.EligibleForRelist_Specified(Index: Integer): boolean;
begin
  Result := FEligibleForRelist_Specified;
end;

procedure ItemsCanceledEventType.SetSellerID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSellerID := AUserIDType;
  FSellerID_Specified := True;
end;

function ItemsCanceledEventType.SellerID_Specified(Index: Integer): boolean;
begin
  Result := FSellerID_Specified;
end;

constructor SetPromotionalSaleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SetPromotionalSaleResponseType.SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
begin
  FStatus := APromotionalSaleStatusCodeType;
  FStatus_Specified := True;
end;

function SetPromotionalSaleResponseType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure SetPromotionalSaleResponseType.SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
begin
  FPromotionalSaleID := AInt64;
  FPromotionalSaleID_Specified := True;
end;

function SetPromotionalSaleResponseType.PromotionalSaleID_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleID_Specified;
end;

constructor SetNotificationPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SendInvoiceResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetMessagePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseCheckoutStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseFixedPriceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseFixedPriceItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure ReviseFixedPriceItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ReviseFixedPriceItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function ReviseFixedPriceItemResponseType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function ReviseFixedPriceItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function ReviseFixedPriceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function ReviseFixedPriceItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function ReviseFixedPriceItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function ReviseFixedPriceItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function ReviseFixedPriceItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function ReviseFixedPriceItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure ReviseFixedPriceItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function ReviseFixedPriceItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor ReviseMyMessagesFoldersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseSellingManagerProductResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerProductResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  inherited Destroy;
end;

procedure ReviseSellingManagerProductResponseType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function ReviseSellingManagerProductResponseType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

constructor ReviseSellingManagerInventoryFolderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerInventoryFolderResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FFolder);
  inherited Destroy;
end;

procedure ReviseSellingManagerInventoryFolderResponseType.SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
begin
  FFolder := ASellingManagerFolderDetailsType;
  FFolder_Specified := True;
end;

function ReviseSellingManagerInventoryFolderResponseType.Folder_Specified(Index: Integer): boolean;
begin
  Result := FFolder_Specified;
end;

constructor ReviseInventoryStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseInventoryStatusResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FInventoryStatus)-1 do
    SysUtils.FreeAndNil(FInventoryStatus[I]);
  System.SetLength(FInventoryStatus, 0);
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  inherited Destroy;
end;

procedure ReviseInventoryStatusResponseType.SetInventoryStatus(Index: Integer; const AArray_Of_InventoryStatusType: Array_Of_InventoryStatusType);
begin
  FInventoryStatus := AArray_Of_InventoryStatusType;
  FInventoryStatus_Specified := True;
end;

function ReviseInventoryStatusResponseType.InventoryStatus_Specified(Index: Integer): boolean;
begin
  Result := FInventoryStatus_Specified;
end;

procedure ReviseInventoryStatusResponseType.SetFees(Index: Integer; const AArray_Of_InventoryFeesType: Array_Of_InventoryFeesType);
begin
  FFees := AArray_Of_InventoryFeesType;
  FFees_Specified := True;
end;

function ReviseInventoryStatusResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor ReviseMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure ReviseItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ReviseItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ReviseItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function ReviseItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure ReviseItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function ReviseItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure ReviseItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function ReviseItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure ReviseItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function ReviseItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure ReviseItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function ReviseItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure ReviseItemResponseType.SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
begin
  FVerifyOnly := ABoolean;
  FVerifyOnly_Specified := True;
end;

function ReviseItemResponseType.VerifyOnly_Specified(Index: Integer): boolean;
begin
  Result := FVerifyOnly_Specified;
end;

procedure ReviseItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function ReviseItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure ReviseItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function ReviseItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure ReviseItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function ReviseItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor UploadSiteHostedPicturesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor UploadSiteHostedPicturesResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSiteHostedPictureDetails);
  inherited Destroy;
end;

procedure UploadSiteHostedPicturesResponseType.SetPictureSystemVersion(Index: Integer; const AInteger: Integer);
begin
  FPictureSystemVersion := AInteger;
  FPictureSystemVersion_Specified := True;
end;

function UploadSiteHostedPicturesResponseType.PictureSystemVersion_Specified(Index: Integer): boolean;
begin
  Result := FPictureSystemVersion_Specified;
end;

procedure UploadSiteHostedPicturesResponseType.SetSiteHostedPictureDetails(Index: Integer; const ASiteHostedPictureDetailsType: SiteHostedPictureDetailsType);
begin
  FSiteHostedPictureDetails := ASiteHostedPictureDetailsType;
  FSiteHostedPictureDetails_Specified := True;
end;

function UploadSiteHostedPicturesResponseType.SiteHostedPictureDetails_Specified(Index: Integer): boolean;
begin
  Result := FSiteHostedPictureDetails_Specified;
end;

constructor ValidateTestUserRegistrationResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ValidateChallengeInputResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ValidateChallengeInputResponseType.SetValidToken(Index: Integer; const ABoolean: Boolean);
begin
  FValidToken := ABoolean;
  FValidToken_Specified := True;
end;

function ValidateChallengeInputResponseType.ValidToken_Specified(Index: Integer): boolean;
begin
  Result := FValidToken_Specified;
end;

constructor SetUserPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor VerifyAddSecondChanceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddSecondChanceItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure VerifyAddSecondChanceItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function VerifyAddSecondChanceItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure VerifyAddSecondChanceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function VerifyAddSecondChanceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

constructor VerifyAddItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FExpressItemRequirements);
  inherited Destroy;
end;

procedure VerifyAddItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VerifyAddItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VerifyAddItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function VerifyAddItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure VerifyAddItemResponseType.SetExpressListing(Index: Integer; const ABoolean: Boolean);
begin
  FExpressListing := ABoolean;
  FExpressListing_Specified := True;
end;

function VerifyAddItemResponseType.ExpressListing_Specified(Index: Integer): boolean;
begin
  Result := FExpressListing_Specified;
end;

procedure VerifyAddItemResponseType.SetExpressItemRequirements(Index: Integer; const AExpressItemRequirementsType: ExpressItemRequirementsType);
begin
  FExpressItemRequirements := AExpressItemRequirementsType;
  FExpressItemRequirements_Specified := True;
end;

function VerifyAddItemResponseType.ExpressItemRequirements_Specified(Index: Integer): boolean;
begin
  Result := FExpressItemRequirements_Specified;
end;

procedure VerifyAddItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function VerifyAddItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure VerifyAddItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function VerifyAddItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure VerifyAddItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function VerifyAddItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure VerifyAddItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function VerifyAddItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure VerifyAddItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function VerifyAddItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor VerifyRelistItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyRelistItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure VerifyRelistItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VerifyRelistItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VerifyRelistItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function VerifyRelistItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure VerifyRelistItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function VerifyRelistItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure VerifyRelistItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function VerifyRelistItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure VerifyRelistItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function VerifyRelistItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure VerifyRelistItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function VerifyRelistItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure VerifyRelistItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function VerifyRelistItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor VeROReportItemsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure VeROReportItemsResponseType.SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
begin
  FVeROReportPacketID := AInt64;
  FVeROReportPacketID_Specified := True;
end;

function VeROReportItemsResponseType.VeROReportPacketID_Specified(Index: Integer): boolean;
begin
  Result := FVeROReportPacketID_Specified;
end;

procedure VeROReportItemsResponseType.SetVeROReportPacketStatus(Index: Integer; const AVeROReportPacketStatusCodeType: VeROReportPacketStatusCodeType);
begin
  FVeROReportPacketStatus := AVeROReportPacketStatusCodeType;
  FVeROReportPacketStatus_Specified := True;
end;

function VeROReportItemsResponseType.VeROReportPacketStatus_Specified(Index: Integer): boolean;
begin
  Result := FVeROReportPacketStatus_Specified;
end;

constructor VerifyAddFixedPriceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddFixedPriceItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FExpressItemRequirements);
  inherited Destroy;
end;

procedure VerifyAddFixedPriceItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetExpressListing(Index: Integer; const ABoolean: Boolean);
begin
  FExpressListing := ABoolean;
  FExpressListing_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.ExpressListing_Specified(Index: Integer): boolean;
begin
  Result := FExpressListing_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetExpressItemRequirements(Index: Integer; const AExpressItemRequirementsType: ExpressItemRequirementsType);
begin
  FExpressItemRequirements := AExpressItemRequirementsType;
  FExpressItemRequirements_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.ExpressItemRequirements_Specified(Index: Integer): boolean;
begin
  Result := FExpressItemRequirements_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure VerifyAddFixedPriceItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function VerifyAddFixedPriceItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor SetUserNotesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetSellingManagerTemplateAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetSellingManagerTemplateAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure SetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor SetStoreResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetShippingDiscountProfilesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetSellingManagerItemAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetSellingManagerItemAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure SetSellingManagerItemAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function SetSellingManagerItemAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure SetSellingManagerItemAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function SetSellingManagerItemAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure SetSellingManagerItemAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function SetSellingManagerItemAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure SetSellingManagerItemAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function SetSellingManagerItemAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor SetPromotionalSaleListingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SetPromotionalSaleListingsResponseType.SetStatus(Index: Integer; const APromotionalSaleStatusCodeType: PromotionalSaleStatusCodeType);
begin
  FStatus := APromotionalSaleStatusCodeType;
  FStatus_Specified := True;
end;

function SetPromotionalSaleListingsResponseType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

constructor SetSellingManagerFeedbackOptionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetStorePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetTaxTableResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetStoreCustomPageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCustomPageResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FCustomPage);
  inherited Destroy;
end;

procedure SetStoreCustomPageResponseType.SetCustomPage(Index: Integer; const AStoreCustomPageType: StoreCustomPageType);
begin
  FCustomPage := AStoreCustomPageType;
  FCustomPage_Specified := True;
end;

function SetStoreCustomPageResponseType.CustomPage_Specified(Index: Integer): boolean;
begin
  Result := FCustomPage_Specified;
end;

constructor SetStoreCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCategoriesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCustomCategory)-1 do
    SysUtils.FreeAndNil(FCustomCategory[I]);
  System.SetLength(FCustomCategory, 0);
  inherited Destroy;
end;

procedure SetStoreCategoriesResponseType.SetTaskID(Index: Integer; const AInt64: Int64);
begin
  FTaskID := AInt64;
  FTaskID_Specified := True;
end;

function SetStoreCategoriesResponseType.TaskID_Specified(Index: Integer): boolean;
begin
  Result := FTaskID_Specified;
end;

procedure SetStoreCategoriesResponseType.SetStatus(Index: Integer; const ATaskStatusCodeType: TaskStatusCodeType);
begin
  FStatus := ATaskStatusCodeType;
  FStatus_Specified := True;
end;

function SetStoreCategoriesResponseType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure SetStoreCategoriesResponseType.SetCustomCategory(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
begin
  FCustomCategory := AStoreCustomCategoryArrayType;
  FCustomCategory_Specified := True;
end;

function SetStoreCategoriesResponseType.CustomCategory_Specified(Index: Integer): boolean;
begin
  Result := FCustomCategory_Specified;
end;

constructor GetCategoryFeaturesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryFeaturesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCategory)-1 do
    SysUtils.FreeAndNil(FCategory[I]);
  System.SetLength(FCategory, 0);
  SysUtils.FreeAndNil(FUpdateTime);
  SysUtils.FreeAndNil(FSiteDefaults);
  SysUtils.FreeAndNil(FFeatureDefinitions);
  inherited Destroy;
end;

procedure GetCategoryFeaturesResponseType.SetCategoryVersion(Index: Integer; const Astring: string);
begin
  FCategoryVersion := Astring;
  FCategoryVersion_Specified := True;
end;

function GetCategoryFeaturesResponseType.CategoryVersion_Specified(Index: Integer): boolean;
begin
  Result := FCategoryVersion_Specified;
end;

procedure GetCategoryFeaturesResponseType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function GetCategoryFeaturesResponseType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure GetCategoryFeaturesResponseType.SetCategory(Index: Integer; const AArray_Of_CategoryFeatureType: Array_Of_CategoryFeatureType);
begin
  FCategory := AArray_Of_CategoryFeatureType;
  FCategory_Specified := True;
end;

function GetCategoryFeaturesResponseType.Category_Specified(Index: Integer): boolean;
begin
  Result := FCategory_Specified;
end;

procedure GetCategoryFeaturesResponseType.SetSiteDefaults(Index: Integer; const ASiteDefaultsType: SiteDefaultsType);
begin
  FSiteDefaults := ASiteDefaultsType;
  FSiteDefaults_Specified := True;
end;

function GetCategoryFeaturesResponseType.SiteDefaults_Specified(Index: Integer): boolean;
begin
  Result := FSiteDefaults_Specified;
end;

procedure GetCategoryFeaturesResponseType.SetFeatureDefinitions(Index: Integer; const AFeatureDefinitionsType: FeatureDefinitionsType);
begin
  FFeatureDefinitions := AFeatureDefinitionsType;
  FFeatureDefinitions_Specified := True;
end;

function GetCategoryFeaturesResponseType.FeatureDefinitions_Specified(Index: Integer): boolean;
begin
  Result := FFeatureDefinitions_Specified;
end;

constructor GetBidderListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBidderListResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBidItemArray)-1 do
    SysUtils.FreeAndNil(FBidItemArray[I]);
  System.SetLength(FBidItemArray, 0);
  SysUtils.FreeAndNil(FBidder);
  inherited Destroy;
end;

procedure GetBidderListResponseType.SetBidder(Index: Integer; const AUserType: UserType);
begin
  FBidder := AUserType;
  FBidder_Specified := True;
end;

function GetBidderListResponseType.Bidder_Specified(Index: Integer): boolean;
begin
  Result := FBidder_Specified;
end;

procedure GetBidderListResponseType.SetBidItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FBidItemArray := AItemArrayType;
  FBidItemArray_Specified := True;
end;

function GetBidderListResponseType.BidItemArray_Specified(Index: Integer): boolean;
begin
  Result := FBidItemArray_Specified;
end;

constructor GetCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoriesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCategoryArray)-1 do
    SysUtils.FreeAndNil(FCategoryArray[I]);
  System.SetLength(FCategoryArray, 0);
  SysUtils.FreeAndNil(FUpdateTime);
  inherited Destroy;
end;

procedure GetCategoriesResponseType.SetCategoryArray(Index: Integer; const ACategoryArrayType: CategoryArrayType);
begin
  FCategoryArray := ACategoryArrayType;
  FCategoryArray_Specified := True;
end;

function GetCategoriesResponseType.CategoryArray_Specified(Index: Integer): boolean;
begin
  Result := FCategoryArray_Specified;
end;

procedure GetCategoriesResponseType.SetCategoryCount(Index: Integer; const AInteger: Integer);
begin
  FCategoryCount := AInteger;
  FCategoryCount_Specified := True;
end;

function GetCategoriesResponseType.CategoryCount_Specified(Index: Integer): boolean;
begin
  Result := FCategoryCount_Specified;
end;

procedure GetCategoriesResponseType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function GetCategoriesResponseType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure GetCategoriesResponseType.SetCategoryVersion(Index: Integer; const Astring: string);
begin
  FCategoryVersion := Astring;
  FCategoryVersion_Specified := True;
end;

function GetCategoriesResponseType.CategoryVersion_Specified(Index: Integer): boolean;
begin
  Result := FCategoryVersion_Specified;
end;

procedure GetCategoriesResponseType.SetReservePriceAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FReservePriceAllowed := ABoolean;
  FReservePriceAllowed_Specified := True;
end;

function GetCategoriesResponseType.ReservePriceAllowed_Specified(Index: Integer): boolean;
begin
  Result := FReservePriceAllowed_Specified;
end;

procedure GetCategoriesResponseType.SetMinimumReservePrice(Index: Integer; const ADouble: Double);
begin
  FMinimumReservePrice := ADouble;
  FMinimumReservePrice_Specified := True;
end;

function GetCategoriesResponseType.MinimumReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FMinimumReservePrice_Specified;
end;

procedure GetCategoriesResponseType.SetReduceReserveAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FReduceReserveAllowed := ABoolean;
  FReduceReserveAllowed_Specified := True;
end;

function GetCategoriesResponseType.ReduceReserveAllowed_Specified(Index: Integer): boolean;
begin
  Result := FReduceReserveAllowed_Specified;
end;

constructor GetSellerListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerListResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemArray)-1 do
    SysUtils.FreeAndNil(FItemArray[I]);
  System.SetLength(FItemArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  SysUtils.FreeAndNil(FSeller);
  inherited Destroy;
end;

procedure GetSellerListResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetSellerListResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetSellerListResponseType.SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreItems := ABoolean;
  FHasMoreItems_Specified := True;
end;

function GetSellerListResponseType.HasMoreItems_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreItems_Specified;
end;

procedure GetSellerListResponseType.SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FItemArray := AItemArrayType;
  FItemArray_Specified := True;
end;

function GetSellerListResponseType.ItemArray_Specified(Index: Integer): boolean;
begin
  Result := FItemArray_Specified;
end;

procedure GetSellerListResponseType.SetItemsPerPage(Index: Integer; const AInteger: Integer);
begin
  FItemsPerPage := AInteger;
  FItemsPerPage_Specified := True;
end;

function GetSellerListResponseType.ItemsPerPage_Specified(Index: Integer): boolean;
begin
  Result := FItemsPerPage_Specified;
end;

procedure GetSellerListResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetSellerListResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetSellerListResponseType.SetReturnedItemCountActual(Index: Integer; const AInteger: Integer);
begin
  FReturnedItemCountActual := AInteger;
  FReturnedItemCountActual_Specified := True;
end;

function GetSellerListResponseType.ReturnedItemCountActual_Specified(Index: Integer): boolean;
begin
  Result := FReturnedItemCountActual_Specified;
end;

procedure GetSellerListResponseType.SetSeller(Index: Integer; const AUserType: UserType);
begin
  FSeller := AUserType;
  FSeller_Specified := True;
end;

function GetSellerListResponseType.Seller_Specified(Index: Integer): boolean;
begin
  Result := FSeller_Specified;
end;

constructor GetSellerEventsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerEventsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemArray)-1 do
    SysUtils.FreeAndNil(FItemArray[I]);
  System.SetLength(FItemArray, 0);
  SysUtils.FreeAndNil(FTimeTo);
  inherited Destroy;
end;

procedure GetSellerEventsResponseType.SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeTo := ATXSDateTime;
  FTimeTo_Specified := True;
end;

function GetSellerEventsResponseType.TimeTo_Specified(Index: Integer): boolean;
begin
  Result := FTimeTo_Specified;
end;

procedure GetSellerEventsResponseType.SetItemArray(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FItemArray := AItemArrayType;
  FItemArray_Specified := True;
end;

function GetSellerEventsResponseType.ItemArray_Specified(Index: Integer): boolean;
begin
  Result := FItemArray_Specified;
end;

constructor GetChallengeTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetChallengeTokenResponseType.SetChallengeToken(Index: Integer; const Astring: string);
begin
  FChallengeToken := Astring;
  FChallengeToken_Specified := True;
end;

function GetChallengeTokenResponseType.ChallengeToken_Specified(Index: Integer): boolean;
begin
  Result := FChallengeToken_Specified;
end;

procedure GetChallengeTokenResponseType.SetImageChallengeURL(Index: Integer; const Astring: string);
begin
  FImageChallengeURL := Astring;
  FImageChallengeURL_Specified := True;
end;

function GetChallengeTokenResponseType.ImageChallengeURL_Specified(Index: Integer): boolean;
begin
  Result := FImageChallengeURL_Specified;
end;

procedure GetChallengeTokenResponseType.SetAudioChallengeURL(Index: Integer; const Astring: string);
begin
  FAudioChallengeURL := Astring;
  FAudioChallengeURL_Specified := True;
end;

function GetChallengeTokenResponseType.AudioChallengeURL_Specified(Index: Integer): boolean;
begin
  Result := FAudioChallengeURL_Specified;
end;

constructor GetCharitiesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCharitiesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCharity)-1 do
    SysUtils.FreeAndNil(FCharity[I]);
  System.SetLength(FCharity, 0);
  inherited Destroy;
end;

procedure GetCharitiesResponseType.SetCharity(Index: Integer; const AArray_Of_CharityInfoType: Array_Of_CharityInfoType);
begin
  FCharity := AArray_Of_CharityInfoType;
  FCharity_Specified := True;
end;

function GetCharitiesResponseType.Charity_Specified(Index: Integer): boolean;
begin
  Result := FCharity_Specified;
end;

constructor GetCategorySpecificsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategorySpecificsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRecommendations)-1 do
    SysUtils.FreeAndNil(FRecommendations[I]);
  System.SetLength(FRecommendations, 0);
  inherited Destroy;
end;

procedure GetCategorySpecificsResponseType.SetRecommendations(Index: Integer; const AArray_Of_RecommendationsType: Array_Of_RecommendationsType);
begin
  FRecommendations := AArray_Of_RecommendationsType;
  FRecommendations_Specified := True;
end;

function GetCategorySpecificsResponseType.Recommendations_Specified(Index: Integer): boolean;
begin
  Result := FRecommendations_Specified;
end;

procedure GetCategorySpecificsResponseType.SetTaskReferenceID(Index: Integer; const Astring: string);
begin
  FTaskReferenceID := Astring;
  FTaskReferenceID_Specified := True;
end;

function GetCategorySpecificsResponseType.TaskReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FTaskReferenceID_Specified;
end;

procedure GetCategorySpecificsResponseType.SetFileReferenceID(Index: Integer; const Astring: string);
begin
  FFileReferenceID := Astring;
  FFileReferenceID_Specified := True;
end;

function GetCategorySpecificsResponseType.FileReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FFileReferenceID_Specified;
end;

constructor GetCategoryMappingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryMappingsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCategoryMapping)-1 do
    SysUtils.FreeAndNil(FCategoryMapping[I]);
  System.SetLength(FCategoryMapping, 0);
  inherited Destroy;
end;

procedure GetCategoryMappingsResponseType.SetCategoryMapping(Index: Integer; const AArray_Of_CategoryMappingType: Array_Of_CategoryMappingType);
begin
  FCategoryMapping := AArray_Of_CategoryMappingType;
  FCategoryMapping_Specified := True;
end;

function GetCategoryMappingsResponseType.CategoryMapping_Specified(Index: Integer): boolean;
begin
  Result := FCategoryMapping_Specified;
end;

procedure GetCategoryMappingsResponseType.SetCategoryVersion(Index: Integer; const Astring: string);
begin
  FCategoryVersion := Astring;
  FCategoryVersion_Specified := True;
end;

function GetCategoryMappingsResponseType.CategoryVersion_Specified(Index: Integer): boolean;
begin
  Result := FCategoryVersion_Specified;
end;

constructor GetAdFormatLeadsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAdFormatLeadsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAdFormatLead)-1 do
    SysUtils.FreeAndNil(FAdFormatLead[I]);
  System.SetLength(FAdFormatLead, 0);
  inherited Destroy;
end;

procedure GetAdFormatLeadsResponseType.SetAdFormatLead(Index: Integer; const AArray_Of_AdFormatLeadType: Array_Of_AdFormatLeadType);
begin
  FAdFormatLead := AArray_Of_AdFormatLeadType;
  FAdFormatLead_Specified := True;
end;

function GetAdFormatLeadsResponseType.AdFormatLead_Specified(Index: Integer): boolean;
begin
  Result := FAdFormatLead_Specified;
end;

procedure GetAdFormatLeadsResponseType.SetAdFormatLeadCount(Index: Integer; const AInteger: Integer);
begin
  FAdFormatLeadCount := AInteger;
  FAdFormatLeadCount_Specified := True;
end;

function GetAdFormatLeadsResponseType.AdFormatLeadCount_Specified(Index: Integer): boolean;
begin
  Result := FAdFormatLeadCount_Specified;
end;

constructor GetAccountResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAccountResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAccountEntries)-1 do
    SysUtils.FreeAndNil(FAccountEntries[I]);
  System.SetLength(FAccountEntries, 0);
  SysUtils.FreeAndNil(FAccountSummary);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetAccountResponseType.SetAccountID(Index: Integer; const Astring: string);
begin
  FAccountID := Astring;
  FAccountID_Specified := True;
end;

function GetAccountResponseType.AccountID_Specified(Index: Integer): boolean;
begin
  Result := FAccountID_Specified;
end;

procedure GetAccountResponseType.SetAccountSummary(Index: Integer; const AAccountSummaryType: AccountSummaryType);
begin
  FAccountSummary := AAccountSummaryType;
  FAccountSummary_Specified := True;
end;

function GetAccountResponseType.AccountSummary_Specified(Index: Integer): boolean;
begin
  Result := FAccountSummary_Specified;
end;

procedure GetAccountResponseType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function GetAccountResponseType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure GetAccountResponseType.SetAccountEntries(Index: Integer; const AAccountEntriesType: AccountEntriesType);
begin
  FAccountEntries := AAccountEntriesType;
  FAccountEntries_Specified := True;
end;

function GetAccountResponseType.AccountEntries_Specified(Index: Integer): boolean;
begin
  Result := FAccountEntries_Specified;
end;

procedure GetAccountResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetAccountResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetAccountResponseType.SetHasMoreEntries(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreEntries := ABoolean;
  FHasMoreEntries_Specified := True;
end;

function GetAccountResponseType.HasMoreEntries_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreEntries_Specified;
end;

procedure GetAccountResponseType.SetEntriesPerPage(Index: Integer; const AInteger: Integer);
begin
  FEntriesPerPage := AInteger;
  FEntriesPerPage_Specified := True;
end;

function GetAccountResponseType.EntriesPerPage_Specified(Index: Integer): boolean;
begin
  Result := FEntriesPerPage_Specified;
end;

procedure GetAccountResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetAccountResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

constructor GetShippingDiscountProfilesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetShippingDiscountProfilesResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FFlatShippingDiscount);
  SysUtils.FreeAndNil(FCalculatedShippingDiscount);
  SysUtils.FreeAndNil(FCalculatedHandlingDiscount);
  SysUtils.FreeAndNil(FPromotionalShippingDiscountDetails);
  SysUtils.FreeAndNil(FShippingInsurance);
  SysUtils.FreeAndNil(FInternationalShippingInsurance);
  inherited Destroy;
end;

procedure GetShippingDiscountProfilesResponseType.SetCurrencyID(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrencyID := ACurrencyCodeType;
  FCurrencyID_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.CurrencyID_Specified(Index: Integer): boolean;
begin
  Result := FCurrencyID_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
begin
  FFlatShippingDiscount := AFlatShippingDiscountType;
  FFlatShippingDiscount_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.FlatShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FFlatShippingDiscount_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
begin
  FCalculatedShippingDiscount := ACalculatedShippingDiscountType;
  FCalculatedShippingDiscount_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.CalculatedShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingDiscount_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetPromotionalShippingDiscount(Index: Integer; const ABoolean: Boolean);
begin
  FPromotionalShippingDiscount := ABoolean;
  FPromotionalShippingDiscount_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.PromotionalShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalShippingDiscount_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetCalculatedHandlingDiscount(Index: Integer; const ACalculatedHandlingDiscountType: CalculatedHandlingDiscountType);
begin
  FCalculatedHandlingDiscount := ACalculatedHandlingDiscountType;
  FCalculatedHandlingDiscount_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.CalculatedHandlingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedHandlingDiscount_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
begin
  FPromotionalShippingDiscountDetails := APromotionalShippingDiscountDetailsType;
  FPromotionalShippingDiscountDetails_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalShippingDiscountDetails_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
begin
  FShippingInsurance := AShippingInsuranceType;
  FShippingInsurance_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.ShippingInsurance_Specified(Index: Integer): boolean;
begin
  Result := FShippingInsurance_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetInternationalShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
begin
  FInternationalShippingInsurance := AShippingInsuranceType;
  FInternationalShippingInsurance_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.InternationalShippingInsurance_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingInsurance_Specified;
end;

procedure GetShippingDiscountProfilesResponseType.SetCombinedDuration(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
begin
  FCombinedDuration := ACombinedPaymentPeriodCodeType;
  FCombinedDuration_Specified := True;
end;

function GetShippingDiscountProfilesResponseType.CombinedDuration_Specified(Index: Integer): boolean;
begin
  Result := FCombinedDuration_Specified;
end;

constructor RespondToBestOfferResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RespondToBestOfferResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FRespondToBestOffer)-1 do
    SysUtils.FreeAndNil(FRespondToBestOffer[I]);
  System.SetLength(FRespondToBestOffer, 0);
  inherited Destroy;
end;

procedure RespondToBestOfferResponseType.SetRespondToBestOffer(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
begin
  FRespondToBestOffer := ABestOfferArrayType;
  FRespondToBestOffer_Specified := True;
end;

function RespondToBestOfferResponseType.RespondToBestOffer_Specified(Index: Integer): boolean;
begin
  Result := FRespondToBestOffer_Specified;
end;

constructor GetBestOffersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBestOffersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBestOfferArray)-1 do
    SysUtils.FreeAndNil(FBestOfferArray[I]);
  System.SetLength(FBestOfferArray, 0);
  for I := 0 to System.Length(FItemBestOffersArray)-1 do
    SysUtils.FreeAndNil(FItemBestOffersArray[I]);
  System.SetLength(FItemBestOffersArray, 0);
  SysUtils.FreeAndNil(FItem);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetBestOffersResponseType.SetBestOfferArray(Index: Integer; const ABestOfferArrayType: BestOfferArrayType);
begin
  FBestOfferArray := ABestOfferArrayType;
  FBestOfferArray_Specified := True;
end;

function GetBestOffersResponseType.BestOfferArray_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferArray_Specified;
end;

procedure GetBestOffersResponseType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function GetBestOffersResponseType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure GetBestOffersResponseType.SetItemBestOffersArray(Index: Integer; const AItemBestOffersArrayType: ItemBestOffersArrayType);
begin
  FItemBestOffersArray := AItemBestOffersArrayType;
  FItemBestOffersArray_Specified := True;
end;

function GetBestOffersResponseType.ItemBestOffersArray_Specified(Index: Integer): boolean;
begin
  Result := FItemBestOffersArray_Specified;
end;

procedure GetBestOffersResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetBestOffersResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetBestOffersResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetBestOffersResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

constructor GetAllBiddersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAllBiddersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FBidArray)-1 do
    SysUtils.FreeAndNil(FBidArray[I]);
  System.SetLength(FBidArray, 0);
  SysUtils.FreeAndNil(FHighestBid);
  inherited Destroy;
end;

procedure GetAllBiddersResponseType.SetBidArray(Index: Integer; const AOfferArrayType: OfferArrayType);
begin
  FBidArray := AOfferArrayType;
  FBidArray_Specified := True;
end;

function GetAllBiddersResponseType.BidArray_Specified(Index: Integer): boolean;
begin
  Result := FBidArray_Specified;
end;

procedure GetAllBiddersResponseType.SetHighBidder(Index: Integer; const AUserIDType: UserIDType);
begin
  FHighBidder := AUserIDType;
  FHighBidder_Specified := True;
end;

function GetAllBiddersResponseType.HighBidder_Specified(Index: Integer): boolean;
begin
  Result := FHighBidder_Specified;
end;

procedure GetAllBiddersResponseType.SetHighestBid(Index: Integer; const AAmountType: AmountType);
begin
  FHighestBid := AAmountType;
  FHighestBid_Specified := True;
end;

function GetAllBiddersResponseType.HighestBid_Specified(Index: Integer): boolean;
begin
  Result := FHighestBid_Specified;
end;

procedure GetAllBiddersResponseType.SetListingStatus(Index: Integer; const AListingStatusCodeType: ListingStatusCodeType);
begin
  FListingStatus := AListingStatusCodeType;
  FListingStatus_Specified := True;
end;

function GetAllBiddersResponseType.ListingStatus_Specified(Index: Integer): boolean;
begin
  Result := FListingStatus_Specified;
end;

constructor GetApiAccessRulesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetApiAccessRulesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FApiAccessRule)-1 do
    SysUtils.FreeAndNil(FApiAccessRule[I]);
  System.SetLength(FApiAccessRule, 0);
  inherited Destroy;
end;

procedure GetApiAccessRulesResponseType.SetApiAccessRule(Index: Integer; const AArray_Of_ApiAccessRuleType: Array_Of_ApiAccessRuleType);
begin
  FApiAccessRule := AArray_Of_ApiAccessRuleType;
  FApiAccessRule_Specified := True;
end;

function GetApiAccessRulesResponseType.ApiAccessRule_Specified(Index: Integer): boolean;
begin
  Result := FApiAccessRule_Specified;
end;

constructor GetMemberMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMemberMessagesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMemberMessage)-1 do
    SysUtils.FreeAndNil(FMemberMessage[I]);
  System.SetLength(FMemberMessage, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetMemberMessagesResponseType.SetMemberMessage(Index: Integer; const AMemberMessageExchangeArrayType: MemberMessageExchangeArrayType);
begin
  FMemberMessage := AMemberMessageExchangeArrayType;
  FMemberMessage_Specified := True;
end;

function GetMemberMessagesResponseType.MemberMessage_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessage_Specified;
end;

procedure GetMemberMessagesResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetMemberMessagesResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetMemberMessagesResponseType.SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreItems := ABoolean;
  FHasMoreItems_Specified := True;
end;

function GetMemberMessagesResponseType.HasMoreItems_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreItems_Specified;
end;

constructor GetItemsAwaitingFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemsAwaitingFeedbackResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FItemsAwaitingFeedback);
  inherited Destroy;
end;

procedure GetItemsAwaitingFeedbackResponseType.SetItemsAwaitingFeedback(Index: Integer; const APaginatedTransactionArrayType: PaginatedTransactionArrayType);
begin
  FItemsAwaitingFeedback := APaginatedTransactionArrayType;
  FItemsAwaitingFeedback_Specified := True;
end;

function GetItemsAwaitingFeedbackResponseType.ItemsAwaitingFeedback_Specified(Index: Integer): boolean;
begin
  Result := FItemsAwaitingFeedback_Specified;
end;

constructor GetItemTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTransactionArray)-1 do
    SysUtils.FreeAndNil(FTransactionArray[I]);
  System.SetLength(FTransactionArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure GetItemTransactionsResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetItemTransactionsResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetItemTransactionsResponseType.SetHasMoreTransactions(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreTransactions := ABoolean;
  FHasMoreTransactions_Specified := True;
end;

function GetItemTransactionsResponseType.HasMoreTransactions_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreTransactions_Specified;
end;

procedure GetItemTransactionsResponseType.SetTransactionsPerPage(Index: Integer; const AInteger: Integer);
begin
  FTransactionsPerPage := AInteger;
  FTransactionsPerPage_Specified := True;
end;

function GetItemTransactionsResponseType.TransactionsPerPage_Specified(Index: Integer): boolean;
begin
  Result := FTransactionsPerPage_Specified;
end;

procedure GetItemTransactionsResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetItemTransactionsResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetItemTransactionsResponseType.SetReturnedTransactionCountActual(Index: Integer; const AInteger: Integer);
begin
  FReturnedTransactionCountActual := AInteger;
  FReturnedTransactionCountActual_Specified := True;
end;

function GetItemTransactionsResponseType.ReturnedTransactionCountActual_Specified(Index: Integer): boolean;
begin
  Result := FReturnedTransactionCountActual_Specified;
end;

procedure GetItemTransactionsResponseType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function GetItemTransactionsResponseType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure GetItemTransactionsResponseType.SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
begin
  FTransactionArray := ATransactionArrayType;
  FTransactionArray_Specified := True;
end;

function GetItemTransactionsResponseType.TransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FTransactionArray_Specified;
end;

procedure GetItemTransactionsResponseType.SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalPreferred := ABoolean;
  FPayPalPreferred_Specified := True;
end;

function GetItemTransactionsResponseType.PayPalPreferred_Specified(Index: Integer): boolean;
begin
  Result := FPayPalPreferred_Specified;
end;

constructor GetSellerTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTransactionArray)-1 do
    SysUtils.FreeAndNil(FTransactionArray[I]);
  System.SetLength(FTransactionArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  SysUtils.FreeAndNil(FSeller);
  inherited Destroy;
end;

procedure GetSellerTransactionsResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetSellerTransactionsResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetSellerTransactionsResponseType.SetHasMoreTransactions(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreTransactions := ABoolean;
  FHasMoreTransactions_Specified := True;
end;

function GetSellerTransactionsResponseType.HasMoreTransactions_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreTransactions_Specified;
end;

procedure GetSellerTransactionsResponseType.SetTransactionsPerPage(Index: Integer; const AInteger: Integer);
begin
  FTransactionsPerPage := AInteger;
  FTransactionsPerPage_Specified := True;
end;

function GetSellerTransactionsResponseType.TransactionsPerPage_Specified(Index: Integer): boolean;
begin
  Result := FTransactionsPerPage_Specified;
end;

procedure GetSellerTransactionsResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetSellerTransactionsResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetSellerTransactionsResponseType.SetReturnedTransactionCountActual(Index: Integer; const AInteger: Integer);
begin
  FReturnedTransactionCountActual := AInteger;
  FReturnedTransactionCountActual_Specified := True;
end;

function GetSellerTransactionsResponseType.ReturnedTransactionCountActual_Specified(Index: Integer): boolean;
begin
  Result := FReturnedTransactionCountActual_Specified;
end;

procedure GetSellerTransactionsResponseType.SetSeller(Index: Integer; const AUserType: UserType);
begin
  FSeller := AUserType;
  FSeller_Specified := True;
end;

function GetSellerTransactionsResponseType.Seller_Specified(Index: Integer): boolean;
begin
  Result := FSeller_Specified;
end;

procedure GetSellerTransactionsResponseType.SetTransactionArray(Index: Integer; const ATransactionArrayType: TransactionArrayType);
begin
  FTransactionArray := ATransactionArrayType;
  FTransactionArray_Specified := True;
end;

function GetSellerTransactionsResponseType.TransactionArray_Specified(Index: Integer): boolean;
begin
  Result := FTransactionArray_Specified;
end;

procedure GetSellerTransactionsResponseType.SetPayPalPreferred(Index: Integer; const ABoolean: Boolean);
begin
  FPayPalPreferred := ABoolean;
  FPayPalPreferred_Specified := True;
end;

function GetSellerTransactionsResponseType.PayPalPreferred_Specified(Index: Integer): boolean;
begin
  Result := FPayPalPreferred_Specified;
end;

constructor GetMyeBayBuyingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayBuyingResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSecondChanceOffer)-1 do
    SysUtils.FreeAndNil(FSecondChanceOffer[I]);
  System.SetLength(FSecondChanceOffer, 0);
  for I := 0 to System.Length(FBidAssistantList)-1 do
    SysUtils.FreeAndNil(FBidAssistantList[I]);
  System.SetLength(FBidAssistantList, 0);
  for I := 0 to System.Length(FUserDefinedList)-1 do
    SysUtils.FreeAndNil(FUserDefinedList[I]);
  System.SetLength(FUserDefinedList, 0);
  SysUtils.FreeAndNil(FBuyingSummary);
  SysUtils.FreeAndNil(FWatchList);
  SysUtils.FreeAndNil(FBidList);
  SysUtils.FreeAndNil(FBestOfferList);
  SysUtils.FreeAndNil(FWonList);
  SysUtils.FreeAndNil(FLostList);
  SysUtils.FreeAndNil(FFavoriteSearches);
  SysUtils.FreeAndNil(FFavoriteSellers);
  SysUtils.FreeAndNil(FDeletedFromWonList);
  SysUtils.FreeAndNil(FDeletedFromLostList);
  inherited Destroy;
end;

procedure GetMyeBayBuyingResponseType.SetBuyingSummary(Index: Integer; const ABuyingSummaryType: BuyingSummaryType);
begin
  FBuyingSummary := ABuyingSummaryType;
  FBuyingSummary_Specified := True;
end;

function GetMyeBayBuyingResponseType.BuyingSummary_Specified(Index: Integer): boolean;
begin
  Result := FBuyingSummary_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetWatchList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FWatchList := APaginatedItemArrayType;
  FWatchList_Specified := True;
end;

function GetMyeBayBuyingResponseType.WatchList_Specified(Index: Integer): boolean;
begin
  Result := FWatchList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetBidList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FBidList := APaginatedItemArrayType;
  FBidList_Specified := True;
end;

function GetMyeBayBuyingResponseType.BidList_Specified(Index: Integer): boolean;
begin
  Result := FBidList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetBestOfferList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FBestOfferList := APaginatedItemArrayType;
  FBestOfferList_Specified := True;
end;

function GetMyeBayBuyingResponseType.BestOfferList_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetWonList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
begin
  FWonList := APaginatedOrderTransactionArrayType;
  FWonList_Specified := True;
end;

function GetMyeBayBuyingResponseType.WonList_Specified(Index: Integer): boolean;
begin
  Result := FWonList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetLostList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FLostList := APaginatedItemArrayType;
  FLostList_Specified := True;
end;

function GetMyeBayBuyingResponseType.LostList_Specified(Index: Integer): boolean;
begin
  Result := FLostList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetFavoriteSearches(Index: Integer; const AMyeBayFavoriteSearchListType: MyeBayFavoriteSearchListType);
begin
  FFavoriteSearches := AMyeBayFavoriteSearchListType;
  FFavoriteSearches_Specified := True;
end;

function GetMyeBayBuyingResponseType.FavoriteSearches_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSearches_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetFavoriteSellers(Index: Integer; const AMyeBayFavoriteSellerListType: MyeBayFavoriteSellerListType);
begin
  FFavoriteSellers := AMyeBayFavoriteSellerListType;
  FFavoriteSellers_Specified := True;
end;

function GetMyeBayBuyingResponseType.FavoriteSellers_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSellers_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetSecondChanceOffer(Index: Integer; const AItemArrayType: ItemArrayType);
begin
  FSecondChanceOffer := AItemArrayType;
  FSecondChanceOffer_Specified := True;
end;

function GetMyeBayBuyingResponseType.SecondChanceOffer_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOffer_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetBidAssistantList(Index: Integer; const ABidGroupArrayType: BidGroupArrayType);
begin
  FBidAssistantList := ABidGroupArrayType;
  FBidAssistantList_Specified := True;
end;

function GetMyeBayBuyingResponseType.BidAssistantList_Specified(Index: Integer): boolean;
begin
  Result := FBidAssistantList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetDeletedFromWonList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
begin
  FDeletedFromWonList := APaginatedOrderTransactionArrayType;
  FDeletedFromWonList_Specified := True;
end;

function GetMyeBayBuyingResponseType.DeletedFromWonList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromWonList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetDeletedFromLostList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FDeletedFromLostList := APaginatedItemArrayType;
  FDeletedFromLostList_Specified := True;
end;

function GetMyeBayBuyingResponseType.DeletedFromLostList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromLostList_Specified;
end;

procedure GetMyeBayBuyingResponseType.SetUserDefinedList(Index: Integer; const AArray_Of_UserDefinedListType: Array_Of_UserDefinedListType);
begin
  FUserDefinedList := AArray_Of_UserDefinedListType;
  FUserDefinedList_Specified := True;
end;

function GetMyeBayBuyingResponseType.UserDefinedList_Specified(Index: Integer): boolean;
begin
  Result := FUserDefinedList_Specified;
end;

constructor GetMessagePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMessagePreferencesResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FASQPreferences);
  inherited Destroy;
end;

procedure GetMessagePreferencesResponseType.SetASQPreferences(Index: Integer; const AASQPreferencesType: ASQPreferencesType);
begin
  FASQPreferences := AASQPreferencesType;
  FASQPreferences_Specified := True;
end;

function GetMessagePreferencesResponseType.ASQPreferences_Specified(Index: Integer): boolean;
begin
  Result := FASQPreferences_Specified;
end;

constructor GetMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyMessagesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlerts)-1 do
    SysUtils.FreeAndNil(FAlerts[I]);
  System.SetLength(FAlerts, 0);
  for I := 0 to System.Length(FMessages)-1 do
    SysUtils.FreeAndNil(FMessages[I]);
  System.SetLength(FMessages, 0);
  SysUtils.FreeAndNil(FSummary);
  inherited Destroy;
end;

procedure GetMyMessagesResponseType.SetSummary(Index: Integer; const AMyMessagesSummaryType: MyMessagesSummaryType);
begin
  FSummary := AMyMessagesSummaryType;
  FSummary_Specified := True;
end;

function GetMyMessagesResponseType.Summary_Specified(Index: Integer): boolean;
begin
  Result := FSummary_Specified;
end;

procedure GetMyMessagesResponseType.SetAlerts(Index: Integer; const AMyMessagesAlertArrayType: MyMessagesAlertArrayType);
begin
  FAlerts := AMyMessagesAlertArrayType;
  FAlerts_Specified := True;
end;

function GetMyMessagesResponseType.Alerts_Specified(Index: Integer): boolean;
begin
  Result := FAlerts_Specified;
end;

procedure GetMyMessagesResponseType.SetMessages(Index: Integer; const AMyMessagesMessageArrayType: MyMessagesMessageArrayType);
begin
  FMessages := AMyMessagesMessageArrayType;
  FMessages_Specified := True;
end;

function GetMyMessagesResponseType.Messages_Specified(Index: Integer): boolean;
begin
  Result := FMessages_Specified;
end;

constructor GetDescriptionTemplatesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDescriptionTemplatesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDescriptionTemplate)-1 do
    SysUtils.FreeAndNil(FDescriptionTemplate[I]);
  System.SetLength(FDescriptionTemplate, 0);
  for I := 0 to System.Length(FThemeGroup)-1 do
    SysUtils.FreeAndNil(FThemeGroup[I]);
  System.SetLength(FThemeGroup, 0);
  inherited Destroy;
end;

procedure GetDescriptionTemplatesResponseType.SetDescriptionTemplate(Index: Integer; const AArray_Of_DescriptionTemplateType: Array_Of_DescriptionTemplateType);
begin
  FDescriptionTemplate := AArray_Of_DescriptionTemplateType;
  FDescriptionTemplate_Specified := True;
end;

function GetDescriptionTemplatesResponseType.DescriptionTemplate_Specified(Index: Integer): boolean;
begin
  Result := FDescriptionTemplate_Specified;
end;

procedure GetDescriptionTemplatesResponseType.SetLayoutTotal(Index: Integer; const AInteger: Integer);
begin
  FLayoutTotal := AInteger;
  FLayoutTotal_Specified := True;
end;

function GetDescriptionTemplatesResponseType.LayoutTotal_Specified(Index: Integer): boolean;
begin
  Result := FLayoutTotal_Specified;
end;

procedure GetDescriptionTemplatesResponseType.SetObsoleteLayoutID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FObsoleteLayoutID := ANumberOfPolicyViolationsDetailsType;
  FObsoleteLayoutID_Specified := True;
end;

function GetDescriptionTemplatesResponseType.ObsoleteLayoutID_Specified(Index: Integer): boolean;
begin
  Result := FObsoleteLayoutID_Specified;
end;

procedure GetDescriptionTemplatesResponseType.SetObsoleteThemeID(Index: Integer; const ANumberOfPolicyViolationsDetailsType: NumberOfPolicyViolationsDetailsType);
begin
  FObsoleteThemeID := ANumberOfPolicyViolationsDetailsType;
  FObsoleteThemeID_Specified := True;
end;

function GetDescriptionTemplatesResponseType.ObsoleteThemeID_Specified(Index: Integer): boolean;
begin
  Result := FObsoleteThemeID_Specified;
end;

procedure GetDescriptionTemplatesResponseType.SetThemeGroup(Index: Integer; const AArray_Of_ThemeGroupType: Array_Of_ThemeGroupType);
begin
  FThemeGroup := AArray_Of_ThemeGroupType;
  FThemeGroup_Specified := True;
end;

function GetDescriptionTemplatesResponseType.ThemeGroup_Specified(Index: Integer): boolean;
begin
  Result := FThemeGroup_Specified;
end;

procedure GetDescriptionTemplatesResponseType.SetThemeTotal(Index: Integer; const AInteger: Integer);
begin
  FThemeTotal := AInteger;
  FThemeTotal_Specified := True;
end;

function GetDescriptionTemplatesResponseType.ThemeTotal_Specified(Index: Integer): boolean;
begin
  Result := FThemeTotal_Specified;
end;

constructor GetDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDisputeResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FDispute);
  inherited Destroy;
end;

procedure GetDisputeResponseType.SetDispute(Index: Integer; const ADisputeType: DisputeType);
begin
  FDispute := ADisputeType;
  FDispute_Specified := True;
end;

function GetDisputeResponseType.Dispute_Specified(Index: Integer): boolean;
begin
  Result := FDispute_Specified;
end;

constructor GetClientAlertsAuthTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetClientAlertsAuthTokenResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FHardExpirationTime);
  inherited Destroy;
end;

procedure GetClientAlertsAuthTokenResponseType.SetClientAlertsAuthToken(Index: Integer; const Astring: string);
begin
  FClientAlertsAuthToken := Astring;
  FClientAlertsAuthToken_Specified := True;
end;

function GetClientAlertsAuthTokenResponseType.ClientAlertsAuthToken_Specified(Index: Integer): boolean;
begin
  Result := FClientAlertsAuthToken_Specified;
end;

procedure GetClientAlertsAuthTokenResponseType.SetHardExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FHardExpirationTime := ATXSDateTime;
  FHardExpirationTime_Specified := True;
end;

function GetClientAlertsAuthTokenResponseType.HardExpirationTime_Specified(Index: Integer): boolean;
begin
  Result := FHardExpirationTime_Specified;
end;

constructor GetContextualKeywordsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetContextualKeywordsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FContextSearchAsset)-1 do
    SysUtils.FreeAndNil(FContextSearchAsset[I]);
  System.SetLength(FContextSearchAsset, 0);
  inherited Destroy;
end;

procedure GetContextualKeywordsResponseType.SetContextSearchAsset(Index: Integer; const AArray_Of_ContextSearchAssetType: Array_Of_ContextSearchAssetType);
begin
  FContextSearchAsset := AArray_Of_ContextSearchAssetType;
  FContextSearchAsset_Specified := True;
end;

function GetContextualKeywordsResponseType.ContextSearchAsset_Specified(Index: Integer): boolean;
begin
  Result := FContextSearchAsset_Specified;
end;

constructor GetItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure GetItemResponseType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function GetItemResponseType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

constructor GetItemShippingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemShippingResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingDetails);
  SysUtils.FreeAndNil(FPickUpInStoreDetails);
  inherited Destroy;
end;

procedure GetItemShippingResponseType.SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
begin
  FShippingDetails := AShippingDetailsType;
  FShippingDetails_Specified := True;
end;

function GetItemShippingResponseType.ShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetails_Specified;
end;

procedure GetItemShippingResponseType.SetPickUpInStoreDetails(Index: Integer; const APickupInStoreDetailsType: PickupInStoreDetailsType);
begin
  FPickUpInStoreDetails := APickupInStoreDetailsType;
  FPickUpInStoreDetails_Specified := True;
end;

function GetItemShippingResponseType.PickUpInStoreDetails_Specified(Index: Integer): boolean;
begin
  Result := FPickUpInStoreDetails_Specified;
end;

constructor GetFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetFeedbackResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFeedbackDetailArray)-1 do
    SysUtils.FreeAndNil(FFeedbackDetailArray[I]);
  System.SetLength(FFeedbackDetailArray, 0);
  SysUtils.FreeAndNil(FFeedbackSummary);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetFeedbackResponseType.SetFeedbackDetailArray(Index: Integer; const AFeedbackDetailArrayType: FeedbackDetailArrayType);
begin
  FFeedbackDetailArray := AFeedbackDetailArrayType;
  FFeedbackDetailArray_Specified := True;
end;

function GetFeedbackResponseType.FeedbackDetailArray_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackDetailArray_Specified;
end;

procedure GetFeedbackResponseType.SetFeedbackDetailItemTotal(Index: Integer; const AInteger: Integer);
begin
  FFeedbackDetailItemTotal := AInteger;
  FFeedbackDetailItemTotal_Specified := True;
end;

function GetFeedbackResponseType.FeedbackDetailItemTotal_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackDetailItemTotal_Specified;
end;

procedure GetFeedbackResponseType.SetFeedbackSummary(Index: Integer; const AFeedbackSummaryType: FeedbackSummaryType);
begin
  FFeedbackSummary := AFeedbackSummaryType;
  FFeedbackSummary_Specified := True;
end;

function GetFeedbackResponseType.FeedbackSummary_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackSummary_Specified;
end;

procedure GetFeedbackResponseType.SetFeedbackScore(Index: Integer; const AInteger: Integer);
begin
  FFeedbackScore := AInteger;
  FFeedbackScore_Specified := True;
end;

function GetFeedbackResponseType.FeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackScore_Specified;
end;

procedure GetFeedbackResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetFeedbackResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetFeedbackResponseType.SetEntriesPerPage(Index: Integer; const AInteger: Integer);
begin
  FEntriesPerPage := AInteger;
  FEntriesPerPage_Specified := True;
end;

function GetFeedbackResponseType.EntriesPerPage_Specified(Index: Integer): boolean;
begin
  Result := FEntriesPerPage_Specified;
end;

procedure GetFeedbackResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetFeedbackResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

constructor AddMemberMessageRTQResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddMemberMessagesAAQToBidderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessagesAAQToBidderResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAddMemberMessagesAAQToBidderResponseContainer)-1 do
    SysUtils.FreeAndNil(FAddMemberMessagesAAQToBidderResponseContainer[I]);
  System.SetLength(FAddMemberMessagesAAQToBidderResponseContainer, 0);
  inherited Destroy;
end;

procedure AddMemberMessagesAAQToBidderResponseType.SetAddMemberMessagesAAQToBidderResponseContainer(Index: Integer; const AArray_Of_AddMemberMessagesAAQToBidderResponseContainerType: Array_Of_AddMemberMessagesAAQToBidderResponseContainerType);
begin
  FAddMemberMessagesAAQToBidderResponseContainer := AArray_Of_AddMemberMessagesAAQToBidderResponseContainerType;
  FAddMemberMessagesAAQToBidderResponseContainer_Specified := True;
end;

function AddMemberMessagesAAQToBidderResponseType.AddMemberMessagesAAQToBidderResponseContainer_Specified(Index: Integer): boolean;
begin
  Result := FAddMemberMessagesAAQToBidderResponseContainer_Specified;
end;

constructor AddItemsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAddItemResponseContainer)-1 do
    SysUtils.FreeAndNil(FAddItemResponseContainer[I]);
  System.SetLength(FAddItemResponseContainer, 0);
  inherited Destroy;
end;

procedure AddItemsResponseType.SetAddItemResponseContainer(Index: Integer; const AArray_Of_AddItemResponseContainerType: Array_Of_AddItemResponseContainerType);
begin
  FAddItemResponseContainer := AArray_Of_AddItemResponseContainerType;
  FAddItemResponseContainer_Specified := True;
end;

function AddItemsResponseType.AddItemResponseContainer_Specified(Index: Integer): boolean;
begin
  Result := FAddItemResponseContainer_Specified;
end;

constructor AddMemberMessageAAQToPartnerResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddSellingManagerInventoryFolderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddSellingManagerInventoryFolderResponseType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function AddSellingManagerInventoryFolderResponseType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

constructor AddSecondChanceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSecondChanceItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddSecondChanceItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddSecondChanceItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddSecondChanceItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddSecondChanceItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddSecondChanceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddSecondChanceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

constructor AddOrderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddOrderResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FCreatedTime);
  inherited Destroy;
end;

procedure AddOrderResponseType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function AddOrderResponseType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure AddOrderResponseType.SetCreatedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreatedTime := ATXSDateTime;
  FCreatedTime_Specified := True;
end;

function AddOrderResponseType.CreatedTime_Specified(Index: Integer): boolean;
begin
  Result := FCreatedTime_Specified;
end;

constructor GetUserDisputesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserDisputesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDisputeArray)-1 do
    SysUtils.FreeAndNil(FDisputeArray[I]);
  System.SetLength(FDisputeArray, 0);
  for I := 0 to System.Length(FDisputeFilterCount)-1 do
    SysUtils.FreeAndNil(FDisputeFilterCount[I]);
  System.SetLength(FDisputeFilterCount, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetUserDisputesResponseType.SetStartingDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FStartingDisputeID := ADisputeIDType;
  FStartingDisputeID_Specified := True;
end;

function GetUserDisputesResponseType.StartingDisputeID_Specified(Index: Integer): boolean;
begin
  Result := FStartingDisputeID_Specified;
end;

procedure GetUserDisputesResponseType.SetEndingDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FEndingDisputeID := ADisputeIDType;
  FEndingDisputeID_Specified := True;
end;

function GetUserDisputesResponseType.EndingDisputeID_Specified(Index: Integer): boolean;
begin
  Result := FEndingDisputeID_Specified;
end;

procedure GetUserDisputesResponseType.SetDisputeArray(Index: Integer; const ADisputeArrayType: DisputeArrayType);
begin
  FDisputeArray := ADisputeArrayType;
  FDisputeArray_Specified := True;
end;

function GetUserDisputesResponseType.DisputeArray_Specified(Index: Integer): boolean;
begin
  Result := FDisputeArray_Specified;
end;

procedure GetUserDisputesResponseType.SetItemsPerPage(Index: Integer; const AInteger: Integer);
begin
  FItemsPerPage := AInteger;
  FItemsPerPage_Specified := True;
end;

function GetUserDisputesResponseType.ItemsPerPage_Specified(Index: Integer): boolean;
begin
  Result := FItemsPerPage_Specified;
end;

procedure GetUserDisputesResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetUserDisputesResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetUserDisputesResponseType.SetDisputeFilterCount(Index: Integer; const AArray_Of_DisputeFilterCountType: Array_Of_DisputeFilterCountType);
begin
  FDisputeFilterCount := AArray_Of_DisputeFilterCountType;
  FDisputeFilterCount_Specified := True;
end;

function GetUserDisputesResponseType.DisputeFilterCount_Specified(Index: Integer): boolean;
begin
  Result := FDisputeFilterCount_Specified;
end;

procedure GetUserDisputesResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetUserDisputesResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

constructor AddDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddDisputeResponseType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function AddDisputeResponseType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

procedure NotificationMessageType.SetMessageBody(Index: Integer; const Astring: string);
begin
  FMessageBody := Astring;
  FMessageBody_Specified := True;
end;

function NotificationMessageType.MessageBody_Specified(Index: Integer): boolean;
begin
  Result := FMessageBody_Specified;
end;

procedure NotificationMessageType.SetEIAS(Index: Integer; const Astring: string);
begin
  FEIAS := Astring;
  FEIAS_Specified := True;
end;

function NotificationMessageType.EIAS_Specified(Index: Integer): boolean;
begin
  Result := FEIAS_Specified;
end;

constructor GetSellingManagerInventoryResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerInventoryResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellingManagerProduct)-1 do
    SysUtils.FreeAndNil(FSellingManagerProduct[I]);
  System.SetLength(FSellingManagerProduct, 0);
  SysUtils.FreeAndNil(FInventoryCountLastCalculatedDate);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetSellingManagerInventoryResponseType.SetInventoryCountLastCalculatedDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInventoryCountLastCalculatedDate := ATXSDateTime;
  FInventoryCountLastCalculatedDate_Specified := True;
end;

function GetSellingManagerInventoryResponseType.InventoryCountLastCalculatedDate_Specified(Index: Integer): boolean;
begin
  Result := FInventoryCountLastCalculatedDate_Specified;
end;

procedure GetSellingManagerInventoryResponseType.SetSellingManagerProduct(Index: Integer; const AArray_Of_SellingManagerProductType: Array_Of_SellingManagerProductType);
begin
  FSellingManagerProduct := AArray_Of_SellingManagerProductType;
  FSellingManagerProduct_Specified := True;
end;

function GetSellingManagerInventoryResponseType.SellingManagerProduct_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProduct_Specified;
end;

procedure GetSellingManagerInventoryResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetSellingManagerInventoryResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

constructor GetSellingManagerItemAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerItemAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure GetSellingManagerItemAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function GetSellingManagerItemAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure GetSellingManagerItemAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function GetSellingManagerItemAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure GetSellingManagerItemAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function GetSellingManagerItemAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure GetSellingManagerItemAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function GetSellingManagerItemAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor GetSellingManagerSaleRecordResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerSaleRecordResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerSoldOrder);
  inherited Destroy;
end;

procedure GetSellingManagerSaleRecordResponseType.SetSellingManagerSoldOrder(Index: Integer; const ASellingManagerSoldOrderType: SellingManagerSoldOrderType);
begin
  FSellingManagerSoldOrder := ASellingManagerSoldOrderType;
  FSellingManagerSoldOrder_Specified := True;
end;

function GetSellingManagerSaleRecordResponseType.SellingManagerSoldOrder_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerSoldOrder_Specified;
end;

constructor GetSellingManagerInventoryFolderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerInventoryFolderResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FFolder);
  inherited Destroy;
end;

procedure GetSellingManagerInventoryFolderResponseType.SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
begin
  FFolder := ASellingManagerFolderDetailsType;
  FFolder_Specified := True;
end;

function GetSellingManagerInventoryFolderResponseType.Folder_Specified(Index: Integer): boolean;
begin
  Result := FFolder_Specified;
end;

constructor GetSellingManagerEmailLogResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerEmailLogResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEmailLog)-1 do
    SysUtils.FreeAndNil(FEmailLog[I]);
  System.SetLength(FEmailLog, 0);
  inherited Destroy;
end;

procedure GetSellingManagerEmailLogResponseType.SetEmailLog(Index: Integer; const AArray_Of_SellingManagerEmailLogType: Array_Of_SellingManagerEmailLogType);
begin
  FEmailLog := AArray_Of_SellingManagerEmailLogType;
  FEmailLog_Specified := True;
end;

function GetSellingManagerEmailLogResponseType.EmailLog_Specified(Index: Integer): boolean;
begin
  Result := FEmailLog_Specified;
end;

constructor GetSellingManagerAlertsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerAlertsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAlert)-1 do
    SysUtils.FreeAndNil(FAlert[I]);
  System.SetLength(FAlert, 0);
  inherited Destroy;
end;

procedure GetSellingManagerAlertsResponseType.SetAlert(Index: Integer; const AArray_Of_SellingManagerAlertType: Array_Of_SellingManagerAlertType);
begin
  FAlert := AArray_Of_SellingManagerAlertType;
  FAlert_Specified := True;
end;

function GetSellingManagerAlertsResponseType.Alert_Specified(Index: Integer): boolean;
begin
  Result := FAlert_Specified;
end;

constructor GetStoreCategoryUpdateStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetStoreCategoryUpdateStatusResponseType.SetStatus(Index: Integer; const ATaskStatusCodeType: TaskStatusCodeType);
begin
  FStatus := ATaskStatusCodeType;
  FStatus_Specified := True;
end;

function GetStoreCategoryUpdateStatusResponseType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

constructor GetStoreResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FStore);
  inherited Destroy;
end;

procedure GetStoreResponseType.SetStore(Index: Integer; const AStoreType: StoreType);
begin
  FStore := AStoreType;
  FStore_Specified := True;
end;

function GetStoreResponseType.Store_Specified(Index: Integer): boolean;
begin
  Result := FStore_Specified;
end;

constructor GetSellingManagerSoldListingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerSoldListingsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSaleRecord)-1 do
    SysUtils.FreeAndNil(FSaleRecord[I]);
  System.SetLength(FSaleRecord, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetSellingManagerSoldListingsResponseType.SetSaleRecord(Index: Integer; const AArray_Of_SellingManagerSoldOrderType: Array_Of_SellingManagerSoldOrderType);
begin
  FSaleRecord := AArray_Of_SellingManagerSoldOrderType;
  FSaleRecord_Specified := True;
end;

function GetSellingManagerSoldListingsResponseType.SaleRecord_Specified(Index: Integer): boolean;
begin
  Result := FSaleRecord_Specified;
end;

procedure GetSellingManagerSoldListingsResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetSellingManagerSoldListingsResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

constructor GetSellingManagerTemplateAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerTemplateAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure GetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function GetSellingManagerTemplateAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure GetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function GetSellingManagerTemplateAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure GetSellingManagerTemplateAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function GetSellingManagerTemplateAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure GetSellingManagerTemplateAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function GetSellingManagerTemplateAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor GetSessionIDResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSessionIDResponseType.SetSessionID(Index: Integer; const Astring: string);
begin
  FSessionID := Astring;
  FSessionID_Specified := True;
end;

function GetSessionIDResponseType.SessionID_Specified(Index: Integer): boolean;
begin
  Result := FSessionID_Specified;
end;

constructor GetSellingManagerTemplatesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerTemplatesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellingManagerTemplateDetailsArray)-1 do
    SysUtils.FreeAndNil(FSellingManagerTemplateDetailsArray[I]);
  System.SetLength(FSellingManagerTemplateDetailsArray, 0);
  inherited Destroy;
end;

procedure GetSellingManagerTemplatesResponseType.SetSellingManagerTemplateDetailsArray(Index: Integer; const ASellingManagerTemplateDetailsArrayType: SellingManagerTemplateDetailsArrayType);
begin
  FSellingManagerTemplateDetailsArray := ASellingManagerTemplateDetailsArrayType;
  FSellingManagerTemplateDetailsArray_Specified := True;
end;

function GetSellingManagerTemplatesResponseType.SellingManagerTemplateDetailsArray_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerTemplateDetailsArray_Specified;
end;

constructor GetNotificationPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationPreferencesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserDeliveryPreferenceArray)-1 do
    SysUtils.FreeAndNil(FUserDeliveryPreferenceArray[I]);
  System.SetLength(FUserDeliveryPreferenceArray, 0);
  for I := 0 to System.Length(FEventProperty)-1 do
    SysUtils.FreeAndNil(FEventProperty[I]);
  System.SetLength(FEventProperty, 0);
  SysUtils.FreeAndNil(FApplicationDeliveryPreferences);
  SysUtils.FreeAndNil(FUserData);
  inherited Destroy;
end;

procedure GetNotificationPreferencesResponseType.SetApplicationDeliveryPreferences(Index: Integer; const AApplicationDeliveryPreferencesType: ApplicationDeliveryPreferencesType);
begin
  FApplicationDeliveryPreferences := AApplicationDeliveryPreferencesType;
  FApplicationDeliveryPreferences_Specified := True;
end;

function GetNotificationPreferencesResponseType.ApplicationDeliveryPreferences_Specified(Index: Integer): boolean;
begin
  Result := FApplicationDeliveryPreferences_Specified;
end;

procedure GetNotificationPreferencesResponseType.SetDeliveryURLName(Index: Integer; const Astring: string);
begin
  FDeliveryURLName := Astring;
  FDeliveryURLName_Specified := True;
end;

function GetNotificationPreferencesResponseType.DeliveryURLName_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURLName_Specified;
end;

procedure GetNotificationPreferencesResponseType.SetUserDeliveryPreferenceArray(Index: Integer; const ANotificationEnableArrayType: NotificationEnableArrayType);
begin
  FUserDeliveryPreferenceArray := ANotificationEnableArrayType;
  FUserDeliveryPreferenceArray_Specified := True;
end;

function GetNotificationPreferencesResponseType.UserDeliveryPreferenceArray_Specified(Index: Integer): boolean;
begin
  Result := FUserDeliveryPreferenceArray_Specified;
end;

procedure GetNotificationPreferencesResponseType.SetUserData(Index: Integer; const ANotificationUserDataType: NotificationUserDataType);
begin
  FUserData := ANotificationUserDataType;
  FUserData_Specified := True;
end;

function GetNotificationPreferencesResponseType.UserData_Specified(Index: Integer): boolean;
begin
  Result := FUserData_Specified;
end;

procedure GetNotificationPreferencesResponseType.SetEventProperty(Index: Integer; const AArray_Of_NotificationEventPropertyType: Array_Of_NotificationEventPropertyType);
begin
  FEventProperty := AArray_Of_NotificationEventPropertyType;
  FEventProperty_Specified := True;
end;

function GetNotificationPreferencesResponseType.EventProperty_Specified(Index: Integer): boolean;
begin
  Result := FEventProperty_Specified;
end;

constructor GetNotificationsUsageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationsUsageResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FNotificationDetailsArray)-1 do
    SysUtils.FreeAndNil(FNotificationDetailsArray[I]);
  System.SetLength(FNotificationDetailsArray, 0);
  for I := 0 to System.Length(FMarkUpMarkDownHistory)-1 do
    SysUtils.FreeAndNil(FMarkUpMarkDownHistory[I]);
  System.SetLength(FMarkUpMarkDownHistory, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  SysUtils.FreeAndNil(FNotificationStatistics);
  inherited Destroy;
end;

procedure GetNotificationsUsageResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function GetNotificationsUsageResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure GetNotificationsUsageResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function GetNotificationsUsageResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure GetNotificationsUsageResponseType.SetNotificationDetailsArray(Index: Integer; const ANotificationDetailsArrayType: NotificationDetailsArrayType);
begin
  FNotificationDetailsArray := ANotificationDetailsArrayType;
  FNotificationDetailsArray_Specified := True;
end;

function GetNotificationsUsageResponseType.NotificationDetailsArray_Specified(Index: Integer): boolean;
begin
  Result := FNotificationDetailsArray_Specified;
end;

procedure GetNotificationsUsageResponseType.SetMarkUpMarkDownHistory(Index: Integer; const AMarkUpMarkDownHistoryType: MarkUpMarkDownHistoryType);
begin
  FMarkUpMarkDownHistory := AMarkUpMarkDownHistoryType;
  FMarkUpMarkDownHistory_Specified := True;
end;

function GetNotificationsUsageResponseType.MarkUpMarkDownHistory_Specified(Index: Integer): boolean;
begin
  Result := FMarkUpMarkDownHistory_Specified;
end;

procedure GetNotificationsUsageResponseType.SetNotificationStatistics(Index: Integer; const ANotificationStatisticsType: NotificationStatisticsType);
begin
  FNotificationStatistics := ANotificationStatisticsType;
  FNotificationStatistics_Specified := True;
end;

function GetNotificationsUsageResponseType.NotificationStatistics_Specified(Index: Integer): boolean;
begin
  Result := FNotificationStatistics_Specified;
end;

constructor GetMyeBaySellingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBaySellingResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingSummary);
  SysUtils.FreeAndNil(FScheduledList);
  SysUtils.FreeAndNil(FActiveList);
  SysUtils.FreeAndNil(FSoldList);
  SysUtils.FreeAndNil(FUnsoldList);
  SysUtils.FreeAndNil(FSummary);
  SysUtils.FreeAndNil(FBidList);
  SysUtils.FreeAndNil(FDeletedFromSoldList);
  SysUtils.FreeAndNil(FDeletedFromUnsoldList);
  inherited Destroy;
end;

procedure GetMyeBaySellingResponseType.SetSellingSummary(Index: Integer; const ASellingSummaryType: SellingSummaryType);
begin
  FSellingSummary := ASellingSummaryType;
  FSellingSummary_Specified := True;
end;

function GetMyeBaySellingResponseType.SellingSummary_Specified(Index: Integer): boolean;
begin
  Result := FSellingSummary_Specified;
end;

procedure GetMyeBaySellingResponseType.SetScheduledList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FScheduledList := APaginatedItemArrayType;
  FScheduledList_Specified := True;
end;

function GetMyeBaySellingResponseType.ScheduledList_Specified(Index: Integer): boolean;
begin
  Result := FScheduledList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetActiveList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FActiveList := APaginatedItemArrayType;
  FActiveList_Specified := True;
end;

function GetMyeBaySellingResponseType.ActiveList_Specified(Index: Integer): boolean;
begin
  Result := FActiveList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetSoldList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
begin
  FSoldList := APaginatedOrderTransactionArrayType;
  FSoldList_Specified := True;
end;

function GetMyeBaySellingResponseType.SoldList_Specified(Index: Integer): boolean;
begin
  Result := FSoldList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetUnsoldList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FUnsoldList := APaginatedItemArrayType;
  FUnsoldList_Specified := True;
end;

function GetMyeBaySellingResponseType.UnsoldList_Specified(Index: Integer): boolean;
begin
  Result := FUnsoldList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetSummary(Index: Integer; const AMyeBaySellingSummaryType: MyeBaySellingSummaryType);
begin
  FSummary := AMyeBaySellingSummaryType;
  FSummary_Specified := True;
end;

function GetMyeBaySellingResponseType.Summary_Specified(Index: Integer): boolean;
begin
  Result := FSummary_Specified;
end;

procedure GetMyeBaySellingResponseType.SetBidList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FBidList := APaginatedItemArrayType;
  FBidList_Specified := True;
end;

function GetMyeBaySellingResponseType.BidList_Specified(Index: Integer): boolean;
begin
  Result := FBidList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetDeletedFromSoldList(Index: Integer; const APaginatedOrderTransactionArrayType: PaginatedOrderTransactionArrayType);
begin
  FDeletedFromSoldList := APaginatedOrderTransactionArrayType;
  FDeletedFromSoldList_Specified := True;
end;

function GetMyeBaySellingResponseType.DeletedFromSoldList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromSoldList_Specified;
end;

procedure GetMyeBaySellingResponseType.SetDeletedFromUnsoldList(Index: Integer; const APaginatedItemArrayType: PaginatedItemArrayType);
begin
  FDeletedFromUnsoldList := APaginatedItemArrayType;
  FDeletedFromUnsoldList_Specified := True;
end;

function GetMyeBaySellingResponseType.DeletedFromUnsoldList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromUnsoldList_Specified;
end;

constructor GetMyeBayRemindersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayRemindersResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FBuyingReminders);
  SysUtils.FreeAndNil(FSellingReminders);
  inherited Destroy;
end;

procedure GetMyeBayRemindersResponseType.SetBuyingReminders(Index: Integer; const ARemindersType: RemindersType);
begin
  FBuyingReminders := ARemindersType;
  FBuyingReminders_Specified := True;
end;

function GetMyeBayRemindersResponseType.BuyingReminders_Specified(Index: Integer): boolean;
begin
  Result := FBuyingReminders_Specified;
end;

procedure GetMyeBayRemindersResponseType.SetSellingReminders(Index: Integer; const ARemindersType: RemindersType);
begin
  FSellingReminders := ARemindersType;
  FSellingReminders_Specified := True;
end;

function GetMyeBayRemindersResponseType.SellingReminders_Specified(Index: Integer): boolean;
begin
  Result := FSellingReminders_Specified;
end;

constructor GetSellerDashboardResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerDashboardResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPerformance)-1 do
    SysUtils.FreeAndNil(FPerformance[I]);
  System.SetLength(FPerformance, 0);
  SysUtils.FreeAndNil(FSearchStanding);
  SysUtils.FreeAndNil(FSellerFeeDiscount);
  SysUtils.FreeAndNil(FPowerSellerStatus);
  SysUtils.FreeAndNil(FPolicyCompliance);
  SysUtils.FreeAndNil(FBuyerSatisfaction);
  SysUtils.FreeAndNil(FSellerAccount);
  inherited Destroy;
end;

procedure GetSellerDashboardResponseType.SetSearchStanding(Index: Integer; const ASearchStandingDashboardType: SearchStandingDashboardType);
begin
  FSearchStanding := ASearchStandingDashboardType;
  FSearchStanding_Specified := True;
end;

function GetSellerDashboardResponseType.SearchStanding_Specified(Index: Integer): boolean;
begin
  Result := FSearchStanding_Specified;
end;

procedure GetSellerDashboardResponseType.SetSellerFeeDiscount(Index: Integer; const ASellerFeeDiscountDashboardType: SellerFeeDiscountDashboardType);
begin
  FSellerFeeDiscount := ASellerFeeDiscountDashboardType;
  FSellerFeeDiscount_Specified := True;
end;

function GetSellerDashboardResponseType.SellerFeeDiscount_Specified(Index: Integer): boolean;
begin
  Result := FSellerFeeDiscount_Specified;
end;

procedure GetSellerDashboardResponseType.SetPowerSellerStatus(Index: Integer; const APowerSellerDashboardType: PowerSellerDashboardType);
begin
  FPowerSellerStatus := APowerSellerDashboardType;
  FPowerSellerStatus_Specified := True;
end;

function GetSellerDashboardResponseType.PowerSellerStatus_Specified(Index: Integer): boolean;
begin
  Result := FPowerSellerStatus_Specified;
end;

procedure GetSellerDashboardResponseType.SetPolicyCompliance(Index: Integer; const APolicyComplianceDashboardType: PolicyComplianceDashboardType);
begin
  FPolicyCompliance := APolicyComplianceDashboardType;
  FPolicyCompliance_Specified := True;
end;

function GetSellerDashboardResponseType.PolicyCompliance_Specified(Index: Integer): boolean;
begin
  Result := FPolicyCompliance_Specified;
end;

procedure GetSellerDashboardResponseType.SetBuyerSatisfaction(Index: Integer; const ABuyerSatisfactionDashboardType: BuyerSatisfactionDashboardType);
begin
  FBuyerSatisfaction := ABuyerSatisfactionDashboardType;
  FBuyerSatisfaction_Specified := True;
end;

function GetSellerDashboardResponseType.BuyerSatisfaction_Specified(Index: Integer): boolean;
begin
  Result := FBuyerSatisfaction_Specified;
end;

procedure GetSellerDashboardResponseType.SetSellerAccount(Index: Integer; const ASellerAccountDashboardType: SellerAccountDashboardType);
begin
  FSellerAccount := ASellerAccountDashboardType;
  FSellerAccount_Specified := True;
end;

function GetSellerDashboardResponseType.SellerAccount_Specified(Index: Integer): boolean;
begin
  Result := FSellerAccount_Specified;
end;

procedure GetSellerDashboardResponseType.SetPerformance(Index: Integer; const AArray_Of_PerformanceDashboardType: Array_Of_PerformanceDashboardType);
begin
  FPerformance := AArray_Of_PerformanceDashboardType;
  FPerformance_Specified := True;
end;

function GetSellerDashboardResponseType.Performance_Specified(Index: Integer): boolean;
begin
  Result := FPerformance_Specified;
end;

constructor GetOrderTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrderTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FOrderArray)-1 do
    SysUtils.FreeAndNil(FOrderArray[I]);
  System.SetLength(FOrderArray, 0);
  inherited Destroy;
end;

procedure GetOrderTransactionsResponseType.SetOrderArray(Index: Integer; const AOrderArrayType: OrderArrayType);
begin
  FOrderArray := AOrderArrayType;
  FOrderArray_Specified := True;
end;

function GetOrderTransactionsResponseType.OrderArray_Specified(Index: Integer): boolean;
begin
  Result := FOrderArray_Specified;
end;

constructor GetPromotionalSaleDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPromotionalSaleDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FPromotionalSaleDetails)-1 do
    SysUtils.FreeAndNil(FPromotionalSaleDetails[I]);
  System.SetLength(FPromotionalSaleDetails, 0);
  inherited Destroy;
end;

procedure GetPromotionalSaleDetailsResponseType.SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleArrayType: PromotionalSaleArrayType);
begin
  FPromotionalSaleDetails := APromotionalSaleArrayType;
  FPromotionalSaleDetails_Specified := True;
end;

function GetPromotionalSaleDetailsResponseType.PromotionalSaleDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleDetails_Specified;
end;

constructor GetOrdersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrdersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FOrderArray)-1 do
    SysUtils.FreeAndNil(FOrderArray[I]);
  System.SetLength(FOrderArray, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetOrdersResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetOrdersResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetOrdersResponseType.SetHasMoreOrders(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreOrders := ABoolean;
  FHasMoreOrders_Specified := True;
end;

function GetOrdersResponseType.HasMoreOrders_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreOrders_Specified;
end;

procedure GetOrdersResponseType.SetOrderArray(Index: Integer; const AOrderArrayType: OrderArrayType);
begin
  FOrderArray := AOrderArrayType;
  FOrderArray_Specified := True;
end;

function GetOrdersResponseType.OrderArray_Specified(Index: Integer): boolean;
begin
  Result := FOrderArray_Specified;
end;

procedure GetOrdersResponseType.SetOrdersPerPage(Index: Integer; const AInteger: Integer);
begin
  FOrdersPerPage := AInteger;
  FOrdersPerPage_Specified := True;
end;

function GetOrdersResponseType.OrdersPerPage_Specified(Index: Integer): boolean;
begin
  Result := FOrdersPerPage_Specified;
end;

procedure GetOrdersResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetOrdersResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetOrdersResponseType.SetReturnedOrderCountActual(Index: Integer; const AInteger: Integer);
begin
  FReturnedOrderCountActual := AInteger;
  FReturnedOrderCountActual_Specified := True;
end;

function GetOrdersResponseType.ReturnedOrderCountActual_Specified(Index: Integer): boolean;
begin
  Result := FReturnedOrderCountActual_Specified;
end;

constructor GetStoreCustomPageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreCustomPageResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCustomPageArray)-1 do
    SysUtils.FreeAndNil(FCustomPageArray[I]);
  System.SetLength(FCustomPageArray, 0);
  inherited Destroy;
end;

procedure GetStoreCustomPageResponseType.SetCustomPageArray(Index: Integer; const AStoreCustomPageArrayType: StoreCustomPageArrayType);
begin
  FCustomPageArray := AStoreCustomPageArrayType;
  FCustomPageArray_Specified := True;
end;

function GetStoreCustomPageResponseType.CustomPageArray_Specified(Index: Integer): boolean;
begin
  Result := FCustomPageArray_Specified;
end;

constructor GeteBayDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GeteBayDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCountryDetails)-1 do
    SysUtils.FreeAndNil(FCountryDetails[I]);
  System.SetLength(FCountryDetails, 0);
  for I := 0 to System.Length(FCurrencyDetails)-1 do
    SysUtils.FreeAndNil(FCurrencyDetails[I]);
  System.SetLength(FCurrencyDetails, 0);
  for I := 0 to System.Length(FDispatchTimeMaxDetails)-1 do
    SysUtils.FreeAndNil(FDispatchTimeMaxDetails[I]);
  System.SetLength(FDispatchTimeMaxDetails, 0);
  for I := 0 to System.Length(FPaymentOptionDetails)-1 do
    SysUtils.FreeAndNil(FPaymentOptionDetails[I]);
  System.SetLength(FPaymentOptionDetails, 0);
  for I := 0 to System.Length(FRegionDetails)-1 do
    SysUtils.FreeAndNil(FRegionDetails[I]);
  System.SetLength(FRegionDetails, 0);
  for I := 0 to System.Length(FShippingLocationDetails)-1 do
    SysUtils.FreeAndNil(FShippingLocationDetails[I]);
  System.SetLength(FShippingLocationDetails, 0);
  for I := 0 to System.Length(FShippingServiceDetails)-1 do
    SysUtils.FreeAndNil(FShippingServiceDetails[I]);
  System.SetLength(FShippingServiceDetails, 0);
  for I := 0 to System.Length(FSiteDetails)-1 do
    SysUtils.FreeAndNil(FSiteDetails[I]);
  System.SetLength(FSiteDetails, 0);
  for I := 0 to System.Length(FTaxJurisdiction)-1 do
    SysUtils.FreeAndNil(FTaxJurisdiction[I]);
  System.SetLength(FTaxJurisdiction, 0);
  for I := 0 to System.Length(FURLDetails)-1 do
    SysUtils.FreeAndNil(FURLDetails[I]);
  System.SetLength(FURLDetails, 0);
  for I := 0 to System.Length(FTimeZoneDetails)-1 do
    SysUtils.FreeAndNil(FTimeZoneDetails[I]);
  System.SetLength(FTimeZoneDetails, 0);
  for I := 0 to System.Length(FItemSpecificDetails)-1 do
    SysUtils.FreeAndNil(FItemSpecificDetails[I]);
  System.SetLength(FItemSpecificDetails, 0);
  for I := 0 to System.Length(FUnitOfMeasurementDetails)-1 do
    SysUtils.FreeAndNil(FUnitOfMeasurementDetails[I]);
  System.SetLength(FUnitOfMeasurementDetails, 0);
  for I := 0 to System.Length(FRegionOfOriginDetails)-1 do
    SysUtils.FreeAndNil(FRegionOfOriginDetails[I]);
  System.SetLength(FRegionOfOriginDetails, 0);
  for I := 0 to System.Length(FShippingPackageDetails)-1 do
    SysUtils.FreeAndNil(FShippingPackageDetails[I]);
  System.SetLength(FShippingPackageDetails, 0);
  for I := 0 to System.Length(FShippingCarrierDetails)-1 do
    SysUtils.FreeAndNil(FShippingCarrierDetails[I]);
  System.SetLength(FShippingCarrierDetails, 0);
  for I := 0 to System.Length(FListingStartPriceDetails)-1 do
    SysUtils.FreeAndNil(FListingStartPriceDetails[I]);
  System.SetLength(FListingStartPriceDetails, 0);
  for I := 0 to System.Length(FBuyerRequirementDetails)-1 do
    SysUtils.FreeAndNil(FBuyerRequirementDetails[I]);
  System.SetLength(FBuyerRequirementDetails, 0);
  for I := 0 to System.Length(FListingFeatureDetails)-1 do
    SysUtils.FreeAndNil(FListingFeatureDetails[I]);
  System.SetLength(FListingFeatureDetails, 0);
  for I := 0 to System.Length(FExcludeShippingLocationDetails)-1 do
    SysUtils.FreeAndNil(FExcludeShippingLocationDetails[I]);
  System.SetLength(FExcludeShippingLocationDetails, 0);
  for I := 0 to System.Length(FRecoupmentPolicyDetails)-1 do
    SysUtils.FreeAndNil(FRecoupmentPolicyDetails[I]);
  System.SetLength(FRecoupmentPolicyDetails, 0);
  for I := 0 to System.Length(FShippingCategoryDetails)-1 do
    SysUtils.FreeAndNil(FShippingCategoryDetails[I]);
  System.SetLength(FShippingCategoryDetails, 0);
  SysUtils.FreeAndNil(FReturnPolicyDetails);
  SysUtils.FreeAndNil(FInternationalReturnPolicyDetails);
  SysUtils.FreeAndNil(FVariationDetails);
  SysUtils.FreeAndNil(FUpdateTime);
  SysUtils.FreeAndNil(FProductDetails);
  inherited Destroy;
end;

procedure GeteBayDetailsResponseType.SetCountryDetails(Index: Integer; const AArray_Of_CountryDetailsType: Array_Of_CountryDetailsType);
begin
  FCountryDetails := AArray_Of_CountryDetailsType;
  FCountryDetails_Specified := True;
end;

function GeteBayDetailsResponseType.CountryDetails_Specified(Index: Integer): boolean;
begin
  Result := FCountryDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetCurrencyDetails(Index: Integer; const AArray_Of_CurrencyDetailsType: Array_Of_CurrencyDetailsType);
begin
  FCurrencyDetails := AArray_Of_CurrencyDetailsType;
  FCurrencyDetails_Specified := True;
end;

function GeteBayDetailsResponseType.CurrencyDetails_Specified(Index: Integer): boolean;
begin
  Result := FCurrencyDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetDispatchTimeMaxDetails(Index: Integer; const AArray_Of_DispatchTimeMaxDetailsType: Array_Of_DispatchTimeMaxDetailsType);
begin
  FDispatchTimeMaxDetails := AArray_Of_DispatchTimeMaxDetailsType;
  FDispatchTimeMaxDetails_Specified := True;
end;

function GeteBayDetailsResponseType.DispatchTimeMaxDetails_Specified(Index: Integer): boolean;
begin
  Result := FDispatchTimeMaxDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetPaymentOptionDetails(Index: Integer; const AArray_Of_PaymentOptionDetailsType: Array_Of_PaymentOptionDetailsType);
begin
  FPaymentOptionDetails := AArray_Of_PaymentOptionDetailsType;
  FPaymentOptionDetails_Specified := True;
end;

function GeteBayDetailsResponseType.PaymentOptionDetails_Specified(Index: Integer): boolean;
begin
  Result := FPaymentOptionDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetRegionDetails(Index: Integer; const AArray_Of_RegionDetailsType: Array_Of_RegionDetailsType);
begin
  FRegionDetails := AArray_Of_RegionDetailsType;
  FRegionDetails_Specified := True;
end;

function GeteBayDetailsResponseType.RegionDetails_Specified(Index: Integer): boolean;
begin
  Result := FRegionDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetShippingLocationDetails(Index: Integer; const AArray_Of_ShippingLocationDetailsType: Array_Of_ShippingLocationDetailsType);
begin
  FShippingLocationDetails := AArray_Of_ShippingLocationDetailsType;
  FShippingLocationDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ShippingLocationDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingLocationDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetShippingServiceDetails(Index: Integer; const AArray_Of_ShippingServiceDetailsType: Array_Of_ShippingServiceDetailsType);
begin
  FShippingServiceDetails := AArray_Of_ShippingServiceDetailsType;
  FShippingServiceDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ShippingServiceDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetSiteDetails(Index: Integer; const AArray_Of_SiteDetailsType: Array_Of_SiteDetailsType);
begin
  FSiteDetails := AArray_Of_SiteDetailsType;
  FSiteDetails_Specified := True;
end;

function GeteBayDetailsResponseType.SiteDetails_Specified(Index: Integer): boolean;
begin
  Result := FSiteDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetTaxJurisdiction(Index: Integer; const ATaxTableType: TaxTableType);
begin
  FTaxJurisdiction := ATaxTableType;
  FTaxJurisdiction_Specified := True;
end;

function GeteBayDetailsResponseType.TaxJurisdiction_Specified(Index: Integer): boolean;
begin
  Result := FTaxJurisdiction_Specified;
end;

procedure GeteBayDetailsResponseType.SetURLDetails(Index: Integer; const AArray_Of_URLDetailsType: Array_Of_URLDetailsType);
begin
  FURLDetails := AArray_Of_URLDetailsType;
  FURLDetails_Specified := True;
end;

function GeteBayDetailsResponseType.URLDetails_Specified(Index: Integer): boolean;
begin
  Result := FURLDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetTimeZoneDetails(Index: Integer; const AArray_Of_TimeZoneDetailsType: Array_Of_TimeZoneDetailsType);
begin
  FTimeZoneDetails := AArray_Of_TimeZoneDetailsType;
  FTimeZoneDetails_Specified := True;
end;

function GeteBayDetailsResponseType.TimeZoneDetails_Specified(Index: Integer): boolean;
begin
  Result := FTimeZoneDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetItemSpecificDetails(Index: Integer; const AArray_Of_ItemSpecificDetailsType: Array_Of_ItemSpecificDetailsType);
begin
  FItemSpecificDetails := AArray_Of_ItemSpecificDetailsType;
  FItemSpecificDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ItemSpecificDetails_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecificDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetUnitOfMeasurementDetails(Index: Integer; const AArray_Of_UnitOfMeasurementDetailsType: Array_Of_UnitOfMeasurementDetailsType);
begin
  FUnitOfMeasurementDetails := AArray_Of_UnitOfMeasurementDetailsType;
  FUnitOfMeasurementDetails_Specified := True;
end;

function GeteBayDetailsResponseType.UnitOfMeasurementDetails_Specified(Index: Integer): boolean;
begin
  Result := FUnitOfMeasurementDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetRegionOfOriginDetails(Index: Integer; const AArray_Of_RegionOfOriginDetailsType: Array_Of_RegionOfOriginDetailsType);
begin
  FRegionOfOriginDetails := AArray_Of_RegionOfOriginDetailsType;
  FRegionOfOriginDetails_Specified := True;
end;

function GeteBayDetailsResponseType.RegionOfOriginDetails_Specified(Index: Integer): boolean;
begin
  Result := FRegionOfOriginDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetShippingPackageDetails(Index: Integer; const AArray_Of_ShippingPackageDetailsType: Array_Of_ShippingPackageDetailsType);
begin
  FShippingPackageDetails := AArray_Of_ShippingPackageDetailsType;
  FShippingPackageDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ShippingPackageDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackageDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetShippingCarrierDetails(Index: Integer; const AArray_Of_ShippingCarrierDetailsType: Array_Of_ShippingCarrierDetailsType);
begin
  FShippingCarrierDetails := AArray_Of_ShippingCarrierDetailsType;
  FShippingCarrierDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ShippingCarrierDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrierDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetReturnPolicyDetails(Index: Integer; const AReturnPolicyDetailsType: ReturnPolicyDetailsType);
begin
  FReturnPolicyDetails := AReturnPolicyDetailsType;
  FReturnPolicyDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ReturnPolicyDetails_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicyDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetInternationalReturnPolicyDetails(Index: Integer; const AReturnPolicyDetailsType: ReturnPolicyDetailsType);
begin
  FInternationalReturnPolicyDetails := AReturnPolicyDetailsType;
  FInternationalReturnPolicyDetails_Specified := True;
end;

function GeteBayDetailsResponseType.InternationalReturnPolicyDetails_Specified(Index: Integer): boolean;
begin
  Result := FInternationalReturnPolicyDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetListingStartPriceDetails(Index: Integer; const AArray_Of_ListingStartPriceDetailsType: Array_Of_ListingStartPriceDetailsType);
begin
  FListingStartPriceDetails := AArray_Of_ListingStartPriceDetailsType;
  FListingStartPriceDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ListingStartPriceDetails_Specified(Index: Integer): boolean;
begin
  Result := FListingStartPriceDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetBuyerRequirementDetails(Index: Integer; const AArray_Of_SiteBuyerRequirementDetailsType: Array_Of_SiteBuyerRequirementDetailsType);
begin
  FBuyerRequirementDetails := AArray_Of_SiteBuyerRequirementDetailsType;
  FBuyerRequirementDetails_Specified := True;
end;

function GeteBayDetailsResponseType.BuyerRequirementDetails_Specified(Index: Integer): boolean;
begin
  Result := FBuyerRequirementDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetListingFeatureDetails(Index: Integer; const AArray_Of_ListingFeatureDetailsType: Array_Of_ListingFeatureDetailsType);
begin
  FListingFeatureDetails := AArray_Of_ListingFeatureDetailsType;
  FListingFeatureDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ListingFeatureDetails_Specified(Index: Integer): boolean;
begin
  Result := FListingFeatureDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetVariationDetails(Index: Integer; const AVariationDetailsType: VariationDetailsType);
begin
  FVariationDetails := AVariationDetailsType;
  FVariationDetails_Specified := True;
end;

function GeteBayDetailsResponseType.VariationDetails_Specified(Index: Integer): boolean;
begin
  Result := FVariationDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetExcludeShippingLocationDetails(Index: Integer; const AArray_Of_ExcludeShippingLocationDetailsType: Array_Of_ExcludeShippingLocationDetailsType);
begin
  FExcludeShippingLocationDetails := AArray_Of_ExcludeShippingLocationDetailsType;
  FExcludeShippingLocationDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ExcludeShippingLocationDetails_Specified(Index: Integer): boolean;
begin
  Result := FExcludeShippingLocationDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FUpdateTime := ATXSDateTime;
  FUpdateTime_Specified := True;
end;

function GeteBayDetailsResponseType.UpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FUpdateTime_Specified;
end;

procedure GeteBayDetailsResponseType.SetRecoupmentPolicyDetails(Index: Integer; const AArray_Of_RecoupmentPolicyDetailsType: Array_Of_RecoupmentPolicyDetailsType);
begin
  FRecoupmentPolicyDetails := AArray_Of_RecoupmentPolicyDetailsType;
  FRecoupmentPolicyDetails_Specified := True;
end;

function GeteBayDetailsResponseType.RecoupmentPolicyDetails_Specified(Index: Integer): boolean;
begin
  Result := FRecoupmentPolicyDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetShippingCategoryDetails(Index: Integer; const AArray_Of_ShippingCategoryDetailsType: Array_Of_ShippingCategoryDetailsType);
begin
  FShippingCategoryDetails := AArray_Of_ShippingCategoryDetailsType;
  FShippingCategoryDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ShippingCategoryDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingCategoryDetails_Specified;
end;

procedure GeteBayDetailsResponseType.SetProductDetails(Index: Integer; const AProductDetailsType: ProductDetailsType);
begin
  FProductDetails := AProductDetailsType;
  FProductDetails_Specified := True;
end;

function GeteBayDetailsResponseType.ProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FProductDetails_Specified;
end;

constructor RelistItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure RelistItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function RelistItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RelistItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function RelistItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure RelistItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function RelistItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure RelistItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function RelistItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure RelistItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function RelistItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure RelistItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function RelistItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure RelistItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function RelistItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure RelistItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function RelistItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure RelistItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function RelistItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor RelistFixedPriceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistFixedPriceItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure RelistFixedPriceItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function RelistFixedPriceItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function RelistFixedPriceItemResponseType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function RelistFixedPriceItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function RelistFixedPriceItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function RelistFixedPriceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function RelistFixedPriceItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function RelistFixedPriceItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function RelistFixedPriceItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function RelistFixedPriceItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure RelistFixedPriceItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function RelistFixedPriceItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor RemoveFromWatchListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure RemoveFromWatchListResponseType.SetWatchListCount(Index: Integer; const AInteger: Integer);
begin
  FWatchListCount := AInteger;
  FWatchListCount_Specified := True;
end;

function RemoveFromWatchListResponseType.WatchListCount_Specified(Index: Integer): boolean;
begin
  Result := FWatchListCount_Specified;
end;

procedure RemoveFromWatchListResponseType.SetWatchListMaximum(Index: Integer; const AInteger: Integer);
begin
  FWatchListMaximum := AInteger;
  FWatchListMaximum_Specified := True;
end;

function RemoveFromWatchListResponseType.WatchListMaximum_Specified(Index: Integer): boolean;
begin
  Result := FWatchListMaximum_Specified;
end;

constructor RespondToFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor LeaveFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure LeaveFeedbackResponseType.SetFeedbackID(Index: Integer; const Astring: string);
begin
  FFeedbackID := Astring;
  FFeedbackID_Specified := True;
end;

function LeaveFeedbackResponseType.FeedbackID_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackID_Specified;
end;

constructor GeteBayOfficialTimeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor PlaceOfferResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor PlaceOfferResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingStatus);
  SysUtils.FreeAndNil(FBestOffer);
  inherited Destroy;
end;

procedure PlaceOfferResponseType.SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
begin
  FSellingStatus := ASellingStatusType;
  FSellingStatus_Specified := True;
end;

function PlaceOfferResponseType.SellingStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellingStatus_Specified;
end;

procedure PlaceOfferResponseType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function PlaceOfferResponseType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure PlaceOfferResponseType.SetBestOffer(Index: Integer; const ABestOfferType: BestOfferType);
begin
  FBestOffer := ABestOfferType;
  FBestOffer_Specified := True;
end;

function PlaceOfferResponseType.BestOffer_Specified(Index: Integer): boolean;
begin
  Result := FBestOffer_Specified;
end;

procedure PlaceOfferResponseType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function PlaceOfferResponseType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor MoveSellingManagerInventoryFolderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetTokenStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetTokenStatusResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FTokenStatus);
  inherited Destroy;
end;

procedure GetTokenStatusResponseType.SetTokenStatus(Index: Integer; const ATokenStatusType: TokenStatusType);
begin
  FTokenStatus := ATokenStatusType;
  FTokenStatus_Specified := True;
end;

function GetTokenStatusResponseType.TokenStatus_Specified(Index: Integer): boolean;
begin
  Result := FTokenStatus_Specified;
end;

constructor GetTaxTableResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetTaxTableResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTaxTable)-1 do
    SysUtils.FreeAndNil(FTaxTable[I]);
  System.SetLength(FTaxTable, 0);
  SysUtils.FreeAndNil(FLastUpdateTime);
  inherited Destroy;
end;

procedure GetTaxTableResponseType.SetLastUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastUpdateTime := ATXSDateTime;
  FLastUpdateTime_Specified := True;
end;

function GetTaxTableResponseType.LastUpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FLastUpdateTime_Specified;
end;

procedure GetTaxTableResponseType.SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
begin
  FTaxTable := ATaxTableType;
  FTaxTable_Specified := True;
end;

function GetTaxTableResponseType.TaxTable_Specified(Index: Integer): boolean;
begin
  Result := FTaxTable_Specified;
end;

constructor GetUserResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FUser);
  inherited Destroy;
end;

procedure GetUserResponseType.SetUser(Index: Integer; const AUserType: UserType);
begin
  FUser := AUserType;
  FUser_Specified := True;
end;

function GetUserResponseType.User_Specified(Index: Integer): boolean;
begin
  Result := FUser_Specified;
end;

constructor GetUserContactDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserContactDetailsResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FContactAddress);
  SysUtils.FreeAndNil(FRegistrationDate);
  inherited Destroy;
end;

procedure GetUserContactDetailsResponseType.SetUserID(Index: Integer; const Astring: string);
begin
  FUserID := Astring;
  FUserID_Specified := True;
end;

function GetUserContactDetailsResponseType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetUserContactDetailsResponseType.SetContactAddress(Index: Integer; const AAddressType: AddressType);
begin
  FContactAddress := AAddressType;
  FContactAddress_Specified := True;
end;

function GetUserContactDetailsResponseType.ContactAddress_Specified(Index: Integer): boolean;
begin
  Result := FContactAddress_Specified;
end;

procedure GetUserContactDetailsResponseType.SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRegistrationDate := ATXSDateTime;
  FRegistrationDate_Specified := True;
end;

function GetUserContactDetailsResponseType.RegistrationDate_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationDate_Specified;
end;

constructor GetStoreOptionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreOptionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FLogoArray)-1 do
    SysUtils.FreeAndNil(FLogoArray[I]);
  System.SetLength(FLogoArray, 0);
  for I := 0 to System.Length(FSubscriptionArray)-1 do
    SysUtils.FreeAndNil(FSubscriptionArray[I]);
  System.SetLength(FSubscriptionArray, 0);
  SysUtils.FreeAndNil(FBasicThemeArray);
  SysUtils.FreeAndNil(FAdvancedThemeArray);
  inherited Destroy;
end;

procedure GetStoreOptionsResponseType.SetBasicThemeArray(Index: Integer; const AStoreThemeArrayType: StoreThemeArrayType);
begin
  FBasicThemeArray := AStoreThemeArrayType;
  FBasicThemeArray_Specified := True;
end;

function GetStoreOptionsResponseType.BasicThemeArray_Specified(Index: Integer): boolean;
begin
  Result := FBasicThemeArray_Specified;
end;

procedure GetStoreOptionsResponseType.SetAdvancedThemeArray(Index: Integer; const AStoreThemeArrayType: StoreThemeArrayType);
begin
  FAdvancedThemeArray := AStoreThemeArrayType;
  FAdvancedThemeArray_Specified := True;
end;

function GetStoreOptionsResponseType.AdvancedThemeArray_Specified(Index: Integer): boolean;
begin
  Result := FAdvancedThemeArray_Specified;
end;

procedure GetStoreOptionsResponseType.SetLogoArray(Index: Integer; const AStoreLogoArrayType: StoreLogoArrayType);
begin
  FLogoArray := AStoreLogoArrayType;
  FLogoArray_Specified := True;
end;

function GetStoreOptionsResponseType.LogoArray_Specified(Index: Integer): boolean;
begin
  Result := FLogoArray_Specified;
end;

procedure GetStoreOptionsResponseType.SetSubscriptionArray(Index: Integer; const AStoreSubscriptionArrayType: StoreSubscriptionArrayType);
begin
  FSubscriptionArray := AStoreSubscriptionArrayType;
  FSubscriptionArray_Specified := True;
end;

function GetStoreOptionsResponseType.SubscriptionArray_Specified(Index: Integer): boolean;
begin
  Result := FSubscriptionArray_Specified;
end;

procedure GetStoreOptionsResponseType.SetMaxCategories(Index: Integer; const AInteger: Integer);
begin
  FMaxCategories := AInteger;
  FMaxCategories_Specified := True;
end;

function GetStoreOptionsResponseType.MaxCategories_Specified(Index: Integer): boolean;
begin
  Result := FMaxCategories_Specified;
end;

procedure GetStoreOptionsResponseType.SetMaxCategoryLevels(Index: Integer; const AInteger: Integer);
begin
  FMaxCategoryLevels := AInteger;
  FMaxCategoryLevels_Specified := True;
end;

function GetStoreOptionsResponseType.MaxCategoryLevels_Specified(Index: Integer): boolean;
begin
  Result := FMaxCategoryLevels_Specified;
end;

constructor GetSuggestedCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSuggestedCategoriesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSuggestedCategoryArray)-1 do
    SysUtils.FreeAndNil(FSuggestedCategoryArray[I]);
  System.SetLength(FSuggestedCategoryArray, 0);
  inherited Destroy;
end;

procedure GetSuggestedCategoriesResponseType.SetSuggestedCategoryArray(Index: Integer; const ASuggestedCategoryArrayType: SuggestedCategoryArrayType);
begin
  FSuggestedCategoryArray := ASuggestedCategoryArrayType;
  FSuggestedCategoryArray_Specified := True;
end;

function GetSuggestedCategoriesResponseType.SuggestedCategoryArray_Specified(Index: Integer): boolean;
begin
  Result := FSuggestedCategoryArray_Specified;
end;

procedure GetSuggestedCategoriesResponseType.SetCategoryCount(Index: Integer; const AInteger: Integer);
begin
  FCategoryCount := AInteger;
  FCategoryCount_Specified := True;
end;

function GetSuggestedCategoriesResponseType.CategoryCount_Specified(Index: Integer): boolean;
begin
  Result := FCategoryCount_Specified;
end;

constructor GetStorePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStorePreferencesResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FStorePreferences);
  inherited Destroy;
end;

procedure GetStorePreferencesResponseType.SetStorePreferences(Index: Integer; const AStorePreferencesType: StorePreferencesType);
begin
  FStorePreferences := AStorePreferencesType;
  FStorePreferences_Specified := True;
end;

function GetStorePreferencesResponseType.StorePreferences_Specified(Index: Integer): boolean;
begin
  Result := FStorePreferences_Specified;
end;

constructor GetVeROReasonCodeDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReasonCodeDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVeROReasonCodeDetails)-1 do
    SysUtils.FreeAndNil(FVeROReasonCodeDetails[I]);
  System.SetLength(FVeROReasonCodeDetails, 0);
  inherited Destroy;
end;

procedure GetVeROReasonCodeDetailsResponseType.SetVeROReasonCodeDetails(Index: Integer; const AVeROReasonCodeDetailsType: VeROReasonCodeDetailsType);
begin
  FVeROReasonCodeDetails := AVeROReasonCodeDetailsType;
  FVeROReasonCodeDetails_Specified := True;
end;

function GetVeROReasonCodeDetailsResponseType.VeROReasonCodeDetails_Specified(Index: Integer): boolean;
begin
  Result := FVeROReasonCodeDetails_Specified;
end;

constructor GetVeROReportStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReportStatusResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FReportedItemDetails)-1 do
    SysUtils.FreeAndNil(FReportedItemDetails[I]);
  System.SetLength(FReportedItemDetails, 0);
  SysUtils.FreeAndNil(FPaginationResult);
  inherited Destroy;
end;

procedure GetVeROReportStatusResponseType.SetPaginationResult(Index: Integer; const APaginationResultType: PaginationResultType);
begin
  FPaginationResult := APaginationResultType;
  FPaginationResult_Specified := True;
end;

function GetVeROReportStatusResponseType.PaginationResult_Specified(Index: Integer): boolean;
begin
  Result := FPaginationResult_Specified;
end;

procedure GetVeROReportStatusResponseType.SetHasMoreItems(Index: Integer; const ABoolean: Boolean);
begin
  FHasMoreItems := ABoolean;
  FHasMoreItems_Specified := True;
end;

function GetVeROReportStatusResponseType.HasMoreItems_Specified(Index: Integer): boolean;
begin
  Result := FHasMoreItems_Specified;
end;

procedure GetVeROReportStatusResponseType.SetItemsPerPage(Index: Integer; const AInteger: Integer);
begin
  FItemsPerPage := AInteger;
  FItemsPerPage_Specified := True;
end;

function GetVeROReportStatusResponseType.ItemsPerPage_Specified(Index: Integer): boolean;
begin
  Result := FItemsPerPage_Specified;
end;

procedure GetVeROReportStatusResponseType.SetPageNumber(Index: Integer; const AInteger: Integer);
begin
  FPageNumber := AInteger;
  FPageNumber_Specified := True;
end;

function GetVeROReportStatusResponseType.PageNumber_Specified(Index: Integer): boolean;
begin
  Result := FPageNumber_Specified;
end;

procedure GetVeROReportStatusResponseType.SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
begin
  FVeROReportPacketID := AInt64;
  FVeROReportPacketID_Specified := True;
end;

function GetVeROReportStatusResponseType.VeROReportPacketID_Specified(Index: Integer): boolean;
begin
  Result := FVeROReportPacketID_Specified;
end;

procedure GetVeROReportStatusResponseType.SetVeROReportPacketStatus(Index: Integer; const AVeROReportPacketStatusCodeType: VeROReportPacketStatusCodeType);
begin
  FVeROReportPacketStatus := AVeROReportPacketStatusCodeType;
  FVeROReportPacketStatus_Specified := True;
end;

function GetVeROReportStatusResponseType.VeROReportPacketStatus_Specified(Index: Integer): boolean;
begin
  Result := FVeROReportPacketStatus_Specified;
end;

procedure GetVeROReportStatusResponseType.SetReportedItemDetails(Index: Integer; const AVeROReportedItemDetailsType: VeROReportedItemDetailsType);
begin
  FReportedItemDetails := AVeROReportedItemDetailsType;
  FReportedItemDetails_Specified := True;
end;

function GetVeROReportStatusResponseType.ReportedItemDetails_Specified(Index: Integer): boolean;
begin
  Result := FReportedItemDetails_Specified;
end;

constructor GetUserPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserPreferencesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FeBayPLUSPreference)-1 do
    SysUtils.FreeAndNil(FeBayPLUSPreference[I]);
  System.SetLength(FeBayPLUSPreference, 0);
  SysUtils.FreeAndNil(FBidderNoticePreferences);
  SysUtils.FreeAndNil(FCombinedPaymentPreferences);
  SysUtils.FreeAndNil(FCrossPromotionPreferences);
  SysUtils.FreeAndNil(FSellerPaymentPreferences);
  SysUtils.FreeAndNil(FSellerFavoriteItemPreferences);
  SysUtils.FreeAndNil(FEndOfAuctionEmailPreferences);
  SysUtils.FreeAndNil(FProStoresPreference);
  SysUtils.FreeAndNil(FUnpaidItemAssistancePreferences);
  SysUtils.FreeAndNil(FPurchaseReminderEmailPreferences);
  SysUtils.FreeAndNil(FSellerProfilePreferences);
  SysUtils.FreeAndNil(FSellerReturnPreferences);
  SysUtils.FreeAndNil(FDispatchCutoffTimePreference);
  inherited Destroy;
end;

procedure GetUserPreferencesResponseType.SetBidderNoticePreferences(Index: Integer; const ABidderNoticePreferencesType: BidderNoticePreferencesType);
begin
  FBidderNoticePreferences := ABidderNoticePreferencesType;
  FBidderNoticePreferences_Specified := True;
end;

function GetUserPreferencesResponseType.BidderNoticePreferences_Specified(Index: Integer): boolean;
begin
  Result := FBidderNoticePreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetCombinedPaymentPreferences(Index: Integer; const ACombinedPaymentPreferencesType: CombinedPaymentPreferencesType);
begin
  FCombinedPaymentPreferences := ACombinedPaymentPreferencesType;
  FCombinedPaymentPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.CombinedPaymentPreferences_Specified(Index: Integer): boolean;
begin
  Result := FCombinedPaymentPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetCrossPromotionPreferences(Index: Integer; const ACrossPromotionPreferencesType: CrossPromotionPreferencesType);
begin
  FCrossPromotionPreferences := ACrossPromotionPreferencesType;
  FCrossPromotionPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.CrossPromotionPreferences_Specified(Index: Integer): boolean;
begin
  Result := FCrossPromotionPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerPaymentPreferences(Index: Integer; const ASellerPaymentPreferencesType: SellerPaymentPreferencesType);
begin
  FSellerPaymentPreferences := ASellerPaymentPreferencesType;
  FSellerPaymentPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.SellerPaymentPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerFavoriteItemPreferences(Index: Integer; const ASellerFavoriteItemPreferencesType: SellerFavoriteItemPreferencesType);
begin
  FSellerFavoriteItemPreferences := ASellerFavoriteItemPreferencesType;
  FSellerFavoriteItemPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.SellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerFavoriteItemPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetEndOfAuctionEmailPreferences(Index: Integer; const AEndOfAuctionEmailPreferencesType: EndOfAuctionEmailPreferencesType);
begin
  FEndOfAuctionEmailPreferences := AEndOfAuctionEmailPreferencesType;
  FEndOfAuctionEmailPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.EndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FEndOfAuctionEmailPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FEmailShipmentTrackingNumberPreference := ABoolean;
  FEmailShipmentTrackingNumberPreference_Specified := True;
end;

function GetUserPreferencesResponseType.EmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FEmailShipmentTrackingNumberPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FRequiredShipPhoneNumberPreference := ABoolean;
  FRequiredShipPhoneNumberPreference_Specified := True;
end;

function GetUserPreferencesResponseType.RequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FRequiredShipPhoneNumberPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetProStoresPreference(Index: Integer; const AProStoresCheckoutPreferenceType: ProStoresCheckoutPreferenceType);
begin
  FProStoresPreference := AProStoresCheckoutPreferenceType;
  FProStoresPreference_Specified := True;
end;

function GetUserPreferencesResponseType.ProStoresPreference_Specified(Index: Integer): boolean;
begin
  Result := FProStoresPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetUnpaidItemAssistancePreferences(Index: Integer; const AUnpaidItemAssistancePreferencesType: UnpaidItemAssistancePreferencesType);
begin
  FUnpaidItemAssistancePreferences := AUnpaidItemAssistancePreferencesType;
  FUnpaidItemAssistancePreferences_Specified := True;
end;

function GetUserPreferencesResponseType.UnpaidItemAssistancePreferences_Specified(Index: Integer): boolean;
begin
  Result := FUnpaidItemAssistancePreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerExcludeShipToLocationPreferences(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSellerExcludeShipToLocationPreferences := ASellerExcludeShipToLocationPreferencesType;
  FSellerExcludeShipToLocationPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.SellerExcludeShipToLocationPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerExcludeShipToLocationPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetPurchaseReminderEmailPreferences(Index: Integer; const APurchaseReminderEmailPreferencesType: PurchaseReminderEmailPreferencesType);
begin
  FPurchaseReminderEmailPreferences := APurchaseReminderEmailPreferencesType;
  FPurchaseReminderEmailPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FPurchaseReminderEmailPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerThirdPartyCheckoutDisabled(Index: Integer; const ABoolean: Boolean);
begin
  FSellerThirdPartyCheckoutDisabled := ABoolean;
  FSellerThirdPartyCheckoutDisabled_Specified := True;
end;

function GetUserPreferencesResponseType.SellerThirdPartyCheckoutDisabled_Specified(Index: Integer): boolean;
begin
  Result := FSellerThirdPartyCheckoutDisabled_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerProfilePreferences(Index: Integer; const ASellerProfilePreferencesType: SellerProfilePreferencesType);
begin
  FSellerProfilePreferences := ASellerProfilePreferencesType;
  FSellerProfilePreferences_Specified := True;
end;

function GetUserPreferencesResponseType.SellerProfilePreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerProfilePreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetSellerReturnPreferences(Index: Integer; const ASellerReturnPreferencesType: SellerReturnPreferencesType);
begin
  FSellerReturnPreferences := ASellerReturnPreferencesType;
  FSellerReturnPreferences_Specified := True;
end;

function GetUserPreferencesResponseType.SellerReturnPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerReturnPreferences_Specified;
end;

procedure GetUserPreferencesResponseType.SetOfferGlobalShippingProgramPreference(Index: Integer; const ABoolean: Boolean);
begin
  FOfferGlobalShippingProgramPreference := ABoolean;
  FOfferGlobalShippingProgramPreference_Specified := True;
end;

function GetUserPreferencesResponseType.OfferGlobalShippingProgramPreference_Specified(Index: Integer): boolean;
begin
  Result := FOfferGlobalShippingProgramPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetDispatchCutoffTimePreference(Index: Integer; const ADispatchCutoffTimePreferencesType: DispatchCutoffTimePreferencesType);
begin
  FDispatchCutoffTimePreference := ADispatchCutoffTimePreferencesType;
  FDispatchCutoffTimePreference_Specified := True;
end;

function GetUserPreferencesResponseType.DispatchCutoffTimePreference_Specified(Index: Integer): boolean;
begin
  Result := FDispatchCutoffTimePreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
begin
  FGlobalShippingProgramListingPreference := ABoolean;
  FGlobalShippingProgramListingPreference_Specified := True;
end;

function GetUserPreferencesResponseType.GlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShippingProgramListingPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetOverrideGSPServiceWithIntlServicePreference(Index: Integer; const ABoolean: Boolean);
begin
  FOverrideGSPServiceWithIntlServicePreference := ABoolean;
  FOverrideGSPServiceWithIntlServicePreference_Specified := True;
end;

function GetUserPreferencesResponseType.OverrideGSPServiceWithIntlServicePreference_Specified(Index: Integer): boolean;
begin
  Result := FOverrideGSPServiceWithIntlServicePreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetPickupDropoffSellerPreference(Index: Integer; const ABoolean: Boolean);
begin
  FPickupDropoffSellerPreference := ABoolean;
  FPickupDropoffSellerPreference_Specified := True;
end;

function GetUserPreferencesResponseType.PickupDropoffSellerPreference_Specified(Index: Integer): boolean;
begin
  Result := FPickupDropoffSellerPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SetOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
begin
  FOutOfStockControlPreference := ABoolean;
  FOutOfStockControlPreference_Specified := True;
end;

function GetUserPreferencesResponseType.OutOfStockControlPreference_Specified(Index: Integer): boolean;
begin
  Result := FOutOfStockControlPreference_Specified;
end;

procedure GetUserPreferencesResponseType.SeteBayPLUSPreference(Index: Integer; const AArray_Of_eBayPLUSPreferenceType: Array_Of_eBayPLUSPreferenceType);
begin
  FeBayPLUSPreference := AArray_Of_eBayPLUSPreferenceType;
  FeBayPLUSPreference_Specified := True;
end;

function GetUserPreferencesResponseType.eBayPLUSPreference_Specified(Index: Integer): boolean;
begin
  Result := FeBayPLUSPreference_Specified;
end;

constructor CompleteSaleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ConfirmIdentityResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ConfirmIdentityResponseType.SetUserID(Index: Integer; const Astring: string);
begin
  FUserID := Astring;
  FUserID_Specified := True;
end;

function ConfirmIdentityResponseType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

constructor DeleteMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor DeleteSellingManagerInventoryFolderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddToItemDescriptionResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddSellingManagerProductResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSellingManagerProductResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  inherited Destroy;
end;

procedure AddSellingManagerProductResponseType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function AddSellingManagerProductResponseType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

constructor AddSellingManagerTemplateResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSellingManagerTemplateResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  inherited Destroy;
end;

procedure AddSellingManagerTemplateResponseType.SetCategoryID(Index: Integer; const AInt64: Int64);
begin
  FCategoryID := AInt64;
  FCategoryID_Specified := True;
end;

function AddSellingManagerTemplateResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetCategory2ID(Index: Integer; const AInt64: Int64);
begin
  FCategory2ID := AInt64;
  FCategory2ID_Specified := True;
end;

function AddSellingManagerTemplateResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function AddSellingManagerTemplateResponseType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetSaleTemplateGroupID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateGroupID := AInt64;
  FSaleTemplateGroupID_Specified := True;
end;

function AddSellingManagerTemplateResponseType.SaleTemplateGroupID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateGroupID_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetSaleTemplateName(Index: Integer; const Astring: string);
begin
  FSaleTemplateName := Astring;
  FSaleTemplateName_Specified := True;
end;

function AddSellingManagerTemplateResponseType.SaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateName_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function AddSellingManagerTemplateResponseType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure AddSellingManagerTemplateResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function AddSellingManagerTemplateResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor AddTransactionConfirmationItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddTransactionConfirmationItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddTransactionConfirmationItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddTransactionConfirmationItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddTransactionConfirmationItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddTransactionConfirmationItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddTransactionConfirmationItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddTransactionConfirmationItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

constructor AddToWatchListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddToWatchListResponseType.SetWatchListCount(Index: Integer; const AInteger: Integer);
begin
  FWatchListCount := AInteger;
  FWatchListCount_Specified := True;
end;

function AddToWatchListResponseType.WatchListCount_Specified(Index: Integer): boolean;
begin
  Result := FWatchListCount_Specified;
end;

procedure AddToWatchListResponseType.SetWatchListMaximum(Index: Integer; const AInteger: Integer);
begin
  FWatchListMaximum := AInteger;
  FWatchListMaximum_Specified := True;
end;

function AddToWatchListResponseType.WatchListMaximum_Specified(Index: Integer): boolean;
begin
  Result := FWatchListMaximum_Specified;
end;

constructor EndItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor EndItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure EndItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function EndItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

constructor EndFixedPriceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor EndFixedPriceItemResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure EndFixedPriceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function EndFixedPriceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure EndFixedPriceItemResponseType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function EndFixedPriceItemResponseType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

constructor EndItemsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor EndItemsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEndItemResponseContainer)-1 do
    SysUtils.FreeAndNil(FEndItemResponseContainer[I]);
  System.SetLength(FEndItemResponseContainer, 0);
  inherited Destroy;
end;

procedure EndItemsResponseType.SetEndItemResponseContainer(Index: Integer; const AArray_Of_EndItemResponseContainerType: Array_Of_EndItemResponseContainerType);
begin
  FEndItemResponseContainer := AArray_Of_EndItemResponseContainerType;
  FEndItemResponseContainer_Specified := True;
end;

function EndItemsResponseType.EndItemResponseContainer_Specified(Index: Integer): boolean;
begin
  Result := FEndItemResponseContainer_Specified;
end;

constructor ExtendSiteHostedPicturesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ExtendSiteHostedPicturesResponseType.SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FPictureURL := AArray_Of_anyURI;
  FPictureURL_Specified := True;
end;

function ExtendSiteHostedPicturesResponseType.PictureURL_Specified(Index: Integer): boolean;
begin
  Result := FPictureURL_Specified;
end;

constructor FetchTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor FetchTokenResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FHardExpirationTime);
  inherited Destroy;
end;

procedure FetchTokenResponseType.SeteBayAuthToken(Index: Integer; const Astring: string);
begin
  FeBayAuthToken := Astring;
  FeBayAuthToken_Specified := True;
end;

function FetchTokenResponseType.eBayAuthToken_Specified(Index: Integer): boolean;
begin
  Result := FeBayAuthToken_Specified;
end;

procedure FetchTokenResponseType.SetHardExpirationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FHardExpirationTime := ATXSDateTime;
  FHardExpirationTime_Specified := True;
end;

function FetchTokenResponseType.HardExpirationTime_Specified(Index: Integer): boolean;
begin
  Result := FHardExpirationTime_Specified;
end;

procedure FetchTokenResponseType.SetRESTToken(Index: Integer; const Astring: string);
begin
  FRESTToken := Astring;
  FRESTToken_Specified := True;
end;

function FetchTokenResponseType.RESTToken_Specified(Index: Integer): boolean;
begin
  Result := FRESTToken_Specified;
end;

constructor DeleteSellingManagerProductResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor DeleteSellingManagerProductResponseType.Destroy;
begin
  SysUtils.FreeAndNil(FDeletedSellingManagerProductDetails);
  inherited Destroy;
end;

procedure DeleteSellingManagerProductResponseType.SetDeletedSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FDeletedSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FDeletedSellingManagerProductDetails_Specified := True;
end;

function DeleteSellingManagerProductResponseType.DeletedSellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FDeletedSellingManagerProductDetails_Specified;
end;

constructor DeleteSellingManagerItemAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor DeleteSellingManagerItemAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure DeleteSellingManagerItemAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure DeleteSellingManagerItemAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure DeleteSellingManagerItemAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure DeleteSellingManagerItemAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor DisableUnpaidItemAssistanceResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor DeleteSellingManagerTemplateResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerTemplateResponseType.SetDeletedSaleTemplateID(Index: Integer; const Astring: string);
begin
  FDeletedSaleTemplateID := Astring;
  FDeletedSaleTemplateID_Specified := True;
end;

function DeleteSellingManagerTemplateResponseType.DeletedSaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FDeletedSaleTemplateID_Specified;
end;

procedure DeleteSellingManagerTemplateResponseType.SetDeletedSaleTemplateName(Index: Integer; const Astring: string);
begin
  FDeletedSaleTemplateName := Astring;
  FDeletedSaleTemplateName_Specified := True;
end;

function DeleteSellingManagerTemplateResponseType.DeletedSaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FDeletedSaleTemplateName_Specified;
end;

constructor DeleteSellingManagerTemplateAutomationRuleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor DeleteSellingManagerTemplateAutomationRuleResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure DeleteSellingManagerTemplateAutomationRuleResponseType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleResponseType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleResponseType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleResponseType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleResponseType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleResponseType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

constructor AddFixedPriceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddFixedPriceItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddFixedPriceItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddFixedPriceItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddFixedPriceItemResponseType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function AddFixedPriceItemResponseType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure AddFixedPriceItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddFixedPriceItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddFixedPriceItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddFixedPriceItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure AddFixedPriceItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function AddFixedPriceItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure AddFixedPriceItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function AddFixedPriceItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure AddFixedPriceItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function AddFixedPriceItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure AddFixedPriceItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function AddFixedPriceItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure AddFixedPriceItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function AddFixedPriceItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure AddFixedPriceItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function AddFixedPriceItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor AddItemFromSellingManagerTemplateResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemFromSellingManagerTemplateResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure AddItemFromSellingManagerTemplateResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function AddItemFromSellingManagerTemplateResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

constructor AddItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FFees)-1 do
    SysUtils.FreeAndNil(FFees[I]);
  System.SetLength(FFees, 0);
  for I := 0 to System.Length(FProductSuggestions)-1 do
    SysUtils.FreeAndNil(FProductSuggestions[I]);
  System.SetLength(FProductSuggestions, 0);
  for I := 0 to System.Length(FListingRecommendations)-1 do
    SysUtils.FreeAndNil(FListingRecommendations[I]);
  System.SetLength(FListingRecommendations, 0);
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure AddItemResponseType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddItemResponseType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddItemResponseType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function AddItemResponseType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure AddItemResponseType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function AddItemResponseType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure AddItemResponseType.SetFees(Index: Integer; const AFeesType: FeesType);
begin
  FFees := AFeesType;
  FFees_Specified := True;
end;

function AddItemResponseType.Fees_Specified(Index: Integer): boolean;
begin
  Result := FFees_Specified;
end;

procedure AddItemResponseType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function AddItemResponseType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure AddItemResponseType.SetCategory2ID(Index: Integer; const Astring: string);
begin
  FCategory2ID := Astring;
  FCategory2ID_Specified := True;
end;

function AddItemResponseType.Category2ID_Specified(Index: Integer): boolean;
begin
  Result := FCategory2ID_Specified;
end;

procedure AddItemResponseType.SetDiscountReason(Index: Integer; const AArray_Of_DiscountReasonCodeType: Array_Of_DiscountReasonCodeType);
begin
  FDiscountReason := AArray_Of_DiscountReasonCodeType;
  FDiscountReason_Specified := True;
end;

function AddItemResponseType.DiscountReason_Specified(Index: Integer): boolean;
begin
  Result := FDiscountReason_Specified;
end;

procedure AddItemResponseType.SetProductSuggestions(Index: Integer; const AProductSuggestionsType: ProductSuggestionsType);
begin
  FProductSuggestions := AProductSuggestionsType;
  FProductSuggestions_Specified := True;
end;

function AddItemResponseType.ProductSuggestions_Specified(Index: Integer): boolean;
begin
  Result := FProductSuggestions_Specified;
end;

procedure AddItemResponseType.SetListingRecommendations(Index: Integer; const AListingRecommendationsType: ListingRecommendationsType);
begin
  FListingRecommendations := AListingRecommendationsType;
  FListingRecommendations_Specified := True;
end;

function AddItemResponseType.ListingRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FListingRecommendations_Specified;
end;

constructor AddDisputeResponseResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ErrorType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FErrorParameters)-1 do
    SysUtils.FreeAndNil(FErrorParameters[I]);
  System.SetLength(FErrorParameters, 0);
  inherited Destroy;
end;

procedure ErrorType.SetShortMessage(Index: Integer; const Astring: string);
begin
  FShortMessage := Astring;
  FShortMessage_Specified := True;
end;

function ErrorType.ShortMessage_Specified(Index: Integer): boolean;
begin
  Result := FShortMessage_Specified;
end;

procedure ErrorType.SetLongMessage(Index: Integer; const Astring: string);
begin
  FLongMessage := Astring;
  FLongMessage_Specified := True;
end;

function ErrorType.LongMessage_Specified(Index: Integer): boolean;
begin
  Result := FLongMessage_Specified;
end;

procedure ErrorType.SetErrorCode(Index: Integer; const Astring: string);
begin
  FErrorCode := Astring;
  FErrorCode_Specified := True;
end;

function ErrorType.ErrorCode_Specified(Index: Integer): boolean;
begin
  Result := FErrorCode_Specified;
end;

procedure ErrorType.SetUserDisplayHint(Index: Integer; const ABoolean: Boolean);
begin
  FUserDisplayHint := ABoolean;
  FUserDisplayHint_Specified := True;
end;

function ErrorType.UserDisplayHint_Specified(Index: Integer): boolean;
begin
  Result := FUserDisplayHint_Specified;
end;

procedure ErrorType.SetSeverityCode(Index: Integer; const ASeverityCodeType: SeverityCodeType);
begin
  FSeverityCode := ASeverityCodeType;
  FSeverityCode_Specified := True;
end;

function ErrorType.SeverityCode_Specified(Index: Integer): boolean;
begin
  Result := FSeverityCode_Specified;
end;

procedure ErrorType.SetErrorParameters(Index: Integer; const AArray_Of_ErrorParameterType: Array_Of_ErrorParameterType);
begin
  FErrorParameters := AArray_Of_ErrorParameterType;
  FErrorParameters_Specified := True;
end;

function ErrorType.ErrorParameters_Specified(Index: Integer): boolean;
begin
  Result := FErrorParameters_Specified;
end;

procedure ErrorType.SetErrorClassification(Index: Integer; const AErrorClassificationCodeType: ErrorClassificationCodeType);
begin
  FErrorClassification := AErrorClassificationCodeType;
  FErrorClassification_Specified := True;
end;

function ErrorType.ErrorClassification_Specified(Index: Integer): boolean;
begin
  Result := FErrorClassification_Specified;
end;

procedure DuplicateInvocationDetailsType.SetDuplicateInvocationID(Index: Integer; const AUUIDType: UUIDType);
begin
  FDuplicateInvocationID := AUUIDType;
  FDuplicateInvocationID_Specified := True;
end;

function DuplicateInvocationDetailsType.DuplicateInvocationID_Specified(Index: Integer): boolean;
begin
  Result := FDuplicateInvocationID_Specified;
end;

procedure DuplicateInvocationDetailsType.SetStatus(Index: Integer; const AInvocationStatusType: InvocationStatusType);
begin
  FStatus := AInvocationStatusType;
  FStatus_Specified := True;
end;

function DuplicateInvocationDetailsType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure DuplicateInvocationDetailsType.SetInvocationTrackingID(Index: Integer; const Astring: string);
begin
  FInvocationTrackingID := Astring;
  FInvocationTrackingID_Specified := True;
end;

function DuplicateInvocationDetailsType.InvocationTrackingID_Specified(Index: Integer): boolean;
begin
  Result := FInvocationTrackingID_Specified;
end;

destructor AbstractRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FBotBlock);
  inherited Destroy;
end;

procedure AbstractRequestType.SetDetailLevel(Index: Integer; const AArray_Of_DetailLevelCodeType: Array_Of_DetailLevelCodeType);
begin
  FDetailLevel := AArray_Of_DetailLevelCodeType;
  FDetailLevel_Specified := True;
end;

function AbstractRequestType.DetailLevel_Specified(Index: Integer): boolean;
begin
  Result := FDetailLevel_Specified;
end;

procedure AbstractRequestType.SetErrorLanguage(Index: Integer; const Astring: string);
begin
  FErrorLanguage := Astring;
  FErrorLanguage_Specified := True;
end;

function AbstractRequestType.ErrorLanguage_Specified(Index: Integer): boolean;
begin
  Result := FErrorLanguage_Specified;
end;

procedure AbstractRequestType.SetMessageID(Index: Integer; const Astring: string);
begin
  FMessageID := Astring;
  FMessageID_Specified := True;
end;

function AbstractRequestType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

procedure AbstractRequestType.SetVersion(Index: Integer; const Astring: string);
begin
  FVersion := Astring;
  FVersion_Specified := True;
end;

function AbstractRequestType.Version_Specified(Index: Integer): boolean;
begin
  Result := FVersion_Specified;
end;

procedure AbstractRequestType.SetEndUserIP(Index: Integer; const Astring: string);
begin
  FEndUserIP := Astring;
  FEndUserIP_Specified := True;
end;

function AbstractRequestType.EndUserIP_Specified(Index: Integer): boolean;
begin
  Result := FEndUserIP_Specified;
end;

procedure AbstractRequestType.SetErrorHandling(Index: Integer; const AErrorHandlingCodeType: ErrorHandlingCodeType);
begin
  FErrorHandling := AErrorHandlingCodeType;
  FErrorHandling_Specified := True;
end;

function AbstractRequestType.ErrorHandling_Specified(Index: Integer): boolean;
begin
  Result := FErrorHandling_Specified;
end;

procedure AbstractRequestType.SetInvocationID(Index: Integer; const AUUIDType: UUIDType);
begin
  FInvocationID := AUUIDType;
  FInvocationID_Specified := True;
end;

function AbstractRequestType.InvocationID_Specified(Index: Integer): boolean;
begin
  Result := FInvocationID_Specified;
end;

procedure AbstractRequestType.SetOutputSelector(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FOutputSelector := ASellerExcludeShipToLocationPreferencesType;
  FOutputSelector_Specified := True;
end;

function AbstractRequestType.OutputSelector_Specified(Index: Integer): boolean;
begin
  Result := FOutputSelector_Specified;
end;

procedure AbstractRequestType.SetWarningLevel(Index: Integer; const AWarningLevelCodeType: WarningLevelCodeType);
begin
  FWarningLevel := AWarningLevelCodeType;
  FWarningLevel_Specified := True;
end;

function AbstractRequestType.WarningLevel_Specified(Index: Integer): boolean;
begin
  Result := FWarningLevel_Specified;
end;

procedure AbstractRequestType.SetBotBlock(Index: Integer; const ABotBlockRequestType: BotBlockRequestType);
begin
  FBotBlock := ABotBlockRequestType;
  FBotBlock_Specified := True;
end;

function AbstractRequestType.BotBlock_Specified(Index: Integer): boolean;
begin
  Result := FBotBlock_Specified;
end;

constructor SellerReverseDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SellerReverseDisputeRequestType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function SellerReverseDisputeRequestType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

procedure SellerReverseDisputeRequestType.SetDisputeResolutionReason(Index: Integer; const ADisputeResolutionReasonCodeType: DisputeResolutionReasonCodeType);
begin
  FDisputeResolutionReason := ADisputeResolutionReasonCodeType;
  FDisputeResolutionReason_Specified := True;
end;

function SellerReverseDisputeRequestType.DisputeResolutionReason_Specified(Index: Integer): boolean;
begin
  Result := FDisputeResolutionReason_Specified;
end;

constructor SendInvoiceRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SendInvoiceRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FInternationalShippingServiceOptions)-1 do
    SysUtils.FreeAndNil(FInternationalShippingServiceOptions[I]);
  System.SetLength(FInternationalShippingServiceOptions, 0);
  for I := 0 to System.Length(FShippingServiceOptions)-1 do
    SysUtils.FreeAndNil(FShippingServiceOptions[I]);
  System.SetLength(FShippingServiceOptions, 0);
  SysUtils.FreeAndNil(FSalesTax);
  SysUtils.FreeAndNil(FInsuranceFee);
  SysUtils.FreeAndNil(FCODCost);
  SysUtils.FreeAndNil(FAdjustmentAmount);
  inherited Destroy;
end;

procedure SendInvoiceRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function SendInvoiceRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure SendInvoiceRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function SendInvoiceRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure SendInvoiceRequestType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function SendInvoiceRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure SendInvoiceRequestType.SetInternationalShippingServiceOptions(Index: Integer; const AArray_Of_InternationalShippingServiceOptionsType: Array_Of_InternationalShippingServiceOptionsType);
begin
  FInternationalShippingServiceOptions := AArray_Of_InternationalShippingServiceOptionsType;
  FInternationalShippingServiceOptions_Specified := True;
end;

function SendInvoiceRequestType.InternationalShippingServiceOptions_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingServiceOptions_Specified;
end;

procedure SendInvoiceRequestType.SetShippingServiceOptions(Index: Integer; const AArray_Of_ShippingServiceOptionsType: Array_Of_ShippingServiceOptionsType);
begin
  FShippingServiceOptions := AArray_Of_ShippingServiceOptionsType;
  FShippingServiceOptions_Specified := True;
end;

function SendInvoiceRequestType.ShippingServiceOptions_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceOptions_Specified;
end;

procedure SendInvoiceRequestType.SetSalesTax(Index: Integer; const ASalesTaxType: SalesTaxType);
begin
  FSalesTax := ASalesTaxType;
  FSalesTax_Specified := True;
end;

function SendInvoiceRequestType.SalesTax_Specified(Index: Integer): boolean;
begin
  Result := FSalesTax_Specified;
end;

procedure SendInvoiceRequestType.SetInsuranceOption(Index: Integer; const AInsuranceOptionCodeType: InsuranceOptionCodeType);
begin
  FInsuranceOption := AInsuranceOptionCodeType;
  FInsuranceOption_Specified := True;
end;

function SendInvoiceRequestType.InsuranceOption_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceOption_Specified;
end;

procedure SendInvoiceRequestType.SetInsuranceFee(Index: Integer; const AAmountType: AmountType);
begin
  FInsuranceFee := AAmountType;
  FInsuranceFee_Specified := True;
end;

function SendInvoiceRequestType.InsuranceFee_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceFee_Specified;
end;

procedure SendInvoiceRequestType.SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
begin
  FPaymentMethods := AArray_Of_BuyerPaymentMethodCodeType;
  FPaymentMethods_Specified := True;
end;

function SendInvoiceRequestType.PaymentMethods_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethods_Specified;
end;

procedure SendInvoiceRequestType.SetPayPalEmailAddress(Index: Integer; const Astring: string);
begin
  FPayPalEmailAddress := Astring;
  FPayPalEmailAddress_Specified := True;
end;

function SendInvoiceRequestType.PayPalEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FPayPalEmailAddress_Specified;
end;

procedure SendInvoiceRequestType.SetCheckoutInstructions(Index: Integer; const Astring: string);
begin
  FCheckoutInstructions := Astring;
  FCheckoutInstructions_Specified := True;
end;

function SendInvoiceRequestType.CheckoutInstructions_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutInstructions_Specified;
end;

procedure SendInvoiceRequestType.SetEmailCopyToSeller(Index: Integer; const ABoolean: Boolean);
begin
  FEmailCopyToSeller := ABoolean;
  FEmailCopyToSeller_Specified := True;
end;

function SendInvoiceRequestType.EmailCopyToSeller_Specified(Index: Integer): boolean;
begin
  Result := FEmailCopyToSeller_Specified;
end;

procedure SendInvoiceRequestType.SetCODCost(Index: Integer; const AAmountType: AmountType);
begin
  FCODCost := AAmountType;
  FCODCost_Specified := True;
end;

function SendInvoiceRequestType.CODCost_Specified(Index: Integer): boolean;
begin
  Result := FCODCost_Specified;
end;

procedure SendInvoiceRequestType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function SendInvoiceRequestType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure SendInvoiceRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function SendInvoiceRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure SendInvoiceRequestType.SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAdjustmentAmount := AAmountType;
  FAdjustmentAmount_Specified := True;
end;

function SendInvoiceRequestType.AdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FAdjustmentAmount_Specified;
end;

constructor ReviseSellingManagerTemplateRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerTemplateRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure ReviseSellingManagerTemplateRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure ReviseSellingManagerTemplateRequestType.SetProductID(Index: Integer; const AInt64: Int64);
begin
  FProductID := AInt64;
  FProductID_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.ProductID_Specified(Index: Integer): boolean;
begin
  Result := FProductID_Specified;
end;

procedure ReviseSellingManagerTemplateRequestType.SetSaleTemplateName(Index: Integer; const Astring: string);
begin
  FSaleTemplateName := Astring;
  FSaleTemplateName_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.SaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateName_Specified;
end;

procedure ReviseSellingManagerTemplateRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure ReviseSellingManagerTemplateRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

procedure ReviseSellingManagerTemplateRequestType.SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
begin
  FVerifyOnly := ABoolean;
  FVerifyOnly_Specified := True;
end;

function ReviseSellingManagerTemplateRequestType.VerifyOnly_Specified(Index: Integer): boolean;
begin
  Result := FVerifyOnly_Specified;
end;

constructor SaveItemToSellingManagerTemplateRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SaveItemToSellingManagerTemplateRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function SaveItemToSellingManagerTemplateRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure SaveItemToSellingManagerTemplateRequestType.SetProductID(Index: Integer; const AInt64: Int64);
begin
  FProductID := AInt64;
  FProductID_Specified := True;
end;

function SaveItemToSellingManagerTemplateRequestType.ProductID_Specified(Index: Integer): boolean;
begin
  Result := FProductID_Specified;
end;

procedure SaveItemToSellingManagerTemplateRequestType.SetTemplateName(Index: Integer; const Astring: string);
begin
  FTemplateName := Astring;
  FTemplateName_Specified := True;
end;

function SaveItemToSellingManagerTemplateRequestType.TemplateName_Specified(Index: Integer): boolean;
begin
  Result := FTemplateName_Specified;
end;

constructor RevokeTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure RevokeTokenRequestType.SetUnsubscribeNotification(Index: Integer; const ABoolean: Boolean);
begin
  FUnsubscribeNotification := ABoolean;
  FUnsubscribeNotification_Specified := True;
end;

function RevokeTokenRequestType.UnsubscribeNotification_Specified(Index: Integer): boolean;
begin
  Result := FUnsubscribeNotification_Specified;
end;

constructor SetPromotionalSaleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetPromotionalSaleRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPromotionalSaleDetails);
  inherited Destroy;
end;

procedure SetPromotionalSaleRequestType.SetAction(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
begin
  FAction := AModifyActionCodeType;
  FAction_Specified := True;
end;

function SetPromotionalSaleRequestType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure SetPromotionalSaleRequestType.SetPromotionalSaleDetails(Index: Integer; const APromotionalSaleType: PromotionalSaleType);
begin
  FPromotionalSaleDetails := APromotionalSaleType;
  FPromotionalSaleDetails_Specified := True;
end;

function SetPromotionalSaleRequestType.PromotionalSaleDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleDetails_Specified;
end;

constructor RemoveFromWatchListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RemoveFromWatchListRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationKey)-1 do
    SysUtils.FreeAndNil(FVariationKey[I]);
  System.SetLength(FVariationKey, 0);
  inherited Destroy;
end;

procedure RemoveFromWatchListRequestType.SetItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FItemID := AItemIDArrayType;
  FItemID_Specified := True;
end;

function RemoveFromWatchListRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RemoveFromWatchListRequestType.SetRemoveAllItems(Index: Integer; const ABoolean: Boolean);
begin
  FRemoveAllItems := ABoolean;
  FRemoveAllItems_Specified := True;
end;

function RemoveFromWatchListRequestType.RemoveAllItems_Specified(Index: Integer): boolean;
begin
  Result := FRemoveAllItems_Specified;
end;

procedure RemoveFromWatchListRequestType.SetVariationKey(Index: Integer; const AArray_Of_VariationKeyType: Array_Of_VariationKeyType);
begin
  FVariationKey := AArray_Of_VariationKeyType;
  FVariationKey_Specified := True;
end;

function RemoveFromWatchListRequestType.VariationKey_Specified(Index: Integer): boolean;
begin
  Result := FVariationKey_Specified;
end;

constructor AddToWatchListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddToWatchListRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationKey)-1 do
    SysUtils.FreeAndNil(FVariationKey[I]);
  System.SetLength(FVariationKey, 0);
  inherited Destroy;
end;

procedure AddToWatchListRequestType.SetItemID(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FItemID := AItemIDArrayType;
  FItemID_Specified := True;
end;

function AddToWatchListRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddToWatchListRequestType.SetVariationKey(Index: Integer; const AArray_Of_VariationKeyType: Array_Of_VariationKeyType);
begin
  FVariationKey := AArray_Of_VariationKeyType;
  FVariationKey_Specified := True;
end;

function AddToWatchListRequestType.VariationKey_Specified(Index: Integer): boolean;
begin
  Result := FVariationKey_Specified;
end;

constructor SetPromotionalSaleListingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SetPromotionalSaleListingsRequestType.SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
begin
  FPromotionalSaleID := AInt64;
  FPromotionalSaleID_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.PromotionalSaleID_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleID_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetAction(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
begin
  FAction := AModifyActionCodeType;
  FAction_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetPromotionalSaleItemIDArray(Index: Integer; const AItemIDArrayType: ItemIDArrayType);
begin
  FPromotionalSaleItemIDArray := AItemIDArrayType;
  FPromotionalSaleItemIDArray_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.PromotionalSaleItemIDArray_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleItemIDArray_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetStoreCategoryID(Index: Integer; const AInt64: Int64);
begin
  FStoreCategoryID := AInt64;
  FStoreCategoryID_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.StoreCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategoryID_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetCategoryID(Index: Integer; const AInt64: Int64);
begin
  FCategoryID := AInt64;
  FCategoryID_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetAllFixedPriceItems(Index: Integer; const ABoolean: Boolean);
begin
  FAllFixedPriceItems := ABoolean;
  FAllFixedPriceItems_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.AllFixedPriceItems_Specified(Index: Integer): boolean;
begin
  Result := FAllFixedPriceItems_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetAllStoreInventoryItems(Index: Integer; const ABoolean: Boolean);
begin
  FAllStoreInventoryItems := ABoolean;
  FAllStoreInventoryItems_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.AllStoreInventoryItems_Specified(Index: Integer): boolean;
begin
  Result := FAllStoreInventoryItems_Specified;
end;

procedure SetPromotionalSaleListingsRequestType.SetAllAuctionItems(Index: Integer; const ABoolean: Boolean);
begin
  FAllAuctionItems := ABoolean;
  FAllAuctionItems_Specified := True;
end;

function SetPromotionalSaleListingsRequestType.AllAuctionItems_Specified(Index: Integer): boolean;
begin
  Result := FAllAuctionItems_Specified;
end;

constructor SetNotificationPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetNotificationPreferencesRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FUserDeliveryPreferenceArray)-1 do
    SysUtils.FreeAndNil(FUserDeliveryPreferenceArray[I]);
  System.SetLength(FUserDeliveryPreferenceArray, 0);
  for I := 0 to System.Length(FEventProperty)-1 do
    SysUtils.FreeAndNil(FEventProperty[I]);
  System.SetLength(FEventProperty, 0);
  SysUtils.FreeAndNil(FApplicationDeliveryPreferences);
  SysUtils.FreeAndNil(FUserData);
  inherited Destroy;
end;

procedure SetNotificationPreferencesRequestType.SetApplicationDeliveryPreferences(Index: Integer; const AApplicationDeliveryPreferencesType: ApplicationDeliveryPreferencesType);
begin
  FApplicationDeliveryPreferences := AApplicationDeliveryPreferencesType;
  FApplicationDeliveryPreferences_Specified := True;
end;

function SetNotificationPreferencesRequestType.ApplicationDeliveryPreferences_Specified(Index: Integer): boolean;
begin
  Result := FApplicationDeliveryPreferences_Specified;
end;

procedure SetNotificationPreferencesRequestType.SetUserDeliveryPreferenceArray(Index: Integer; const ANotificationEnableArrayType: NotificationEnableArrayType);
begin
  FUserDeliveryPreferenceArray := ANotificationEnableArrayType;
  FUserDeliveryPreferenceArray_Specified := True;
end;

function SetNotificationPreferencesRequestType.UserDeliveryPreferenceArray_Specified(Index: Integer): boolean;
begin
  Result := FUserDeliveryPreferenceArray_Specified;
end;

procedure SetNotificationPreferencesRequestType.SetUserData(Index: Integer; const ANotificationUserDataType: NotificationUserDataType);
begin
  FUserData := ANotificationUserDataType;
  FUserData_Specified := True;
end;

function SetNotificationPreferencesRequestType.UserData_Specified(Index: Integer): boolean;
begin
  Result := FUserData_Specified;
end;

procedure SetNotificationPreferencesRequestType.SetEventProperty(Index: Integer; const AArray_Of_NotificationEventPropertyType: Array_Of_NotificationEventPropertyType);
begin
  FEventProperty := AArray_Of_NotificationEventPropertyType;
  FEventProperty_Specified := True;
end;

function SetNotificationPreferencesRequestType.EventProperty_Specified(Index: Integer): boolean;
begin
  Result := FEventProperty_Specified;
end;

procedure SetNotificationPreferencesRequestType.SetDeliveryURLName(Index: Integer; const Astring: string);
begin
  FDeliveryURLName := Astring;
  FDeliveryURLName_Specified := True;
end;

function SetNotificationPreferencesRequestType.DeliveryURLName_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURLName_Specified;
end;

constructor SetMessagePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetMessagePreferencesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FASQPreferences);
  inherited Destroy;
end;

procedure SetMessagePreferencesRequestType.SetASQPreferences(Index: Integer; const AASQPreferencesType: ASQPreferencesType);
begin
  FASQPreferences := AASQPreferencesType;
  FASQPreferences_Specified := True;
end;

function SetMessagePreferencesRequestType.ASQPreferences_Specified(Index: Integer): boolean;
begin
  Result := FASQPreferences_Specified;
end;

constructor ReviseSellingManagerSaleRecordRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerSaleRecordRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerSoldOrder);
  inherited Destroy;
end;

procedure ReviseSellingManagerSaleRecordRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ReviseSellingManagerSaleRecordRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ReviseSellingManagerSaleRecordRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function ReviseSellingManagerSaleRecordRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure ReviseSellingManagerSaleRecordRequestType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function ReviseSellingManagerSaleRecordRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure ReviseSellingManagerSaleRecordRequestType.SetSellingManagerSoldOrder(Index: Integer; const ASellingManagerSoldOrderType: SellingManagerSoldOrderType);
begin
  FSellingManagerSoldOrder := ASellingManagerSoldOrderType;
  FSellingManagerSoldOrder_Specified := True;
end;

function ReviseSellingManagerSaleRecordRequestType.SellingManagerSoldOrder_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerSoldOrder_Specified;
end;

procedure ReviseSellingManagerSaleRecordRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function ReviseSellingManagerSaleRecordRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor ReviseFixedPriceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseFixedPriceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure ReviseFixedPriceItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function ReviseFixedPriceItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure ReviseFixedPriceItemRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function ReviseFixedPriceItemRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

constructor ReviseInventoryStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseInventoryStatusRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FInventoryStatus)-1 do
    SysUtils.FreeAndNil(FInventoryStatus[I]);
  System.SetLength(FInventoryStatus, 0);
  inherited Destroy;
end;

procedure ReviseInventoryStatusRequestType.SetInventoryStatus(Index: Integer; const AArray_Of_InventoryStatusType: Array_Of_InventoryStatusType);
begin
  FInventoryStatus := AArray_Of_InventoryStatusType;
  FInventoryStatus_Specified := True;
end;

function ReviseInventoryStatusRequestType.InventoryStatus_Specified(Index: Integer): boolean;
begin
  Result := FInventoryStatus_Specified;
end;

constructor ReviseCheckoutStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseCheckoutStatusRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FAmountPaid);
  SysUtils.FreeAndNil(FAdjustmentAmount);
  SysUtils.FreeAndNil(FShippingAddress);
  SysUtils.FreeAndNil(FShippingInsuranceCost);
  SysUtils.FreeAndNil(FSalesTax);
  SysUtils.FreeAndNil(FShippingCost);
  SysUtils.FreeAndNil(FExternalTransaction);
  SysUtils.FreeAndNil(FCODCost);
  inherited Destroy;
end;

procedure ReviseCheckoutStatusRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetOrderID(Index: Integer; const Astring: string);
begin
  FOrderID := Astring;
  FOrderID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetAmountPaid(Index: Integer; const AAmountType: AmountType);
begin
  FAmountPaid := AAmountType;
  FAmountPaid_Specified := True;
end;

function ReviseCheckoutStatusRequestType.AmountPaid_Specified(Index: Integer): boolean;
begin
  Result := FAmountPaid_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetPaymentMethodUsed(Index: Integer; const ABuyerPaymentMethodCodeType: BuyerPaymentMethodCodeType);
begin
  FPaymentMethodUsed := ABuyerPaymentMethodCodeType;
  FPaymentMethodUsed_Specified := True;
end;

function ReviseCheckoutStatusRequestType.PaymentMethodUsed_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethodUsed_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetCheckoutStatus(Index: Integer; const ACompleteStatusCodeType: CompleteStatusCodeType);
begin
  FCheckoutStatus := ACompleteStatusCodeType;
  FCheckoutStatus_Specified := True;
end;

function ReviseCheckoutStatusRequestType.CheckoutStatus_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutStatus_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetShippingService(Index: Integer; const Astring: string);
begin
  FShippingService := Astring;
  FShippingService_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ShippingService_Specified(Index: Integer): boolean;
begin
  Result := FShippingService_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetShippingIncludedInTax(Index: Integer; const ABoolean: Boolean);
begin
  FShippingIncludedInTax := ABoolean;
  FShippingIncludedInTax_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ShippingIncludedInTax_Specified(Index: Integer): boolean;
begin
  Result := FShippingIncludedInTax_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetCheckoutMethod(Index: Integer; const ACheckoutMethodCodeType: CheckoutMethodCodeType);
begin
  FCheckoutMethod := ACheckoutMethodCodeType;
  FCheckoutMethod_Specified := True;
end;

function ReviseCheckoutStatusRequestType.CheckoutMethod_Specified(Index: Integer): boolean;
begin
  Result := FCheckoutMethod_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetInsuranceType(Index: Integer; const AInsuranceSelectedCodeType: InsuranceSelectedCodeType);
begin
  FInsuranceType := AInsuranceSelectedCodeType;
  FInsuranceType_Specified := True;
end;

function ReviseCheckoutStatusRequestType.InsuranceType_Specified(Index: Integer): boolean;
begin
  Result := FInsuranceType_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetPaymentStatus(Index: Integer; const ARCSPaymentStatusCodeType: RCSPaymentStatusCodeType);
begin
  FPaymentStatus := ARCSPaymentStatusCodeType;
  FPaymentStatus_Specified := True;
end;

function ReviseCheckoutStatusRequestType.PaymentStatus_Specified(Index: Integer): boolean;
begin
  Result := FPaymentStatus_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetAdjustmentAmount(Index: Integer; const AAmountType: AmountType);
begin
  FAdjustmentAmount := AAmountType;
  FAdjustmentAmount_Specified := True;
end;

function ReviseCheckoutStatusRequestType.AdjustmentAmount_Specified(Index: Integer): boolean;
begin
  Result := FAdjustmentAmount_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetShippingAddress(Index: Integer; const AAddressType: AddressType);
begin
  FShippingAddress := AAddressType;
  FShippingAddress_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ShippingAddress_Specified(Index: Integer): boolean;
begin
  Result := FShippingAddress_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetBuyerID(Index: Integer; const Astring: string);
begin
  FBuyerID := Astring;
  FBuyerID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.BuyerID_Specified(Index: Integer): boolean;
begin
  Result := FBuyerID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetShippingInsuranceCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingInsuranceCost := AAmountType;
  FShippingInsuranceCost_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ShippingInsuranceCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingInsuranceCost_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetSalesTax(Index: Integer; const AAmountType: AmountType);
begin
  FSalesTax := AAmountType;
  FSalesTax_Specified := True;
end;

function ReviseCheckoutStatusRequestType.SalesTax_Specified(Index: Integer): boolean;
begin
  Result := FSalesTax_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetShippingCost(Index: Integer; const AAmountType: AmountType);
begin
  FShippingCost := AAmountType;
  FShippingCost_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ShippingCost_Specified(Index: Integer): boolean;
begin
  Result := FShippingCost_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetEncryptedID(Index: Integer; const Astring: string);
begin
  FEncryptedID := Astring;
  FEncryptedID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.EncryptedID_Specified(Index: Integer): boolean;
begin
  Result := FEncryptedID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetExternalTransaction(Index: Integer; const AExternalTransactionType: ExternalTransactionType);
begin
  FExternalTransaction := AExternalTransactionType;
  FExternalTransaction_Specified := True;
end;

function ReviseCheckoutStatusRequestType.ExternalTransaction_Specified(Index: Integer): boolean;
begin
  Result := FExternalTransaction_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetMultipleSellerPaymentID(Index: Integer; const Astring: string);
begin
  FMultipleSellerPaymentID := Astring;
  FMultipleSellerPaymentID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.MultipleSellerPaymentID_Specified(Index: Integer): boolean;
begin
  Result := FMultipleSellerPaymentID_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetCODCost(Index: Integer; const AAmountType: AmountType);
begin
  FCODCost := AAmountType;
  FCODCost_Specified := True;
end;

function ReviseCheckoutStatusRequestType.CODCost_Specified(Index: Integer): boolean;
begin
  Result := FCODCost_Specified;
end;

procedure ReviseCheckoutStatusRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function ReviseCheckoutStatusRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor ReviseSellingManagerInventoryFolderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerInventoryFolderRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FFolder);
  inherited Destroy;
end;

procedure ReviseSellingManagerInventoryFolderRequestType.SetFolder(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
begin
  FFolder := ASellingManagerFolderDetailsType;
  FFolder_Specified := True;
end;

function ReviseSellingManagerInventoryFolderRequestType.Folder_Specified(Index: Integer): boolean;
begin
  Result := FFolder_Specified;
end;

constructor ReviseSellingManagerProductRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseSellingManagerProductRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  SysUtils.FreeAndNil(FSellingManagerFolderDetails);
  SysUtils.FreeAndNil(FSellingManagerProductSpecifics);
  inherited Destroy;
end;

procedure ReviseSellingManagerProductRequestType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function ReviseSellingManagerProductRequestType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure ReviseSellingManagerProductRequestType.SetSellingManagerFolderDetails(Index: Integer; const ASellingManagerFolderDetailsType: SellingManagerFolderDetailsType);
begin
  FSellingManagerFolderDetails := ASellingManagerFolderDetailsType;
  FSellingManagerFolderDetails_Specified := True;
end;

function ReviseSellingManagerProductRequestType.SellingManagerFolderDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerFolderDetails_Specified;
end;

procedure ReviseSellingManagerProductRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function ReviseSellingManagerProductRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

procedure ReviseSellingManagerProductRequestType.SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
begin
  FSellingManagerProductSpecifics := ASellingManagerProductSpecificsType;
  FSellingManagerProductSpecifics_Specified := True;
end;

function ReviseSellingManagerProductRequestType.SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductSpecifics_Specified;
end;

constructor ReviseMyMessagesFoldersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ReviseMyMessagesFoldersRequestType.SetOperation(Index: Integer; const AMyMessagesFolderOperationCodeType: MyMessagesFolderOperationCodeType);
begin
  FOperation := AMyMessagesFolderOperationCodeType;
  FOperation_Specified := True;
end;

function ReviseMyMessagesFoldersRequestType.Operation_Specified(Index: Integer): boolean;
begin
  Result := FOperation_Specified;
end;

procedure ReviseMyMessagesFoldersRequestType.SetFolderID(Index: Integer; const AArray_Of_long: Array_Of_long);
begin
  FFolderID := AArray_Of_long;
  FFolderID_Specified := True;
end;

function ReviseMyMessagesFoldersRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure ReviseMyMessagesFoldersRequestType.SetFolderName(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FFolderName := ASellerExcludeShipToLocationPreferencesType;
  FFolderName_Specified := True;
end;

function ReviseMyMessagesFoldersRequestType.FolderName_Specified(Index: Integer): boolean;
begin
  Result := FFolderName_Specified;
end;

constructor ReviseItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure ReviseItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function ReviseItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure ReviseItemRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function ReviseItemRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

procedure ReviseItemRequestType.SetVerifyOnly(Index: Integer; const ABoolean: Boolean);
begin
  FVerifyOnly := ABoolean;
  FVerifyOnly_Specified := True;
end;

function ReviseItemRequestType.VerifyOnly_Specified(Index: Integer): boolean;
begin
  Result := FVerifyOnly_Specified;
end;

constructor ReviseMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ReviseMyMessagesRequestType.SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
begin
  FMessageIDs := AMyMessagesMessageIDArrayType;
  FMessageIDs_Specified := True;
end;

function ReviseMyMessagesRequestType.MessageIDs_Specified(Index: Integer): boolean;
begin
  Result := FMessageIDs_Specified;
end;

procedure ReviseMyMessagesRequestType.SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
begin
  FAlertIDs := AMyMessagesAlertIDArrayType;
  FAlertIDs_Specified := True;
end;

function ReviseMyMessagesRequestType.AlertIDs_Specified(Index: Integer): boolean;
begin
  Result := FAlertIDs_Specified;
end;

procedure ReviseMyMessagesRequestType.SetRead_(Index: Integer; const ABoolean: Boolean);
begin
  FRead_ := ABoolean;
  FRead__Specified := True;
end;

function ReviseMyMessagesRequestType.Read__Specified(Index: Integer): boolean;
begin
  Result := FRead__Specified;
end;

procedure ReviseMyMessagesRequestType.SetFlagged(Index: Integer; const ABoolean: Boolean);
begin
  FFlagged := ABoolean;
  FFlagged_Specified := True;
end;

function ReviseMyMessagesRequestType.Flagged_Specified(Index: Integer): boolean;
begin
  Result := FFlagged_Specified;
end;

procedure ReviseMyMessagesRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function ReviseMyMessagesRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

constructor ValidateChallengeInputRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ValidateChallengeInputRequestType.SetChallengeToken(Index: Integer; const Astring: string);
begin
  FChallengeToken := Astring;
  FChallengeToken_Specified := True;
end;

function ValidateChallengeInputRequestType.ChallengeToken_Specified(Index: Integer): boolean;
begin
  Result := FChallengeToken_Specified;
end;

procedure ValidateChallengeInputRequestType.SetUserInput(Index: Integer; const Astring: string);
begin
  FUserInput := Astring;
  FUserInput_Specified := True;
end;

function ValidateChallengeInputRequestType.UserInput_Specified(Index: Integer): boolean;
begin
  Result := FUserInput_Specified;
end;

procedure ValidateChallengeInputRequestType.SetKeepTokenValid(Index: Integer; const ABoolean: Boolean);
begin
  FKeepTokenValid := ABoolean;
  FKeepTokenValid_Specified := True;
end;

function ValidateChallengeInputRequestType.KeepTokenValid_Specified(Index: Integer): boolean;
begin
  Result := FKeepTokenValid_Specified;
end;

constructor ValidateTestUserRegistrationRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ValidateTestUserRegistrationRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FRegistrationDate);
  inherited Destroy;
end;

procedure ValidateTestUserRegistrationRequestType.SetFeedbackScore(Index: Integer; const AInteger: Integer);
begin
  FFeedbackScore := AInteger;
  FFeedbackScore_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.FeedbackScore_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackScore_Specified;
end;

procedure ValidateTestUserRegistrationRequestType.SetRegistrationDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FRegistrationDate := ATXSDateTime;
  FRegistrationDate_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.RegistrationDate_Specified(Index: Integer): boolean;
begin
  Result := FRegistrationDate_Specified;
end;

procedure ValidateTestUserRegistrationRequestType.SetSubscribeSA(Index: Integer; const ABoolean: Boolean);
begin
  FSubscribeSA := ABoolean;
  FSubscribeSA_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.SubscribeSA_Specified(Index: Integer): boolean;
begin
  Result := FSubscribeSA_Specified;
end;

procedure ValidateTestUserRegistrationRequestType.SetSubscribeSAPro(Index: Integer; const ABoolean: Boolean);
begin
  FSubscribeSAPro := ABoolean;
  FSubscribeSAPro_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.SubscribeSAPro_Specified(Index: Integer): boolean;
begin
  Result := FSubscribeSAPro_Specified;
end;

procedure ValidateTestUserRegistrationRequestType.SetSubscribeSM(Index: Integer; const ABoolean: Boolean);
begin
  FSubscribeSM := ABoolean;
  FSubscribeSM_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.SubscribeSM_Specified(Index: Integer): boolean;
begin
  Result := FSubscribeSM_Specified;
end;

procedure ValidateTestUserRegistrationRequestType.SetSubscribeSMPro(Index: Integer; const ABoolean: Boolean);
begin
  FSubscribeSMPro := ABoolean;
  FSubscribeSMPro_Specified := True;
end;

function ValidateTestUserRegistrationRequestType.SubscribeSMPro_Specified(Index: Integer): boolean;
begin
  Result := FSubscribeSMPro_Specified;
end;

constructor UploadSiteHostedPicturesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor UploadSiteHostedPicturesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPictureData);
  inherited Destroy;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureName(Index: Integer; const Astring: string);
begin
  FPictureName := Astring;
  FPictureName_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureName_Specified(Index: Integer): boolean;
begin
  Result := FPictureName_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureSystemVersion(Index: Integer; const AInteger: Integer);
begin
  FPictureSystemVersion := AInteger;
  FPictureSystemVersion_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureSystemVersion_Specified(Index: Integer): boolean;
begin
  Result := FPictureSystemVersion_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureSet(Index: Integer; const APictureSetCodeType: PictureSetCodeType);
begin
  FPictureSet := APictureSetCodeType;
  FPictureSet_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureSet_Specified(Index: Integer): boolean;
begin
  Result := FPictureSet_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureData(Index: Integer; const ABase64BinaryType: Base64BinaryType);
begin
  FPictureData := ABase64BinaryType;
  FPictureData_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureData_Specified(Index: Integer): boolean;
begin
  Result := FPictureData_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureUploadPolicy(Index: Integer; const APictureUploadPolicyCodeType: PictureUploadPolicyCodeType);
begin
  FPictureUploadPolicy := APictureUploadPolicyCodeType;
  FPictureUploadPolicy_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureUploadPolicy_Specified(Index: Integer): boolean;
begin
  Result := FPictureUploadPolicy_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetExternalPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FExternalPictureURL := AArray_Of_anyURI;
  FExternalPictureURL_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.ExternalPictureURL_Specified(Index: Integer): boolean;
begin
  Result := FExternalPictureURL_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetPictureWatermark(Index: Integer; const AArray_Of_PictureWatermarkCodeType: Array_Of_PictureWatermarkCodeType);
begin
  FPictureWatermark := AArray_Of_PictureWatermarkCodeType;
  FPictureWatermark_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.PictureWatermark_Specified(Index: Integer): boolean;
begin
  Result := FPictureWatermark_Specified;
end;

procedure UploadSiteHostedPicturesRequestType.SetExtensionInDays(Index: Integer; const AInteger: Integer);
begin
  FExtensionInDays := AInteger;
  FExtensionInDays_Specified := True;
end;

function UploadSiteHostedPicturesRequestType.ExtensionInDays_Specified(Index: Integer): boolean;
begin
  Result := FExtensionInDays_Specified;
end;

constructor SetUserPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetUserPreferencesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FBidderNoticePreferences);
  SysUtils.FreeAndNil(FCombinedPaymentPreferences);
  SysUtils.FreeAndNil(FCrossPromotionPreferences);
  SysUtils.FreeAndNil(FSellerPaymentPreferences);
  SysUtils.FreeAndNil(FSellerFavoriteItemPreferences);
  SysUtils.FreeAndNil(FEndOfAuctionEmailPreferences);
  SysUtils.FreeAndNil(FUnpaidItemAssistancePreferences);
  SysUtils.FreeAndNil(FPurchaseReminderEmailPreferences);
  SysUtils.FreeAndNil(FDispatchCutoffTimePreference);
  inherited Destroy;
end;

procedure SetUserPreferencesRequestType.SetBidderNoticePreferences(Index: Integer; const ABidderNoticePreferencesType: BidderNoticePreferencesType);
begin
  FBidderNoticePreferences := ABidderNoticePreferencesType;
  FBidderNoticePreferences_Specified := True;
end;

function SetUserPreferencesRequestType.BidderNoticePreferences_Specified(Index: Integer): boolean;
begin
  Result := FBidderNoticePreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetCombinedPaymentPreferences(Index: Integer; const ACombinedPaymentPreferencesType: CombinedPaymentPreferencesType);
begin
  FCombinedPaymentPreferences := ACombinedPaymentPreferencesType;
  FCombinedPaymentPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.CombinedPaymentPreferences_Specified(Index: Integer): boolean;
begin
  Result := FCombinedPaymentPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetCrossPromotionPreferences(Index: Integer; const ACrossPromotionPreferencesType: CrossPromotionPreferencesType);
begin
  FCrossPromotionPreferences := ACrossPromotionPreferencesType;
  FCrossPromotionPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.CrossPromotionPreferences_Specified(Index: Integer): boolean;
begin
  Result := FCrossPromotionPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetSellerPaymentPreferences(Index: Integer; const ASellerPaymentPreferencesType: SellerPaymentPreferencesType);
begin
  FSellerPaymentPreferences := ASellerPaymentPreferencesType;
  FSellerPaymentPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.SellerPaymentPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerPaymentPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetSellerFavoriteItemPreferences(Index: Integer; const ASellerFavoriteItemPreferencesType: SellerFavoriteItemPreferencesType);
begin
  FSellerFavoriteItemPreferences := ASellerFavoriteItemPreferencesType;
  FSellerFavoriteItemPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.SellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
begin
  Result := FSellerFavoriteItemPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetEndOfAuctionEmailPreferences(Index: Integer; const AEndOfAuctionEmailPreferencesType: EndOfAuctionEmailPreferencesType);
begin
  FEndOfAuctionEmailPreferences := AEndOfAuctionEmailPreferencesType;
  FEndOfAuctionEmailPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.EndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FEndOfAuctionEmailPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FEmailShipmentTrackingNumberPreference := ABoolean;
  FEmailShipmentTrackingNumberPreference_Specified := True;
end;

function SetUserPreferencesRequestType.EmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FEmailShipmentTrackingNumberPreference_Specified;
end;

procedure SetUserPreferencesRequestType.SetRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FRequiredShipPhoneNumberPreference := ABoolean;
  FRequiredShipPhoneNumberPreference_Specified := True;
end;

function SetUserPreferencesRequestType.RequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FRequiredShipPhoneNumberPreference_Specified;
end;

procedure SetUserPreferencesRequestType.SetUnpaidItemAssistancePreferences(Index: Integer; const AUnpaidItemAssistancePreferencesType: UnpaidItemAssistancePreferencesType);
begin
  FUnpaidItemAssistancePreferences := AUnpaidItemAssistancePreferencesType;
  FUnpaidItemAssistancePreferences_Specified := True;
end;

function SetUserPreferencesRequestType.UnpaidItemAssistancePreferences_Specified(Index: Integer): boolean;
begin
  Result := FUnpaidItemAssistancePreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetPurchaseReminderEmailPreferences(Index: Integer; const APurchaseReminderEmailPreferencesType: PurchaseReminderEmailPreferencesType);
begin
  FPurchaseReminderEmailPreferences := APurchaseReminderEmailPreferencesType;
  FPurchaseReminderEmailPreferences_Specified := True;
end;

function SetUserPreferencesRequestType.PurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FPurchaseReminderEmailPreferences_Specified;
end;

procedure SetUserPreferencesRequestType.SetSellerThirdPartyCheckoutDisabled(Index: Integer; const ABoolean: Boolean);
begin
  FSellerThirdPartyCheckoutDisabled := ABoolean;
  FSellerThirdPartyCheckoutDisabled_Specified := True;
end;

function SetUserPreferencesRequestType.SellerThirdPartyCheckoutDisabled_Specified(Index: Integer): boolean;
begin
  Result := FSellerThirdPartyCheckoutDisabled_Specified;
end;

procedure SetUserPreferencesRequestType.SetDispatchCutoffTimePreference(Index: Integer; const ADispatchCutoffTimePreferencesType: DispatchCutoffTimePreferencesType);
begin
  FDispatchCutoffTimePreference := ADispatchCutoffTimePreferencesType;
  FDispatchCutoffTimePreference_Specified := True;
end;

function SetUserPreferencesRequestType.DispatchCutoffTimePreference_Specified(Index: Integer): boolean;
begin
  Result := FDispatchCutoffTimePreference_Specified;
end;

procedure SetUserPreferencesRequestType.SetGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
begin
  FGlobalShippingProgramListingPreference := ABoolean;
  FGlobalShippingProgramListingPreference_Specified := True;
end;

function SetUserPreferencesRequestType.GlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
begin
  Result := FGlobalShippingProgramListingPreference_Specified;
end;

procedure SetUserPreferencesRequestType.SetOverrideGSPserviceWithIntlService(Index: Integer; const ABoolean: Boolean);
begin
  FOverrideGSPserviceWithIntlService := ABoolean;
  FOverrideGSPserviceWithIntlService_Specified := True;
end;

function SetUserPreferencesRequestType.OverrideGSPserviceWithIntlService_Specified(Index: Integer): boolean;
begin
  Result := FOverrideGSPserviceWithIntlService_Specified;
end;

procedure SetUserPreferencesRequestType.SetOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
begin
  FOutOfStockControlPreference := ABoolean;
  FOutOfStockControlPreference_Specified := True;
end;

function SetUserPreferencesRequestType.OutOfStockControlPreference_Specified(Index: Integer): boolean;
begin
  Result := FOutOfStockControlPreference_Specified;
end;

constructor VerifyAddSecondChanceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddSecondChanceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FBuyItNowPrice);
  inherited Destroy;
end;

procedure VerifyAddSecondChanceItemRequestType.SetRecipientBidderUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FRecipientBidderUserID := AUserIDType;
  FRecipientBidderUserID_Specified := True;
end;

function VerifyAddSecondChanceItemRequestType.RecipientBidderUserID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientBidderUserID_Specified;
end;

procedure VerifyAddSecondChanceItemRequestType.SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
begin
  FBuyItNowPrice := AAmountType;
  FBuyItNowPrice_Specified := True;
end;

function VerifyAddSecondChanceItemRequestType.BuyItNowPrice_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowPrice_Specified;
end;

procedure VerifyAddSecondChanceItemRequestType.SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
begin
  FDuration := ASecondChanceOfferDurationCodeType;
  FDuration_Specified := True;
end;

function VerifyAddSecondChanceItemRequestType.Duration_Specified(Index: Integer): boolean;
begin
  Result := FDuration_Specified;
end;

procedure VerifyAddSecondChanceItemRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function VerifyAddSecondChanceItemRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure VerifyAddSecondChanceItemRequestType.SetSellerMessage(Index: Integer; const Astring: string);
begin
  FSellerMessage := Astring;
  FSellerMessage_Specified := True;
end;

function VerifyAddSecondChanceItemRequestType.SellerMessage_Specified(Index: Integer): boolean;
begin
  Result := FSellerMessage_Specified;
end;

constructor VerifyRelistItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyRelistItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure VerifyRelistItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function VerifyRelistItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure VerifyRelistItemRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function VerifyRelistItemRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

constructor VerifyAddItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure VerifyAddItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function VerifyAddItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

constructor VeROReportItemsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VeROReportItemsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FReportItems)-1 do
    SysUtils.FreeAndNil(FReportItems[I]);
  System.SetLength(FReportItems, 0);
  inherited Destroy;
end;

procedure VeROReportItemsRequestType.SetRightsOwnerID(Index: Integer; const AUserIDType: UserIDType);
begin
  FRightsOwnerID := AUserIDType;
  FRightsOwnerID_Specified := True;
end;

function VeROReportItemsRequestType.RightsOwnerID_Specified(Index: Integer): boolean;
begin
  Result := FRightsOwnerID_Specified;
end;

procedure VeROReportItemsRequestType.SetReportItems(Index: Integer; const AVeROReportItemsType: VeROReportItemsType);
begin
  FReportItems := AVeROReportItemsType;
  FReportItems_Specified := True;
end;

function VeROReportItemsRequestType.ReportItems_Specified(Index: Integer): boolean;
begin
  Result := FReportItems_Specified;
end;

constructor VerifyAddFixedPriceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddFixedPriceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure VerifyAddFixedPriceItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function VerifyAddFixedPriceItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

constructor SetShippingDiscountProfilesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetShippingDiscountProfilesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FFlatShippingDiscount);
  SysUtils.FreeAndNil(FCalculatedShippingDiscount);
  SysUtils.FreeAndNil(FCalculatedHandlingDiscount);
  SysUtils.FreeAndNil(FPromotionalShippingDiscountDetails);
  SysUtils.FreeAndNil(FShippingInsurance);
  SysUtils.FreeAndNil(FInternationalShippingInsurance);
  inherited Destroy;
end;

procedure SetShippingDiscountProfilesRequestType.SetCurrencyID(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrencyID := ACurrencyCodeType;
  FCurrencyID_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.CurrencyID_Specified(Index: Integer): boolean;
begin
  Result := FCurrencyID_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetCombinedDuration(Index: Integer; const ACombinedPaymentPeriodCodeType: CombinedPaymentPeriodCodeType);
begin
  FCombinedDuration := ACombinedPaymentPeriodCodeType;
  FCombinedDuration_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.CombinedDuration_Specified(Index: Integer): boolean;
begin
  Result := FCombinedDuration_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetModifyActionCode(Index: Integer; const AModifyActionCodeType: ModifyActionCodeType);
begin
  FModifyActionCode := AModifyActionCodeType;
  FModifyActionCode_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.ModifyActionCode_Specified(Index: Integer): boolean;
begin
  Result := FModifyActionCode_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetFlatShippingDiscount(Index: Integer; const AFlatShippingDiscountType: FlatShippingDiscountType);
begin
  FFlatShippingDiscount := AFlatShippingDiscountType;
  FFlatShippingDiscount_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.FlatShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FFlatShippingDiscount_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetCalculatedShippingDiscount(Index: Integer; const ACalculatedShippingDiscountType: CalculatedShippingDiscountType);
begin
  FCalculatedShippingDiscount := ACalculatedShippingDiscountType;
  FCalculatedShippingDiscount_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.CalculatedShippingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedShippingDiscount_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetCalculatedHandlingDiscount(Index: Integer; const ACalculatedHandlingDiscountType: CalculatedHandlingDiscountType);
begin
  FCalculatedHandlingDiscount := ACalculatedHandlingDiscountType;
  FCalculatedHandlingDiscount_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.CalculatedHandlingDiscount_Specified(Index: Integer): boolean;
begin
  Result := FCalculatedHandlingDiscount_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetPromotionalShippingDiscountDetails(Index: Integer; const APromotionalShippingDiscountDetailsType: PromotionalShippingDiscountDetailsType);
begin
  FPromotionalShippingDiscountDetails := APromotionalShippingDiscountDetailsType;
  FPromotionalShippingDiscountDetails_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.PromotionalShippingDiscountDetails_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalShippingDiscountDetails_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
begin
  FShippingInsurance := AShippingInsuranceType;
  FShippingInsurance_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.ShippingInsurance_Specified(Index: Integer): boolean;
begin
  Result := FShippingInsurance_Specified;
end;

procedure SetShippingDiscountProfilesRequestType.SetInternationalShippingInsurance(Index: Integer; const AShippingInsuranceType: ShippingInsuranceType);
begin
  FInternationalShippingInsurance := AShippingInsuranceType;
  FInternationalShippingInsurance_Specified := True;
end;

function SetShippingDiscountProfilesRequestType.InternationalShippingInsurance_Specified(Index: Integer): boolean;
begin
  Result := FInternationalShippingInsurance_Specified;
end;

constructor SetSellingManagerTemplateAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetSellingManagerTemplateAutomationRuleRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FAutomatedListingRule);
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure SetSellingManagerTemplateAutomationRuleRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleRequestType.SetAutomatedListingRule(Index: Integer; const ASellingManagerAutoListType: SellingManagerAutoListType);
begin
  FAutomatedListingRule := ASellingManagerAutoListType;
  FAutomatedListingRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleRequestType.AutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedListingRule_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleRequestType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleRequestType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure SetSellingManagerTemplateAutomationRuleRequestType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function SetSellingManagerTemplateAutomationRuleRequestType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

constructor SetStoreRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStore);
  inherited Destroy;
end;

procedure SetStoreRequestType.SetStore(Index: Integer; const AStoreType: StoreType);
begin
  FStore := AStoreType;
  FStore_Specified := True;
end;

function SetStoreRequestType.Store_Specified(Index: Integer): boolean;
begin
  Result := FStore_Specified;
end;

constructor SetSellingManagerFeedbackOptionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure SetSellingManagerFeedbackOptionsRequestType.SetAutomatedLeaveFeedbackEvent(Index: Integer; const AAutomatedLeaveFeedbackEventCodeType: AutomatedLeaveFeedbackEventCodeType);
begin
  FAutomatedLeaveFeedbackEvent := AAutomatedLeaveFeedbackEventCodeType;
  FAutomatedLeaveFeedbackEvent_Specified := True;
end;

function SetSellingManagerFeedbackOptionsRequestType.AutomatedLeaveFeedbackEvent_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedLeaveFeedbackEvent_Specified;
end;

procedure SetSellingManagerFeedbackOptionsRequestType.SetStoredComments(Index: Integer; const AFeedbackCommentArrayType: FeedbackCommentArrayType);
begin
  FStoredComments := AFeedbackCommentArrayType;
  FStoredComments_Specified := True;
end;

function SetSellingManagerFeedbackOptionsRequestType.StoredComments_Specified(Index: Integer): boolean;
begin
  Result := FStoredComments_Specified;
end;

constructor SetSellingManagerItemAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetSellingManagerItemAutomationRuleRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FAutomatedRelistingRule);
  SysUtils.FreeAndNil(FAutomatedSecondChanceOfferRule);
  inherited Destroy;
end;

procedure SetSellingManagerItemAutomationRuleRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function SetSellingManagerItemAutomationRuleRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure SetSellingManagerItemAutomationRuleRequestType.SetAutomatedRelistingRule(Index: Integer; const ASellingManagerAutoRelistType: SellingManagerAutoRelistType);
begin
  FAutomatedRelistingRule := ASellingManagerAutoRelistType;
  FAutomatedRelistingRule_Specified := True;
end;

function SetSellingManagerItemAutomationRuleRequestType.AutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedRelistingRule_Specified;
end;

procedure SetSellingManagerItemAutomationRuleRequestType.SetAutomatedSecondChanceOfferRule(Index: Integer; const ASellingManagerAutoSecondChanceOfferType: SellingManagerAutoSecondChanceOfferType);
begin
  FAutomatedSecondChanceOfferRule := ASellingManagerAutoSecondChanceOfferType;
  FAutomatedSecondChanceOfferRule_Specified := True;
end;

function SetSellingManagerItemAutomationRuleRequestType.AutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FAutomatedSecondChanceOfferRule_Specified;
end;

constructor SetTaxTableRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetTaxTableRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FTaxTable)-1 do
    SysUtils.FreeAndNil(FTaxTable[I]);
  System.SetLength(FTaxTable, 0);
  inherited Destroy;
end;

procedure SetTaxTableRequestType.SetTaxTable(Index: Integer; const ATaxTableType: TaxTableType);
begin
  FTaxTable := ATaxTableType;
  FTaxTable_Specified := True;
end;

function SetTaxTableRequestType.TaxTable_Specified(Index: Integer): boolean;
begin
  Result := FTaxTable_Specified;
end;

constructor SetStorePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStorePreferencesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStorePreferences);
  inherited Destroy;
end;

procedure SetStorePreferencesRequestType.SetStorePreferences(Index: Integer; const AStorePreferencesType: StorePreferencesType);
begin
  FStorePreferences := AStorePreferencesType;
  FStorePreferences_Specified := True;
end;

function SetStorePreferencesRequestType.StorePreferences_Specified(Index: Integer): boolean;
begin
  Result := FStorePreferences_Specified;
end;

constructor SetUserNotesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetUserNotesRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecifics)-1 do
    SysUtils.FreeAndNil(FVariationSpecifics[I]);
  System.SetLength(FVariationSpecifics, 0);
  inherited Destroy;
end;

procedure SetUserNotesRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function SetUserNotesRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure SetUserNotesRequestType.SetAction(Index: Integer; const ASetUserNotesActionCodeType: SetUserNotesActionCodeType);
begin
  FAction := ASetUserNotesActionCodeType;
  FAction_Specified := True;
end;

function SetUserNotesRequestType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure SetUserNotesRequestType.SetNoteText(Index: Integer; const Astring: string);
begin
  FNoteText := Astring;
  FNoteText_Specified := True;
end;

function SetUserNotesRequestType.NoteText_Specified(Index: Integer): boolean;
begin
  Result := FNoteText_Specified;
end;

procedure SetUserNotesRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function SetUserNotesRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure SetUserNotesRequestType.SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecifics := ANameValueListArrayType;
  FVariationSpecifics_Specified := True;
end;

function SetUserNotesRequestType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

procedure SetUserNotesRequestType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function SetUserNotesRequestType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure SetUserNotesRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function SetUserNotesRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor SetStoreCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCategoriesRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FStoreCategories)-1 do
    SysUtils.FreeAndNil(FStoreCategories[I]);
  System.SetLength(FStoreCategories, 0);
  inherited Destroy;
end;

procedure SetStoreCategoriesRequestType.SetAction(Index: Integer; const AStoreCategoryUpdateActionCodeType: StoreCategoryUpdateActionCodeType);
begin
  FAction := AStoreCategoryUpdateActionCodeType;
  FAction_Specified := True;
end;

function SetStoreCategoriesRequestType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure SetStoreCategoriesRequestType.SetItemDestinationCategoryID(Index: Integer; const AInt64: Int64);
begin
  FItemDestinationCategoryID := AInt64;
  FItemDestinationCategoryID_Specified := True;
end;

function SetStoreCategoriesRequestType.ItemDestinationCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FItemDestinationCategoryID_Specified;
end;

procedure SetStoreCategoriesRequestType.SetDestinationParentCategoryID(Index: Integer; const AInt64: Int64);
begin
  FDestinationParentCategoryID := AInt64;
  FDestinationParentCategoryID_Specified := True;
end;

function SetStoreCategoriesRequestType.DestinationParentCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FDestinationParentCategoryID_Specified;
end;

procedure SetStoreCategoriesRequestType.SetStoreCategories(Index: Integer; const AStoreCustomCategoryArrayType: StoreCustomCategoryArrayType);
begin
  FStoreCategories := AStoreCustomCategoryArrayType;
  FStoreCategories_Specified := True;
end;

function SetStoreCategoriesRequestType.StoreCategories_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategories_Specified;
end;

constructor SetStoreCustomPageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCustomPageRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FCustomPage);
  inherited Destroy;
end;

procedure SetStoreCustomPageRequestType.SetCustomPage(Index: Integer; const AStoreCustomPageType: StoreCustomPageType);
begin
  FCustomPage := AStoreCustomPageType;
  FCustomPage_Specified := True;
end;

function SetStoreCustomPageRequestType.CustomPage_Specified(Index: Integer): boolean;
begin
  Result := FCustomPage_Specified;
end;

constructor GetCategoryFeaturesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetCategoryFeaturesRequestType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function GetCategoryFeaturesRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure GetCategoryFeaturesRequestType.SetLevelLimit(Index: Integer; const AInteger: Integer);
begin
  FLevelLimit := AInteger;
  FLevelLimit_Specified := True;
end;

function GetCategoryFeaturesRequestType.LevelLimit_Specified(Index: Integer): boolean;
begin
  Result := FLevelLimit_Specified;
end;

procedure GetCategoryFeaturesRequestType.SetViewAllNodes(Index: Integer; const ABoolean: Boolean);
begin
  FViewAllNodes := ABoolean;
  FViewAllNodes_Specified := True;
end;

function GetCategoryFeaturesRequestType.ViewAllNodes_Specified(Index: Integer): boolean;
begin
  Result := FViewAllNodes_Specified;
end;

procedure GetCategoryFeaturesRequestType.SetFeatureID(Index: Integer; const AArray_Of_FeatureIDCodeType: Array_Of_FeatureIDCodeType);
begin
  FFeatureID := AArray_Of_FeatureIDCodeType;
  FFeatureID_Specified := True;
end;

function GetCategoryFeaturesRequestType.FeatureID_Specified(Index: Integer): boolean;
begin
  Result := FFeatureID_Specified;
end;

procedure GetCategoryFeaturesRequestType.SetAllFeaturesForCategory(Index: Integer; const ABoolean: Boolean);
begin
  FAllFeaturesForCategory := ABoolean;
  FAllFeaturesForCategory_Specified := True;
end;

function GetCategoryFeaturesRequestType.AllFeaturesForCategory_Specified(Index: Integer): boolean;
begin
  Result := FAllFeaturesForCategory_Specified;
end;

constructor GetSellerListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerListRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FEndTimeFrom);
  SysUtils.FreeAndNil(FEndTimeTo);
  SysUtils.FreeAndNil(FStartTimeFrom);
  SysUtils.FreeAndNil(FStartTimeTo);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetSellerListRequestType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function GetSellerListRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetSellerListRequestType.SetMotorsDealerUsers(Index: Integer; const AUserIDArrayType: UserIDArrayType);
begin
  FMotorsDealerUsers := AUserIDArrayType;
  FMotorsDealerUsers_Specified := True;
end;

function GetSellerListRequestType.MotorsDealerUsers_Specified(Index: Integer): boolean;
begin
  Result := FMotorsDealerUsers_Specified;
end;

procedure GetSellerListRequestType.SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeFrom := ATXSDateTime;
  FEndTimeFrom_Specified := True;
end;

function GetSellerListRequestType.EndTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeFrom_Specified;
end;

procedure GetSellerListRequestType.SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeTo := ATXSDateTime;
  FEndTimeTo_Specified := True;
end;

function GetSellerListRequestType.EndTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeTo_Specified;
end;

procedure GetSellerListRequestType.SetSort(Index: Integer; const AInteger: Integer);
begin
  FSort := AInteger;
  FSort_Specified := True;
end;

function GetSellerListRequestType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure GetSellerListRequestType.SetStartTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTimeFrom := ATXSDateTime;
  FStartTimeFrom_Specified := True;
end;

function GetSellerListRequestType.StartTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FStartTimeFrom_Specified;
end;

procedure GetSellerListRequestType.SetStartTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTimeTo := ATXSDateTime;
  FStartTimeTo_Specified := True;
end;

function GetSellerListRequestType.StartTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FStartTimeTo_Specified;
end;

procedure GetSellerListRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetSellerListRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetSellerListRequestType.SetGranularityLevel(Index: Integer; const AGranularityLevelCodeType: GranularityLevelCodeType);
begin
  FGranularityLevel := AGranularityLevelCodeType;
  FGranularityLevel_Specified := True;
end;

function GetSellerListRequestType.GranularityLevel_Specified(Index: Integer): boolean;
begin
  Result := FGranularityLevel_Specified;
end;

procedure GetSellerListRequestType.SetSKUArray(Index: Integer; const ASKUArrayType: SKUArrayType);
begin
  FSKUArray := ASKUArrayType;
  FSKUArray_Specified := True;
end;

function GetSellerListRequestType.SKUArray_Specified(Index: Integer): boolean;
begin
  Result := FSKUArray_Specified;
end;

procedure GetSellerListRequestType.SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeWatchCount := ABoolean;
  FIncludeWatchCount_Specified := True;
end;

function GetSellerListRequestType.IncludeWatchCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeWatchCount_Specified;
end;

procedure GetSellerListRequestType.SetAdminEndedItemsOnly(Index: Integer; const ABoolean: Boolean);
begin
  FAdminEndedItemsOnly := ABoolean;
  FAdminEndedItemsOnly_Specified := True;
end;

function GetSellerListRequestType.AdminEndedItemsOnly_Specified(Index: Integer): boolean;
begin
  Result := FAdminEndedItemsOnly_Specified;
end;

procedure GetSellerListRequestType.SetCategoryID(Index: Integer; const AInteger: Integer);
begin
  FCategoryID := AInteger;
  FCategoryID_Specified := True;
end;

function GetSellerListRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure GetSellerListRequestType.SetIncludeVariations(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeVariations := ABoolean;
  FIncludeVariations_Specified := True;
end;

function GetSellerListRequestType.IncludeVariations_Specified(Index: Integer): boolean;
begin
  Result := FIncludeVariations_Specified;
end;

constructor GetCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetCategoriesRequestType.SetCategorySiteID(Index: Integer; const Astring: string);
begin
  FCategorySiteID := Astring;
  FCategorySiteID_Specified := True;
end;

function GetCategoriesRequestType.CategorySiteID_Specified(Index: Integer): boolean;
begin
  Result := FCategorySiteID_Specified;
end;

procedure GetCategoriesRequestType.SetCategoryParent(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCategoryParent := ASellerExcludeShipToLocationPreferencesType;
  FCategoryParent_Specified := True;
end;

function GetCategoriesRequestType.CategoryParent_Specified(Index: Integer): boolean;
begin
  Result := FCategoryParent_Specified;
end;

procedure GetCategoriesRequestType.SetLevelLimit(Index: Integer; const AInteger: Integer);
begin
  FLevelLimit := AInteger;
  FLevelLimit_Specified := True;
end;

function GetCategoriesRequestType.LevelLimit_Specified(Index: Integer): boolean;
begin
  Result := FLevelLimit_Specified;
end;

procedure GetCategoriesRequestType.SetViewAllNodes(Index: Integer; const ABoolean: Boolean);
begin
  FViewAllNodes := ABoolean;
  FViewAllNodes_Specified := True;
end;

function GetCategoriesRequestType.ViewAllNodes_Specified(Index: Integer): boolean;
begin
  Result := FViewAllNodes_Specified;
end;

constructor GetChallengeTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCharitiesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetCharitiesRequestType.SetCharityID(Index: Integer; const Astring: string);
begin
  FCharityID := Astring;
  FCharityID_Specified := True;
end;

function GetCharitiesRequestType.CharityID_Specified(Index: Integer): boolean;
begin
  Result := FCharityID_Specified;
end;

procedure GetCharitiesRequestType.SetCharityName(Index: Integer; const Astring: string);
begin
  FCharityName := Astring;
  FCharityName_Specified := True;
end;

function GetCharitiesRequestType.CharityName_Specified(Index: Integer): boolean;
begin
  Result := FCharityName_Specified;
end;

procedure GetCharitiesRequestType.SetQuery(Index: Integer; const Astring: string);
begin
  FQuery := Astring;
  FQuery_Specified := True;
end;

function GetCharitiesRequestType.Query_Specified(Index: Integer): boolean;
begin
  Result := FQuery_Specified;
end;

procedure GetCharitiesRequestType.SetCharityRegion(Index: Integer; const AInteger: Integer);
begin
  FCharityRegion := AInteger;
  FCharityRegion_Specified := True;
end;

function GetCharitiesRequestType.CharityRegion_Specified(Index: Integer): boolean;
begin
  Result := FCharityRegion_Specified;
end;

procedure GetCharitiesRequestType.SetCharityDomain(Index: Integer; const AInteger: Integer);
begin
  FCharityDomain := AInteger;
  FCharityDomain_Specified := True;
end;

function GetCharitiesRequestType.CharityDomain_Specified(Index: Integer): boolean;
begin
  Result := FCharityDomain_Specified;
end;

procedure GetCharitiesRequestType.SetIncludeDescription(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeDescription := ABoolean;
  FIncludeDescription_Specified := True;
end;

function GetCharitiesRequestType.IncludeDescription_Specified(Index: Integer): boolean;
begin
  Result := FIncludeDescription_Specified;
end;

procedure GetCharitiesRequestType.SetMatchType(Index: Integer; const AStringMatchCodeType: StringMatchCodeType);
begin
  FMatchType := AStringMatchCodeType;
  FMatchType_Specified := True;
end;

function GetCharitiesRequestType.MatchType_Specified(Index: Integer): boolean;
begin
  Result := FMatchType_Specified;
end;

procedure GetCharitiesRequestType.SetFeatured(Index: Integer; const ABoolean: Boolean);
begin
  FFeatured := ABoolean;
  FFeatured_Specified := True;
end;

function GetCharitiesRequestType.Featured_Specified(Index: Integer): boolean;
begin
  Result := FFeatured_Specified;
end;

procedure GetCharitiesRequestType.SetCampaignID(Index: Integer; const AInt64: Int64);
begin
  FCampaignID := AInt64;
  FCampaignID_Specified := True;
end;

function GetCharitiesRequestType.CampaignID_Specified(Index: Integer): boolean;
begin
  Result := FCampaignID_Specified;
end;

constructor GetCategoryMappingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetCategoryMappingsRequestType.SetCategoryVersion(Index: Integer; const Astring: string);
begin
  FCategoryVersion := Astring;
  FCategoryVersion_Specified := True;
end;

function GetCategoryMappingsRequestType.CategoryVersion_Specified(Index: Integer): boolean;
begin
  Result := FCategoryVersion_Specified;
end;

constructor GetCategorySpecificsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategorySpecificsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FCategorySpecific)-1 do
    SysUtils.FreeAndNil(FCategorySpecific[I]);
  System.SetLength(FCategorySpecific, 0);
  SysUtils.FreeAndNil(FLastUpdateTime);
  inherited Destroy;
end;

procedure GetCategorySpecificsRequestType.SetCategoryID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCategoryID := ASellerExcludeShipToLocationPreferencesType;
  FCategoryID_Specified := True;
end;

function GetCategorySpecificsRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure GetCategorySpecificsRequestType.SetLastUpdateTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastUpdateTime := ATXSDateTime;
  FLastUpdateTime_Specified := True;
end;

function GetCategorySpecificsRequestType.LastUpdateTime_Specified(Index: Integer): boolean;
begin
  Result := FLastUpdateTime_Specified;
end;

procedure GetCategorySpecificsRequestType.SetMaxNames(Index: Integer; const AInteger: Integer);
begin
  FMaxNames := AInteger;
  FMaxNames_Specified := True;
end;

function GetCategorySpecificsRequestType.MaxNames_Specified(Index: Integer): boolean;
begin
  Result := FMaxNames_Specified;
end;

procedure GetCategorySpecificsRequestType.SetMaxValuesPerName(Index: Integer; const AInteger: Integer);
begin
  FMaxValuesPerName := AInteger;
  FMaxValuesPerName_Specified := True;
end;

function GetCategorySpecificsRequestType.MaxValuesPerName_Specified(Index: Integer): boolean;
begin
  Result := FMaxValuesPerName_Specified;
end;

procedure GetCategorySpecificsRequestType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function GetCategorySpecificsRequestType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure GetCategorySpecificsRequestType.SetCategorySpecific(Index: Integer; const AArray_Of_CategoryItemSpecificsType: Array_Of_CategoryItemSpecificsType);
begin
  FCategorySpecific := AArray_Of_CategoryItemSpecificsType;
  FCategorySpecific_Specified := True;
end;

function GetCategorySpecificsRequestType.CategorySpecific_Specified(Index: Integer): boolean;
begin
  Result := FCategorySpecific_Specified;
end;

procedure GetCategorySpecificsRequestType.SetExcludeRelationships(Index: Integer; const ABoolean: Boolean);
begin
  FExcludeRelationships := ABoolean;
  FExcludeRelationships_Specified := True;
end;

function GetCategorySpecificsRequestType.ExcludeRelationships_Specified(Index: Integer): boolean;
begin
  Result := FExcludeRelationships_Specified;
end;

procedure GetCategorySpecificsRequestType.SetIncludeConfidence(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeConfidence := ABoolean;
  FIncludeConfidence_Specified := True;
end;

function GetCategorySpecificsRequestType.IncludeConfidence_Specified(Index: Integer): boolean;
begin
  Result := FIncludeConfidence_Specified;
end;

procedure GetCategorySpecificsRequestType.SetCategorySpecificsFileInfo(Index: Integer; const ABoolean: Boolean);
begin
  FCategorySpecificsFileInfo := ABoolean;
  FCategorySpecificsFileInfo_Specified := True;
end;

function GetCategorySpecificsRequestType.CategorySpecificsFileInfo_Specified(Index: Integer): boolean;
begin
  Result := FCategorySpecificsFileInfo_Specified;
end;

constructor GetBidderListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBidderListRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FEndTimeFrom);
  SysUtils.FreeAndNil(FEndTimeTo);
  inherited Destroy;
end;

procedure GetBidderListRequestType.SetActiveItemsOnly(Index: Integer; const ABoolean: Boolean);
begin
  FActiveItemsOnly := ABoolean;
  FActiveItemsOnly_Specified := True;
end;

function GetBidderListRequestType.ActiveItemsOnly_Specified(Index: Integer): boolean;
begin
  Result := FActiveItemsOnly_Specified;
end;

procedure GetBidderListRequestType.SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeFrom := ATXSDateTime;
  FEndTimeFrom_Specified := True;
end;

function GetBidderListRequestType.EndTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeFrom_Specified;
end;

procedure GetBidderListRequestType.SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeTo := ATXSDateTime;
  FEndTimeTo_Specified := True;
end;

function GetBidderListRequestType.EndTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeTo_Specified;
end;

procedure GetBidderListRequestType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function GetBidderListRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetBidderListRequestType.SetGranularityLevel(Index: Integer; const AGranularityLevelCodeType: GranularityLevelCodeType);
begin
  FGranularityLevel := AGranularityLevelCodeType;
  FGranularityLevel_Specified := True;
end;

function GetBidderListRequestType.GranularityLevel_Specified(Index: Integer): boolean;
begin
  Result := FGranularityLevel_Specified;
end;

constructor GetAdFormatLeadsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAdFormatLeadsRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStartCreationTime);
  SysUtils.FreeAndNil(FEndCreationTime);
  inherited Destroy;
end;

procedure GetAdFormatLeadsRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetAdFormatLeadsRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetAdFormatLeadsRequestType.SetStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
begin
  FStatus := AMessageStatusTypeCodeType;
  FStatus_Specified := True;
end;

function GetAdFormatLeadsRequestType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure GetAdFormatLeadsRequestType.SetIncludeMemberMessages(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeMemberMessages := ABoolean;
  FIncludeMemberMessages_Specified := True;
end;

function GetAdFormatLeadsRequestType.IncludeMemberMessages_Specified(Index: Integer): boolean;
begin
  Result := FIncludeMemberMessages_Specified;
end;

procedure GetAdFormatLeadsRequestType.SetStartCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartCreationTime := ATXSDateTime;
  FStartCreationTime_Specified := True;
end;

function GetAdFormatLeadsRequestType.StartCreationTime_Specified(Index: Integer): boolean;
begin
  Result := FStartCreationTime_Specified;
end;

procedure GetAdFormatLeadsRequestType.SetEndCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndCreationTime := ATXSDateTime;
  FEndCreationTime_Specified := True;
end;

function GetAdFormatLeadsRequestType.EndCreationTime_Specified(Index: Integer): boolean;
begin
  Result := FEndCreationTime_Specified;
end;

constructor GetAllBiddersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetAllBiddersRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetAllBiddersRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetAllBiddersRequestType.SetCallMode(Index: Integer; const AGetAllBiddersModeCodeType: GetAllBiddersModeCodeType);
begin
  FCallMode := AGetAllBiddersModeCodeType;
  FCallMode_Specified := True;
end;

function GetAllBiddersRequestType.CallMode_Specified(Index: Integer): boolean;
begin
  Result := FCallMode_Specified;
end;

procedure GetAllBiddersRequestType.SetIncludeBiddingSummary(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeBiddingSummary := ABoolean;
  FIncludeBiddingSummary_Specified := True;
end;

function GetAllBiddersRequestType.IncludeBiddingSummary_Specified(Index: Integer): boolean;
begin
  Result := FIncludeBiddingSummary_Specified;
end;

constructor RespondToBestOfferRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RespondToBestOfferRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FCounterOfferPrice);
  inherited Destroy;
end;

procedure RespondToBestOfferRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function RespondToBestOfferRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RespondToBestOfferRequestType.SetBestOfferID(Index: Integer; const AArray_Of_BestOfferIDType: Array_Of_BestOfferIDType);
begin
  FBestOfferID := AArray_Of_BestOfferIDType;
  FBestOfferID_Specified := True;
end;

function RespondToBestOfferRequestType.BestOfferID_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferID_Specified;
end;

procedure RespondToBestOfferRequestType.SetAction(Index: Integer; const ABestOfferActionCodeType: BestOfferActionCodeType);
begin
  FAction := ABestOfferActionCodeType;
  FAction_Specified := True;
end;

function RespondToBestOfferRequestType.Action_Specified(Index: Integer): boolean;
begin
  Result := FAction_Specified;
end;

procedure RespondToBestOfferRequestType.SetSellerResponse(Index: Integer; const Astring: string);
begin
  FSellerResponse := Astring;
  FSellerResponse_Specified := True;
end;

function RespondToBestOfferRequestType.SellerResponse_Specified(Index: Integer): boolean;
begin
  Result := FSellerResponse_Specified;
end;

procedure RespondToBestOfferRequestType.SetCounterOfferPrice(Index: Integer; const AAmountType: AmountType);
begin
  FCounterOfferPrice := AAmountType;
  FCounterOfferPrice_Specified := True;
end;

function RespondToBestOfferRequestType.CounterOfferPrice_Specified(Index: Integer): boolean;
begin
  Result := FCounterOfferPrice_Specified;
end;

procedure RespondToBestOfferRequestType.SetCounterOfferQuantity(Index: Integer; const AInteger: Integer);
begin
  FCounterOfferQuantity := AInteger;
  FCounterOfferQuantity_Specified := True;
end;

function RespondToBestOfferRequestType.CounterOfferQuantity_Specified(Index: Integer): boolean;
begin
  Result := FCounterOfferQuantity_Specified;
end;

constructor GetBestOffersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBestOffersRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetBestOffersRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetBestOffersRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetBestOffersRequestType.SetBestOfferID(Index: Integer; const ABestOfferIDType: BestOfferIDType);
begin
  FBestOfferID := ABestOfferIDType;
  FBestOfferID_Specified := True;
end;

function GetBestOffersRequestType.BestOfferID_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferID_Specified;
end;

procedure GetBestOffersRequestType.SetBestOfferStatus(Index: Integer; const ABestOfferStatusCodeType: BestOfferStatusCodeType);
begin
  FBestOfferStatus := ABestOfferStatusCodeType;
  FBestOfferStatus_Specified := True;
end;

function GetBestOffersRequestType.BestOfferStatus_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferStatus_Specified;
end;

procedure GetBestOffersRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetBestOffersRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

constructor GetApiAccessRulesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetMemberMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMemberMessagesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStartCreationTime);
  SysUtils.FreeAndNil(FEndCreationTime);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetMemberMessagesRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetMemberMessagesRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetMemberMessagesRequestType.SetMailMessageType(Index: Integer; const AMessageTypeCodeType: MessageTypeCodeType);
begin
  FMailMessageType := AMessageTypeCodeType;
  FMailMessageType_Specified := True;
end;

function GetMemberMessagesRequestType.MailMessageType_Specified(Index: Integer): boolean;
begin
  Result := FMailMessageType_Specified;
end;

procedure GetMemberMessagesRequestType.SetMessageStatus(Index: Integer; const AMessageStatusTypeCodeType: MessageStatusTypeCodeType);
begin
  FMessageStatus := AMessageStatusTypeCodeType;
  FMessageStatus_Specified := True;
end;

function GetMemberMessagesRequestType.MessageStatus_Specified(Index: Integer): boolean;
begin
  Result := FMessageStatus_Specified;
end;

procedure GetMemberMessagesRequestType.SetDisplayToPublic(Index: Integer; const ABoolean: Boolean);
begin
  FDisplayToPublic := ABoolean;
  FDisplayToPublic_Specified := True;
end;

function GetMemberMessagesRequestType.DisplayToPublic_Specified(Index: Integer): boolean;
begin
  Result := FDisplayToPublic_Specified;
end;

procedure GetMemberMessagesRequestType.SetStartCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartCreationTime := ATXSDateTime;
  FStartCreationTime_Specified := True;
end;

function GetMemberMessagesRequestType.StartCreationTime_Specified(Index: Integer): boolean;
begin
  Result := FStartCreationTime_Specified;
end;

procedure GetMemberMessagesRequestType.SetEndCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndCreationTime := ATXSDateTime;
  FEndCreationTime_Specified := True;
end;

function GetMemberMessagesRequestType.EndCreationTime_Specified(Index: Integer): boolean;
begin
  Result := FEndCreationTime_Specified;
end;

procedure GetMemberMessagesRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetMemberMessagesRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetMemberMessagesRequestType.SetMemberMessageID(Index: Integer; const Astring: string);
begin
  FMemberMessageID := Astring;
  FMemberMessageID_Specified := True;
end;

function GetMemberMessagesRequestType.MemberMessageID_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessageID_Specified;
end;

procedure GetMemberMessagesRequestType.SetSenderID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSenderID := AUserIDType;
  FSenderID_Specified := True;
end;

function GetMemberMessagesRequestType.SenderID_Specified(Index: Integer): boolean;
begin
  Result := FSenderID_Specified;
end;

constructor GetMessagePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetMessagePreferencesRequestType.SetSellerID(Index: Integer; const AUserIDType: UserIDType);
begin
  FSellerID := AUserIDType;
  FSellerID_Specified := True;
end;

function GetMessagePreferencesRequestType.SellerID_Specified(Index: Integer): boolean;
begin
  Result := FSellerID_Specified;
end;

procedure GetMessagePreferencesRequestType.SetIncludeASQPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeASQPreferences := ABoolean;
  FIncludeASQPreferences_Specified := True;
end;

function GetMessagePreferencesRequestType.IncludeASQPreferences_Specified(Index: Integer): boolean;
begin
  Result := FIncludeASQPreferences_Specified;
end;

constructor GetSellerTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerTransactionsRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FModTimeFrom);
  SysUtils.FreeAndNil(FModTimeTo);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetSellerTransactionsRequestType.SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeFrom := ATXSDateTime;
  FModTimeFrom_Specified := True;
end;

function GetSellerTransactionsRequestType.ModTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FModTimeFrom_Specified;
end;

procedure GetSellerTransactionsRequestType.SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeTo := ATXSDateTime;
  FModTimeTo_Specified := True;
end;

function GetSellerTransactionsRequestType.ModTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FModTimeTo_Specified;
end;

procedure GetSellerTransactionsRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetSellerTransactionsRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetSellerTransactionsRequestType.SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFinalValueFee := ABoolean;
  FIncludeFinalValueFee_Specified := True;
end;

function GetSellerTransactionsRequestType.IncludeFinalValueFee_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFinalValueFee_Specified;
end;

procedure GetSellerTransactionsRequestType.SetIncludeContainingOrder(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeContainingOrder := ABoolean;
  FIncludeContainingOrder_Specified := True;
end;

function GetSellerTransactionsRequestType.IncludeContainingOrder_Specified(Index: Integer): boolean;
begin
  Result := FIncludeContainingOrder_Specified;
end;

procedure GetSellerTransactionsRequestType.SetSKUArray(Index: Integer; const ASKUArrayType: SKUArrayType);
begin
  FSKUArray := ASKUArrayType;
  FSKUArray_Specified := True;
end;

function GetSellerTransactionsRequestType.SKUArray_Specified(Index: Integer): boolean;
begin
  Result := FSKUArray_Specified;
end;

procedure GetSellerTransactionsRequestType.SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
begin
  FPlatform_ := ATransactionPlatformCodeType;
  FPlatform__Specified := True;
end;

function GetSellerTransactionsRequestType.Platform__Specified(Index: Integer): boolean;
begin
  Result := FPlatform__Specified;
end;

procedure GetSellerTransactionsRequestType.SetNumberOfDays(Index: Integer; const AInteger: Integer);
begin
  FNumberOfDays := AInteger;
  FNumberOfDays_Specified := True;
end;

function GetSellerTransactionsRequestType.NumberOfDays_Specified(Index: Integer): boolean;
begin
  Result := FNumberOfDays_Specified;
end;

procedure GetSellerTransactionsRequestType.SetInventoryTrackingMethod(Index: Integer; const AInventoryTrackingMethodCodeType: InventoryTrackingMethodCodeType);
begin
  FInventoryTrackingMethod := AInventoryTrackingMethodCodeType;
  FInventoryTrackingMethod_Specified := True;
end;

function GetSellerTransactionsRequestType.InventoryTrackingMethod_Specified(Index: Integer): boolean;
begin
  Result := FInventoryTrackingMethod_Specified;
end;

procedure GetSellerTransactionsRequestType.SetIncludeCodiceFiscale(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeCodiceFiscale := ABoolean;
  FIncludeCodiceFiscale_Specified := True;
end;

function GetSellerTransactionsRequestType.IncludeCodiceFiscale_Specified(Index: Integer): boolean;
begin
  Result := FIncludeCodiceFiscale_Specified;
end;

constructor GetOrderTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrderTransactionsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FItemTransactionIDArray)-1 do
    SysUtils.FreeAndNil(FItemTransactionIDArray[I]);
  System.SetLength(FItemTransactionIDArray, 0);
  inherited Destroy;
end;

procedure GetOrderTransactionsRequestType.SetItemTransactionIDArray(Index: Integer; const AItemTransactionIDArrayType: ItemTransactionIDArrayType);
begin
  FItemTransactionIDArray := AItemTransactionIDArrayType;
  FItemTransactionIDArray_Specified := True;
end;

function GetOrderTransactionsRequestType.ItemTransactionIDArray_Specified(Index: Integer): boolean;
begin
  Result := FItemTransactionIDArray_Specified;
end;

procedure GetOrderTransactionsRequestType.SetOrderIDArray(Index: Integer; const AOrderIDArrayType: OrderIDArrayType);
begin
  FOrderIDArray := AOrderIDArrayType;
  FOrderIDArray_Specified := True;
end;

function GetOrderTransactionsRequestType.OrderIDArray_Specified(Index: Integer): boolean;
begin
  Result := FOrderIDArray_Specified;
end;

procedure GetOrderTransactionsRequestType.SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
begin
  FPlatform_ := ATransactionPlatformCodeType;
  FPlatform__Specified := True;
end;

function GetOrderTransactionsRequestType.Platform__Specified(Index: Integer): boolean;
begin
  Result := FPlatform__Specified;
end;

procedure GetOrderTransactionsRequestType.SetIncludeFinalValueFees(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFinalValueFees := ABoolean;
  FIncludeFinalValueFees_Specified := True;
end;

function GetOrderTransactionsRequestType.IncludeFinalValueFees_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFinalValueFees_Specified;
end;

constructor GetItemTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemTransactionsRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FModTimeFrom);
  SysUtils.FreeAndNil(FModTimeTo);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetItemTransactionsRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetItemTransactionsRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetItemTransactionsRequestType.SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeFrom := ATXSDateTime;
  FModTimeFrom_Specified := True;
end;

function GetItemTransactionsRequestType.ModTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FModTimeFrom_Specified;
end;

procedure GetItemTransactionsRequestType.SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeTo := ATXSDateTime;
  FModTimeTo_Specified := True;
end;

function GetItemTransactionsRequestType.ModTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FModTimeTo_Specified;
end;

procedure GetItemTransactionsRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function GetItemTransactionsRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure GetItemTransactionsRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetItemTransactionsRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetItemTransactionsRequestType.SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFinalValueFee := ABoolean;
  FIncludeFinalValueFee_Specified := True;
end;

function GetItemTransactionsRequestType.IncludeFinalValueFee_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFinalValueFee_Specified;
end;

procedure GetItemTransactionsRequestType.SetIncludeContainingOrder(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeContainingOrder := ABoolean;
  FIncludeContainingOrder_Specified := True;
end;

function GetItemTransactionsRequestType.IncludeContainingOrder_Specified(Index: Integer): boolean;
begin
  Result := FIncludeContainingOrder_Specified;
end;

procedure GetItemTransactionsRequestType.SetPlatform_(Index: Integer; const ATransactionPlatformCodeType: TransactionPlatformCodeType);
begin
  FPlatform_ := ATransactionPlatformCodeType;
  FPlatform__Specified := True;
end;

function GetItemTransactionsRequestType.Platform__Specified(Index: Integer): boolean;
begin
  Result := FPlatform__Specified;
end;

procedure GetItemTransactionsRequestType.SetNumberOfDays(Index: Integer; const AInteger: Integer);
begin
  FNumberOfDays := AInteger;
  FNumberOfDays_Specified := True;
end;

function GetItemTransactionsRequestType.NumberOfDays_Specified(Index: Integer): boolean;
begin
  Result := FNumberOfDays_Specified;
end;

procedure GetItemTransactionsRequestType.SetIncludeVariations(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeVariations := ABoolean;
  FIncludeVariations_Specified := True;
end;

function GetItemTransactionsRequestType.IncludeVariations_Specified(Index: Integer): boolean;
begin
  Result := FIncludeVariations_Specified;
end;

procedure GetItemTransactionsRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function GetItemTransactionsRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetItemsAwaitingFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemsAwaitingFeedbackRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetItemsAwaitingFeedbackRequestType.SetSort(Index: Integer; const AItemSortTypeCodeType: ItemSortTypeCodeType);
begin
  FSort := AItemSortTypeCodeType;
  FSort_Specified := True;
end;

function GetItemsAwaitingFeedbackRequestType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure GetItemsAwaitingFeedbackRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetItemsAwaitingFeedbackRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

constructor GetMyeBayBuyingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayBuyingRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FWatchList);
  SysUtils.FreeAndNil(FBidList);
  SysUtils.FreeAndNil(FBestOfferList);
  SysUtils.FreeAndNil(FWonList);
  SysUtils.FreeAndNil(FLostList);
  SysUtils.FreeAndNil(FFavoriteSearches);
  SysUtils.FreeAndNil(FFavoriteSellers);
  SysUtils.FreeAndNil(FSecondChanceOffer);
  SysUtils.FreeAndNil(FBidAssistantList);
  SysUtils.FreeAndNil(FDeletedFromWonList);
  SysUtils.FreeAndNil(FDeletedFromLostList);
  SysUtils.FreeAndNil(FBuyingSummary);
  SysUtils.FreeAndNil(FUserDefinedLists);
  inherited Destroy;
end;

procedure GetMyeBayBuyingRequestType.SetWatchList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FWatchList := AItemListCustomizationType;
  FWatchList_Specified := True;
end;

function GetMyeBayBuyingRequestType.WatchList_Specified(Index: Integer): boolean;
begin
  Result := FWatchList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetBidList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FBidList := AItemListCustomizationType;
  FBidList_Specified := True;
end;

function GetMyeBayBuyingRequestType.BidList_Specified(Index: Integer): boolean;
begin
  Result := FBidList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetBestOfferList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FBestOfferList := AItemListCustomizationType;
  FBestOfferList_Specified := True;
end;

function GetMyeBayBuyingRequestType.BestOfferList_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetWonList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FWonList := AItemListCustomizationType;
  FWonList_Specified := True;
end;

function GetMyeBayBuyingRequestType.WonList_Specified(Index: Integer): boolean;
begin
  Result := FWonList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetLostList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FLostList := AItemListCustomizationType;
  FLostList_Specified := True;
end;

function GetMyeBayBuyingRequestType.LostList_Specified(Index: Integer): boolean;
begin
  Result := FLostList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetFavoriteSearches(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
begin
  FFavoriteSearches := AMyeBaySelectionType;
  FFavoriteSearches_Specified := True;
end;

function GetMyeBayBuyingRequestType.FavoriteSearches_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSearches_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetFavoriteSellers(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
begin
  FFavoriteSellers := AMyeBaySelectionType;
  FFavoriteSellers_Specified := True;
end;

function GetMyeBayBuyingRequestType.FavoriteSellers_Specified(Index: Integer): boolean;
begin
  Result := FFavoriteSellers_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetSecondChanceOffer(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
begin
  FSecondChanceOffer := AMyeBaySelectionType;
  FSecondChanceOffer_Specified := True;
end;

function GetMyeBayBuyingRequestType.SecondChanceOffer_Specified(Index: Integer): boolean;
begin
  Result := FSecondChanceOffer_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetBidAssistantList(Index: Integer; const ABidAssistantListType: BidAssistantListType);
begin
  FBidAssistantList := ABidAssistantListType;
  FBidAssistantList_Specified := True;
end;

function GetMyeBayBuyingRequestType.BidAssistantList_Specified(Index: Integer): boolean;
begin
  Result := FBidAssistantList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetDeletedFromWonList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FDeletedFromWonList := AItemListCustomizationType;
  FDeletedFromWonList_Specified := True;
end;

function GetMyeBayBuyingRequestType.DeletedFromWonList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromWonList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetDeletedFromLostList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FDeletedFromLostList := AItemListCustomizationType;
  FDeletedFromLostList_Specified := True;
end;

function GetMyeBayBuyingRequestType.DeletedFromLostList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromLostList_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetBuyingSummary(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FBuyingSummary := AItemListCustomizationType;
  FBuyingSummary_Specified := True;
end;

function GetMyeBayBuyingRequestType.BuyingSummary_Specified(Index: Integer): boolean;
begin
  Result := FBuyingSummary_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetUserDefinedLists(Index: Integer; const AMyeBaySelectionType: MyeBaySelectionType);
begin
  FUserDefinedLists := AMyeBaySelectionType;
  FUserDefinedLists_Specified := True;
end;

function GetMyeBayBuyingRequestType.UserDefinedLists_Specified(Index: Integer): boolean;
begin
  Result := FUserDefinedLists_Specified;
end;

procedure GetMyeBayBuyingRequestType.SetHideVariations(Index: Integer; const ABoolean: Boolean);
begin
  FHideVariations := ABoolean;
  FHideVariations_Specified := True;
end;

function GetMyeBayBuyingRequestType.HideVariations_Specified(Index: Integer): boolean;
begin
  Result := FHideVariations_Specified;
end;

constructor GetMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyMessagesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetMyMessagesRequestType.SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
begin
  FAlertIDs := AMyMessagesAlertIDArrayType;
  FAlertIDs_Specified := True;
end;

function GetMyMessagesRequestType.AlertIDs_Specified(Index: Integer): boolean;
begin
  Result := FAlertIDs_Specified;
end;

procedure GetMyMessagesRequestType.SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
begin
  FMessageIDs := AMyMessagesMessageIDArrayType;
  FMessageIDs_Specified := True;
end;

function GetMyMessagesRequestType.MessageIDs_Specified(Index: Integer): boolean;
begin
  Result := FMessageIDs_Specified;
end;

procedure GetMyMessagesRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function GetMyMessagesRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure GetMyMessagesRequestType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function GetMyMessagesRequestType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure GetMyMessagesRequestType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function GetMyMessagesRequestType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure GetMyMessagesRequestType.SetExternalMessageIDs(Index: Integer; const AMyMessagesExternalMessageIDArrayType: MyMessagesExternalMessageIDArrayType);
begin
  FExternalMessageIDs := AMyMessagesExternalMessageIDArrayType;
  FExternalMessageIDs_Specified := True;
end;

function GetMyMessagesRequestType.ExternalMessageIDs_Specified(Index: Integer): boolean;
begin
  Result := FExternalMessageIDs_Specified;
end;

procedure GetMyMessagesRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetMyMessagesRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetMyMessagesRequestType.SetIncludeHighPriorityMessageOnly(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeHighPriorityMessageOnly := ABoolean;
  FIncludeHighPriorityMessageOnly_Specified := True;
end;

function GetMyMessagesRequestType.IncludeHighPriorityMessageOnly_Specified(Index: Integer): boolean;
begin
  Result := FIncludeHighPriorityMessageOnly_Specified;
end;

constructor GetDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetDisputeRequestType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function GetDisputeRequestType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

constructor GetDescriptionTemplatesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDescriptionTemplatesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FLastModifiedTime);
  inherited Destroy;
end;

procedure GetDescriptionTemplatesRequestType.SetCategoryID(Index: Integer; const Astring: string);
begin
  FCategoryID := Astring;
  FCategoryID_Specified := True;
end;

function GetDescriptionTemplatesRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

procedure GetDescriptionTemplatesRequestType.SetLastModifiedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FLastModifiedTime := ATXSDateTime;
  FLastModifiedTime_Specified := True;
end;

function GetDescriptionTemplatesRequestType.LastModifiedTime_Specified(Index: Integer): boolean;
begin
  Result := FLastModifiedTime_Specified;
end;

procedure GetDescriptionTemplatesRequestType.SetMotorVehicles(Index: Integer; const ABoolean: Boolean);
begin
  FMotorVehicles := ABoolean;
  FMotorVehicles_Specified := True;
end;

function GetDescriptionTemplatesRequestType.MotorVehicles_Specified(Index: Integer): boolean;
begin
  Result := FMotorVehicles_Specified;
end;

constructor GetClientAlertsAuthTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetContextualKeywordsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetContextualKeywordsRequestType.SetURL(Index: Integer; const Astring: string);
begin
  FURL := Astring;
  FURL_Specified := True;
end;

function GetContextualKeywordsRequestType.URL_Specified(Index: Integer): boolean;
begin
  Result := FURL_Specified;
end;

procedure GetContextualKeywordsRequestType.SetEncoding(Index: Integer; const Astring: string);
begin
  FEncoding := Astring;
  FEncoding_Specified := True;
end;

function GetContextualKeywordsRequestType.Encoding_Specified(Index: Integer): boolean;
begin
  Result := FEncoding_Specified;
end;

procedure GetContextualKeywordsRequestType.SetCategoryID(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCategoryID := ASellerExcludeShipToLocationPreferencesType;
  FCategoryID_Specified := True;
end;

function GetContextualKeywordsRequestType.CategoryID_Specified(Index: Integer): boolean;
begin
  Result := FCategoryID_Specified;
end;

constructor GetItemShippingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetItemShippingRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetItemShippingRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetItemShippingRequestType.SetQuantitySold(Index: Integer; const AInteger: Integer);
begin
  FQuantitySold := AInteger;
  FQuantitySold_Specified := True;
end;

function GetItemShippingRequestType.QuantitySold_Specified(Index: Integer): boolean;
begin
  Result := FQuantitySold_Specified;
end;

procedure GetItemShippingRequestType.SetDestinationPostalCode(Index: Integer; const Astring: string);
begin
  FDestinationPostalCode := Astring;
  FDestinationPostalCode_Specified := True;
end;

function GetItemShippingRequestType.DestinationPostalCode_Specified(Index: Integer): boolean;
begin
  Result := FDestinationPostalCode_Specified;
end;

procedure GetItemShippingRequestType.SetDestinationCountryCode(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FDestinationCountryCode := ACountryCodeType;
  FDestinationCountryCode_Specified := True;
end;

function GetItemShippingRequestType.DestinationCountryCode_Specified(Index: Integer): boolean;
begin
  Result := FDestinationCountryCode_Specified;
end;

constructor PlaceOfferRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor PlaceOfferRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecifics)-1 do
    SysUtils.FreeAndNil(FVariationSpecifics[I]);
  System.SetLength(FVariationSpecifics, 0);
  SysUtils.FreeAndNil(FOffer);
  SysUtils.FreeAndNil(FAffiliateTrackingDetails);
  inherited Destroy;
end;

procedure PlaceOfferRequestType.SetOffer(Index: Integer; const AOfferType: OfferType);
begin
  FOffer := AOfferType;
  FOffer_Specified := True;
end;

function PlaceOfferRequestType.Offer_Specified(Index: Integer): boolean;
begin
  Result := FOffer_Specified;
end;

procedure PlaceOfferRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function PlaceOfferRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure PlaceOfferRequestType.SetBlockOnWarning(Index: Integer; const ABoolean: Boolean);
begin
  FBlockOnWarning := ABoolean;
  FBlockOnWarning_Specified := True;
end;

function PlaceOfferRequestType.BlockOnWarning_Specified(Index: Integer): boolean;
begin
  Result := FBlockOnWarning_Specified;
end;

procedure PlaceOfferRequestType.SetAffiliateTrackingDetails(Index: Integer; const AAffiliateTrackingDetailsType: AffiliateTrackingDetailsType);
begin
  FAffiliateTrackingDetails := AAffiliateTrackingDetailsType;
  FAffiliateTrackingDetails_Specified := True;
end;

function PlaceOfferRequestType.AffiliateTrackingDetails_Specified(Index: Integer): boolean;
begin
  Result := FAffiliateTrackingDetails_Specified;
end;

procedure PlaceOfferRequestType.SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecifics := ANameValueListArrayType;
  FVariationSpecifics_Specified := True;
end;

function PlaceOfferRequestType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

constructor GetItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FVariationSpecifics)-1 do
    SysUtils.FreeAndNil(FVariationSpecifics[I]);
  System.SetLength(FVariationSpecifics, 0);
  inherited Destroy;
end;

procedure GetItemRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetItemRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetItemRequestType.SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeWatchCount := ABoolean;
  FIncludeWatchCount_Specified := True;
end;

function GetItemRequestType.IncludeWatchCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeWatchCount_Specified;
end;

procedure GetItemRequestType.SetIncludeCrossPromotion(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeCrossPromotion := ABoolean;
  FIncludeCrossPromotion_Specified := True;
end;

function GetItemRequestType.IncludeCrossPromotion_Specified(Index: Integer): boolean;
begin
  Result := FIncludeCrossPromotion_Specified;
end;

procedure GetItemRequestType.SetIncludeItemSpecifics(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeItemSpecifics := ABoolean;
  FIncludeItemSpecifics_Specified := True;
end;

function GetItemRequestType.IncludeItemSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FIncludeItemSpecifics_Specified;
end;

procedure GetItemRequestType.SetIncludeTaxTable(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeTaxTable := ABoolean;
  FIncludeTaxTable_Specified := True;
end;

function GetItemRequestType.IncludeTaxTable_Specified(Index: Integer): boolean;
begin
  Result := FIncludeTaxTable_Specified;
end;

procedure GetItemRequestType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function GetItemRequestType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure GetItemRequestType.SetVariationSKU(Index: Integer; const ASKUType: SKUType);
begin
  FVariationSKU := ASKUType;
  FVariationSKU_Specified := True;
end;

function GetItemRequestType.VariationSKU_Specified(Index: Integer): boolean;
begin
  Result := FVariationSKU_Specified;
end;

procedure GetItemRequestType.SetVariationSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FVariationSpecifics := ANameValueListArrayType;
  FVariationSpecifics_Specified := True;
end;

function GetItemRequestType.VariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FVariationSpecifics_Specified;
end;

procedure GetItemRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function GetItemRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure GetItemRequestType.SetIncludeItemCompatibilityList(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeItemCompatibilityList := ABoolean;
  FIncludeItemCompatibilityList_Specified := True;
end;

function GetItemRequestType.IncludeItemCompatibilityList_Specified(Index: Integer): boolean;
begin
  Result := FIncludeItemCompatibilityList_Specified;
end;

constructor LeaveFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor LeaveFeedbackRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FSellerItemRatingDetailArray)-1 do
    SysUtils.FreeAndNil(FSellerItemRatingDetailArray[I]);
  System.SetLength(FSellerItemRatingDetailArray, 0);
  inherited Destroy;
end;

procedure LeaveFeedbackRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function LeaveFeedbackRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure LeaveFeedbackRequestType.SetCommentText(Index: Integer; const Astring: string);
begin
  FCommentText := Astring;
  FCommentText_Specified := True;
end;

function LeaveFeedbackRequestType.CommentText_Specified(Index: Integer): boolean;
begin
  Result := FCommentText_Specified;
end;

procedure LeaveFeedbackRequestType.SetCommentType(Index: Integer; const ACommentTypeCodeType: CommentTypeCodeType);
begin
  FCommentType := ACommentTypeCodeType;
  FCommentType_Specified := True;
end;

function LeaveFeedbackRequestType.CommentType_Specified(Index: Integer): boolean;
begin
  Result := FCommentType_Specified;
end;

procedure LeaveFeedbackRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function LeaveFeedbackRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure LeaveFeedbackRequestType.SetTargetUser(Index: Integer; const AUserIDType: UserIDType);
begin
  FTargetUser := AUserIDType;
  FTargetUser_Specified := True;
end;

function LeaveFeedbackRequestType.TargetUser_Specified(Index: Integer): boolean;
begin
  Result := FTargetUser_Specified;
end;

procedure LeaveFeedbackRequestType.SetSellerItemRatingDetailArray(Index: Integer; const AItemRatingDetailArrayType: ItemRatingDetailArrayType);
begin
  FSellerItemRatingDetailArray := AItemRatingDetailArrayType;
  FSellerItemRatingDetailArray_Specified := True;
end;

function LeaveFeedbackRequestType.SellerItemRatingDetailArray_Specified(Index: Integer): boolean;
begin
  Result := FSellerItemRatingDetailArray_Specified;
end;

procedure LeaveFeedbackRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function LeaveFeedbackRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

procedure LeaveFeedbackRequestType.SetItemArrivedWithinEDDType(Index: Integer; const AItemArrivedWithinEDDCodeType: ItemArrivedWithinEDDCodeType);
begin
  FItemArrivedWithinEDDType := AItemArrivedWithinEDDCodeType;
  FItemArrivedWithinEDDType_Specified := True;
end;

function LeaveFeedbackRequestType.ItemArrivedWithinEDDType_Specified(Index: Integer): boolean;
begin
  Result := FItemArrivedWithinEDDType_Specified;
end;

procedure LeaveFeedbackRequestType.SetItemDeliveredWithinEDD(Index: Integer; const ABoolean: Boolean);
begin
  FItemDeliveredWithinEDD := ABoolean;
  FItemDeliveredWithinEDD_Specified := True;
end;

function LeaveFeedbackRequestType.ItemDeliveredWithinEDD_Specified(Index: Integer): boolean;
begin
  Result := FItemDeliveredWithinEDD_Specified;
end;

constructor GetFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetFeedbackRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetFeedbackRequestType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function GetFeedbackRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetFeedbackRequestType.SetFeedbackID(Index: Integer; const Astring: string);
begin
  FFeedbackID := Astring;
  FFeedbackID_Specified := True;
end;

function GetFeedbackRequestType.FeedbackID_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackID_Specified;
end;

procedure GetFeedbackRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetFeedbackRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetFeedbackRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function GetFeedbackRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure GetFeedbackRequestType.SetCommentType(Index: Integer; const AArray_Of_CommentTypeCodeType: Array_Of_CommentTypeCodeType);
begin
  FCommentType := AArray_Of_CommentTypeCodeType;
  FCommentType_Specified := True;
end;

function GetFeedbackRequestType.CommentType_Specified(Index: Integer): boolean;
begin
  Result := FCommentType_Specified;
end;

procedure GetFeedbackRequestType.SetFeedbackType(Index: Integer; const AFeedbackTypeCodeType: FeedbackTypeCodeType);
begin
  FFeedbackType := AFeedbackTypeCodeType;
  FFeedbackType_Specified := True;
end;

function GetFeedbackRequestType.FeedbackType_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackType_Specified;
end;

procedure GetFeedbackRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetFeedbackRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetFeedbackRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function GetFeedbackRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetAccountRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAccountRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FInvoiceDate);
  SysUtils.FreeAndNil(FBeginDate);
  SysUtils.FreeAndNil(FEndDate);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetAccountRequestType.SetAccountHistorySelection(Index: Integer; const AAccountHistorySelectionCodeType: AccountHistorySelectionCodeType);
begin
  FAccountHistorySelection := AAccountHistorySelectionCodeType;
  FAccountHistorySelection_Specified := True;
end;

function GetAccountRequestType.AccountHistorySelection_Specified(Index: Integer): boolean;
begin
  Result := FAccountHistorySelection_Specified;
end;

procedure GetAccountRequestType.SetInvoiceDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInvoiceDate := ATXSDateTime;
  FInvoiceDate_Specified := True;
end;

function GetAccountRequestType.InvoiceDate_Specified(Index: Integer): boolean;
begin
  Result := FInvoiceDate_Specified;
end;

procedure GetAccountRequestType.SetBeginDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FBeginDate := ATXSDateTime;
  FBeginDate_Specified := True;
end;

function GetAccountRequestType.BeginDate_Specified(Index: Integer): boolean;
begin
  Result := FBeginDate_Specified;
end;

procedure GetAccountRequestType.SetEndDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndDate := ATXSDateTime;
  FEndDate_Specified := True;
end;

function GetAccountRequestType.EndDate_Specified(Index: Integer): boolean;
begin
  Result := FEndDate_Specified;
end;

procedure GetAccountRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetAccountRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetAccountRequestType.SetExcludeBalance(Index: Integer; const ABoolean: Boolean);
begin
  FExcludeBalance := ABoolean;
  FExcludeBalance_Specified := True;
end;

function GetAccountRequestType.ExcludeBalance_Specified(Index: Integer): boolean;
begin
  Result := FExcludeBalance_Specified;
end;

procedure GetAccountRequestType.SetExcludeSummary(Index: Integer; const ABoolean: Boolean);
begin
  FExcludeSummary := ABoolean;
  FExcludeSummary_Specified := True;
end;

function GetAccountRequestType.ExcludeSummary_Specified(Index: Integer): boolean;
begin
  Result := FExcludeSummary_Specified;
end;

procedure GetAccountRequestType.SetIncludeConversionRate(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeConversionRate := ABoolean;
  FIncludeConversionRate_Specified := True;
end;

function GetAccountRequestType.IncludeConversionRate_Specified(Index: Integer): boolean;
begin
  Result := FIncludeConversionRate_Specified;
end;

procedure GetAccountRequestType.SetAccountEntrySortType(Index: Integer; const AAccountEntrySortTypeCodeType: AccountEntrySortTypeCodeType);
begin
  FAccountEntrySortType := AAccountEntrySortTypeCodeType;
  FAccountEntrySortType_Specified := True;
end;

function GetAccountRequestType.AccountEntrySortType_Specified(Index: Integer): boolean;
begin
  Result := FAccountEntrySortType_Specified;
end;

procedure GetAccountRequestType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function GetAccountRequestType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure GetAccountRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetAccountRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetAccountRequestType.SetOrderID(Index: Integer; const Astring: string);
begin
  FOrderID := Astring;
  FOrderID_Specified := True;
end;

function GetAccountRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

constructor AddMemberMessagesAAQToBidderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessagesAAQToBidderRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAddMemberMessagesAAQToBidderRequestContainer)-1 do
    SysUtils.FreeAndNil(FAddMemberMessagesAAQToBidderRequestContainer[I]);
  System.SetLength(FAddMemberMessagesAAQToBidderRequestContainer, 0);
  inherited Destroy;
end;

procedure AddMemberMessagesAAQToBidderRequestType.SetAddMemberMessagesAAQToBidderRequestContainer(Index: Integer; const AArray_Of_AddMemberMessagesAAQToBidderRequestContainerType: Array_Of_AddMemberMessagesAAQToBidderRequestContainerType);
begin
  FAddMemberMessagesAAQToBidderRequestContainer := AArray_Of_AddMemberMessagesAAQToBidderRequestContainerType;
  FAddMemberMessagesAAQToBidderRequestContainer_Specified := True;
end;

function AddMemberMessagesAAQToBidderRequestType.AddMemberMessagesAAQToBidderRequestContainer_Specified(Index: Integer): boolean;
begin
  Result := FAddMemberMessagesAAQToBidderRequestContainer_Specified;
end;

constructor AddOrderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddOrderRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FOrder);
  inherited Destroy;
end;

procedure AddOrderRequestType.SetOrder(Index: Integer; const AOrderType: OrderType);
begin
  FOrder := AOrderType;
  FOrder_Specified := True;
end;

function AddOrderRequestType.Order_Specified(Index: Integer): boolean;
begin
  Result := FOrder_Specified;
end;

constructor AddMemberMessageRTQRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessageRTQRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FMemberMessage);
  inherited Destroy;
end;

procedure AddMemberMessageRTQRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddMemberMessageRTQRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddMemberMessageRTQRequestType.SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
begin
  FMemberMessage := AMemberMessageType;
  FMemberMessage_Specified := True;
end;

function AddMemberMessageRTQRequestType.MemberMessage_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessage_Specified;
end;

constructor AddMemberMessageAAQToPartnerRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessageAAQToPartnerRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FMemberMessage);
  inherited Destroy;
end;

procedure AddMemberMessageAAQToPartnerRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddMemberMessageAAQToPartnerRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddMemberMessageAAQToPartnerRequestType.SetMemberMessage(Index: Integer; const AMemberMessageType: MemberMessageType);
begin
  FMemberMessage := AMemberMessageType;
  FMemberMessage_Specified := True;
end;

function AddMemberMessageAAQToPartnerRequestType.MemberMessage_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessage_Specified;
end;

constructor AddSellingManagerInventoryFolderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddSellingManagerInventoryFolderRequestType.SetFolderName(Index: Integer; const Astring: string);
begin
  FFolderName := Astring;
  FFolderName_Specified := True;
end;

function AddSellingManagerInventoryFolderRequestType.FolderName_Specified(Index: Integer): boolean;
begin
  Result := FFolderName_Specified;
end;

procedure AddSellingManagerInventoryFolderRequestType.SetParentFolderID(Index: Integer; const AInt64: Int64);
begin
  FParentFolderID := AInt64;
  FParentFolderID_Specified := True;
end;

function AddSellingManagerInventoryFolderRequestType.ParentFolderID_Specified(Index: Integer): boolean;
begin
  Result := FParentFolderID_Specified;
end;

procedure AddSellingManagerInventoryFolderRequestType.SetComment(Index: Integer; const Astring: string);
begin
  FComment := Astring;
  FComment_Specified := True;
end;

function AddSellingManagerInventoryFolderRequestType.Comment_Specified(Index: Integer): boolean;
begin
  Result := FComment_Specified;
end;

constructor AddSellingManagerProductRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSellingManagerProductRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FSellingManagerProductDetails);
  SysUtils.FreeAndNil(FSellingManagerProductSpecifics);
  inherited Destroy;
end;

procedure AddSellingManagerProductRequestType.SetSellingManagerProductDetails(Index: Integer; const ASellingManagerProductDetailsType: SellingManagerProductDetailsType);
begin
  FSellingManagerProductDetails := ASellingManagerProductDetailsType;
  FSellingManagerProductDetails_Specified := True;
end;

function AddSellingManagerProductRequestType.SellingManagerProductDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductDetails_Specified;
end;

procedure AddSellingManagerProductRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function AddSellingManagerProductRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure AddSellingManagerProductRequestType.SetSellingManagerProductSpecifics(Index: Integer; const ASellingManagerProductSpecificsType: SellingManagerProductSpecificsType);
begin
  FSellingManagerProductSpecifics := ASellingManagerProductSpecificsType;
  FSellingManagerProductSpecifics_Specified := True;
end;

function AddSellingManagerProductRequestType.SellingManagerProductSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FSellingManagerProductSpecifics_Specified;
end;

constructor AddTransactionConfirmationItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddTransactionConfirmationItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FNegotiatedPrice);
  inherited Destroy;
end;

constructor GetSellingManagerSaleRecordRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSellingManagerSaleRecordRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetSellingManagerSaleRecordRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetSellingManagerSaleRecordRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function GetSellingManagerSaleRecordRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure GetSellingManagerSaleRecordRequestType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function GetSellingManagerSaleRecordRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure GetSellingManagerSaleRecordRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function GetSellingManagerSaleRecordRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetSellingManagerEmailLogRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerEmailLogRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FEmailDateRange);
  inherited Destroy;
end;

procedure GetSellingManagerEmailLogRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetSellingManagerEmailLogRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetSellingManagerEmailLogRequestType.SetTransactionID(Index: Integer; const AInt64: Int64);
begin
  FTransactionID := AInt64;
  FTransactionID_Specified := True;
end;

function GetSellingManagerEmailLogRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure GetSellingManagerEmailLogRequestType.SetOrderID(Index: Integer; const AOrderIDType: OrderIDType);
begin
  FOrderID := AOrderIDType;
  FOrderID_Specified := True;
end;

function GetSellingManagerEmailLogRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure GetSellingManagerEmailLogRequestType.SetEmailDateRange(Index: Integer; const ATimeRangeType: TimeRangeType);
begin
  FEmailDateRange := ATimeRangeType;
  FEmailDateRange_Specified := True;
end;

function GetSellingManagerEmailLogRequestType.EmailDateRange_Specified(Index: Integer): boolean;
begin
  Result := FEmailDateRange_Specified;
end;

procedure GetSellingManagerEmailLogRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function GetSellingManagerEmailLogRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetStoreRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetStoreRequestType.SetCategoryStructureOnly(Index: Integer; const ABoolean: Boolean);
begin
  FCategoryStructureOnly := ABoolean;
  FCategoryStructureOnly_Specified := True;
end;

function GetStoreRequestType.CategoryStructureOnly_Specified(Index: Integer): boolean;
begin
  Result := FCategoryStructureOnly_Specified;
end;

procedure GetStoreRequestType.SetRootCategoryID(Index: Integer; const AInt64: Int64);
begin
  FRootCategoryID := AInt64;
  FRootCategoryID_Specified := True;
end;

function GetStoreRequestType.RootCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FRootCategoryID_Specified;
end;

procedure GetStoreRequestType.SetLevelLimit(Index: Integer; const AInteger: Integer);
begin
  FLevelLimit := AInteger;
  FLevelLimit_Specified := True;
end;

function GetStoreRequestType.LevelLimit_Specified(Index: Integer): boolean;
begin
  Result := FLevelLimit_Specified;
end;

procedure GetStoreRequestType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function GetStoreRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

constructor GetSellerEventsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerEventsRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTimeFrom);
  SysUtils.FreeAndNil(FStartTimeTo);
  SysUtils.FreeAndNil(FEndTimeFrom);
  SysUtils.FreeAndNil(FEndTimeTo);
  SysUtils.FreeAndNil(FModTimeFrom);
  SysUtils.FreeAndNil(FModTimeTo);
  inherited Destroy;
end;

procedure GetSellerEventsRequestType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function GetSellerEventsRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetSellerEventsRequestType.SetStartTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTimeFrom := ATXSDateTime;
  FStartTimeFrom_Specified := True;
end;

function GetSellerEventsRequestType.StartTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FStartTimeFrom_Specified;
end;

procedure GetSellerEventsRequestType.SetStartTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTimeTo := ATXSDateTime;
  FStartTimeTo_Specified := True;
end;

function GetSellerEventsRequestType.StartTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FStartTimeTo_Specified;
end;

procedure GetSellerEventsRequestType.SetEndTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeFrom := ATXSDateTime;
  FEndTimeFrom_Specified := True;
end;

function GetSellerEventsRequestType.EndTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeFrom_Specified;
end;

procedure GetSellerEventsRequestType.SetEndTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTimeTo := ATXSDateTime;
  FEndTimeTo_Specified := True;
end;

function GetSellerEventsRequestType.EndTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FEndTimeTo_Specified;
end;

procedure GetSellerEventsRequestType.SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeFrom := ATXSDateTime;
  FModTimeFrom_Specified := True;
end;

function GetSellerEventsRequestType.ModTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FModTimeFrom_Specified;
end;

procedure GetSellerEventsRequestType.SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeTo := ATXSDateTime;
  FModTimeTo_Specified := True;
end;

function GetSellerEventsRequestType.ModTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FModTimeTo_Specified;
end;

procedure GetSellerEventsRequestType.SetNewItemFilter(Index: Integer; const ABoolean: Boolean);
begin
  FNewItemFilter := ABoolean;
  FNewItemFilter_Specified := True;
end;

function GetSellerEventsRequestType.NewItemFilter_Specified(Index: Integer): boolean;
begin
  Result := FNewItemFilter_Specified;
end;

procedure GetSellerEventsRequestType.SetIncludeWatchCount(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeWatchCount := ABoolean;
  FIncludeWatchCount_Specified := True;
end;

function GetSellerEventsRequestType.IncludeWatchCount_Specified(Index: Integer): boolean;
begin
  Result := FIncludeWatchCount_Specified;
end;

procedure GetSellerEventsRequestType.SetIncludeVariationSpecifics(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeVariationSpecifics := ABoolean;
  FIncludeVariationSpecifics_Specified := True;
end;

function GetSellerEventsRequestType.IncludeVariationSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FIncludeVariationSpecifics_Specified;
end;

procedure GetSellerEventsRequestType.SetHideVariations(Index: Integer; const ABoolean: Boolean);
begin
  FHideVariations := ABoolean;
  FHideVariations_Specified := True;
end;

function GetSellerEventsRequestType.HideVariations_Specified(Index: Integer): boolean;
begin
  Result := FHideVariations_Specified;
end;

constructor RespondToFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure RespondToFeedbackRequestType.SetFeedbackID(Index: Integer; const Astring: string);
begin
  FFeedbackID := Astring;
  FFeedbackID_Specified := True;
end;

function RespondToFeedbackRequestType.FeedbackID_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackID_Specified;
end;

procedure RespondToFeedbackRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function RespondToFeedbackRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure RespondToFeedbackRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function RespondToFeedbackRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure RespondToFeedbackRequestType.SetTargetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FTargetUserID := AUserIDType;
  FTargetUserID_Specified := True;
end;

function RespondToFeedbackRequestType.TargetUserID_Specified(Index: Integer): boolean;
begin
  Result := FTargetUserID_Specified;
end;

procedure RespondToFeedbackRequestType.SetResponseType(Index: Integer; const AFeedbackResponseCodeType: FeedbackResponseCodeType);
begin
  FResponseType := AFeedbackResponseCodeType;
  FResponseType_Specified := True;
end;

function RespondToFeedbackRequestType.ResponseType_Specified(Index: Integer): boolean;
begin
  Result := FResponseType_Specified;
end;

procedure RespondToFeedbackRequestType.SetResponseText(Index: Integer; const Astring: string);
begin
  FResponseText := Astring;
  FResponseText_Specified := True;
end;

function RespondToFeedbackRequestType.ResponseText_Specified(Index: Integer): boolean;
begin
  Result := FResponseText_Specified;
end;

procedure RespondToFeedbackRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function RespondToFeedbackRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor AddSecondChanceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSecondChanceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FBuyItNowPrice);
  inherited Destroy;
end;

procedure AddSecondChanceItemRequestType.SetRecipientBidderUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FRecipientBidderUserID := AUserIDType;
  FRecipientBidderUserID_Specified := True;
end;

function AddSecondChanceItemRequestType.RecipientBidderUserID_Specified(Index: Integer): boolean;
begin
  Result := FRecipientBidderUserID_Specified;
end;

procedure AddSecondChanceItemRequestType.SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
begin
  FBuyItNowPrice := AAmountType;
  FBuyItNowPrice_Specified := True;
end;

function AddSecondChanceItemRequestType.BuyItNowPrice_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowPrice_Specified;
end;

procedure AddSecondChanceItemRequestType.SetDuration(Index: Integer; const ASecondChanceOfferDurationCodeType: SecondChanceOfferDurationCodeType);
begin
  FDuration := ASecondChanceOfferDurationCodeType;
  FDuration_Specified := True;
end;

function AddSecondChanceItemRequestType.Duration_Specified(Index: Integer): boolean;
begin
  Result := FDuration_Specified;
end;

procedure AddSecondChanceItemRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddSecondChanceItemRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddSecondChanceItemRequestType.SetSellerMessage(Index: Integer; const Astring: string);
begin
  FSellerMessage := Astring;
  FSellerMessage_Specified := True;
end;

function AddSecondChanceItemRequestType.SellerMessage_Specified(Index: Integer): boolean;
begin
  Result := FSellerMessage_Specified;
end;

constructor AddItemsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAddItemRequestContainer)-1 do
    SysUtils.FreeAndNil(FAddItemRequestContainer[I]);
  System.SetLength(FAddItemRequestContainer, 0);
  inherited Destroy;
end;

procedure AddItemsRequestType.SetAddItemRequestContainer(Index: Integer; const AArray_Of_AddItemRequestContainerType: Array_Of_AddItemRequestContainerType);
begin
  FAddItemRequestContainer := AArray_Of_AddItemRequestContainerType;
  FAddItemRequestContainer_Specified := True;
end;

function AddItemsRequestType.AddItemRequestContainer_Specified(Index: Integer): boolean;
begin
  Result := FAddItemRequestContainer_Specified;
end;

constructor AddDisputeResponseRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddDisputeResponseRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FShippingTime);
  inherited Destroy;
end;

procedure AddDisputeResponseRequestType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function AddDisputeResponseRequestType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

procedure AddDisputeResponseRequestType.SetMessageText(Index: Integer; const Astring: string);
begin
  FMessageText := Astring;
  FMessageText_Specified := True;
end;

function AddDisputeResponseRequestType.MessageText_Specified(Index: Integer): boolean;
begin
  Result := FMessageText_Specified;
end;

procedure AddDisputeResponseRequestType.SetDisputeActivity(Index: Integer; const ADisputeActivityCodeType: DisputeActivityCodeType);
begin
  FDisputeActivity := ADisputeActivityCodeType;
  FDisputeActivity_Specified := True;
end;

function AddDisputeResponseRequestType.DisputeActivity_Specified(Index: Integer): boolean;
begin
  Result := FDisputeActivity_Specified;
end;

procedure AddDisputeResponseRequestType.SetShippingCarrierUsed(Index: Integer; const Astring: string);
begin
  FShippingCarrierUsed := Astring;
  FShippingCarrierUsed_Specified := True;
end;

function AddDisputeResponseRequestType.ShippingCarrierUsed_Specified(Index: Integer): boolean;
begin
  Result := FShippingCarrierUsed_Specified;
end;

procedure AddDisputeResponseRequestType.SetShipmentTrackNumber(Index: Integer; const Astring: string);
begin
  FShipmentTrackNumber := Astring;
  FShipmentTrackNumber_Specified := True;
end;

function AddDisputeResponseRequestType.ShipmentTrackNumber_Specified(Index: Integer): boolean;
begin
  Result := FShipmentTrackNumber_Specified;
end;

procedure AddDisputeResponseRequestType.SetShippingTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FShippingTime := ATXSDateTime;
  FShippingTime_Specified := True;
end;

function AddDisputeResponseRequestType.ShippingTime_Specified(Index: Integer): boolean;
begin
  Result := FShippingTime_Specified;
end;

constructor DisableUnpaidItemAssistanceRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DisableUnpaidItemAssistanceRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function DisableUnpaidItemAssistanceRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure DisableUnpaidItemAssistanceRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function DisableUnpaidItemAssistanceRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure DisableUnpaidItemAssistanceRequestType.SetDisputeID(Index: Integer; const ADisputeIDType: DisputeIDType);
begin
  FDisputeID := ADisputeIDType;
  FDisputeID_Specified := True;
end;

function DisableUnpaidItemAssistanceRequestType.DisputeID_Specified(Index: Integer): boolean;
begin
  Result := FDisputeID_Specified;
end;

procedure DisableUnpaidItemAssistanceRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function DisableUnpaidItemAssistanceRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetNotificationsUsageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationsUsageRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FStartTime);
  SysUtils.FreeAndNil(FEndTime);
  inherited Destroy;
end;

procedure GetNotificationsUsageRequestType.SetStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FStartTime := ATXSDateTime;
  FStartTime_Specified := True;
end;

function GetNotificationsUsageRequestType.StartTime_Specified(Index: Integer): boolean;
begin
  Result := FStartTime_Specified;
end;

procedure GetNotificationsUsageRequestType.SetEndTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEndTime := ATXSDateTime;
  FEndTime_Specified := True;
end;

function GetNotificationsUsageRequestType.EndTime_Specified(Index: Integer): boolean;
begin
  Result := FEndTime_Specified;
end;

procedure GetNotificationsUsageRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetNotificationsUsageRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

constructor GetOrdersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrdersRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FCreateTimeFrom);
  SysUtils.FreeAndNil(FCreateTimeTo);
  SysUtils.FreeAndNil(FPagination);
  SysUtils.FreeAndNil(FModTimeFrom);
  SysUtils.FreeAndNil(FModTimeTo);
  inherited Destroy;
end;

procedure GetOrdersRequestType.SetOrderIDArray(Index: Integer; const AOrderIDArrayType: OrderIDArrayType);
begin
  FOrderIDArray := AOrderIDArrayType;
  FOrderIDArray_Specified := True;
end;

function GetOrdersRequestType.OrderIDArray_Specified(Index: Integer): boolean;
begin
  Result := FOrderIDArray_Specified;
end;

procedure GetOrdersRequestType.SetCreateTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreateTimeFrom := ATXSDateTime;
  FCreateTimeFrom_Specified := True;
end;

function GetOrdersRequestType.CreateTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FCreateTimeFrom_Specified;
end;

procedure GetOrdersRequestType.SetCreateTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FCreateTimeTo := ATXSDateTime;
  FCreateTimeTo_Specified := True;
end;

function GetOrdersRequestType.CreateTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FCreateTimeTo_Specified;
end;

procedure GetOrdersRequestType.SetOrderRole(Index: Integer; const ATradingRoleCodeType: TradingRoleCodeType);
begin
  FOrderRole := ATradingRoleCodeType;
  FOrderRole_Specified := True;
end;

function GetOrdersRequestType.OrderRole_Specified(Index: Integer): boolean;
begin
  Result := FOrderRole_Specified;
end;

procedure GetOrdersRequestType.SetOrderStatus(Index: Integer; const AOrderStatusCodeType: OrderStatusCodeType);
begin
  FOrderStatus := AOrderStatusCodeType;
  FOrderStatus_Specified := True;
end;

function GetOrdersRequestType.OrderStatus_Specified(Index: Integer): boolean;
begin
  Result := FOrderStatus_Specified;
end;

procedure GetOrdersRequestType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function GetOrdersRequestType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure GetOrdersRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetOrdersRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetOrdersRequestType.SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeFrom := ATXSDateTime;
  FModTimeFrom_Specified := True;
end;

function GetOrdersRequestType.ModTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FModTimeFrom_Specified;
end;

procedure GetOrdersRequestType.SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeTo := ATXSDateTime;
  FModTimeTo_Specified := True;
end;

function GetOrdersRequestType.ModTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FModTimeTo_Specified;
end;

procedure GetOrdersRequestType.SetNumberOfDays(Index: Integer; const AInteger: Integer);
begin
  FNumberOfDays := AInteger;
  FNumberOfDays_Specified := True;
end;

function GetOrdersRequestType.NumberOfDays_Specified(Index: Integer): boolean;
begin
  Result := FNumberOfDays_Specified;
end;

procedure GetOrdersRequestType.SetIncludeFinalValueFee(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFinalValueFee := ABoolean;
  FIncludeFinalValueFee_Specified := True;
end;

function GetOrdersRequestType.IncludeFinalValueFee_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFinalValueFee_Specified;
end;

procedure GetOrdersRequestType.SetSortingOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSortingOrder := ASortOrderCodeType;
  FSortingOrder_Specified := True;
end;

function GetOrdersRequestType.SortingOrder_Specified(Index: Integer): boolean;
begin
  Result := FSortingOrder_Specified;
end;

constructor GetUserDisputesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserDisputesRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FModTimeFrom);
  SysUtils.FreeAndNil(FModTimeTo);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetUserDisputesRequestType.SetDisputeFilterType(Index: Integer; const ADisputeFilterTypeCodeType: DisputeFilterTypeCodeType);
begin
  FDisputeFilterType := ADisputeFilterTypeCodeType;
  FDisputeFilterType_Specified := True;
end;

function GetUserDisputesRequestType.DisputeFilterType_Specified(Index: Integer): boolean;
begin
  Result := FDisputeFilterType_Specified;
end;

procedure GetUserDisputesRequestType.SetDisputeSortType(Index: Integer; const ADisputeSortTypeCodeType: DisputeSortTypeCodeType);
begin
  FDisputeSortType := ADisputeSortTypeCodeType;
  FDisputeSortType_Specified := True;
end;

function GetUserDisputesRequestType.DisputeSortType_Specified(Index: Integer): boolean;
begin
  Result := FDisputeSortType_Specified;
end;

procedure GetUserDisputesRequestType.SetModTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeFrom := ATXSDateTime;
  FModTimeFrom_Specified := True;
end;

function GetUserDisputesRequestType.ModTimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FModTimeFrom_Specified;
end;

procedure GetUserDisputesRequestType.SetModTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTimeTo := ATXSDateTime;
  FModTimeTo_Specified := True;
end;

function GetUserDisputesRequestType.ModTimeTo_Specified(Index: Integer): boolean;
begin
  Result := FModTimeTo_Specified;
end;

procedure GetUserDisputesRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetUserDisputesRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

constructor GetVeROReportStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReportStatusRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FTimeFrom);
  SysUtils.FreeAndNil(FTimeTo);
  SysUtils.FreeAndNil(FPagination);
  inherited Destroy;
end;

procedure GetVeROReportStatusRequestType.SetVeROReportPacketID(Index: Integer; const AInt64: Int64);
begin
  FVeROReportPacketID := AInt64;
  FVeROReportPacketID_Specified := True;
end;

function GetVeROReportStatusRequestType.VeROReportPacketID_Specified(Index: Integer): boolean;
begin
  Result := FVeROReportPacketID_Specified;
end;

procedure GetVeROReportStatusRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetVeROReportStatusRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetVeROReportStatusRequestType.SetIncludeReportedItemDetails(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeReportedItemDetails := ABoolean;
  FIncludeReportedItemDetails_Specified := True;
end;

function GetVeROReportStatusRequestType.IncludeReportedItemDetails_Specified(Index: Integer): boolean;
begin
  Result := FIncludeReportedItemDetails_Specified;
end;

procedure GetVeROReportStatusRequestType.SetTimeFrom(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeFrom := ATXSDateTime;
  FTimeFrom_Specified := True;
end;

function GetVeROReportStatusRequestType.TimeFrom_Specified(Index: Integer): boolean;
begin
  Result := FTimeFrom_Specified;
end;

procedure GetVeROReportStatusRequestType.SetTimeTo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FTimeTo := ATXSDateTime;
  FTimeTo_Specified := True;
end;

function GetVeROReportStatusRequestType.TimeTo_Specified(Index: Integer): boolean;
begin
  Result := FTimeTo_Specified;
end;

procedure GetVeROReportStatusRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetVeROReportStatusRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

constructor AddItemFromSellingManagerTemplateRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemFromSellingManagerTemplateRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FScheduleTime);
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure AddItemFromSellingManagerTemplateRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function AddItemFromSellingManagerTemplateRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure AddItemFromSellingManagerTemplateRequestType.SetScheduleTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FScheduleTime := ATXSDateTime;
  FScheduleTime_Specified := True;
end;

function AddItemFromSellingManagerTemplateRequestType.ScheduleTime_Specified(Index: Integer): boolean;
begin
  Result := FScheduleTime_Specified;
end;

procedure AddItemFromSellingManagerTemplateRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function AddItemFromSellingManagerTemplateRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

constructor AddDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddDisputeRequestType.SetDisputeExplanation(Index: Integer; const ADisputeExplanationCodeType: DisputeExplanationCodeType);
begin
  FDisputeExplanation := ADisputeExplanationCodeType;
  FDisputeExplanation_Specified := True;
end;

function AddDisputeRequestType.DisputeExplanation_Specified(Index: Integer): boolean;
begin
  Result := FDisputeExplanation_Specified;
end;

procedure AddDisputeRequestType.SetDisputeReason(Index: Integer; const ADisputeReasonCodeType: DisputeReasonCodeType);
begin
  FDisputeReason := ADisputeReasonCodeType;
  FDisputeReason_Specified := True;
end;

function AddDisputeRequestType.DisputeReason_Specified(Index: Integer): boolean;
begin
  Result := FDisputeReason_Specified;
end;

procedure AddDisputeRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddDisputeRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddDisputeRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function AddDisputeRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure AddDisputeRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function AddDisputeRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor GetSellingManagerInventoryRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerInventoryRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FPagination);
  SysUtils.FreeAndNil(FSearch);
  inherited Destroy;
end;

procedure GetSellingManagerInventoryRequestType.SetSort(Index: Integer; const ASellingManagerProductSortCodeType: SellingManagerProductSortCodeType);
begin
  FSort := ASellingManagerProductSortCodeType;
  FSort_Specified := True;
end;

function GetSellingManagerInventoryRequestType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function GetSellingManagerInventoryRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetSellingManagerInventoryRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSortOrder := ASortOrderCodeType;
  FSortOrder_Specified := True;
end;

function GetSellingManagerInventoryRequestType.SortOrder_Specified(Index: Integer): boolean;
begin
  Result := FSortOrder_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetSearch(Index: Integer; const ASellingManagerSearchType: SellingManagerSearchType);
begin
  FSearch := ASellingManagerSearchType;
  FSearch_Specified := True;
end;

function GetSellingManagerInventoryRequestType.Search_Specified(Index: Integer): boolean;
begin
  Result := FSearch_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetStoreCategoryID(Index: Integer; const AInt64: Int64);
begin
  FStoreCategoryID := AInt64;
  FStoreCategoryID_Specified := True;
end;

function GetSellingManagerInventoryRequestType.StoreCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategoryID_Specified;
end;

procedure GetSellingManagerInventoryRequestType.SetFilter(Index: Integer; const AArray_Of_SellingManagerInventoryPropertyTypeCodeType: Array_Of_SellingManagerInventoryPropertyTypeCodeType);
begin
  FFilter := AArray_Of_SellingManagerInventoryPropertyTypeCodeType;
  FFilter_Specified := True;
end;

function GetSellingManagerInventoryRequestType.Filter_Specified(Index: Integer): boolean;
begin
  Result := FFilter_Specified;
end;

constructor GetSellingManagerInventoryFolderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSellingManagerInventoryFolderRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function GetSellingManagerInventoryFolderRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure GetSellingManagerInventoryFolderRequestType.SetMaxDepth(Index: Integer; const AInteger: Integer);
begin
  FMaxDepth := AInteger;
  FMaxDepth_Specified := True;
end;

function GetSellingManagerInventoryFolderRequestType.MaxDepth_Specified(Index: Integer): boolean;
begin
  Result := FMaxDepth_Specified;
end;

procedure GetSellingManagerInventoryFolderRequestType.SetFullRecursion(Index: Integer; const ABoolean: Boolean);
begin
  FFullRecursion := ABoolean;
  FFullRecursion_Specified := True;
end;

function GetSellingManagerInventoryFolderRequestType.FullRecursion_Specified(Index: Integer): boolean;
begin
  Result := FFullRecursion_Specified;
end;

constructor GetSellingManagerItemAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSellingManagerItemAutomationRuleRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetSellingManagerItemAutomationRuleRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

constructor GetSellingManagerAlertsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreCustomPageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetStoreCustomPageRequestType.SetPageID(Index: Integer; const AInt64: Int64);
begin
  FPageID := AInt64;
  FPageID_Specified := True;
end;

function GetStoreCustomPageRequestType.PageID_Specified(Index: Integer): boolean;
begin
  Result := FPageID_Specified;
end;

constructor GetStoreCategoryUpdateStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetStoreCategoryUpdateStatusRequestType.SetTaskID(Index: Integer; const AInt64: Int64);
begin
  FTaskID := AInt64;
  FTaskID_Specified := True;
end;

function GetStoreCategoryUpdateStatusRequestType.TaskID_Specified(Index: Integer): boolean;
begin
  Result := FTaskID_Specified;
end;

constructor GetSellingManagerTemplateAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSellingManagerTemplateAutomationRuleRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function GetSellingManagerTemplateAutomationRuleRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

constructor GetSellingManagerSoldListingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellingManagerSoldListingsRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FSearch);
  SysUtils.FreeAndNil(FPagination);
  SysUtils.FreeAndNil(FSaleDateRange);
  inherited Destroy;
end;

procedure GetSellingManagerSoldListingsRequestType.SetSearch(Index: Integer; const ASellingManagerSearchType: SellingManagerSearchType);
begin
  FSearch := ASellingManagerSearchType;
  FSearch_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.Search_Specified(Index: Integer): boolean;
begin
  Result := FSearch_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetStoreCategoryID(Index: Integer; const AInt64: Int64);
begin
  FStoreCategoryID := AInt64;
  FStoreCategoryID_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.StoreCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FStoreCategoryID_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetFilter(Index: Integer; const AArray_Of_SellingManagerSoldListingsPropertyTypeCodeType: Array_Of_SellingManagerSoldListingsPropertyTypeCodeType);
begin
  FFilter := AArray_Of_SellingManagerSoldListingsPropertyTypeCodeType;
  FFilter_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.Filter_Specified(Index: Integer): boolean;
begin
  Result := FFilter_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetArchived(Index: Integer; const ABoolean: Boolean);
begin
  FArchived := ABoolean;
  FArchived_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.Archived_Specified(Index: Integer): boolean;
begin
  Result := FArchived_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetSort(Index: Integer; const ASellingManagerSoldListingsSortTypeCodeType: SellingManagerSoldListingsSortTypeCodeType);
begin
  FSort := ASellingManagerSoldListingsSortTypeCodeType;
  FSort_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.Sort_Specified(Index: Integer): boolean;
begin
  Result := FSort_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetSortOrder(Index: Integer; const ASortOrderCodeType: SortOrderCodeType);
begin
  FSortOrder := ASortOrderCodeType;
  FSortOrder_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.SortOrder_Specified(Index: Integer): boolean;
begin
  Result := FSortOrder_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetPagination(Index: Integer; const APaginationType: PaginationType);
begin
  FPagination := APaginationType;
  FPagination_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.Pagination_Specified(Index: Integer): boolean;
begin
  Result := FPagination_Specified;
end;

procedure GetSellingManagerSoldListingsRequestType.SetSaleDateRange(Index: Integer; const ATimeRangeType: TimeRangeType);
begin
  FSaleDateRange := ATimeRangeType;
  FSaleDateRange_Specified := True;
end;

function GetSellingManagerSoldListingsRequestType.SaleDateRange_Specified(Index: Integer): boolean;
begin
  Result := FSaleDateRange_Specified;
end;

constructor GetSellingManagerTemplatesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSellingManagerTemplatesRequestType.SetSaleTemplateID(Index: Integer; const AArray_Of_long: Array_Of_long);
begin
  FSaleTemplateID := AArray_Of_long;
  FSaleTemplateID_Specified := True;
end;

function GetSellingManagerTemplatesRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

constructor GetShippingDiscountProfilesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetSessionIDRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSessionIDRequestType.SetRuName(Index: Integer; const Astring: string);
begin
  FRuName := Astring;
  FRuName_Specified := True;
end;

function GetSessionIDRequestType.RuName_Specified(Index: Integer): boolean;
begin
  Result := FRuName_Specified;
end;

constructor GetNotificationPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetNotificationPreferencesRequestType.SetPreferenceLevel(Index: Integer; const ANotificationRoleCodeType: NotificationRoleCodeType);
begin
  FPreferenceLevel := ANotificationRoleCodeType;
  FPreferenceLevel_Specified := True;
end;

function GetNotificationPreferencesRequestType.PreferenceLevel_Specified(Index: Integer): boolean;
begin
  Result := FPreferenceLevel_Specified;
end;

constructor GetMyeBaySellingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBaySellingRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FScheduledList);
  SysUtils.FreeAndNil(FActiveList);
  SysUtils.FreeAndNil(FSoldList);
  SysUtils.FreeAndNil(FUnsoldList);
  SysUtils.FreeAndNil(FBidList);
  SysUtils.FreeAndNil(FDeletedFromSoldList);
  SysUtils.FreeAndNil(FDeletedFromUnsoldList);
  SysUtils.FreeAndNil(FSellingSummary);
  inherited Destroy;
end;

procedure GetMyeBaySellingRequestType.SetScheduledList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FScheduledList := AItemListCustomizationType;
  FScheduledList_Specified := True;
end;

function GetMyeBaySellingRequestType.ScheduledList_Specified(Index: Integer): boolean;
begin
  Result := FScheduledList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetActiveList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FActiveList := AItemListCustomizationType;
  FActiveList_Specified := True;
end;

function GetMyeBaySellingRequestType.ActiveList_Specified(Index: Integer): boolean;
begin
  Result := FActiveList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetSoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FSoldList := AItemListCustomizationType;
  FSoldList_Specified := True;
end;

function GetMyeBaySellingRequestType.SoldList_Specified(Index: Integer): boolean;
begin
  Result := FSoldList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetUnsoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FUnsoldList := AItemListCustomizationType;
  FUnsoldList_Specified := True;
end;

function GetMyeBaySellingRequestType.UnsoldList_Specified(Index: Integer): boolean;
begin
  Result := FUnsoldList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetBidList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FBidList := AItemListCustomizationType;
  FBidList_Specified := True;
end;

function GetMyeBaySellingRequestType.BidList_Specified(Index: Integer): boolean;
begin
  Result := FBidList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetDeletedFromSoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FDeletedFromSoldList := AItemListCustomizationType;
  FDeletedFromSoldList_Specified := True;
end;

function GetMyeBaySellingRequestType.DeletedFromSoldList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromSoldList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetDeletedFromUnsoldList(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FDeletedFromUnsoldList := AItemListCustomizationType;
  FDeletedFromUnsoldList_Specified := True;
end;

function GetMyeBaySellingRequestType.DeletedFromUnsoldList_Specified(Index: Integer): boolean;
begin
  Result := FDeletedFromUnsoldList_Specified;
end;

procedure GetMyeBaySellingRequestType.SetSellingSummary(Index: Integer; const AItemListCustomizationType: ItemListCustomizationType);
begin
  FSellingSummary := AItemListCustomizationType;
  FSellingSummary_Specified := True;
end;

function GetMyeBaySellingRequestType.SellingSummary_Specified(Index: Integer): boolean;
begin
  Result := FSellingSummary_Specified;
end;

procedure GetMyeBaySellingRequestType.SetHideVariations(Index: Integer; const ABoolean: Boolean);
begin
  FHideVariations := ABoolean;
  FHideVariations_Specified := True;
end;

function GetMyeBaySellingRequestType.HideVariations_Specified(Index: Integer): boolean;
begin
  Result := FHideVariations_Specified;
end;

constructor GetMyeBayRemindersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayRemindersRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FBuyingReminders);
  SysUtils.FreeAndNil(FSellingReminders);
  inherited Destroy;
end;

procedure GetMyeBayRemindersRequestType.SetBuyingReminders(Index: Integer; const AReminderCustomizationType: ReminderCustomizationType);
begin
  FBuyingReminders := AReminderCustomizationType;
  FBuyingReminders_Specified := True;
end;

function GetMyeBayRemindersRequestType.BuyingReminders_Specified(Index: Integer): boolean;
begin
  Result := FBuyingReminders_Specified;
end;

procedure GetMyeBayRemindersRequestType.SetSellingReminders(Index: Integer; const AReminderCustomizationType: ReminderCustomizationType);
begin
  FSellingReminders := AReminderCustomizationType;
  FSellingReminders_Specified := True;
end;

function GetMyeBayRemindersRequestType.SellingReminders_Specified(Index: Integer): boolean;
begin
  Result := FSellingReminders_Specified;
end;

constructor GetSellerDashboardRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetPromotionalSaleDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetPromotionalSaleDetailsRequestType.SetPromotionalSaleID(Index: Integer; const AInt64: Int64);
begin
  FPromotionalSaleID := AInt64;
  FPromotionalSaleID_Specified := True;
end;

function GetPromotionalSaleDetailsRequestType.PromotionalSaleID_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleID_Specified;
end;

procedure GetPromotionalSaleDetailsRequestType.SetPromotionalSaleStatus(Index: Integer; const AArray_Of_PromotionalSaleStatusCodeType: Array_Of_PromotionalSaleStatusCodeType);
begin
  FPromotionalSaleStatus := AArray_Of_PromotionalSaleStatusCodeType;
  FPromotionalSaleStatus_Specified := True;
end;

function GetPromotionalSaleDetailsRequestType.PromotionalSaleStatus_Specified(Index: Integer): boolean;
begin
  Result := FPromotionalSaleStatus_Specified;
end;

constructor RelistItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure RelistItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function RelistItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure RelistItemRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function RelistItemRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

constructor RelistFixedPriceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistFixedPriceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure RelistFixedPriceItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function RelistFixedPriceItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure RelistFixedPriceItemRequestType.SetDeletedField(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FDeletedField := ASellerExcludeShipToLocationPreferencesType;
  FDeletedField_Specified := True;
end;

function RelistFixedPriceItemRequestType.DeletedField_Specified(Index: Integer): boolean;
begin
  Result := FDeletedField_Specified;
end;

constructor GeteBayOfficialTimeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor MoveSellingManagerInventoryFolderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure MoveSellingManagerInventoryFolderRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function MoveSellingManagerInventoryFolderRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

procedure MoveSellingManagerInventoryFolderRequestType.SetNewParentFolderID(Index: Integer; const AInt64: Int64);
begin
  FNewParentFolderID := AInt64;
  FNewParentFolderID_Specified := True;
end;

function MoveSellingManagerInventoryFolderRequestType.NewParentFolderID_Specified(Index: Integer): boolean;
begin
  Result := FNewParentFolderID_Specified;
end;

constructor GetUserRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetUserRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function GetUserRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetUserRequestType.SetUserID(Index: Integer; const Astring: string);
begin
  FUserID := Astring;
  FUserID_Specified := True;
end;

function GetUserRequestType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure GetUserRequestType.SetIncludeExpressRequirements(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeExpressRequirements := ABoolean;
  FIncludeExpressRequirements_Specified := True;
end;

function GetUserRequestType.IncludeExpressRequirements_Specified(Index: Integer): boolean;
begin
  Result := FIncludeExpressRequirements_Specified;
end;

procedure GetUserRequestType.SetIncludeFeatureEligibility(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeFeatureEligibility := ABoolean;
  FIncludeFeatureEligibility_Specified := True;
end;

function GetUserRequestType.IncludeFeatureEligibility_Specified(Index: Integer): boolean;
begin
  Result := FIncludeFeatureEligibility_Specified;
end;

constructor GetTokenStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetUserContactDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetUserContactDetailsRequestType.SetItemID(Index: Integer; const Astring: string);
begin
  FItemID := Astring;
  FItemID_Specified := True;
end;

function GetUserContactDetailsRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure GetUserContactDetailsRequestType.SetContactID(Index: Integer; const Astring: string);
begin
  FContactID := Astring;
  FContactID_Specified := True;
end;

function GetUserContactDetailsRequestType.ContactID_Specified(Index: Integer): boolean;
begin
  Result := FContactID_Specified;
end;

procedure GetUserContactDetailsRequestType.SetRequesterID(Index: Integer; const Astring: string);
begin
  FRequesterID := Astring;
  FRequesterID_Specified := True;
end;

function GetUserContactDetailsRequestType.RequesterID_Specified(Index: Integer): boolean;
begin
  Result := FRequesterID_Specified;
end;

constructor GetStoreOptionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStorePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetTaxTableRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetSuggestedCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetSuggestedCategoriesRequestType.SetQuery(Index: Integer; const Astring: string);
begin
  FQuery := Astring;
  FQuery_Specified := True;
end;

function GetSuggestedCategoriesRequestType.Query_Specified(Index: Integer): boolean;
begin
  Result := FQuery_Specified;
end;

constructor GetVeROReasonCodeDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetVeROReasonCodeDetailsRequestType.SetReasonCodeID(Index: Integer; const AInt64: Int64);
begin
  FReasonCodeID := AInt64;
  FReasonCodeID_Specified := True;
end;

function GetVeROReasonCodeDetailsRequestType.ReasonCodeID_Specified(Index: Integer): boolean;
begin
  Result := FReasonCodeID_Specified;
end;

procedure GetVeROReasonCodeDetailsRequestType.SetReturnAllSites(Index: Integer; const ABoolean: Boolean);
begin
  FReturnAllSites := ABoolean;
  FReturnAllSites_Specified := True;
end;

function GetVeROReasonCodeDetailsRequestType.ReturnAllSites_Specified(Index: Integer): boolean;
begin
  Result := FReturnAllSites_Specified;
end;

constructor GeteBayDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GeteBayDetailsRequestType.SetDetailName(Index: Integer; const AArray_Of_DetailNameCodeType: Array_Of_DetailNameCodeType);
begin
  FDetailName := AArray_Of_DetailNameCodeType;
  FDetailName_Specified := True;
end;

function GeteBayDetailsRequestType.DetailName_Specified(Index: Integer): boolean;
begin
  Result := FDetailName_Specified;
end;

constructor GetUserPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure GetUserPreferencesRequestType.SetShowEndOfAuctionEmailPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowEndOfAuctionEmailPreferences := ABoolean;
  FShowEndOfAuctionEmailPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowEndOfAuctionEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowEndOfAuctionEmailPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowSellerFavoriteItemPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowSellerFavoriteItemPreferences := ABoolean;
  FShowSellerFavoriteItemPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowSellerFavoriteItemPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowSellerFavoriteItemPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowProStoresPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowProStoresPreferences := ABoolean;
  FShowProStoresPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowProStoresPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowProStoresPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowEmailShipmentTrackingNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowEmailShipmentTrackingNumberPreference := ABoolean;
  FShowEmailShipmentTrackingNumberPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowEmailShipmentTrackingNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowEmailShipmentTrackingNumberPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowRequiredShipPhoneNumberPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowRequiredShipPhoneNumberPreference := ABoolean;
  FShowRequiredShipPhoneNumberPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowRequiredShipPhoneNumberPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowRequiredShipPhoneNumberPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowSellerExcludeShipToLocationPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowSellerExcludeShipToLocationPreference := ABoolean;
  FShowSellerExcludeShipToLocationPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowSellerExcludeShipToLocationPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowSellerExcludeShipToLocationPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowUnpaidItemAssistancePreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowUnpaidItemAssistancePreference := ABoolean;
  FShowUnpaidItemAssistancePreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowUnpaidItemAssistancePreference_Specified(Index: Integer): boolean;
begin
  Result := FShowUnpaidItemAssistancePreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowPurchaseReminderEmailPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowPurchaseReminderEmailPreferences := ABoolean;
  FShowPurchaseReminderEmailPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowPurchaseReminderEmailPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowPurchaseReminderEmailPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowUnpaidItemAssistanceExclusionList(Index: Integer; const ABoolean: Boolean);
begin
  FShowUnpaidItemAssistanceExclusionList := ABoolean;
  FShowUnpaidItemAssistanceExclusionList_Specified := True;
end;

function GetUserPreferencesRequestType.ShowUnpaidItemAssistanceExclusionList_Specified(Index: Integer): boolean;
begin
  Result := FShowUnpaidItemAssistanceExclusionList_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowSellerReturnPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowSellerReturnPreferences := ABoolean;
  FShowSellerReturnPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowSellerReturnPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowSellerReturnPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowGlobalShippingProgramPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowGlobalShippingProgramPreference := ABoolean;
  FShowGlobalShippingProgramPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowGlobalShippingProgramPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowGlobalShippingProgramPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowDispatchCutoffTimePreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowDispatchCutoffTimePreferences := ABoolean;
  FShowDispatchCutoffTimePreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowDispatchCutoffTimePreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowDispatchCutoffTimePreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowGlobalShippingProgramListingPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowGlobalShippingProgramListingPreference := ABoolean;
  FShowGlobalShippingProgramListingPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowGlobalShippingProgramListingPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowGlobalShippingProgramListingPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowOverrideGSPServiceWithIntlServicePreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowOverrideGSPServiceWithIntlServicePreference := ABoolean;
  FShowOverrideGSPServiceWithIntlServicePreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowOverrideGSPServiceWithIntlServicePreference_Specified(Index: Integer): boolean;
begin
  Result := FShowOverrideGSPServiceWithIntlServicePreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowPickupDropoffPreferences(Index: Integer; const ABoolean: Boolean);
begin
  FShowPickupDropoffPreferences := ABoolean;
  FShowPickupDropoffPreferences_Specified := True;
end;

function GetUserPreferencesRequestType.ShowPickupDropoffPreferences_Specified(Index: Integer): boolean;
begin
  Result := FShowPickupDropoffPreferences_Specified;
end;

procedure GetUserPreferencesRequestType.SetShowOutOfStockControlPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShowOutOfStockControlPreference := ABoolean;
  FShowOutOfStockControlPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShowOutOfStockControlPreference_Specified(Index: Integer): boolean;
begin
  Result := FShowOutOfStockControlPreference_Specified;
end;

procedure GetUserPreferencesRequestType.SetShoweBayPLUSPreference(Index: Integer; const ABoolean: Boolean);
begin
  FShoweBayPLUSPreference := ABoolean;
  FShoweBayPLUSPreference_Specified := True;
end;

function GetUserPreferencesRequestType.ShoweBayPLUSPreference_Specified(Index: Integer): boolean;
begin
  Result := FShoweBayPLUSPreference_Specified;
end;

constructor ConfirmIdentityRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ConfirmIdentityRequestType.SetSessionID(Index: Integer; const Astring: string);
begin
  FSessionID := Astring;
  FSessionID_Specified := True;
end;

function ConfirmIdentityRequestType.SessionID_Specified(Index: Integer): boolean;
begin
  Result := FSessionID_Specified;
end;

constructor DeleteSellingManagerInventoryFolderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerInventoryFolderRequestType.SetFolderID(Index: Integer; const AInt64: Int64);
begin
  FFolderID := AInt64;
  FFolderID_Specified := True;
end;

function DeleteSellingManagerInventoryFolderRequestType.FolderID_Specified(Index: Integer): boolean;
begin
  Result := FFolderID_Specified;
end;

constructor DeleteMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteMyMessagesRequestType.SetAlertIDs(Index: Integer; const AMyMessagesAlertIDArrayType: MyMessagesAlertIDArrayType);
begin
  FAlertIDs := AMyMessagesAlertIDArrayType;
  FAlertIDs_Specified := True;
end;

function DeleteMyMessagesRequestType.AlertIDs_Specified(Index: Integer): boolean;
begin
  Result := FAlertIDs_Specified;
end;

procedure DeleteMyMessagesRequestType.SetMessageIDs(Index: Integer; const AMyMessagesMessageIDArrayType: MyMessagesMessageIDArrayType);
begin
  FMessageIDs := AMyMessagesMessageIDArrayType;
  FMessageIDs_Specified := True;
end;

function DeleteMyMessagesRequestType.MessageIDs_Specified(Index: Integer): boolean;
begin
  Result := FMessageIDs_Specified;
end;

constructor AddToItemDescriptionRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure AddToItemDescriptionRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AddToItemDescriptionRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AddToItemDescriptionRequestType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function AddToItemDescriptionRequestType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

constructor AddSellingManagerTemplateRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSellingManagerTemplateRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure AddSellingManagerTemplateRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function AddSellingManagerTemplateRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure AddSellingManagerTemplateRequestType.SetSaleTemplateName(Index: Integer; const Astring: string);
begin
  FSaleTemplateName := Astring;
  FSaleTemplateName_Specified := True;
end;

function AddSellingManagerTemplateRequestType.SaleTemplateName_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateName_Specified;
end;

procedure AddSellingManagerTemplateRequestType.SetProductID(Index: Integer; const AInt64: Int64);
begin
  FProductID := AInt64;
  FProductID_Specified := True;
end;

function AddSellingManagerTemplateRequestType.ProductID_Specified(Index: Integer): boolean;
begin
  Result := FProductID_Specified;
end;

constructor CompleteSaleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor CompleteSaleRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FFeedbackInfo);
  SysUtils.FreeAndNil(FShipment);
  inherited Destroy;
end;

procedure CompleteSaleRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function CompleteSaleRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure CompleteSaleRequestType.SetTransactionID(Index: Integer; const Astring: string);
begin
  FTransactionID := Astring;
  FTransactionID_Specified := True;
end;

function CompleteSaleRequestType.TransactionID_Specified(Index: Integer): boolean;
begin
  Result := FTransactionID_Specified;
end;

procedure CompleteSaleRequestType.SetFeedbackInfo(Index: Integer; const AFeedbackInfoType: FeedbackInfoType);
begin
  FFeedbackInfo := AFeedbackInfoType;
  FFeedbackInfo_Specified := True;
end;

function CompleteSaleRequestType.FeedbackInfo_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackInfo_Specified;
end;

procedure CompleteSaleRequestType.SetShipped(Index: Integer; const ABoolean: Boolean);
begin
  FShipped := ABoolean;
  FShipped_Specified := True;
end;

function CompleteSaleRequestType.Shipped_Specified(Index: Integer): boolean;
begin
  Result := FShipped_Specified;
end;

procedure CompleteSaleRequestType.SetPaid(Index: Integer; const ABoolean: Boolean);
begin
  FPaid := ABoolean;
  FPaid_Specified := True;
end;

function CompleteSaleRequestType.Paid_Specified(Index: Integer): boolean;
begin
  Result := FPaid_Specified;
end;

procedure CompleteSaleRequestType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function CompleteSaleRequestType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure CompleteSaleRequestType.SetShipment(Index: Integer; const AShipmentType: ShipmentType);
begin
  FShipment := AShipmentType;
  FShipment_Specified := True;
end;

function CompleteSaleRequestType.Shipment_Specified(Index: Integer): boolean;
begin
  Result := FShipment_Specified;
end;

procedure CompleteSaleRequestType.SetOrderID(Index: Integer; const Astring: string);
begin
  FOrderID := Astring;
  FOrderID_Specified := True;
end;

function CompleteSaleRequestType.OrderID_Specified(Index: Integer): boolean;
begin
  Result := FOrderID_Specified;
end;

procedure CompleteSaleRequestType.SetOrderLineItemID(Index: Integer; const Astring: string);
begin
  FOrderLineItemID := Astring;
  FOrderLineItemID_Specified := True;
end;

function CompleteSaleRequestType.OrderLineItemID_Specified(Index: Integer): boolean;
begin
  Result := FOrderLineItemID_Specified;
end;

constructor DeleteSellingManagerItemAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerItemAutomationRuleRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure DeleteSellingManagerItemAutomationRuleRequestType.SetDeleteAutomatedRelistingRule(Index: Integer; const ABoolean: Boolean);
begin
  FDeleteAutomatedRelistingRule := ABoolean;
  FDeleteAutomatedRelistingRule_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleRequestType.DeleteAutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FDeleteAutomatedRelistingRule_Specified;
end;

procedure DeleteSellingManagerItemAutomationRuleRequestType.SetDeleteAutomatedSecondChanceOfferRule(Index: Integer; const ABoolean: Boolean);
begin
  FDeleteAutomatedSecondChanceOfferRule := ABoolean;
  FDeleteAutomatedSecondChanceOfferRule_Specified := True;
end;

function DeleteSellingManagerItemAutomationRuleRequestType.DeleteAutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FDeleteAutomatedSecondChanceOfferRule_Specified;
end;

constructor EndItemsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor EndItemsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FEndItemRequestContainer)-1 do
    SysUtils.FreeAndNil(FEndItemRequestContainer[I]);
  System.SetLength(FEndItemRequestContainer, 0);
  inherited Destroy;
end;

procedure EndItemsRequestType.SetEndItemRequestContainer(Index: Integer; const AArray_Of_EndItemRequestContainerType: Array_Of_EndItemRequestContainerType);
begin
  FEndItemRequestContainer := AArray_Of_EndItemRequestContainerType;
  FEndItemRequestContainer_Specified := True;
end;

function EndItemsRequestType.EndItemRequestContainer_Specified(Index: Integer): boolean;
begin
  Result := FEndItemRequestContainer_Specified;
end;

constructor EndItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure EndItemRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function EndItemRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure EndItemRequestType.SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
begin
  FEndingReason := AEndReasonCodeType;
  FEndingReason_Specified := True;
end;

function EndItemRequestType.EndingReason_Specified(Index: Integer): boolean;
begin
  Result := FEndingReason_Specified;
end;

procedure EndItemRequestType.SetSellerInventoryID(Index: Integer; const Astring: string);
begin
  FSellerInventoryID := Astring;
  FSellerInventoryID_Specified := True;
end;

function EndItemRequestType.SellerInventoryID_Specified(Index: Integer): boolean;
begin
  Result := FSellerInventoryID_Specified;
end;

constructor FetchTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure FetchTokenRequestType.SetSecretID(Index: Integer; const Astring: string);
begin
  FSecretID := Astring;
  FSecretID_Specified := True;
end;

function FetchTokenRequestType.SecretID_Specified(Index: Integer): boolean;
begin
  Result := FSecretID_Specified;
end;

procedure FetchTokenRequestType.SetSessionID(Index: Integer; const Astring: string);
begin
  FSessionID := Astring;
  FSessionID_Specified := True;
end;

function FetchTokenRequestType.SessionID_Specified(Index: Integer): boolean;
begin
  Result := FSessionID_Specified;
end;

constructor ExtendSiteHostedPicturesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure ExtendSiteHostedPicturesRequestType.SetPictureURL(Index: Integer; const AArray_Of_anyURI: Array_Of_anyURI);
begin
  FPictureURL := AArray_Of_anyURI;
  FPictureURL_Specified := True;
end;

function ExtendSiteHostedPicturesRequestType.PictureURL_Specified(Index: Integer): boolean;
begin
  Result := FPictureURL_Specified;
end;

procedure ExtendSiteHostedPicturesRequestType.SetExtensionInDays(Index: Integer; const AInteger: Integer);
begin
  FExtensionInDays := AInteger;
  FExtensionInDays_Specified := True;
end;

function ExtendSiteHostedPicturesRequestType.ExtensionInDays_Specified(Index: Integer): boolean;
begin
  Result := FExtensionInDays_Specified;
end;

constructor DeleteSellingManagerProductRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerProductRequestType.SetProductID(Index: Integer; const AInt64: Int64);
begin
  FProductID := AInt64;
  FProductID_Specified := True;
end;

function DeleteSellingManagerProductRequestType.ProductID_Specified(Index: Integer): boolean;
begin
  Result := FProductID_Specified;
end;

constructor DeleteSellingManagerTemplateRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerTemplateRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function DeleteSellingManagerTemplateRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

constructor EndFixedPriceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure EndFixedPriceItemRequestType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function EndFixedPriceItemRequestType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure EndFixedPriceItemRequestType.SetEndingReason(Index: Integer; const AEndReasonCodeType: EndReasonCodeType);
begin
  FEndingReason := AEndReasonCodeType;
  FEndingReason_Specified := True;
end;

function EndFixedPriceItemRequestType.EndingReason_Specified(Index: Integer): boolean;
begin
  Result := FEndingReason_Specified;
end;

procedure EndFixedPriceItemRequestType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function EndFixedPriceItemRequestType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

constructor DeleteSellingManagerTemplateAutomationRuleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

procedure DeleteSellingManagerTemplateAutomationRuleRequestType.SetSaleTemplateID(Index: Integer; const AInt64: Int64);
begin
  FSaleTemplateID := AInt64;
  FSaleTemplateID_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleRequestType.SaleTemplateID_Specified(Index: Integer): boolean;
begin
  Result := FSaleTemplateID_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleRequestType.SetDeleteAutomatedListingRule(Index: Integer; const ABoolean: Boolean);
begin
  FDeleteAutomatedListingRule := ABoolean;
  FDeleteAutomatedListingRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleRequestType.DeleteAutomatedListingRule_Specified(Index: Integer): boolean;
begin
  Result := FDeleteAutomatedListingRule_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleRequestType.SetDeleteAutomatedRelistingRule(Index: Integer; const ABoolean: Boolean);
begin
  FDeleteAutomatedRelistingRule := ABoolean;
  FDeleteAutomatedRelistingRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleRequestType.DeleteAutomatedRelistingRule_Specified(Index: Integer): boolean;
begin
  Result := FDeleteAutomatedRelistingRule_Specified;
end;

procedure DeleteSellingManagerTemplateAutomationRuleRequestType.SetDeleteAutomatedSecondChanceOfferRule(Index: Integer; const ABoolean: Boolean);
begin
  FDeleteAutomatedSecondChanceOfferRule := ABoolean;
  FDeleteAutomatedSecondChanceOfferRule_Specified := True;
end;

function DeleteSellingManagerTemplateAutomationRuleRequestType.DeleteAutomatedSecondChanceOfferRule_Specified(Index: Integer): boolean;
begin
  Result := FDeleteAutomatedSecondChanceOfferRule_Specified;
end;

constructor AddFixedPriceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddFixedPriceItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure AddFixedPriceItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function AddFixedPriceItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

constructor AddItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemRequestType.Destroy;
begin
  SysUtils.FreeAndNil(FItem);
  inherited Destroy;
end;

procedure AddItemRequestType.SetItem(Index: Integer; const AItemType: ItemType);
begin
  FItem := AItemType;
  FItem_Specified := True;
end;

function AddItemRequestType.Item_Specified(Index: Integer): boolean;
begin
  Result := FItem_Specified;
end;

procedure BotBlockRequestType.SetBotBlockToken(Index: Integer; const Astring: string);
begin
  FBotBlockToken := Astring;
  FBotBlockToken_Specified := True;
end;

function BotBlockRequestType.BotBlockToken_Specified(Index: Integer): boolean;
begin
  Result := FBotBlockToken_Specified;
end;

procedure BotBlockRequestType.SetBotBlockUserInput(Index: Integer; const Astring: string);
begin
  FBotBlockUserInput := Astring;
  FBotBlockUserInput_Specified := True;
end;

function BotBlockRequestType.BotBlockUserInput_Specified(Index: Integer): boolean;
begin
  Result := FBotBlockUserInput_Specified;
end;

procedure BotBlockResponseType.SetBotBlockToken(Index: Integer; const Astring: string);
begin
  FBotBlockToken := Astring;
  FBotBlockToken_Specified := True;
end;

function BotBlockResponseType.BotBlockToken_Specified(Index: Integer): boolean;
begin
  Result := FBotBlockToken_Specified;
end;

procedure BotBlockResponseType.SetBotBlockUrl(Index: Integer; const Astring: string);
begin
  FBotBlockUrl := Astring;
  FBotBlockUrl_Specified := True;
end;

function BotBlockResponseType.BotBlockUrl_Specified(Index: Integer): boolean;
begin
  Result := FBotBlockUrl_Specified;
end;

procedure BotBlockResponseType.SetBotBlockAudioUrl(Index: Integer; const Astring: string);
begin
  FBotBlockAudioUrl := Astring;
  FBotBlockAudioUrl_Specified := True;
end;

function BotBlockResponseType.BotBlockAudioUrl_Specified(Index: Integer): boolean;
begin
  Result := FBotBlockAudioUrl_Specified;
end;

destructor DisputeResolutionType.Destroy;
begin
  SysUtils.FreeAndNil(FResolutionTime);
  inherited Destroy;
end;

procedure DisputeResolutionType.SetDisputeResolutionRecordType(Index: Integer; const ADisputeResolutionRecordTypeCodeType: DisputeResolutionRecordTypeCodeType);
begin
  FDisputeResolutionRecordType := ADisputeResolutionRecordTypeCodeType;
  FDisputeResolutionRecordType_Specified := True;
end;

function DisputeResolutionType.DisputeResolutionRecordType_Specified(Index: Integer): boolean;
begin
  Result := FDisputeResolutionRecordType_Specified;
end;

procedure DisputeResolutionType.SetDisputeResolutionReason(Index: Integer; const ADisputeResolutionReasonCodeType: DisputeResolutionReasonCodeType);
begin
  FDisputeResolutionReason := ADisputeResolutionReasonCodeType;
  FDisputeResolutionReason_Specified := True;
end;

function DisputeResolutionType.DisputeResolutionReason_Specified(Index: Integer): boolean;
begin
  Result := FDisputeResolutionReason_Specified;
end;

procedure DisputeResolutionType.SetResolutionTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FResolutionTime := ATXSDateTime;
  FResolutionTime_Specified := True;
end;

function DisputeResolutionType.ResolutionTime_Specified(Index: Integer): boolean;
begin
  Result := FResolutionTime_Specified;
end;

destructor CustomSecurityHeaderType.Destroy;
begin
  SysUtils.FreeAndNil(FCredentials);
  inherited Destroy;
end;

procedure CustomSecurityHeaderType.SeteBayAuthToken(Index: Integer; const Astring: string);
begin
  FeBayAuthToken := Astring;
  FeBayAuthToken_Specified := True;
end;

function CustomSecurityHeaderType.eBayAuthToken_Specified(Index: Integer): boolean;
begin
  Result := FeBayAuthToken_Specified;
end;

procedure CustomSecurityHeaderType.SetHardExpirationWarning(Index: Integer; const Astring: string);
begin
  FHardExpirationWarning := Astring;
  FHardExpirationWarning_Specified := True;
end;

function CustomSecurityHeaderType.HardExpirationWarning_Specified(Index: Integer): boolean;
begin
  Result := FHardExpirationWarning_Specified;
end;

procedure CustomSecurityHeaderType.SetCredentials(Index: Integer; const AUserIdPasswordType: UserIdPasswordType);
begin
  FCredentials := AUserIdPasswordType;
  FCredentials_Specified := True;
end;

function CustomSecurityHeaderType.Credentials_Specified(Index: Integer): boolean;
begin
  Result := FCredentials_Specified;
end;

procedure CustomSecurityHeaderType.SetNotificationSignature(Index: Integer; const Astring: string);
begin
  FNotificationSignature := Astring;
  FNotificationSignature_Specified := True;
end;

function CustomSecurityHeaderType.NotificationSignature_Specified(Index: Integer): boolean;
begin
  Result := FNotificationSignature_Specified;
end;

procedure UserIdPasswordType.SetAppId(Index: Integer; const Astring: string);
begin
  FAppId := Astring;
  FAppId_Specified := True;
end;

function UserIdPasswordType.AppId_Specified(Index: Integer): boolean;
begin
  Result := FAppId_Specified;
end;

procedure UserIdPasswordType.SetDevId(Index: Integer; const Astring: string);
begin
  FDevId := Astring;
  FDevId_Specified := True;
end;

function UserIdPasswordType.DevId_Specified(Index: Integer): boolean;
begin
  Result := FDevId_Specified;
end;

procedure UserIdPasswordType.SetAuthCert(Index: Integer; const Astring: string);
begin
  FAuthCert := Astring;
  FAuthCert_Specified := True;
end;

function UserIdPasswordType.AuthCert_Specified(Index: Integer): boolean;
begin
  Result := FAuthCert_Specified;
end;

procedure UserIdPasswordType.SetUsername(Index: Integer; const Astring: string);
begin
  FUsername := Astring;
  FUsername_Specified := True;
end;

function UserIdPasswordType.Username_Specified(Index: Integer): boolean;
begin
  Result := FUsername_Specified;
end;

procedure UserIdPasswordType.SetPassword(Index: Integer; const Astring: string);
begin
  FPassword := Astring;
  FPassword_Specified := True;
end;

function UserIdPasswordType.Password_Specified(Index: Integer): boolean;
begin
  Result := FPassword_Specified;
end;

destructor DisputeMessageType.Destroy;
begin
  SysUtils.FreeAndNil(FMessageCreationTime);
  inherited Destroy;
end;

procedure DisputeMessageType.SetMessageID(Index: Integer; const AInteger: Integer);
begin
  FMessageID := AInteger;
  FMessageID_Specified := True;
end;

function DisputeMessageType.MessageID_Specified(Index: Integer): boolean;
begin
  Result := FMessageID_Specified;
end;

procedure DisputeMessageType.SetMessageSource(Index: Integer; const ADisputeMessageSourceCodeType: DisputeMessageSourceCodeType);
begin
  FMessageSource := ADisputeMessageSourceCodeType;
  FMessageSource_Specified := True;
end;

function DisputeMessageType.MessageSource_Specified(Index: Integer): boolean;
begin
  Result := FMessageSource_Specified;
end;

procedure DisputeMessageType.SetMessageCreationTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FMessageCreationTime := ATXSDateTime;
  FMessageCreationTime_Specified := True;
end;

function DisputeMessageType.MessageCreationTime_Specified(Index: Integer): boolean;
begin
  Result := FMessageCreationTime_Specified;
end;

procedure DisputeMessageType.SetMessageText(Index: Integer; const Astring: string);
begin
  FMessageText := Astring;
  FMessageText_Specified := True;
end;

function DisputeMessageType.MessageText_Specified(Index: Integer): boolean;
begin
  Result := FMessageText_Specified;
end;

destructor AttributeType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FValue)-1 do
    SysUtils.FreeAndNil(FValue[I]);
  System.SetLength(FValue, 0);
  inherited Destroy;
end;

procedure AttributeType.SetattributeID(Index: Integer; const AInteger: Integer);
begin
  FattributeID := AInteger;
  FattributeID_Specified := True;
end;

function AttributeType.attributeID_Specified(Index: Integer): boolean;
begin
  Result := FattributeID_Specified;
end;

procedure AttributeType.SetattributeLabel(Index: Integer; const Astring: string);
begin
  FattributeLabel := Astring;
  FattributeLabel_Specified := True;
end;

function AttributeType.attributeLabel_Specified(Index: Integer): boolean;
begin
  Result := FattributeLabel_Specified;
end;

procedure AttributeType.SetValue(Index: Integer; const AArray_Of_ValType: Array_Of_ValType);
begin
  FValue := AArray_Of_ValType;
  FValue_Specified := True;
end;

function AttributeType.Value_Specified(Index: Integer): boolean;
begin
  Result := FValue_Specified;
end;

procedure DeliveryURLDetailType.SetDeliveryURLName(Index: Integer; const Astring: string);
begin
  FDeliveryURLName := Astring;
  FDeliveryURLName_Specified := True;
end;

function DeliveryURLDetailType.DeliveryURLName_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURLName_Specified;
end;

procedure DeliveryURLDetailType.SetDeliveryURL(Index: Integer; const Astring: string);
begin
  FDeliveryURL := Astring;
  FDeliveryURL_Specified := True;
end;

function DeliveryURLDetailType.DeliveryURL_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURL_Specified;
end;

procedure DeliveryURLDetailType.SetStatus(Index: Integer; const AEnableCodeType: EnableCodeType);
begin
  FStatus := AEnableCodeType;
  FStatus_Specified := True;
end;

function DeliveryURLDetailType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure NotificationEnableType.SetEventType(Index: Integer; const ANotificationEventTypeCodeType: NotificationEventTypeCodeType);
begin
  FEventType := ANotificationEventTypeCodeType;
  FEventType_Specified := True;
end;

function NotificationEnableType.EventType_Specified(Index: Integer): boolean;
begin
  Result := FEventType_Specified;
end;

procedure NotificationEnableType.SetEventEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
begin
  FEventEnable := AEnableCodeType;
  FEventEnable_Specified := True;
end;

function NotificationEnableType.EventEnable_Specified(Index: Integer): boolean;
begin
  Result := FEventEnable_Specified;
end;

procedure ProStoresDetailsType.SetSellerThirdPartyUsername(Index: Integer; const Astring: string);
begin
  FSellerThirdPartyUsername := Astring;
  FSellerThirdPartyUsername_Specified := True;
end;

function ProStoresDetailsType.SellerThirdPartyUsername_Specified(Index: Integer): boolean;
begin
  Result := FSellerThirdPartyUsername_Specified;
end;

procedure ProStoresDetailsType.SetStoreName(Index: Integer; const Astring: string);
begin
  FStoreName := Astring;
  FStoreName_Specified := True;
end;

function ProStoresDetailsType.StoreName_Specified(Index: Integer): boolean;
begin
  Result := FStoreName_Specified;
end;

procedure ProStoresDetailsType.SetStatus(Index: Integer; const AEnableCodeType: EnableCodeType);
begin
  FStatus := AEnableCodeType;
  FStatus_Specified := True;
end;

function ProStoresDetailsType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

destructor ApplicationDeliveryPreferencesType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FDeliveryURLDetails)-1 do
    SysUtils.FreeAndNil(FDeliveryURLDetails[I]);
  System.SetLength(FDeliveryURLDetails, 0);
  inherited Destroy;
end;

procedure ApplicationDeliveryPreferencesType.SetApplicationURL(Index: Integer; const Astring: string);
begin
  FApplicationURL := Astring;
  FApplicationURL_Specified := True;
end;

function ApplicationDeliveryPreferencesType.ApplicationURL_Specified(Index: Integer): boolean;
begin
  Result := FApplicationURL_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetApplicationEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
begin
  FApplicationEnable := AEnableCodeType;
  FApplicationEnable_Specified := True;
end;

function ApplicationDeliveryPreferencesType.ApplicationEnable_Specified(Index: Integer): boolean;
begin
  Result := FApplicationEnable_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetAlertEmail(Index: Integer; const Astring: string);
begin
  FAlertEmail := Astring;
  FAlertEmail_Specified := True;
end;

function ApplicationDeliveryPreferencesType.AlertEmail_Specified(Index: Integer): boolean;
begin
  Result := FAlertEmail_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetAlertEnable(Index: Integer; const AEnableCodeType: EnableCodeType);
begin
  FAlertEnable := AEnableCodeType;
  FAlertEnable_Specified := True;
end;

function ApplicationDeliveryPreferencesType.AlertEnable_Specified(Index: Integer): boolean;
begin
  Result := FAlertEnable_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetNotificationPayloadType(Index: Integer; const ANotificationPayloadTypeCodeType: NotificationPayloadTypeCodeType);
begin
  FNotificationPayloadType := ANotificationPayloadTypeCodeType;
  FNotificationPayloadType_Specified := True;
end;

function ApplicationDeliveryPreferencesType.NotificationPayloadType_Specified(Index: Integer): boolean;
begin
  Result := FNotificationPayloadType_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetDeviceType(Index: Integer; const ADeviceTypeCodeType: DeviceTypeCodeType);
begin
  FDeviceType := ADeviceTypeCodeType;
  FDeviceType_Specified := True;
end;

function ApplicationDeliveryPreferencesType.DeviceType_Specified(Index: Integer): boolean;
begin
  Result := FDeviceType_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetPayloadVersion(Index: Integer; const Astring: string);
begin
  FPayloadVersion := Astring;
  FPayloadVersion_Specified := True;
end;

function ApplicationDeliveryPreferencesType.PayloadVersion_Specified(Index: Integer): boolean;
begin
  Result := FPayloadVersion_Specified;
end;

procedure ApplicationDeliveryPreferencesType.SetDeliveryURLDetails(Index: Integer; const AArray_Of_DeliveryURLDetailType: Array_Of_DeliveryURLDetailType);
begin
  FDeliveryURLDetails := AArray_Of_DeliveryURLDetailType;
  FDeliveryURLDetails_Specified := True;
end;

function ApplicationDeliveryPreferencesType.DeliveryURLDetails_Specified(Index: Integer): boolean;
begin
  Result := FDeliveryURLDetails_Specified;
end;

destructor AverageRatingSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAverageRatingDetails)-1 do
    SysUtils.FreeAndNil(FAverageRatingDetails[I]);
  System.SetLength(FAverageRatingDetails, 0);
  inherited Destroy;
end;

procedure AverageRatingSummaryType.SetFeedbackSummaryPeriod(Index: Integer; const AFeedbackSummaryPeriodCodeType: FeedbackSummaryPeriodCodeType);
begin
  FFeedbackSummaryPeriod := AFeedbackSummaryPeriodCodeType;
  FFeedbackSummaryPeriod_Specified := True;
end;

function AverageRatingSummaryType.FeedbackSummaryPeriod_Specified(Index: Integer): boolean;
begin
  Result := FFeedbackSummaryPeriod_Specified;
end;

procedure AverageRatingSummaryType.SetAverageRatingDetails(Index: Integer; const AAverageRatingDetailArrayType: AverageRatingDetailArrayType);
begin
  FAverageRatingDetails := AAverageRatingDetailArrayType;
  FAverageRatingDetails_Specified := True;
end;

function AverageRatingSummaryType.AverageRatingDetails_Specified(Index: Integer): boolean;
begin
  Result := FAverageRatingDetails_Specified;
end;

procedure AverageRatingDetailsType.SetRatingDetail(Index: Integer; const AFeedbackRatingDetailCodeType: FeedbackRatingDetailCodeType);
begin
  FRatingDetail := AFeedbackRatingDetailCodeType;
  FRatingDetail_Specified := True;
end;

function AverageRatingDetailsType.RatingDetail_Specified(Index: Integer): boolean;
begin
  Result := FRatingDetail_Specified;
end;

procedure AverageRatingDetailsType.SetRating(Index: Integer; const ADouble: Double);
begin
  FRating := ADouble;
  FRating_Specified := True;
end;

function AverageRatingDetailsType.Rating_Specified(Index: Integer): boolean;
begin
  Result := FRating_Specified;
end;

procedure AverageRatingDetailsType.SetRatingCount(Index: Integer; const AInteger: Integer);
begin
  FRatingCount := AInteger;
  FRatingCount_Specified := True;
end;

function AverageRatingDetailsType.RatingCount_Specified(Index: Integer): boolean;
begin
  Result := FRatingCount_Specified;
end;

procedure ItemRatingDetailsType.SetRatingDetail(Index: Integer; const AFeedbackRatingDetailCodeType: FeedbackRatingDetailCodeType);
begin
  FRatingDetail := AFeedbackRatingDetailCodeType;
  FRatingDetail_Specified := True;
end;

function ItemRatingDetailsType.RatingDetail_Specified(Index: Integer): boolean;
begin
  Result := FRatingDetail_Specified;
end;

procedure ItemRatingDetailsType.SetRating(Index: Integer; const AInteger: Integer);
begin
  FRating := AInteger;
  FRating_Specified := True;
end;

function ItemRatingDetailsType.Rating_Specified(Index: Integer): boolean;
begin
  Result := FRating_Specified;
end;

destructor ItemType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAttributeSetArray)-1 do
    SysUtils.FreeAndNil(FAttributeSetArray[I]);
  System.SetLength(FAttributeSetArray, 0);
  for I := 0 to System.Length(FAttributeArray)-1 do
    SysUtils.FreeAndNil(FAttributeArray[I]);
  System.SetLength(FAttributeArray, 0);
  for I := 0 to System.Length(FLookupAttributeArray)-1 do
    SysUtils.FreeAndNil(FLookupAttributeArray[I]);
  System.SetLength(FLookupAttributeArray, 0);
  for I := 0 to System.Length(FItemSpecifics)-1 do
    SysUtils.FreeAndNil(FItemSpecifics[I]);
  System.SetLength(FItemSpecifics, 0);
  for I := 0 to System.Length(FShippingServiceCostOverrideList)-1 do
    SysUtils.FreeAndNil(FShippingServiceCostOverrideList[I]);
  System.SetLength(FShippingServiceCostOverrideList, 0);
  SysUtils.FreeAndNil(FBiddingDetails);
  SysUtils.FreeAndNil(FBuyItNowPrice);
  SysUtils.FreeAndNil(FCharity);
  SysUtils.FreeAndNil(FCrossPromotion);
  SysUtils.FreeAndNil(FDistance);
  SysUtils.FreeAndNil(FListingDetails);
  SysUtils.FreeAndNil(FListingDesigner);
  SysUtils.FreeAndNil(FPaymentDetails);
  SysUtils.FreeAndNil(FPrimaryCategory);
  SysUtils.FreeAndNil(FProductListingDetails);
  SysUtils.FreeAndNil(FReservePrice);
  SysUtils.FreeAndNil(FReviseStatus);
  SysUtils.FreeAndNil(FScheduleTime);
  SysUtils.FreeAndNil(FSecondaryCategory);
  SysUtils.FreeAndNil(FFreeAddedCategory);
  SysUtils.FreeAndNil(FSeller);
  SysUtils.FreeAndNil(FSellingStatus);
  SysUtils.FreeAndNil(FShippingDetails);
  SysUtils.FreeAndNil(FStartPrice);
  SysUtils.FreeAndNil(FStorefront);
  SysUtils.FreeAndNil(FTimeLeft);
  SysUtils.FreeAndNil(FVATDetails);
  SysUtils.FreeAndNil(FBestOfferDetails);
  SysUtils.FreeAndNil(FSearchDetails);
  SysUtils.FreeAndNil(FPictureDetails);
  SysUtils.FreeAndNil(FSellerContactDetails);
  SysUtils.FreeAndNil(FExtendedSellerContactDetails);
  SysUtils.FreeAndNil(FClassifiedAdPayPerLeadFee);
  SysUtils.FreeAndNil(FApplyBuyerProtection);
  SysUtils.FreeAndNil(FItemPolicyViolation);
  SysUtils.FreeAndNil(FBusinessSellerDetails);
  SysUtils.FreeAndNil(FBuyerGuaranteePrice);
  SysUtils.FreeAndNil(FBuyerRequirementDetails);
  SysUtils.FreeAndNil(FReturnPolicy);
  SysUtils.FreeAndNil(FVariations);
  SysUtils.FreeAndNil(FItemCompatibilityList);
  SysUtils.FreeAndNil(FDiscountPriceInfo);
  SysUtils.FreeAndNil(FQuantityInfo);
  SysUtils.FreeAndNil(FSellerProfiles);
  SysUtils.FreeAndNil(FShippingOverride);
  SysUtils.FreeAndNil(FShippingPackageDetails);
  SysUtils.FreeAndNil(FQuantityRestrictionPerBuyer);
  SysUtils.FreeAndNil(FFloorPrice);
  SysUtils.FreeAndNil(FCeilingPrice);
  SysUtils.FreeAndNil(FUnitInfo);
  SysUtils.FreeAndNil(FPickupInStoreDetails);
  SysUtils.FreeAndNil(FDigitalGoodInfo);
  inherited Destroy;
end;

procedure ItemType.SetApplicationData(Index: Integer; const Astring: string);
begin
  FApplicationData := Astring;
  FApplicationData_Specified := True;
end;

function ItemType.ApplicationData_Specified(Index: Integer): boolean;
begin
  Result := FApplicationData_Specified;
end;

procedure ItemType.SetAttributeSetArray(Index: Integer; const AAttributeSetArrayType: AttributeSetArrayType);
begin
  FAttributeSetArray := AAttributeSetArrayType;
  FAttributeSetArray_Specified := True;
end;

function ItemType.AttributeSetArray_Specified(Index: Integer): boolean;
begin
  Result := FAttributeSetArray_Specified;
end;

procedure ItemType.SetAttributeArray(Index: Integer; const AAttributeArrayType: AttributeArrayType);
begin
  FAttributeArray := AAttributeArrayType;
  FAttributeArray_Specified := True;
end;

function ItemType.AttributeArray_Specified(Index: Integer): boolean;
begin
  Result := FAttributeArray_Specified;
end;

procedure ItemType.SetLookupAttributeArray(Index: Integer; const ALookupAttributeArrayType: LookupAttributeArrayType);
begin
  FLookupAttributeArray := ALookupAttributeArrayType;
  FLookupAttributeArray_Specified := True;
end;

function ItemType.LookupAttributeArray_Specified(Index: Integer): boolean;
begin
  Result := FLookupAttributeArray_Specified;
end;

procedure ItemType.SetAutoPay(Index: Integer; const ABoolean: Boolean);
begin
  FAutoPay := ABoolean;
  FAutoPay_Specified := True;
end;

function ItemType.AutoPay_Specified(Index: Integer): boolean;
begin
  Result := FAutoPay_Specified;
end;

procedure ItemType.SetBiddingDetails(Index: Integer; const ABiddingDetailsType: BiddingDetailsType);
begin
  FBiddingDetails := ABiddingDetailsType;
  FBiddingDetails_Specified := True;
end;

function ItemType.BiddingDetails_Specified(Index: Integer): boolean;
begin
  Result := FBiddingDetails_Specified;
end;

procedure ItemType.SetBuyerProtection(Index: Integer; const ABuyerProtectionCodeType: BuyerProtectionCodeType);
begin
  FBuyerProtection := ABuyerProtectionCodeType;
  FBuyerProtection_Specified := True;
end;

function ItemType.BuyerProtection_Specified(Index: Integer): boolean;
begin
  Result := FBuyerProtection_Specified;
end;

procedure ItemType.SetBuyItNowPrice(Index: Integer; const AAmountType: AmountType);
begin
  FBuyItNowPrice := AAmountType;
  FBuyItNowPrice_Specified := True;
end;

function ItemType.BuyItNowPrice_Specified(Index: Integer): boolean;
begin
  Result := FBuyItNowPrice_Specified;
end;

procedure ItemType.SetCategoryMappingAllowed(Index: Integer; const ABoolean: Boolean);
begin
  FCategoryMappingAllowed := ABoolean;
  FCategoryMappingAllowed_Specified := True;
end;

function ItemType.CategoryMappingAllowed_Specified(Index: Integer): boolean;
begin
  Result := FCategoryMappingAllowed_Specified;
end;

procedure ItemType.SetCharity(Index: Integer; const ACharityType: CharityType);
begin
  FCharity := ACharityType;
  FCharity_Specified := True;
end;

function ItemType.Charity_Specified(Index: Integer): boolean;
begin
  Result := FCharity_Specified;
end;

procedure ItemType.SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FCountry := ACountryCodeType;
  FCountry_Specified := True;
end;

function ItemType.Country_Specified(Index: Integer): boolean;
begin
  Result := FCountry_Specified;
end;

procedure ItemType.SetCrossPromotion(Index: Integer; const ACrossPromotionsType: CrossPromotionsType);
begin
  FCrossPromotion := ACrossPromotionsType;
  FCrossPromotion_Specified := True;
end;

function ItemType.CrossPromotion_Specified(Index: Integer): boolean;
begin
  Result := FCrossPromotion_Specified;
end;

procedure ItemType.SetCurrency(Index: Integer; const ACurrencyCodeType: CurrencyCodeType);
begin
  FCurrency := ACurrencyCodeType;
  FCurrency_Specified := True;
end;

function ItemType.Currency_Specified(Index: Integer): boolean;
begin
  Result := FCurrency_Specified;
end;

procedure ItemType.SetDescription(Index: Integer; const Astring: string);
begin
  FDescription := Astring;
  FDescription_Specified := True;
end;

function ItemType.Description_Specified(Index: Integer): boolean;
begin
  Result := FDescription_Specified;
end;

procedure ItemType.SetDescriptionReviseMode(Index: Integer; const ADescriptionReviseModeCodeType: DescriptionReviseModeCodeType);
begin
  FDescriptionReviseMode := ADescriptionReviseModeCodeType;
  FDescriptionReviseMode_Specified := True;
end;

function ItemType.DescriptionReviseMode_Specified(Index: Integer): boolean;
begin
  Result := FDescriptionReviseMode_Specified;
end;

procedure ItemType.SetDistance(Index: Integer; const ADistanceType: DistanceType);
begin
  FDistance := ADistanceType;
  FDistance_Specified := True;
end;

function ItemType.Distance_Specified(Index: Integer): boolean;
begin
  Result := FDistance_Specified;
end;

procedure ItemType.SetHitCounter(Index: Integer; const AHitCounterCodeType: HitCounterCodeType);
begin
  FHitCounter := AHitCounterCodeType;
  FHitCounter_Specified := True;
end;

function ItemType.HitCounter_Specified(Index: Integer): boolean;
begin
  Result := FHitCounter_Specified;
end;

procedure ItemType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function ItemType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure ItemType.SetListingDetails(Index: Integer; const AListingDetailsType: ListingDetailsType);
begin
  FListingDetails := AListingDetailsType;
  FListingDetails_Specified := True;
end;

function ItemType.ListingDetails_Specified(Index: Integer): boolean;
begin
  Result := FListingDetails_Specified;
end;

procedure ItemType.SetListingDesigner(Index: Integer; const AListingDesignerType: ListingDesignerType);
begin
  FListingDesigner := AListingDesignerType;
  FListingDesigner_Specified := True;
end;

function ItemType.ListingDesigner_Specified(Index: Integer): boolean;
begin
  Result := FListingDesigner_Specified;
end;

procedure ItemType.SetListingDuration(Index: Integer; const Astring: string);
begin
  FListingDuration := Astring;
  FListingDuration_Specified := True;
end;

function ItemType.ListingDuration_Specified(Index: Integer): boolean;
begin
  Result := FListingDuration_Specified;
end;

procedure ItemType.SetListingEnhancement(Index: Integer; const AArray_Of_ListingEnhancementsCodeType: Array_Of_ListingEnhancementsCodeType);
begin
  FListingEnhancement := AArray_Of_ListingEnhancementsCodeType;
  FListingEnhancement_Specified := True;
end;

function ItemType.ListingEnhancement_Specified(Index: Integer): boolean;
begin
  Result := FListingEnhancement_Specified;
end;

procedure ItemType.SetListingType(Index: Integer; const AListingTypeCodeType: ListingTypeCodeType);
begin
  FListingType := AListingTypeCodeType;
  FListingType_Specified := True;
end;

function ItemType.ListingType_Specified(Index: Integer): boolean;
begin
  Result := FListingType_Specified;
end;

procedure ItemType.SetLocation(Index: Integer; const Astring: string);
begin
  FLocation := Astring;
  FLocation_Specified := True;
end;

function ItemType.Location_Specified(Index: Integer): boolean;
begin
  Result := FLocation_Specified;
end;

procedure ItemType.SetLotSize(Index: Integer; const AInteger: Integer);
begin
  FLotSize := AInteger;
  FLotSize_Specified := True;
end;

function ItemType.LotSize_Specified(Index: Integer): boolean;
begin
  Result := FLotSize_Specified;
end;

procedure ItemType.SetPartnerCode(Index: Integer; const Astring: string);
begin
  FPartnerCode := Astring;
  FPartnerCode_Specified := True;
end;

function ItemType.PartnerCode_Specified(Index: Integer): boolean;
begin
  Result := FPartnerCode_Specified;
end;

procedure ItemType.SetPartnerName(Index: Integer; const Astring: string);
begin
  FPartnerName := Astring;
  FPartnerName_Specified := True;
end;

function ItemType.PartnerName_Specified(Index: Integer): boolean;
begin
  Result := FPartnerName_Specified;
end;

procedure ItemType.SetPaymentDetails(Index: Integer; const APaymentDetailsType: PaymentDetailsType);
begin
  FPaymentDetails := APaymentDetailsType;
  FPaymentDetails_Specified := True;
end;

function ItemType.PaymentDetails_Specified(Index: Integer): boolean;
begin
  Result := FPaymentDetails_Specified;
end;

procedure ItemType.SetPaymentMethods(Index: Integer; const AArray_Of_BuyerPaymentMethodCodeType: Array_Of_BuyerPaymentMethodCodeType);
begin
  FPaymentMethods := AArray_Of_BuyerPaymentMethodCodeType;
  FPaymentMethods_Specified := True;
end;

function ItemType.PaymentMethods_Specified(Index: Integer): boolean;
begin
  Result := FPaymentMethods_Specified;
end;

procedure ItemType.SetPayPalEmailAddress(Index: Integer; const Astring: string);
begin
  FPayPalEmailAddress := Astring;
  FPayPalEmailAddress_Specified := True;
end;

function ItemType.PayPalEmailAddress_Specified(Index: Integer): boolean;
begin
  Result := FPayPalEmailAddress_Specified;
end;

procedure ItemType.SetPrimaryCategory(Index: Integer; const ACategoryType: CategoryType);
begin
  FPrimaryCategory := ACategoryType;
  FPrimaryCategory_Specified := True;
end;

function ItemType.PrimaryCategory_Specified(Index: Integer): boolean;
begin
  Result := FPrimaryCategory_Specified;
end;

procedure ItemType.SetPrivateListing(Index: Integer; const ABoolean: Boolean);
begin
  FPrivateListing := ABoolean;
  FPrivateListing_Specified := True;
end;

function ItemType.PrivateListing_Specified(Index: Integer): boolean;
begin
  Result := FPrivateListing_Specified;
end;

procedure ItemType.SetProductListingDetails(Index: Integer; const AProductListingDetailsType: ProductListingDetailsType);
begin
  FProductListingDetails := AProductListingDetailsType;
  FProductListingDetails_Specified := True;
end;

function ItemType.ProductListingDetails_Specified(Index: Integer): boolean;
begin
  Result := FProductListingDetails_Specified;
end;

procedure ItemType.SetQuantity(Index: Integer; const AInteger: Integer);
begin
  FQuantity := AInteger;
  FQuantity_Specified := True;
end;

function ItemType.Quantity_Specified(Index: Integer): boolean;
begin
  Result := FQuantity_Specified;
end;

procedure ItemType.SetPrivateNotes(Index: Integer; const Astring: string);
begin
  FPrivateNotes := Astring;
  FPrivateNotes_Specified := True;
end;

function ItemType.PrivateNotes_Specified(Index: Integer): boolean;
begin
  Result := FPrivateNotes_Specified;
end;

procedure ItemType.SetRegionID(Index: Integer; const Astring: string);
begin
  FRegionID := Astring;
  FRegionID_Specified := True;
end;

function ItemType.RegionID_Specified(Index: Integer): boolean;
begin
  Result := FRegionID_Specified;
end;

procedure ItemType.SetRelistLink(Index: Integer; const ABoolean: Boolean);
begin
  FRelistLink := ABoolean;
  FRelistLink_Specified := True;
end;

function ItemType.RelistLink_Specified(Index: Integer): boolean;
begin
  Result := FRelistLink_Specified;
end;

procedure ItemType.SetReservePrice(Index: Integer; const AAmountType: AmountType);
begin
  FReservePrice := AAmountType;
  FReservePrice_Specified := True;
end;

function ItemType.ReservePrice_Specified(Index: Integer): boolean;
begin
  Result := FReservePrice_Specified;
end;

procedure ItemType.SetReviseStatus(Index: Integer; const AReviseStatusType: ReviseStatusType);
begin
  FReviseStatus := AReviseStatusType;
  FReviseStatus_Specified := True;
end;

function ItemType.ReviseStatus_Specified(Index: Integer): boolean;
begin
  Result := FReviseStatus_Specified;
end;

procedure ItemType.SetScheduleTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FScheduleTime := ATXSDateTime;
  FScheduleTime_Specified := True;
end;

function ItemType.ScheduleTime_Specified(Index: Integer): boolean;
begin
  Result := FScheduleTime_Specified;
end;

procedure ItemType.SetSecondaryCategory(Index: Integer; const ACategoryType: CategoryType);
begin
  FSecondaryCategory := ACategoryType;
  FSecondaryCategory_Specified := True;
end;

function ItemType.SecondaryCategory_Specified(Index: Integer): boolean;
begin
  Result := FSecondaryCategory_Specified;
end;

procedure ItemType.SetFreeAddedCategory(Index: Integer; const ACategoryType: CategoryType);
begin
  FFreeAddedCategory := ACategoryType;
  FFreeAddedCategory_Specified := True;
end;

function ItemType.FreeAddedCategory_Specified(Index: Integer): boolean;
begin
  Result := FFreeAddedCategory_Specified;
end;

procedure ItemType.SetSeller(Index: Integer; const AUserType: UserType);
begin
  FSeller := AUserType;
  FSeller_Specified := True;
end;

function ItemType.Seller_Specified(Index: Integer): boolean;
begin
  Result := FSeller_Specified;
end;

procedure ItemType.SetSellingStatus(Index: Integer; const ASellingStatusType: SellingStatusType);
begin
  FSellingStatus := ASellingStatusType;
  FSellingStatus_Specified := True;
end;

function ItemType.SellingStatus_Specified(Index: Integer): boolean;
begin
  Result := FSellingStatus_Specified;
end;

procedure ItemType.SetShippingDetails(Index: Integer; const AShippingDetailsType: ShippingDetailsType);
begin
  FShippingDetails := AShippingDetailsType;
  FShippingDetails_Specified := True;
end;

function ItemType.ShippingDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingDetails_Specified;
end;

procedure ItemType.SetShipToLocations(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FShipToLocations := ASellerExcludeShipToLocationPreferencesType;
  FShipToLocations_Specified := True;
end;

function ItemType.ShipToLocations_Specified(Index: Integer): boolean;
begin
  Result := FShipToLocations_Specified;
end;

procedure ItemType.SetSite(Index: Integer; const ASiteCodeType: SiteCodeType);
begin
  FSite := ASiteCodeType;
  FSite_Specified := True;
end;

function ItemType.Site_Specified(Index: Integer): boolean;
begin
  Result := FSite_Specified;
end;

procedure ItemType.SetStartPrice(Index: Integer; const AAmountType: AmountType);
begin
  FStartPrice := AAmountType;
  FStartPrice_Specified := True;
end;

function ItemType.StartPrice_Specified(Index: Integer): boolean;
begin
  Result := FStartPrice_Specified;
end;

procedure ItemType.SetStorefront(Index: Integer; const AStorefrontType: StorefrontType);
begin
  FStorefront := AStorefrontType;
  FStorefront_Specified := True;
end;

function ItemType.Storefront_Specified(Index: Integer): boolean;
begin
  Result := FStorefront_Specified;
end;

procedure ItemType.SetSubTitle(Index: Integer; const Astring: string);
begin
  FSubTitle := Astring;
  FSubTitle_Specified := True;
end;

function ItemType.SubTitle_Specified(Index: Integer): boolean;
begin
  Result := FSubTitle_Specified;
end;

procedure ItemType.SetTimeLeft(Index: Integer; const ATXSDuration: TXSDuration);
begin
  FTimeLeft := ATXSDuration;
  FTimeLeft_Specified := True;
end;

function ItemType.TimeLeft_Specified(Index: Integer): boolean;
begin
  Result := FTimeLeft_Specified;
end;

procedure ItemType.SetTitle(Index: Integer; const Astring: string);
begin
  FTitle := Astring;
  FTitle_Specified := True;
end;

function ItemType.Title_Specified(Index: Integer): boolean;
begin
  Result := FTitle_Specified;
end;

procedure ItemType.SetUUID(Index: Integer; const AUUIDType: UUIDType);
begin
  FUUID := AUUIDType;
  FUUID_Specified := True;
end;

function ItemType.UUID_Specified(Index: Integer): boolean;
begin
  Result := FUUID_Specified;
end;

procedure ItemType.SetVATDetails(Index: Integer; const AVATDetailsType: VATDetailsType);
begin
  FVATDetails := AVATDetailsType;
  FVATDetails_Specified := True;
end;

function ItemType.VATDetails_Specified(Index: Integer): boolean;
begin
  Result := FVATDetails_Specified;
end;

procedure ItemType.SetSellerVacationNote(Index: Integer; const Astring: string);
begin
  FSellerVacationNote := Astring;
  FSellerVacationNote_Specified := True;
end;

function ItemType.SellerVacationNote_Specified(Index: Integer): boolean;
begin
  Result := FSellerVacationNote_Specified;
end;

procedure ItemType.SetWatchCount(Index: Integer; const AInt64: Int64);
begin
  FWatchCount := AInt64;
  FWatchCount_Specified := True;
end;

function ItemType.WatchCount_Specified(Index: Integer): boolean;
begin
  Result := FWatchCount_Specified;
end;

procedure ItemType.SetHitCount(Index: Integer; const AInt64: Int64);
begin
  FHitCount := AInt64;
  FHitCount_Specified := True;
end;

function ItemType.HitCount_Specified(Index: Integer): boolean;
begin
  Result := FHitCount_Specified;
end;

procedure ItemType.SetDisableBuyerRequirements(Index: Integer; const ABoolean: Boolean);
begin
  FDisableBuyerRequirements := ABoolean;
  FDisableBuyerRequirements_Specified := True;
end;

function ItemType.DisableBuyerRequirements_Specified(Index: Integer): boolean;
begin
  Result := FDisableBuyerRequirements_Specified;
end;

procedure ItemType.SetBestOfferDetails(Index: Integer; const ABestOfferDetailsType: BestOfferDetailsType);
begin
  FBestOfferDetails := ABestOfferDetailsType;
  FBestOfferDetails_Specified := True;
end;

function ItemType.BestOfferDetails_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferDetails_Specified;
end;

procedure ItemType.SetLocationDefaulted(Index: Integer; const ABoolean: Boolean);
begin
  FLocationDefaulted := ABoolean;
  FLocationDefaulted_Specified := True;
end;

function ItemType.LocationDefaulted_Specified(Index: Integer): boolean;
begin
  Result := FLocationDefaulted_Specified;
end;

procedure ItemType.SetUseTaxTable(Index: Integer; const ABoolean: Boolean);
begin
  FUseTaxTable := ABoolean;
  FUseTaxTable_Specified := True;
end;

function ItemType.UseTaxTable_Specified(Index: Integer): boolean;
begin
  Result := FUseTaxTable_Specified;
end;

procedure ItemType.SetGetItFast(Index: Integer; const ABoolean: Boolean);
begin
  FGetItFast := ABoolean;
  FGetItFast_Specified := True;
end;

function ItemType.GetItFast_Specified(Index: Integer): boolean;
begin
  Result := FGetItFast_Specified;
end;

procedure ItemType.SetBuyerResponsibleForShipping(Index: Integer; const ABoolean: Boolean);
begin
  FBuyerResponsibleForShipping := ABoolean;
  FBuyerResponsibleForShipping_Specified := True;
end;

function ItemType.BuyerResponsibleForShipping_Specified(Index: Integer): boolean;
begin
  Result := FBuyerResponsibleForShipping_Specified;
end;

procedure ItemType.SetLimitedWarrantyEligible(Index: Integer; const ABoolean: Boolean);
begin
  FLimitedWarrantyEligible := ABoolean;
  FLimitedWarrantyEligible_Specified := True;
end;

function ItemType.LimitedWarrantyEligible_Specified(Index: Integer): boolean;
begin
  Result := FLimitedWarrantyEligible_Specified;
end;

procedure ItemType.SeteBayNotes(Index: Integer; const Astring: string);
begin
  FeBayNotes := Astring;
  FeBayNotes_Specified := True;
end;

function ItemType.eBayNotes_Specified(Index: Integer): boolean;
begin
  Result := FeBayNotes_Specified;
end;

procedure ItemType.SetQuestionCount(Index: Integer; const AInt64: Int64);
begin
  FQuestionCount := AInt64;
  FQuestionCount_Specified := True;
end;

function ItemType.QuestionCount_Specified(Index: Integer): boolean;
begin
  Result := FQuestionCount_Specified;
end;

procedure ItemType.SetRelisted(Index: Integer; const ABoolean: Boolean);
begin
  FRelisted := ABoolean;
  FRelisted_Specified := True;
end;

function ItemType.Relisted_Specified(Index: Integer): boolean;
begin
  Result := FRelisted_Specified;
end;

procedure ItemType.SetQuantityAvailable(Index: Integer; const AInteger: Integer);
begin
  FQuantityAvailable := AInteger;
  FQuantityAvailable_Specified := True;
end;

function ItemType.QuantityAvailable_Specified(Index: Integer): boolean;
begin
  Result := FQuantityAvailable_Specified;
end;

procedure ItemType.SetSKU(Index: Integer; const ASKUType: SKUType);
begin
  FSKU := ASKUType;
  FSKU_Specified := True;
end;

function ItemType.SKU_Specified(Index: Integer): boolean;
begin
  Result := FSKU_Specified;
end;

procedure ItemType.SetSearchDetails(Index: Integer; const ASearchDetailsType: SearchDetailsType);
begin
  FSearchDetails := ASearchDetailsType;
  FSearchDetails_Specified := True;
end;

function ItemType.SearchDetails_Specified(Index: Integer): boolean;
begin
  Result := FSearchDetails_Specified;
end;

procedure ItemType.SetPostalCode(Index: Integer; const Astring: string);
begin
  FPostalCode := Astring;
  FPostalCode_Specified := True;
end;

function ItemType.PostalCode_Specified(Index: Integer): boolean;
begin
  Result := FPostalCode_Specified;
end;

procedure ItemType.SetPictureDetails(Index: Integer; const APictureDetailsType: PictureDetailsType);
begin
  FPictureDetails := APictureDetailsType;
  FPictureDetails_Specified := True;
end;

function ItemType.PictureDetails_Specified(Index: Integer): boolean;
begin
  Result := FPictureDetails_Specified;
end;

procedure ItemType.SetDispatchTimeMax(Index: Integer; const AInteger: Integer);
begin
  FDispatchTimeMax := AInteger;
  FDispatchTimeMax_Specified := True;
end;

function ItemType.DispatchTimeMax_Specified(Index: Integer): boolean;
begin
  Result := FDispatchTimeMax_Specified;
end;

procedure ItemType.SetBestOfferEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FBestOfferEnabled := ABoolean;
  FBestOfferEnabled_Specified := True;
end;

function ItemType.BestOfferEnabled_Specified(Index: Integer): boolean;
begin
  Result := FBestOfferEnabled_Specified;
end;

procedure ItemType.SetLocalListing(Index: Integer; const ABoolean: Boolean);
begin
  FLocalListing := ABoolean;
  FLocalListing_Specified := True;
end;

function ItemType.LocalListing_Specified(Index: Integer): boolean;
begin
  Result := FLocalListing_Specified;
end;

procedure ItemType.SetSellerContactDetails(Index: Integer; const AAddressType: AddressType);
begin
  FSellerContactDetails := AAddressType;
  FSellerContactDetails_Specified := True;
end;

function ItemType.SellerContactDetails_Specified(Index: Integer): boolean;
begin
  Result := FSellerContactDetails_Specified;
end;

procedure ItemType.SetTotalQuestionCount(Index: Integer; const AInt64: Int64);
begin
  FTotalQuestionCount := AInt64;
  FTotalQuestionCount_Specified := True;
end;

function ItemType.TotalQuestionCount_Specified(Index: Integer): boolean;
begin
  Result := FTotalQuestionCount_Specified;
end;

procedure ItemType.SetProxyItem(Index: Integer; const ABoolean: Boolean);
begin
  FProxyItem := ABoolean;
  FProxyItem_Specified := True;
end;

function ItemType.ProxyItem_Specified(Index: Integer): boolean;
begin
  Result := FProxyItem_Specified;
end;

procedure ItemType.SetExtendedSellerContactDetails(Index: Integer; const AExtendedContactDetailsType: ExtendedContactDetailsType);
begin
  FExtendedSellerContactDetails := AExtendedContactDetailsType;
  FExtendedSellerContactDetails_Specified := True;
end;

function ItemType.ExtendedSellerContactDetails_Specified(Index: Integer): boolean;
begin
  Result := FExtendedSellerContactDetails_Specified;
end;

procedure ItemType.SetLeadCount(Index: Integer; const AInteger: Integer);
begin
  FLeadCount := AInteger;
  FLeadCount_Specified := True;
end;

function ItemType.LeadCount_Specified(Index: Integer): boolean;
begin
  Result := FLeadCount_Specified;
end;

procedure ItemType.SetNewLeadCount(Index: Integer; const AInteger: Integer);
begin
  FNewLeadCount := AInteger;
  FNewLeadCount_Specified := True;
end;

function ItemType.NewLeadCount_Specified(Index: Integer): boolean;
begin
  Result := FNewLeadCount_Specified;
end;

procedure ItemType.SetItemSpecifics(Index: Integer; const ANameValueListArrayType: NameValueListArrayType);
begin
  FItemSpecifics := ANameValueListArrayType;
  FItemSpecifics_Specified := True;
end;

function ItemType.ItemSpecifics_Specified(Index: Integer): boolean;
begin
  Result := FItemSpecifics_Specified;
end;

procedure ItemType.SetGroupCategoryID(Index: Integer; const Astring: string);
begin
  FGroupCategoryID := Astring;
  FGroupCategoryID_Specified := True;
end;

function ItemType.GroupCategoryID_Specified(Index: Integer): boolean;
begin
  Result := FGroupCategoryID_Specified;
end;

procedure ItemType.SetClassifiedAdPayPerLeadFee(Index: Integer; const AAmountType: AmountType);
begin
  FClassifiedAdPayPerLeadFee := AAmountType;
  FClassifiedAdPayPerLeadFee_Specified := True;
end;

function ItemType.ClassifiedAdPayPerLeadFee_Specified(Index: Integer): boolean;
begin
  Result := FClassifiedAdPayPerLeadFee_Specified;
end;

procedure ItemType.SetBidGroupItem(Index: Integer; const ABoolean: Boolean);
begin
  FBidGroupItem := ABoolean;
  FBidGroupItem_Specified := True;
end;

function ItemType.BidGroupItem_Specified(Index: Integer): boolean;
begin
  Result := FBidGroupItem_Specified;
end;

procedure ItemType.SetApplyBuyerProtection(Index: Integer; const ABuyerProtectionDetailsType: BuyerProtectionDetailsType);
begin
  FApplyBuyerProtection := ABuyerProtectionDetailsType;
  FApplyBuyerProtection_Specified := True;
end;

function ItemType.ApplyBuyerProtection_Specified(Index: Integer): boolean;
begin
  Result := FApplyBuyerProtection_Specified;
end;

procedure ItemType.SetListingSubtype2(Index: Integer; const AListingSubtypeCodeType: ListingSubtypeCodeType);
begin
  FListingSubtype2 := AListingSubtypeCodeType;
  FListingSubtype2_Specified := True;
end;

function ItemType.ListingSubtype2_Specified(Index: Integer): boolean;
begin
  Result := FListingSubtype2_Specified;
end;

procedure ItemType.SetMechanicalCheckAccepted(Index: Integer; const ABoolean: Boolean);
begin
  FMechanicalCheckAccepted := ABoolean;
  FMechanicalCheckAccepted_Specified := True;
end;

function ItemType.MechanicalCheckAccepted_Specified(Index: Integer): boolean;
begin
  Result := FMechanicalCheckAccepted_Specified;
end;

procedure ItemType.SetUpdateSellerInfo(Index: Integer; const ABoolean: Boolean);
begin
  FUpdateSellerInfo := ABoolean;
  FUpdateSellerInfo_Specified := True;
end;

function ItemType.UpdateSellerInfo_Specified(Index: Integer): boolean;
begin
  Result := FUpdateSellerInfo_Specified;
end;

procedure ItemType.SetUpdateReturnPolicy(Index: Integer; const ABoolean: Boolean);
begin
  FUpdateReturnPolicy := ABoolean;
  FUpdateReturnPolicy_Specified := True;
end;

function ItemType.UpdateReturnPolicy_Specified(Index: Integer): boolean;
begin
  Result := FUpdateReturnPolicy_Specified;
end;

procedure ItemType.SetItemPolicyViolation(Index: Integer; const AItemPolicyViolationType: ItemPolicyViolationType);
begin
  FItemPolicyViolation := AItemPolicyViolationType;
  FItemPolicyViolation_Specified := True;
end;

function ItemType.ItemPolicyViolation_Specified(Index: Integer): boolean;
begin
  Result := FItemPolicyViolation_Specified;
end;

procedure ItemType.SetCrossBorderTrade(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FCrossBorderTrade := ASellerExcludeShipToLocationPreferencesType;
  FCrossBorderTrade_Specified := True;
end;

function ItemType.CrossBorderTrade_Specified(Index: Integer): boolean;
begin
  Result := FCrossBorderTrade_Specified;
end;

procedure ItemType.SetBusinessSellerDetails(Index: Integer; const ABusinessSellerDetailsType: BusinessSellerDetailsType);
begin
  FBusinessSellerDetails := ABusinessSellerDetailsType;
  FBusinessSellerDetails_Specified := True;
end;

function ItemType.BusinessSellerDetails_Specified(Index: Integer): boolean;
begin
  Result := FBusinessSellerDetails_Specified;
end;

procedure ItemType.SetBuyerGuaranteePrice(Index: Integer; const AAmountType: AmountType);
begin
  FBuyerGuaranteePrice := AAmountType;
  FBuyerGuaranteePrice_Specified := True;
end;

function ItemType.BuyerGuaranteePrice_Specified(Index: Integer): boolean;
begin
  Result := FBuyerGuaranteePrice_Specified;
end;

procedure ItemType.SetBuyerRequirementDetails(Index: Integer; const ABuyerRequirementDetailsType: BuyerRequirementDetailsType);
begin
  FBuyerRequirementDetails := ABuyerRequirementDetailsType;
  FBuyerRequirementDetails_Specified := True;
end;

function ItemType.BuyerRequirementDetails_Specified(Index: Integer): boolean;
begin
  Result := FBuyerRequirementDetails_Specified;
end;

procedure ItemType.SetReturnPolicy(Index: Integer; const AReturnPolicyType: ReturnPolicyType);
begin
  FReturnPolicy := AReturnPolicyType;
  FReturnPolicy_Specified := True;
end;

function ItemType.ReturnPolicy_Specified(Index: Integer): boolean;
begin
  Result := FReturnPolicy_Specified;
end;

procedure ItemType.SetPaymentAllowedSite(Index: Integer; const AIntegratedMerchantCreditCardInfoType: IntegratedMerchantCreditCardInfoType);
begin
  FPaymentAllowedSite := AIntegratedMerchantCreditCardInfoType;
  FPaymentAllowedSite_Specified := True;
end;

function ItemType.PaymentAllowedSite_Specified(Index: Integer): boolean;
begin
  Result := FPaymentAllowedSite_Specified;
end;

procedure ItemType.SetInventoryTrackingMethod(Index: Integer; const AInventoryTrackingMethodCodeType: InventoryTrackingMethodCodeType);
begin
  FInventoryTrackingMethod := AInventoryTrackingMethodCodeType;
  FInventoryTrackingMethod_Specified := True;
end;

function ItemType.InventoryTrackingMethod_Specified(Index: Integer): boolean;
begin
  Result := FInventoryTrackingMethod_Specified;
end;

procedure ItemType.SetIntegratedMerchantCreditCardEnabled(Index: Integer; const ABoolean: Boolean);
begin
  FIntegratedMerchantCreditCardEnabled := ABoolean;
  FIntegratedMerchantCreditCardEnabled_Specified := True;
end;

function ItemType.IntegratedMerchantCreditCardEnabled_Specified(Index: Integer): boolean;
begin
  Result := FIntegratedMerchantCreditCardEnabled_Specified;
end;

procedure ItemType.SetVariations(Index: Integer; const AVariationsType: VariationsType);
begin
  FVariations := AVariationsType;
  FVariations_Specified := True;
end;

function ItemType.Variations_Specified(Index: Integer): boolean;
begin
  Result := FVariations_Specified;
end;

procedure ItemType.SetItemCompatibilityList(Index: Integer; const AItemCompatibilityListType: ItemCompatibilityListType);
begin
  FItemCompatibilityList := AItemCompatibilityListType;
  FItemCompatibilityList_Specified := True;
end;

function ItemType.ItemCompatibilityList_Specified(Index: Integer): boolean;
begin
  Result := FItemCompatibilityList_Specified;
end;

procedure ItemType.SetItemCompatibilityCount(Index: Integer; const AInteger: Integer);
begin
  FItemCompatibilityCount := AInteger;
  FItemCompatibilityCount_Specified := True;
end;

function ItemType.ItemCompatibilityCount_Specified(Index: Integer): boolean;
begin
  Result := FItemCompatibilityCount_Specified;
end;

procedure ItemType.SetConditionID(Index: Integer; const AInteger: Integer);
begin
  FConditionID := AInteger;
  FConditionID_Specified := True;
end;

function ItemType.ConditionID_Specified(Index: Integer): boolean;
begin
  Result := FConditionID_Specified;
end;

procedure ItemType.SetConditionDescription(Index: Integer; const Astring: string);
begin
  FConditionDescription := Astring;
  FConditionDescription_Specified := True;
end;

function ItemType.ConditionDescription_Specified(Index: Integer): boolean;
begin
  Result := FConditionDescription_Specified;
end;

procedure ItemType.SetConditionDisplayName(Index: Integer; const Astring: string);
begin
  FConditionDisplayName := Astring;
  FConditionDisplayName_Specified := True;
end;

function ItemType.ConditionDisplayName_Specified(Index: Integer): boolean;
begin
  Result := FConditionDisplayName_Specified;
end;

procedure ItemType.SetTaxCategory(Index: Integer; const Astring: string);
begin
  FTaxCategory := Astring;
  FTaxCategory_Specified := True;
end;

function ItemType.TaxCategory_Specified(Index: Integer): boolean;
begin
  Result := FTaxCategory_Specified;
end;

procedure ItemType.SetQuantityAvailableHint(Index: Integer; const AQuantityAvailableHintCodeType: QuantityAvailableHintCodeType);
begin
  FQuantityAvailableHint := AQuantityAvailableHintCodeType;
  FQuantityAvailableHint_Specified := True;
end;

function ItemType.QuantityAvailableHint_Specified(Index: Integer): boolean;
begin
  Result := FQuantityAvailableHint_Specified;
end;

procedure ItemType.SetQuantityThreshold(Index: Integer; const AInteger: Integer);
begin
  FQuantityThreshold := AInteger;
  FQuantityThreshold_Specified := True;
end;

function ItemType.QuantityThreshold_Specified(Index: Integer): boolean;
begin
  Result := FQuantityThreshold_Specified;
end;

procedure ItemType.SetDiscountPriceInfo(Index: Integer; const ADiscountPriceInfoType: DiscountPriceInfoType);
begin
  FDiscountPriceInfo := ADiscountPriceInfoType;
  FDiscountPriceInfo_Specified := True;
end;

function ItemType.DiscountPriceInfo_Specified(Index: Integer): boolean;
begin
  Result := FDiscountPriceInfo_Specified;
end;

procedure ItemType.SetSellerProvidedTitle(Index: Integer; const Astring: string);
begin
  FSellerProvidedTitle := Astring;
  FSellerProvidedTitle_Specified := True;
end;

function ItemType.SellerProvidedTitle_Specified(Index: Integer): boolean;
begin
  Result := FSellerProvidedTitle_Specified;
end;

procedure ItemType.SetVIN(Index: Integer; const Astring: string);
begin
  FVIN := Astring;
  FVIN_Specified := True;
end;

function ItemType.VIN_Specified(Index: Integer): boolean;
begin
  Result := FVIN_Specified;
end;

procedure ItemType.SetVINLink(Index: Integer; const Astring: string);
begin
  FVINLink := Astring;
  FVINLink_Specified := True;
end;

function ItemType.VINLink_Specified(Index: Integer): boolean;
begin
  Result := FVINLink_Specified;
end;

procedure ItemType.SetVRM(Index: Integer; const Astring: string);
begin
  FVRM := Astring;
  FVRM_Specified := True;
end;

function ItemType.VRM_Specified(Index: Integer): boolean;
begin
  Result := FVRM_Specified;
end;

procedure ItemType.SetVRMLink(Index: Integer; const Astring: string);
begin
  FVRMLink := Astring;
  FVRMLink_Specified := True;
end;

function ItemType.VRMLink_Specified(Index: Integer): boolean;
begin
  Result := FVRMLink_Specified;
end;

procedure ItemType.SetQuantityInfo(Index: Integer; const AQuantityInfoType: QuantityInfoType);
begin
  FQuantityInfo := AQuantityInfoType;
  FQuantityInfo_Specified := True;
end;

function ItemType.QuantityInfo_Specified(Index: Integer): boolean;
begin
  Result := FQuantityInfo_Specified;
end;

procedure ItemType.SetSellerProfiles(Index: Integer; const ASellerProfilesType: SellerProfilesType);
begin
  FSellerProfiles := ASellerProfilesType;
  FSellerProfiles_Specified := True;
end;

function ItemType.SellerProfiles_Specified(Index: Integer): boolean;
begin
  Result := FSellerProfiles_Specified;
end;

procedure ItemType.SetShippingServiceCostOverrideList(Index: Integer; const AShippingServiceCostOverrideListType: ShippingServiceCostOverrideListType);
begin
  FShippingServiceCostOverrideList := AShippingServiceCostOverrideListType;
  FShippingServiceCostOverrideList_Specified := True;
end;

function ItemType.ShippingServiceCostOverrideList_Specified(Index: Integer): boolean;
begin
  Result := FShippingServiceCostOverrideList_Specified;
end;

procedure ItemType.SetShippingOverride(Index: Integer; const AShippingOverrideType: ShippingOverrideType);
begin
  FShippingOverride := AShippingOverrideType;
  FShippingOverride_Specified := True;
end;

function ItemType.ShippingOverride_Specified(Index: Integer): boolean;
begin
  Result := FShippingOverride_Specified;
end;

procedure ItemType.SetShippingPackageDetails(Index: Integer; const AShipPackageDetailsType: ShipPackageDetailsType);
begin
  FShippingPackageDetails := AShipPackageDetailsType;
  FShippingPackageDetails_Specified := True;
end;

function ItemType.ShippingPackageDetails_Specified(Index: Integer): boolean;
begin
  Result := FShippingPackageDetails_Specified;
end;

procedure ItemType.SetTopRatedListing(Index: Integer; const ABoolean: Boolean);
begin
  FTopRatedListing := ABoolean;
  FTopRatedListing_Specified := True;
end;

function ItemType.TopRatedListing_Specified(Index: Integer): boolean;
begin
  Result := FTopRatedListing_Specified;
end;

procedure ItemType.SetQuantityRestrictionPerBuyer(Index: Integer; const AQuantityRestrictionPerBuyerInfoType: QuantityRestrictionPerBuyerInfoType);
begin
  FQuantityRestrictionPerBuyer := AQuantityRestrictionPerBuyerInfoType;
  FQuantityRestrictionPerBuyer_Specified := True;
end;

function ItemType.QuantityRestrictionPerBuyer_Specified(Index: Integer): boolean;
begin
  Result := FQuantityRestrictionPerBuyer_Specified;
end;

procedure ItemType.SetFloorPrice(Index: Integer; const AAmountType: AmountType);
begin
  FFloorPrice := AAmountType;
  FFloorPrice_Specified := True;
end;

function ItemType.FloorPrice_Specified(Index: Integer): boolean;
begin
  Result := FFloorPrice_Specified;
end;

procedure ItemType.SetCeilingPrice(Index: Integer; const AAmountType: AmountType);
begin
  FCeilingPrice := AAmountType;
  FCeilingPrice_Specified := True;
end;

function ItemType.CeilingPrice_Specified(Index: Integer): boolean;
begin
  Result := FCeilingPrice_Specified;
end;

procedure ItemType.SetIsIntermediatedShippingEligible(Index: Integer; const ABoolean: Boolean);
begin
  FIsIntermediatedShippingEligible := ABoolean;
  FIsIntermediatedShippingEligible_Specified := True;
end;

function ItemType.IsIntermediatedShippingEligible_Specified(Index: Integer): boolean;
begin
  Result := FIsIntermediatedShippingEligible_Specified;
end;

procedure ItemType.SetUnitInfo(Index: Integer; const AUnitInfoType: UnitInfoType);
begin
  FUnitInfo := AUnitInfoType;
  FUnitInfo_Specified := True;
end;

function ItemType.UnitInfo_Specified(Index: Integer): boolean;
begin
  Result := FUnitInfo_Specified;
end;

procedure ItemType.SetRelistParentID(Index: Integer; const AInt64: Int64);
begin
  FRelistParentID := AInt64;
  FRelistParentID_Specified := True;
end;

function ItemType.RelistParentID_Specified(Index: Integer): boolean;
begin
  Result := FRelistParentID_Specified;
end;

procedure ItemType.SetConditionDefinition(Index: Integer; const Astring: string);
begin
  FConditionDefinition := Astring;
  FConditionDefinition_Specified := True;
end;

function ItemType.ConditionDefinition_Specified(Index: Integer): boolean;
begin
  Result := FConditionDefinition_Specified;
end;

procedure ItemType.SetHideFromSearch(Index: Integer; const ABoolean: Boolean);
begin
  FHideFromSearch := ABoolean;
  FHideFromSearch_Specified := True;
end;

function ItemType.HideFromSearch_Specified(Index: Integer): boolean;
begin
  Result := FHideFromSearch_Specified;
end;

procedure ItemType.SetReasonHideFromSearch(Index: Integer; const AReasonHideFromSearchCodeType: ReasonHideFromSearchCodeType);
begin
  FReasonHideFromSearch := AReasonHideFromSearchCodeType;
  FReasonHideFromSearch_Specified := True;
end;

function ItemType.ReasonHideFromSearch_Specified(Index: Integer): boolean;
begin
  Result := FReasonHideFromSearch_Specified;
end;

procedure ItemType.SetIncludeRecommendations(Index: Integer; const ABoolean: Boolean);
begin
  FIncludeRecommendations := ABoolean;
  FIncludeRecommendations_Specified := True;
end;

function ItemType.IncludeRecommendations_Specified(Index: Integer): boolean;
begin
  Result := FIncludeRecommendations_Specified;
end;

procedure ItemType.SetPickupInStoreDetails(Index: Integer; const APickupInStoreDetailsType: PickupInStoreDetailsType);
begin
  FPickupInStoreDetails := APickupInStoreDetailsType;
  FPickupInStoreDetails_Specified := True;
end;

function ItemType.PickupInStoreDetails_Specified(Index: Integer): boolean;
begin
  Result := FPickupInStoreDetails_Specified;
end;

procedure ItemType.SetSiteId(Index: Integer; const AInteger: Integer);
begin
  FSiteId := AInteger;
  FSiteId_Specified := True;
end;

function ItemType.SiteId_Specified(Index: Integer): boolean;
begin
  Result := FSiteId_Specified;
end;

procedure ItemType.SetIgnoreQuantity(Index: Integer; const ABoolean: Boolean);
begin
  FIgnoreQuantity := ABoolean;
  FIgnoreQuantity_Specified := True;
end;

function ItemType.IgnoreQuantity_Specified(Index: Integer): boolean;
begin
  Result := FIgnoreQuantity_Specified;
end;

procedure ItemType.SetAvailableForPickupDropOff(Index: Integer; const ABoolean: Boolean);
begin
  FAvailableForPickupDropOff := ABoolean;
  FAvailableForPickupDropOff_Specified := True;
end;

function ItemType.AvailableForPickupDropOff_Specified(Index: Integer): boolean;
begin
  Result := FAvailableForPickupDropOff_Specified;
end;

procedure ItemType.SetEligibleForPickupDropOff(Index: Integer; const ABoolean: Boolean);
begin
  FEligibleForPickupDropOff := ABoolean;
  FEligibleForPickupDropOff_Specified := True;
end;

function ItemType.EligibleForPickupDropOff_Specified(Index: Integer): boolean;
begin
  Result := FEligibleForPickupDropOff_Specified;
end;

procedure ItemType.SetLiveAuction(Index: Integer; const ABoolean: Boolean);
begin
  FLiveAuction := ABoolean;
  FLiveAuction_Specified := True;
end;

function ItemType.LiveAuction_Specified(Index: Integer): boolean;
begin
  Result := FLiveAuction_Specified;
end;

procedure ItemType.SetDigitalGoodInfo(Index: Integer; const ADigitalGoodInfoType: DigitalGoodInfoType);
begin
  FDigitalGoodInfo := ADigitalGoodInfoType;
  FDigitalGoodInfo_Specified := True;
end;

function ItemType.DigitalGoodInfo_Specified(Index: Integer): boolean;
begin
  Result := FDigitalGoodInfo_Specified;
end;

procedure ItemType.SeteBayPlus(Index: Integer; const ABoolean: Boolean);
begin
  FeBayPlus := ABoolean;
  FeBayPlus_Specified := True;
end;

function ItemType.eBayPlus_Specified(Index: Integer): boolean;
begin
  Result := FeBayPlus_Specified;
end;

procedure ItemType.SeteBayPlusEligible(Index: Integer; const ABoolean: Boolean);
begin
  FeBayPlusEligible := ABoolean;
  FeBayPlusEligible_Specified := True;
end;

function ItemType.eBayPlusEligible_Specified(Index: Integer): boolean;
begin
  Result := FeBayPlusEligible_Specified;
end;

procedure ItemType.SeteMailDeliveryAvailable(Index: Integer; const ABoolean: Boolean);
begin
  FeMailDeliveryAvailable := ABoolean;
  FeMailDeliveryAvailable_Specified := True;
end;

function ItemType.eMailDeliveryAvailable_Specified(Index: Integer): boolean;
begin
  Result := FeMailDeliveryAvailable_Specified;
end;

procedure ItemType.SetIsSecureDescription(Index: Integer; const ABoolean: Boolean);
begin
  FIsSecureDescription := ABoolean;
  FIsSecureDescription_Specified := True;
end;

function ItemType.IsSecureDescription_Specified(Index: Integer): boolean;
begin
  Result := FIsSecureDescription_Specified;
end;

destructor AttributeSetType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAttribute)-1 do
    SysUtils.FreeAndNil(FAttribute[I]);
  System.SetLength(FAttribute, 0);
  inherited Destroy;
end;

procedure AttributeSetType.SetattributeSetID(Index: Integer; const AInteger: Integer);
begin
  FattributeSetID := AInteger;
  FattributeSetID_Specified := True;
end;

function AttributeSetType.attributeSetID_Specified(Index: Integer): boolean;
begin
  Result := FattributeSetID_Specified;
end;

procedure AttributeSetType.SetattributeSetVersion(Index: Integer; const Astring: string);
begin
  FattributeSetVersion := Astring;
  FattributeSetVersion_Specified := True;
end;

function AttributeSetType.attributeSetVersion_Specified(Index: Integer): boolean;
begin
  Result := FattributeSetVersion_Specified;
end;

procedure AttributeSetType.SetAttribute(Index: Integer; const AAttributeArrayType: AttributeArrayType);
begin
  FAttribute := AAttributeArrayType;
  FAttribute_Specified := True;
end;

function AttributeSetType.Attribute_Specified(Index: Integer): boolean;
begin
  Result := FAttribute_Specified;
end;

procedure ValType.SetValueLiteral(Index: Integer; const Astring: string);
begin
  FValueLiteral := Astring;
  FValueLiteral_Specified := True;
end;

function ValType.ValueLiteral_Specified(Index: Integer): boolean;
begin
  Result := FValueLiteral_Specified;
end;

procedure ValType.SetSuggestedValueLiteral(Index: Integer; const ASellerExcludeShipToLocationPreferencesType: SellerExcludeShipToLocationPreferencesType);
begin
  FSuggestedValueLiteral := ASellerExcludeShipToLocationPreferencesType;
  FSuggestedValueLiteral_Specified := True;
end;

function ValType.SuggestedValueLiteral_Specified(Index: Integer): boolean;
begin
  Result := FSuggestedValueLiteral_Specified;
end;

procedure ValType.SetValueID(Index: Integer; const AInteger: Integer);
begin
  FValueID := AInteger;
  FValueID_Specified := True;
end;

function ValType.ValueID_Specified(Index: Integer): boolean;
begin
  Result := FValueID_Specified;
end;

destructor AdFormatLeadType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FMemberMessage)-1 do
    SysUtils.FreeAndNil(FMemberMessage[I]);
  System.SetLength(FMemberMessage, 0);
  SysUtils.FreeAndNil(FAddress);
  SysUtils.FreeAndNil(FSubmittedTime);
  SysUtils.FreeAndNil(FLeadFee);
  inherited Destroy;
end;

procedure AdFormatLeadType.SetAdditionalInformation(Index: Integer; const Astring: string);
begin
  FAdditionalInformation := Astring;
  FAdditionalInformation_Specified := True;
end;

function AdFormatLeadType.AdditionalInformation_Specified(Index: Integer): boolean;
begin
  Result := FAdditionalInformation_Specified;
end;

procedure AdFormatLeadType.SetAddress(Index: Integer; const AAddressType: AddressType);
begin
  FAddress := AAddressType;
  FAddress_Specified := True;
end;

function AdFormatLeadType.Address_Specified(Index: Integer): boolean;
begin
  Result := FAddress_Specified;
end;

procedure AdFormatLeadType.SetBestTimeToCall(Index: Integer; const Astring: string);
begin
  FBestTimeToCall := Astring;
  FBestTimeToCall_Specified := True;
end;

function AdFormatLeadType.BestTimeToCall_Specified(Index: Integer): boolean;
begin
  Result := FBestTimeToCall_Specified;
end;

procedure AdFormatLeadType.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function AdFormatLeadType.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

procedure AdFormatLeadType.SetSubmittedTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FSubmittedTime := ATXSDateTime;
  FSubmittedTime_Specified := True;
end;

function AdFormatLeadType.SubmittedTime_Specified(Index: Integer): boolean;
begin
  Result := FSubmittedTime_Specified;
end;

procedure AdFormatLeadType.SetItemID(Index: Integer; const AItemIDType: ItemIDType);
begin
  FItemID := AItemIDType;
  FItemID_Specified := True;
end;

function AdFormatLeadType.ItemID_Specified(Index: Integer): boolean;
begin
  Result := FItemID_Specified;
end;

procedure AdFormatLeadType.SetItemTitle(Index: Integer; const Astring: string);
begin
  FItemTitle := Astring;
  FItemTitle_Specified := True;
end;

function AdFormatLeadType.ItemTitle_Specified(Index: Integer): boolean;
begin
  Result := FItemTitle_Specified;
end;

procedure AdFormatLeadType.SetUserID(Index: Integer; const AUserIDType: UserIDType);
begin
  FUserID := AUserIDType;
  FUserID_Specified := True;
end;

function AdFormatLeadType.UserID_Specified(Index: Integer): boolean;
begin
  Result := FUserID_Specified;
end;

procedure AdFormatLeadType.SetMemberMessage(Index: Integer; const AMemberMessageExchangeArrayType: MemberMessageExchangeArrayType);
begin
  FMemberMessage := AMemberMessageExchangeArrayType;
  FMemberMessage_Specified := True;
end;

function AdFormatLeadType.MemberMessage_Specified(Index: Integer): boolean;
begin
  Result := FMemberMessage_Specified;
end;

procedure AdFormatLeadType.SetStatus(Index: Integer; const AAdFormatLeadStatusCodeType: AdFormatLeadStatusCodeType);
begin
  FStatus := AAdFormatLeadStatusCodeType;
  FStatus_Specified := True;
end;

function AdFormatLeadType.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

procedure AdFormatLeadType.SetLeadFee(Index: Integer; const AAmountType: AmountType);
begin
  FLeadFee := AAmountType;
  FLeadFee_Specified := True;
end;

function AdFormatLeadType.LeadFee_Specified(Index: Integer): boolean;
begin
  Result := FLeadFee_Specified;
end;

procedure AdFormatLeadType.SetExternalEmail(Index: Integer; const Astring: string);
begin
  FExternalEmail := Astring;
  FExternalEmail_Specified := True;
end;

function AdFormatLeadType.ExternalEmail_Specified(Index: Integer): boolean;
begin
  Result := FExternalEmail_Specified;
end;

procedure AdFormatLeadType.SetPurchaseTimeFrame(Index: Integer; const Astring: string);
begin
  FPurchaseTimeFrame := Astring;
  FPurchaseTimeFrame_Specified := True;
end;

function AdFormatLeadType.PurchaseTimeFrame_Specified(Index: Integer): boolean;
begin
  Result := FPurchaseTimeFrame_Specified;
end;

procedure AdFormatLeadType.SetTradeInYear(Index: Integer; const Astring: string);
begin
  FTradeInYear := Astring;
  FTradeInYear_Specified := True;
end;

function AdFormatLeadType.TradeInYear_Specified(Index: Integer): boolean;
begin
  Result := FTradeInYear_Specified;
end;

procedure AdFormatLeadType.SetTradeInMake(Index: Integer; const Astring: string);
begin
  FTradeInMake := Astring;
  FTradeInMake_Specified := True;
end;

function AdFormatLeadType.TradeInMake_Specified(Index: Integer): boolean;
begin
  Result := FTradeInMake_Specified;
end;

procedure AdFormatLeadType.SetTradeInModel(Index: Integer; const Astring: string);
begin
  FTradeInModel := Astring;
  FTradeInModel_Specified := True;
end;

function AdFormatLeadType.TradeInModel_Specified(Index: Integer): boolean;
begin
  Result := FTradeInModel_Specified;
end;

procedure AdFormatLeadType.SetFinancingAnswer(Index: Integer; const ABoolean: Boolean);
begin
  FFinancingAnswer := ABoolean;
  FFinancingAnswer_Specified := True;
end;

function AdFormatLeadType.FinancingAnswer_Specified(Index: Integer): boolean;
begin
  Result := FFinancingAnswer_Specified;
end;

procedure AdFormatLeadType.SetAnswer1(Index: Integer; const ABoolean: Boolean);
begin
  FAnswer1 := ABoolean;
  FAnswer1_Specified := True;
end;

function AdFormatLeadType.Answer1_Specified(Index: Integer): boolean;
begin
  Result := FAnswer1_Specified;
end;

procedure AdFormatLeadType.SetAnswer2(Index: Integer; const ABoolean: Boolean);
begin
  FAnswer2 := ABoolean;
  FAnswer2_Specified := True;
end;

function AdFormatLeadType.Answer2_Specified(Index: Integer): boolean;
begin
  Result := FAnswer2_Specified;
end;

procedure AddressAttributeType.Settype_(Index: Integer; const AAddressAttributeCodeType: AddressAttributeCodeType);
begin
  Ftype_ := AAddressAttributeCodeType;
  Ftype__Specified := True;
end;

function AddressAttributeType.type__Specified(Index: Integer): boolean;
begin
  Result := Ftype__Specified;
end;

destructor ApiAccessRuleType.Destroy;
begin
  SysUtils.FreeAndNil(FPeriodicStartDate);
  SysUtils.FreeAndNil(FModTime);
  inherited Destroy;
end;

procedure ApiAccessRuleType.SetCallName(Index: Integer; const Astring: string);
begin
  FCallName := Astring;
  FCallName_Specified := True;
end;

function ApiAccessRuleType.CallName_Specified(Index: Integer): boolean;
begin
  Result := FCallName_Specified;
end;

procedure ApiAccessRuleType.SetCountsTowardAggregate(Index: Integer; const ABoolean: Boolean);
begin
  FCountsTowardAggregate := ABoolean;
  FCountsTowardAggregate_Specified := True;
end;

function ApiAccessRuleType.CountsTowardAggregate_Specified(Index: Integer): boolean;
begin
  Result := FCountsTowardAggregate_Specified;
end;

procedure ApiAccessRuleType.SetDailyHardLimit(Index: Integer; const AInt64: Int64);
begin
  FDailyHardLimit := AInt64;
  FDailyHardLimit_Specified := True;
end;

function ApiAccessRuleType.DailyHardLimit_Specified(Index: Integer): boolean;
begin
  Result := FDailyHardLimit_Specified;
end;

procedure ApiAccessRuleType.SetDailySoftLimit(Index: Integer; const AInt64: Int64);
begin
  FDailySoftLimit := AInt64;
  FDailySoftLimit_Specified := True;
end;

function ApiAccessRuleType.DailySoftLimit_Specified(Index: Integer): boolean;
begin
  Result := FDailySoftLimit_Specified;
end;

procedure ApiAccessRuleType.SetDailyUsage(Index: Integer; const AInt64: Int64);
begin
  FDailyUsage := AInt64;
  FDailyUsage_Specified := True;
end;

function ApiAccessRuleType.DailyUsage_Specified(Index: Integer): boolean;
begin
  Result := FDailyUsage_Specified;
end;

procedure ApiAccessRuleType.SetHourlyHardLimit(Index: Integer; const AInt64: Int64);
begin
  FHourlyHardLimit := AInt64;
  FHourlyHardLimit_Specified := True;
end;

function ApiAccessRuleType.HourlyHardLimit_Specified(Index: Integer): boolean;
begin
  Result := FHourlyHardLimit_Specified;
end;

procedure ApiAccessRuleType.SetHourlySoftLimit(Index: Integer; const AInt64: Int64);
begin
  FHourlySoftLimit := AInt64;
  FHourlySoftLimit_Specified := True;
end;

function ApiAccessRuleType.HourlySoftLimit_Specified(Index: Integer): boolean;
begin
  Result := FHourlySoftLimit_Specified;
end;

procedure ApiAccessRuleType.SetHourlyUsage(Index: Integer; const AInt64: Int64);
begin
  FHourlyUsage := AInt64;
  FHourlyUsage_Specified := True;
end;

function ApiAccessRuleType.HourlyUsage_Specified(Index: Integer): boolean;
begin
  Result := FHourlyUsage_Specified;
end;

procedure ApiAccessRuleType.SetPeriod(Index: Integer; const AInteger: Integer);
begin
  FPeriod := AInteger;
  FPeriod_Specified := True;
end;

function ApiAccessRuleType.Period_Specified(Index: Integer): boolean;
begin
  Result := FPeriod_Specified;
end;

procedure ApiAccessRuleType.SetPeriodicHardLimit(Index: Integer; const AInt64: Int64);
begin
  FPeriodicHardLimit := AInt64;
  FPeriodicHardLimit_Specified := True;
end;

function ApiAccessRuleType.PeriodicHardLimit_Specified(Index: Integer): boolean;
begin
  Result := FPeriodicHardLimit_Specified;
end;

procedure ApiAccessRuleType.SetPeriodicSoftLimit(Index: Integer; const AInt64: Int64);
begin
  FPeriodicSoftLimit := AInt64;
  FPeriodicSoftLimit_Specified := True;
end;

function ApiAccessRuleType.PeriodicSoftLimit_Specified(Index: Integer): boolean;
begin
  Result := FPeriodicSoftLimit_Specified;
end;

procedure ApiAccessRuleType.SetPeriodicUsage(Index: Integer; const AInt64: Int64);
begin
  FPeriodicUsage := AInt64;
  FPeriodicUsage_Specified := True;
end;

function ApiAccessRuleType.PeriodicUsage_Specified(Index: Integer): boolean;
begin
  Result := FPeriodicUsage_Specified;
end;

procedure ApiAccessRuleType.SetPeriodicStartDate(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FPeriodicStartDate := ATXSDateTime;
  FPeriodicStartDate_Specified := True;
end;

function ApiAccessRuleType.PeriodicStartDate_Specified(Index: Integer): boolean;
begin
  Result := FPeriodicStartDate_Specified;
end;

procedure ApiAccessRuleType.SetModTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FModTime := ATXSDateTime;
  FModTime_Specified := True;
end;

function ApiAccessRuleType.ModTime_Specified(Index: Integer): boolean;
begin
  Result := FModTime_Specified;
end;

procedure ApiAccessRuleType.SetRuleCurrentStatus(Index: Integer; const AAccessRuleCurrentStatusCodeType: AccessRuleCurrentStatusCodeType);
begin
  FRuleCurrentStatus := AAccessRuleCurrentStatusCodeType;
  FRuleCurrentStatus_Specified := True;
end;

function ApiAccessRuleType.RuleCurrentStatus_Specified(Index: Integer): boolean;
begin
  Result := FRuleCurrentStatus_Specified;
end;

procedure ApiAccessRuleType.SetRuleStatus(Index: Integer; const AAccessRuleStatusCodeType: AccessRuleStatusCodeType);
begin
  FRuleStatus := AAccessRuleStatusCodeType;
  FRuleStatus_Specified := True;
end;

function ApiAccessRuleType.RuleStatus_Specified(Index: Integer): boolean;
begin
  Result := FRuleStatus_Specified;
end;

destructor AddressType.Destroy;
var
  I: Integer;
begin
  for I := 0 to System.Length(FAddressAttribute)-1 do
    SysUtils.FreeAndNil(FAddressAttribute[I]);
  System.SetLength(FAddressAttribute, 0);
  inherited Destroy;
end;

procedure AddressType.SetName_(Index: Integer; const Astring: string);
begin
  FName_ := Astring;
  FName__Specified := True;
end;

function AddressType.Name__Specified(Index: Integer): boolean;
begin
  Result := FName__Specified;
end;

procedure AddressType.SetStreet(Index: Integer; const Astring: string);
begin
  FStreet := Astring;
  FStreet_Specified := True;
end;

function AddressType.Street_Specified(Index: Integer): boolean;
begin
  Result := FStreet_Specified;
end;

procedure AddressType.SetStreet1(Index: Integer; const Astring: string);
begin
  FStreet1 := Astring;
  FStreet1_Specified := True;
end;

function AddressType.Street1_Specified(Index: Integer): boolean;
begin
  Result := FStreet1_Specified;
end;

procedure AddressType.SetStreet2(Index: Integer; const Astring: string);
begin
  FStreet2 := Astring;
  FStreet2_Specified := True;
end;

function AddressType.Street2_Specified(Index: Integer): boolean;
begin
  Result := FStreet2_Specified;
end;

procedure AddressType.SetCityName(Index: Integer; const Astring: string);
begin
  FCityName := Astring;
  FCityName_Specified := True;
end;

function AddressType.CityName_Specified(Index: Integer): boolean;
begin
  Result := FCityName_Specified;
end;

procedure AddressType.SetCounty(Index: Integer; const Astring: string);
begin
  FCounty := Astring;
  FCounty_Specified := True;
end;

function AddressType.County_Specified(Index: Integer): boolean;
begin
  Result := FCounty_Specified;
end;

procedure AddressType.SetStateOrProvince(Index: Integer; const Astring: string);
begin
  FStateOrProvince := Astring;
  FStateOrProvince_Specified := True;
end;

function AddressType.StateOrProvince_Specified(Index: Integer): boolean;
begin
  Result := FStateOrProvince_Specified;
end;

procedure AddressType.SetCountry(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FCountry := ACountryCodeType;
  FCountry_Specified := True;
end;

function AddressType.Country_Specified(Index: Integer): boolean;
begin
  Result := FCountry_Specified;
end;

procedure AddressType.SetCountryName(Index: Integer; const Astring: string);
begin
  FCountryName := Astring;
  FCountryName_Specified := True;
end;

function AddressType.CountryName_Specified(Index: Integer): boolean;
begin
  Result := FCountryName_Specified;
end;

procedure AddressType.SetPhone(Index: Integer; const Astring: string);
begin
  FPhone := Astring;
  FPhone_Specified := True;
end;

function AddressType.Phone_Specified(Index: Integer): boolean;
begin
  Result := FPhone_Specified;
end;

procedure AddressType.SetPhoneCountryCode(Index: Integer; const ACountryCodeType: CountryCodeType);
begin
  FPhoneCountryCode := ACountryCodeType;
  FPhoneCountryCode_Specified := True;
end;

function AddressType.PhoneCountryCode_Specified(Index: Integer): boolean;
begin
  Result := FPhoneCountryCode_Specified;
end;

procedure AddressType.SetPhoneCountryPrefix(Index: Integer; const Astring: string);
begin
  FPhoneCountryPrefix := Astring;
  FPhoneCountryPrefix_Specified := True;
end;

function AddressType.PhoneCountryPrefix_Specified(Index: Integer): boolean;
begin
  Result := FPhoneCountryPrefix_Specified;
end;

procedure AddressType.SetPhoneAreaOrCityCode(Index: Integer; const Astring: string);
begin
  FPhoneAreaOrCityCode := Astring;
  FPhoneAreaOrCityCode_Specified := True;
end;

function AddressType.PhoneAreaOrCityCode_Specified(Index: Integer): boolean;
begin
  Result := FPhoneAreaOrCityCode_Specified;
end;

procedure AddressType.SetPhoneLocalNumber(Index: Integer; const Astring: string);
begin
  FPhoneLocalNumber := Astring;
  FPhoneLocalNumber_Specified := True;
end;

function AddressType.PhoneLocalNumber_Specified(Index: Integer): boolean;
begin
  Result := FPhoneLocalNumber_Specified;
end;

procedure AddressType.SetPostalCode(Index: Integer; const Astring: string);
begin
  FPostalCode := Astring;
  FPostalCode_Specified := True;
end;

function AddressType.PostalCode_Specified(Index: Integer): boolean;
begin
  Result := FPostalCode_Specified;
end;

procedure AddressType.SetAddressID(Index: Integer; const Astring: string);
begin
  FAddressID := Astring;
  FAddressID_Specified := True;
end;

function AddressType.AddressID_Specified(Index: Integer): boolean;
begin
  Result := FAddressID_Specified;
end;

procedure AddressType.SetAddressOwner(Index: Integer; const AAddressOwnerCodeType: AddressOwnerCodeType);
begin
  FAddressOwner := AAddressOwnerCodeType;
  FAddressOwner_Specified := True;
end;

function AddressType.AddressOwner_Specified(Index: Integer): boolean;
begin
  Result := FAddressOwner_Specified;
end;

procedure AddressType.SetAddressStatus(Index: Integer; const AAddressStatusCodeType: AddressStatusCodeType);
begin
  FAddressStatus := AAddressStatusCodeType;
  FAddressStatus_Specified := True;
end;

function AddressType.AddressStatus_Specified(Index: Integer): boolean;
begin
  Result := FAddressStatus_Specified;
end;

procedure AddressType.SetExternalAddressID(Index: Integer; const Astring: string);
begin
  FExternalAddressID := Astring;
  FExternalAddressID_Specified := True;
end;

function AddressType.ExternalAddressID_Specified(Index: Integer): boolean;
begin
  Result := FExternalAddressID_Specified;
end;

procedure AddressType.SetInternationalName(Index: Integer; const Astring: string);
begin
  FInternationalName := Astring;
  FInternationalName_Specified := True;
end;

function AddressType.InternationalName_Specified(Index: Integer): boolean;
begin
  Result := FInternationalName_Specified;
end;

procedure AddressType.SetInternationalStateAndCity(Index: Integer; const Astring: string);
begin
  FInternationalStateAndCity := Astring;
  FInternationalStateAndCity_Specified := True;
end;

function AddressType.InternationalStateAndCity_Specified(Index: Integer): boolean;
begin
  Result := FInternationalStateAndCity_Specified;
end;

procedure AddressType.SetInternationalStreet(Index: Integer; const Astring: string);
begin
  FInternationalStreet := Astring;
  FInternationalStreet_Specified := True;
end;

function AddressType.InternationalStreet_Specified(Index: Integer): boolean;
begin
  Result := FInternationalStreet_Specified;
end;

procedure AddressType.SetCompanyName(Index: Integer; const Astring: string);
begin
  FCompanyName := Astring;
  FCompanyName_Specified := True;
end;

function AddressType.CompanyName_Specified(Index: Integer): boolean;
begin
  Result := FCompanyName_Specified;
end;

procedure AddressType.SetAddressRecordType(Index: Integer; const AAddressRecordTypeCodeType: AddressRecordTypeCodeType);
begin
  FAddressRecordType := AAddressRecordTypeCodeType;
  FAddressRecordType_Specified := True;
end;

function AddressType.AddressRecordType_Specified(Index: Integer): boolean;
begin
  Result := FAddressRecordType_Specified;
end;

procedure AddressType.SetFirstName(Index: Integer; const Astring: string);
begin
  FFirstName := Astring;
  FFirstName_Specified := True;
end;

function AddressType.FirstName_Specified(Index: Integer): boolean;
begin
  Result := FFirstName_Specified;
end;

procedure AddressType.SetLastName(Index: Integer; const Astring: string);
begin
  FLastName := Astring;
  FLastName_Specified := True;
end;

function AddressType.LastName_Specified(Index: Integer): boolean;
begin
  Result := FLastName_Specified;
end;

procedure AddressType.SetPhone2(Index: Integer; const Astring: string);
begin
  FPhone2 := Astring;
  FPhone2_Specified := True;
end;

function AddressType.Phone2_Specified(Index: Integer): boolean;
begin
  Result := FPhone2_Specified;
end;

procedure AddressType.SetAddressUsage(Index: Integer; const AAddressUsageCodeType: AddressUsageCodeType);
begin
  FAddressUsage := AAddressUsageCodeType;
  FAddressUsage_Specified := True;
end;

function AddressType.AddressUsage_Specified(Index: Integer): boolean;
begin
  Result := FAddressUsage_Specified;
end;

procedure AddressType.SetReferenceID(Index: Integer; const Astring: string);
begin
  FReferenceID := Astring;
  FReferenceID_Specified := True;
end;

function AddressType.ReferenceID_Specified(Index: Integer): boolean;
begin
  Result := FReferenceID_Specified;
end;

procedure AddressType.SetAddressAttribute(Index: Integer; const AArray_Of_AddressAttributeType: Array_Of_AddressAttributeType);
begin
  FAddressAttribute := AArray_Of_AddressAttributeType;
  FAddressAttribute_Specified := True;
end;

function AddressType.AddressAttribute_Specified(Index: Integer): boolean;
begin
  Result := FAddressAttribute_Specified;
end;

procedure AffiliateTrackingDetailsType.SetTrackingID(Index: Integer; const Astring: string);
begin
  FTrackingID := Astring;
  FTrackingID_Specified := True;
end;

function AffiliateTrackingDetailsType.TrackingID_Specified(Index: Integer): boolean;
begin
  Result := FTrackingID_Specified;
end;

procedure AffiliateTrackingDetailsType.SetTrackingPartnerCode(Index: Integer; const Astring: string);
begin
  FTrackingPartnerCode := Astring;
  FTrackingPartnerCode_Specified := True;
end;

function AffiliateTrackingDetailsType.TrackingPartnerCode_Specified(Index: Integer): boolean;
begin
  Result := FTrackingPartnerCode_Specified;
end;

procedure AffiliateTrackingDetailsType.SetApplicationDeviceType(Index: Integer; const AApplicationDeviceTypeCodeType: ApplicationDeviceTypeCodeType);
begin
  FApplicationDeviceType := AApplicationDeviceTypeCodeType;
  FApplicationDeviceType_Specified := True;
end;

function AffiliateTrackingDetailsType.ApplicationDeviceType_Specified(Index: Integer): boolean;
begin
  Result := FApplicationDeviceType_Specified;
end;

procedure AffiliateTrackingDetailsType.SetAffiliateUserID(Index: Integer; const Astring: string);
begin
  FAffiliateUserID := Astring;
  FAffiliateUserID_Specified := True;
end;

function AffiliateTrackingDetailsType.AffiliateUserID_Specified(Index: Integer): boolean;
begin
  Result := FAffiliateUserID_Specified;
end;

destructor AnnouncementMessageType.Destroy;
begin
  SysUtils.FreeAndNil(FAnnouncementStartTime);
  SysUtils.FreeAndNil(FEventTime);
  inherited Destroy;
end;

procedure AnnouncementMessageType.SetAnnouncementStartTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FAnnouncementStartTime := ATXSDateTime;
  FAnnouncementStartTime_Specified := True;
end;

function AnnouncementMessageType.AnnouncementStartTime_Specified(Index: Integer): boolean;
begin
  Result := FAnnouncementStartTime_Specified;
end;

procedure AnnouncementMessageType.SetEventTime(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FEventTime := ATXSDateTime;
  FEventTime_Specified := True;
end;

function AnnouncementMessageType.EventTime_Specified(Index: Integer): boolean;
begin
  Result := FEventTime_Specified;
end;

procedure AnnouncementMessageType.SetMessageType(Index: Integer; const AAnnouncementMessageCodeType: AnnouncementMessageCodeType);
begin
  FMessageType := AAnnouncementMessageCodeType;
  FMessageType_Specified := True;
end;

function AnnouncementMessageType.MessageType_Specified(Index: Integer): boolean;
begin
  Result := FMessageType_Specified;
end;

procedure RegisterTypeProc0;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerAccountStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerAccountStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerDashboardAlertSeverityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerDashboardAlertSeverityCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchStandingStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchStandingStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_UnitOfMeasurementType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_UnitOfMeasurementType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingServicePackageDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingServicePackageDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WirelessCarrierIDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'WirelessCarrierIDCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SMSSubscriptionErrorCodeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionErrorCodeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AnnouncementMessageType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AnnouncementMessageType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SMSSubscriptionUserStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionUserStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MerchandizingPrefCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MerchandizingPrefCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ListingFeatureDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ListingFeatureDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SiteBuyerRequirementDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SiteBuyerRequirementDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellereBayPaymentProcessStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellereBayPaymentProcessStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerGuaranteeLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerGuaranteeLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ListingStartPriceDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ListingStartPriceDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingCarrierDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingCarrierDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UPSRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UPSRateOptionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FedExRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FedExRateOptionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisplayPayNowButtonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisplayPayNowButtonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreItemListSortOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreItemListSortOrderCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(USPSRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'USPSRateOptionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SupportedSellerProfilesType), 'urn:ebay:apis:eBLBaseComponents', 'SupportedSellerProfilesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ExcludeShippingLocationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ExcludeShippingLocationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RecoupmentPolicyDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RecoupmentPolicyDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingCategoryDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingCategoryDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AspectUsageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AspectUsageCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductRequiredCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductRequiredCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SelectionModeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SelectionModeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingCostPaidByDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingCostPaidByDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValueTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ValueTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UsageConstraintCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UsageConstraintCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValueFormatCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ValueFormatCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VariationPictureRuleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VariationPictureRuleCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VariationSpecificsRuleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VariationSpecificsRuleCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_InventoryFeesType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_InventoryFeesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_InventoryStatusType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_InventoryStatusType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingPackageInfoType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingPackageInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionItemPriceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionItemPriceTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionalSaleTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DiscountCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DiscountCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RestockingFeeValueDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RestockingFeeValueDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_WarrantyOfferedDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_WarrantyOfferedDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ReturnsAcceptedDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ReturnsAcceptedDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_WarrantyTypeDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_WarrantyTypeDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_WarrantyDurationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_WarrantyDurationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ReturnsWithinDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ReturnsWithinDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RequiredSellerActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RequiredSellerActionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RefundDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RefundDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundSourceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundSourceTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundingSourceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundingSourceTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundFundingSourceArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RefundFundingSourceArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundFailureCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundFailureCodeType');
  RemClassRegistry.RegisterXSClass(RefundFailureReasonType, 'urn:ebay:apis:eBLBaseComponents', 'RefundFailureReasonType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundTransactionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RefundTransactionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundLineTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundLineTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundLineArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RefundLineArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreFontSizeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreFontSizeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreFontFaceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreFontFaceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomListingHeaderDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderDisplayCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomPageStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreHeaderStyleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreHeaderStyleCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreItemListLayoutCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreItemListLayoutCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreSubscriptionLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionLevelCodeType');
  RemClassRegistry.RegisterXSClass(StoreSubscriptionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SiteDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SiteDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreColorSchemeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreColorSchemeArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_URLDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_URLDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureFormatCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureFormatCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TimeZoneDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TimeZoneDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomListingHeaderLinkCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderLinkCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TokenStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TokenStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TopRatedProgramCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TopRatedProgramCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TopRatedSellerDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'TopRatedSellerDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaxIdentifierAttributeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TaxIdentifierAttributeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionReferenceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionReferenceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DigitalStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DigitalStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaidStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaidStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReturnStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReturnStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InquiryStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InquiryStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CollectionMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CollectionMethodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SummaryWindowPeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SummaryWindowPeriodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingServiceDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingServiceDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomHeaderLayoutCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomHeaderLayoutCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MerchDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MerchDisplayCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SummaryFrequencyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SummaryFrequencyCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaxTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TaxTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaxDescriptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TaxDescriptionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingLocationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingLocationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ItemSpecificDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ItemSpecificDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerEmailSentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerEmailSentStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingPackageDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingPackageDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerAutoSecondChanceOfferTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoSecondChanceOfferTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerEmailTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerEmailTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CheckoutStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CheckoutStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerSearchTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSearchTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerPaidStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerPaidStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerShippedStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerShippedStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerAutoRelistOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoRelistOptionCodeType');
end;

procedure RegisterTypeProc1;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerAlertTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAlertTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerAutomationPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutomationPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayoutMethodType), 'urn:ebay:apis:eBLBaseComponents', 'PayoutMethodType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerPaisaPayPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerPaisaPayPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerAutoRelistTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoRelistTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DayOfWeekCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DayOfWeekCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerGeneralPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerGeneralPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RegionOfOriginDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RegionOfOriginDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingCarrierCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingCarrierCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingCarrierCodeType), 'ASM_', 'ASM');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingCarrierCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingCarrierCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingRateTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingRateTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingServiceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_UnitOfMeasurementDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_UnitOfMeasurementDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingServiceType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShipmentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShipmentStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UnpaidItemStatusTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UnpaidItemStatusTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SuggestedBidValueType), 'urn:ebay:apis:eBLBaseComponents', 'SuggestedBidValueType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingFeatureCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingFeatureCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShipmentDeliveryStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShipmentDeliveryStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingPackageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingPackageCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingPackageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingPackageCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShipmentLineItemType), 'urn:ebay:apis:eBLBaseComponents', 'ShipmentLineItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeaturedFirstCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeaturedFirstCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeaturedPlusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeaturedPlusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HomePageFeaturedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HomePageFeaturedCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HighlightCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HighlightCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GiftIconCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GiftIconCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProPackCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProPackCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_VariationSpecificPictureSetType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_VariationSpecificPictureSetType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReasonHideFromSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReasonHideFromSearchCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BoldTitleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BoldTitleCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BorderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BorderCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerBusinessCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerBusinessCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerBusinessCodeType), 'Private_', 'Private');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MarkUpMarkDownEventTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownEventTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ModifyNameArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ModifyNameArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MembershipDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'MembershipDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertResolutionStatusCode), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertResolutionStatusCode');
  RemClassRegistry.RegisterXSClass(MultiLegShippingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MultiLegShippingDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PeriodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(QuestionTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'QuestionTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellerDiscountType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellerDiscountType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SiteCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SiteCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(IntegratedMerchantCreditCardInfoType), 'urn:ebay:apis:eBLBaseComponents', 'IntegratedMerchantCreditCardInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RecoupmentPolicyConsentType), 'urn:ebay:apis:eBLBaseComponents', 'RecoupmentPolicyConsentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderStatusFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'OrderStatusFilterCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FlatShippingRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingRateOptionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FlatRateInsuranceRangeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FlatRateInsuranceRangeCodeType');
  RemClassRegistry.RegisterXSClass(FlatRateInsuranceRangeCostType, 'urn:ebay:apis:eBLBaseComponents', 'FlatRateInsuranceRangeCostType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ReasonCodeDetailType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ReasonCodeDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DayOfWeekCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DayOfWeekCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_UserAgreementInfoType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_UserAgreementInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TaxDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TaxDetailsType');
  RemClassRegistry.RegisterXSClass(TaxesType, 'urn:ebay:apis:eBLBaseComponents', 'TaxesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_StoreCustomListingHeaderLinkType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_StoreCustomListingHeaderLinkType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingSubtypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingSubtypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingServiceCostOverrideListType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceCostOverrideListType');
  RemClassRegistry.RegisterXSClass(SellerProfilesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerProfilesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(QuantityAvailableHintCodeType), 'urn:ebay:apis:eBLBaseComponents', 'QuantityAvailableHintCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DescriptionReviseModeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DescriptionReviseModeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HitCounterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HitCounterCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LookupAttributeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'LookupAttributeArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingEnhancementsCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingEnhancementsCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GalleryTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GalleryTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PhotoDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PhotoDisplayCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PickupStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PickupStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PerformanceStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PerformanceStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureSourceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ItemCompatibilityType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ItemCompatibilityType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ListingDurationDefinitionType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ListingDurationDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_VariationType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_VariationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GalleryStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GalleryStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PicturesType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PicturesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MaximumUnpaidItemStrikesDurationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MaximumUnpaidItemStrikesDurationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PolicyViolationDurationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PolicyViolationDurationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentHoldReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentHoldReasonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DepositTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DepositTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RequiredSellerActionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RequiredSellerActionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentInformationType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentInformationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MetadataType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MetadataType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundInformationType), 'urn:ebay:apis:eBLBaseComponents', 'RefundInformationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PromotionDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PromotionDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ItemBidDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ItemBidDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_BidGroupItemType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_BidGroupItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TaxIdentifierAttributeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TaxIdentifierAttributeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ExtendedProductFinderIDType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ExtendedProductFinderIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ValType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ValType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionItemSelectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionItemSelectionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ErrorParameterType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ErrorParameterType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PictureSetMemberType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PictureSetMemberType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PolicyComplianceStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PolicyComplianceStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PromotedItemType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PromotedItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CharacteristicsSetType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CharacteristicsSetType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ConditionType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ConditionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CharacteristicType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CharacteristicType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TransactionReferenceType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TransactionReferenceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(QuantityOperatorCodeType), 'urn:ebay:apis:eBLBaseComponents', 'QuantityOperatorCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PreferredLocationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PreferredLocationCodeType');
end;

procedure RegisterTypeProc2;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemConditionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemConditionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSpecificSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificSourceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchFlagCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchFlagCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentMethodSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentMethodSearchCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SimpleItemSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SimpleItemSortCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RefundArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentHoldStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentHoldStatusCodeType');
  RemClassRegistry.RegisterXSClass(OrderTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'OrderTransactionType');
  RemClassRegistry.RegisterXSClass(PaymentsInformationType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentsInformationType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentsInformationType), 'Payments', '[ArrayItemName="Payment"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentsInformationType), 'Refunds', '[ArrayItemName="Refund"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ValueRecommendationType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ValueRecommendationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SearchFlagCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SearchFlagCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CancelStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CancelStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PickupDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'PickupDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventPropertyNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventPropertyNameCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_NameValueRelationshipType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_NameValueRelationshipType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventStateCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidActionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderTransactionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderTransactionArrayType');
  RemClassRegistry.RegisterXSClass(OfferDiscountsType, 'urn:ebay:apis:eBLBaseComponents', 'OfferDiscountsType');
  RemClassRegistry.RegisterXSClass(SummaryEventScheduleType, 'urn:ebay:apis:eBLBaseComponents', 'SummaryEventScheduleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ErrorType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ErrorType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ListingEnhancementsCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ListingEnhancementsCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AdditionalAccountType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AdditionalAccountType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_EndItemResponseContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_EndItemResponseContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShipmentTrackingDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShipmentTrackingDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_EndItemRequestContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_EndItemRequestContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AdFormatLeadType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AdFormatLeadType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CategoryFeatureType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CategoryFeatureType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ListingDurationReferenceType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ListingDurationReferenceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ApiAccessRuleType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ApiAccessRuleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingFeatureCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingFeatureCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AddItemResponseContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AddItemResponseContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MessageMediaType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MessageMediaType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AddItemRequestContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AddItemRequestContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AddMemberMessagesAAQToBidderRequestContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AddMemberMessagesAAQToBidderRequestContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TaxIdentifierType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TaxIdentifierType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_VariationKeyType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_VariationKeyType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CancelDetailType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CancelDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AddMemberMessagesAAQToBidderResponseContainerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AddMemberMessagesAAQToBidderResponseContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ExternalTransactionType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ExternalTransactionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CharityInfoType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CharityInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_NameRecommendationType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_NameRecommendationType');
  RemClassRegistry.RegisterXSClass(ProductIdentifiersType, 'urn:ebay:apis:eBLBaseComponents', 'ProductIdentifiersType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_NonProfitAddressType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_NonProfitAddressType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ContextSearchAssetType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ContextSearchAssetType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_NonProfitSocialAddressType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_NonProfitSocialAddressType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ProductIdentifiersType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ProductIdentifiersType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CategoryMappingType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CategoryMappingType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RecommendationsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RecommendationsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CategoryItemSpecificsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CategoryItemSpecificsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DescriptionTemplateType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DescriptionTemplateType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_UserDefinedListType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_UserDefinedListType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MyMessagesFolderSummaryType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MyMessagesFolderSummaryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MyeBayFavoriteSearchType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MyeBayFavoriteSearchType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_NotificationEventPropertyType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_NotificationEventPropertyType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_MyeBayFavoriteSellerType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_MyeBayFavoriteSellerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_InternationalShippingServiceOptionsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_InternationalShippingServiceOptionsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DisputeResolutionType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DisputeResolutionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ThemeGroupType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ThemeGroupType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DisputeMessageType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DisputeMessageType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingServiceOptionsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingServiceOptionsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DeliveryURLDetailType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DeliveryURLDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingRegionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingRegionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_ShippingRegionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_ShippingRegionCodeType');
  RemClassRegistry.RegisterXSClass(VeROSiteDetailType, 'urn:ebay:apis:eBLBaseComponents', 'VeROSiteDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EBaySubscriptionTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EBaySubscriptionTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_EBaySubscriptionTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_EBaySubscriptionTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DispatchTimeMaxDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DispatchTimeMaxDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CurrencyDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CurrencyDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PaymentOptionDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PaymentOptionDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROItemStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VeROItemStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_RegionDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_RegionDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UnpaidItemCaseStatusTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UnpaidItemCaseStatusTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UnpaidItemCaseOpenTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UnpaidItemCaseOpenTypeCodeType');
  RemClassRegistry.RegisterXSClass(UnpaidItemType, 'urn:ebay:apis:eBLBaseComponents', 'UnpaidItemType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UnpaidItemType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(URLTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'URLTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserIdentityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UserIdentityCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BusinessRoleType), 'urn:ebay:apis:eBLBaseComponents', 'BusinessRoleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UserStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VATStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VATStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerProductType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerProductType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerFolderDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerFolderDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_VATRateType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_VATRateType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerSoldTransactionType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerSoldTransactionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerEmailLogType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerEmailLogType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SummaryEventScheduleType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SummaryEventScheduleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PerformanceDashboardType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PerformanceDashboardType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerAlertType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerAlertType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellerDashboardAlertType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellerDashboardAlertType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_eBayPLUSPreferenceType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_eBayPLUSPreferenceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DisputeFilterCountType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DisputeFilterCountType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MismatchTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MismatchTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CountryDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CountryDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_AddressAttributeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_AddressAttributeType');
end;

procedure RegisterTypeProc3;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerSoldOrderType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerSoldOrderType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DiscountProfileType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DiscountProfileType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_StoreThemeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_StoreThemeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_FlatRateInsuranceRangeCostType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_FlatRateInsuranceRangeCostType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerInventoryPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerInventoryPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerInventoryPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerInventoryPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerProductSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductSortCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InventoryTrackingMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InventoryTrackingMethodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CombinedPaymentPeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentPeriodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaskStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TaskStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerSoldListingsPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSoldListingsPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_SellingManagerSoldListingsPropertyTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_SellingManagerSoldListingsPropertyTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerSoldListingsSortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSoldListingsSortTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellingManagerTemplateDetailsArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerTemplateDetailsArrayType');
  RemClassRegistry.RegisterXSClass(SellingManagerProductType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellingManagerProductType), 'SellingManagerTemplateDetailsArray', '[ArrayItemName="SellingManagerTemplateDetails"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationRoleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationRoleCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationRoleCodeType), 'Application_', 'Application');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEnableArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEnableArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationDetailsArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationDetailsArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MarkUpMarkDownHistoryType), 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownHistoryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupArrayType');
  RemClassRegistry.RegisterXSClass(PaginatedOrderTransactionArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedOrderTransactionArrayType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaginatedOrderTransactionArrayType), 'OrderTransactionArray', '[ArrayItemName="OrderTransaction"]');
  RemClassRegistry.RegisterXSClass(SearchStandingDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'SearchStandingDashboardType');
  RemClassRegistry.RegisterXSClass(PowerSellerDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'PowerSellerDashboardType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionalSaleArrayType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleArrayType');
  RemClassRegistry.RegisterXSClass(PolicyComplianceDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'PolicyComplianceDashboardType');
  RemClassRegistry.RegisterXSClass(SellerAccountDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'SellerAccountDashboardType');
  RemClassRegistry.RegisterXSClass(PerformanceDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'PerformanceDashboardType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PerformanceDashboardType), 'Site', '[ArrayItemName="SupportedSite"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemTransactionIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemTransactionIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TradingRoleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TradingRoleCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionalSaleStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PromotionalSaleStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PromotionalSaleStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'OrderStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Default_', 'Default');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SortOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SortOrderCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DetailNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DetailNameCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DetailNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DetailNameCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackResponseCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackResponseCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferActionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemRatingDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemRatingDetailArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemArrivedWithinEDDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemArrivedWithinEDDCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaxTableType), 'urn:ebay:apis:eBLBaseComponents', 'TaxTableType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeFilterTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeFilterTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeSortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeSortTypeCodeType');
  RemClassRegistry.RegisterXSClass(StoreThemeArrayType, 'urn:ebay:apis:eBLBaseComponents', 'StoreThemeArrayType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreThemeArrayType), 'GenericColorSchemeArray', '[ArrayItemName="ColorScheme"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreLogoArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreLogoArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreSubscriptionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomPageArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SuggestedCategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SuggestedCategoryArrayType');
  RemClassRegistry.RegisterXSClass(StorePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'StorePreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportPacketStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportPacketStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportedItemDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportedItemDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReasonCodeDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReasonCodeDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeArrayType');
  RemClassRegistry.RegisterXSClass(ProStoresCheckoutPreferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ProStoresCheckoutPreferenceType');
  RemClassRegistry.RegisterXSClass(BidderNoticePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'BidderNoticePreferencesType');
  RemClassRegistry.RegisterXSClass(SellerReturnPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReturnPreferencesType');
  RemClassRegistry.RegisterXSClass(SellerProfilePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerProfilePreferencesType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerProfilePreferencesType), 'SupportedSellerProfiles', '[ArrayItemName="SupportedSellerProfile"]');
  RemClassRegistry.RegisterXSClass(PurchaseReminderEmailPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'PurchaseReminderEmailPreferencesType');
  RemClassRegistry.RegisterXSClass(ReviseStatusType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseStatusType');
  RemClassRegistry.RegisterXSClass(SearchDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SearchDetailsType');
  RemClassRegistry.RegisterXSClass(ItemCompatibilityListType, 'urn:ebay:apis:eBLBaseComponents', 'ItemCompatibilityListType');
  RemClassRegistry.RegisterXSClass(ShippingServicePackageDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServicePackageDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingServicePackageDetailsType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(SellereBayPaymentProcessConsentCodeType, 'urn:ebay:apis:eBLBaseComponents', 'SellereBayPaymentProcessConsentCodeType');
  RemClassRegistry.RegisterXSClass(StoreCustomListingHeaderType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RecipientRelationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RecipientRelationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_1', '1');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_2', '2');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_3', '3');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_4', '4');
  RemClassRegistry.RegisterXSClass(DisputeFilterCountType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeFilterCountType');
  RemClassRegistry.RegisterXSClass(NotificationStatisticsType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationStatisticsType');
  RemClassRegistry.RegisterXSClass(ReminderCustomizationType, 'urn:ebay:apis:eBLBaseComponents', 'ReminderCustomizationType');
  RemClassRegistry.RegisterXSClass(RemindersType, 'urn:ebay:apis:eBLBaseComponents', 'RemindersType');
  RemClassRegistry.RegisterXSClass(BuyingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'BuyingSummaryType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSellerListType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSellerListType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSearchListType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSearchListType');
  RemClassRegistry.RegisterXSClass(SellingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'SellingSummaryType');
  RemClassRegistry.RegisterXSClass(RecommendationValidationRulesType, 'urn:ebay:apis:eBLBaseComponents', 'RecommendationValidationRulesType');
  RemClassRegistry.RegisterXSClass(ListingDesignerType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDesignerType');
  RemClassRegistry.RegisterXSClass(PaymentDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentDetailsType');
  RemClassRegistry.RegisterXSClass(QuantityInfoType, 'urn:ebay:apis:eBLBaseComponents', 'QuantityInfoType');
  RemClassRegistry.RegisterXSClass(ShippingOverrideType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingOverrideType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingOverrideType), 'ShippingServiceCostOverrideList', '[ArrayItemName="ShippingServiceCostOverride"]');
  RemClassRegistry.RegisterXSClass(GroupValidationRulesType, 'urn:ebay:apis:eBLBaseComponents', 'GroupValidationRulesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MaximumUnpaidItemStrikesCountDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'MaximumUnpaidItemStrikesCountDetailsType');
  RemClassRegistry.RegisterXSClass(MaximumUnpaidItemStrikesInfoDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumUnpaidItemStrikesInfoDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MaximumUnpaidItemStrikesInfoDetailsType), 'MaximumUnpaidItemStrikesCount', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NumberOfPolicyViolationsDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'NumberOfPolicyViolationsDetailsType');
  RemClassRegistry.RegisterXSClass(VerifiedUserRequirementsDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'VerifiedUserRequirementsDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifiedUserRequirementsDetailsType), 'FeedbackScore', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSClass(MaximumBuyerPolicyViolationsDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumBuyerPolicyViolationsDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MaximumBuyerPolicyViolationsDetailsType), 'NumberOfPolicyViolations', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSClass(MaximumItemRequirementsDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumItemRequirementsDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MaximumItemRequirementsDetailsType), 'MaximumItemCount', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MaximumItemRequirementsDetailsType), 'MinimumFeedbackScore', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSClass(MultiLegShipmentType, 'urn:ebay:apis:eBLBaseComponents', 'MultiLegShipmentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MinimumFeedbackScoreDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'MinimumFeedbackScoreDetailsType');
  RemClassRegistry.RegisterXSClass(QuantityRestrictionPerBuyerInfoType, 'urn:ebay:apis:eBLBaseComponents', 'QuantityRestrictionPerBuyerInfoType');
  RemClassRegistry.RegisterXSClass(ShippingServiceCostOverrideType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceCostOverrideType');
  RemClassRegistry.RegisterXSClass(SuggestedCategoryType, 'urn:ebay:apis:eBLBaseComponents', 'SuggestedCategoryType');
  RemClassRegistry.RegisterXSClass(StoreCustomListingHeaderLinkType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderLinkType');
  RemClassRegistry.RegisterXSClass(PromotionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionDetailsType');
  RemClassRegistry.RegisterXSClass(SchedulingInfoType, 'urn:ebay:apis:eBLBaseComponents', 'SchedulingInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EndReasonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_anyURI), 'http://www.w3.org/2001/XMLSchema', 'Array_Of_anyURI');
  RemClassRegistry.RegisterXSClass(PictureSetMemberType, 'urn:ebay:apis:eBLBaseComponents', 'PictureSetMemberType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeesType), 'urn:ebay:apis:eBLBaseComponents', 'FeesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DiscountReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DiscountReasonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DiscountReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DiscountReasonCodeType');
end;

procedure RegisterTypeProc4;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductSuggestionsType), 'urn:ebay:apis:eBLBaseComponents', 'ProductSuggestionsType');
  RemClassRegistry.RegisterXSClass(SellingManagerAutoListType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoListType');
  RemClassRegistry.RegisterXSClass(MyeBaySellingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBaySellingSummaryType');
  RemClassRegistry.RegisterXSClass(SellingManagerAlertType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAlertType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_long), 'http://www.w3.org/2001/XMLSchema', 'Array_Of_long');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingRecommendationsType), 'urn:ebay:apis:eBLBaseComponents', 'ListingRecommendationsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeReasonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemIDType), 'urn:ebay:apis:eBLBaseComponents', 'ItemIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SKUType), 'urn:ebay:apis:eBLBaseComponents', 'SKUType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SKUArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SKUArrayType');
  RemClassRegistry.RegisterXSClass(EndItemRequestContainerType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemRequestContainerType');
  RemClassRegistry.RegisterXSClass(SellerPaymentPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerExcludeShipToLocationPreferencesType), 'urn:ebay:apis:eBLBaseComponents', 'SellerExcludeShipToLocationPreferencesType');
  RemClassRegistry.RegisterXSClass(UnpaidItemAssistancePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'UnpaidItemAssistancePreferencesType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UnpaidItemAssistancePreferencesType), 'ExcludedUser', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(ProductDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ProductDetailsType');
  RemClassRegistry.RegisterXSClass(NotificationEventPropertyType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventPropertyType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventPropertyType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(NotificationUserDataType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationUserDataType');
  RemClassRegistry.RegisterXSClass(SellingManagerSearchType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSearchType');
  RemClassRegistry.RegisterXSClass(UnitOfMeasurementType, 'urn:ebay:apis:eBLBaseComponents', 'UnitOfMeasurementType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UnitOfMeasurementType), 'AlternateText', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(VeROReportedItemType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportedItemType');
  RemClassRegistry.RegisterXSClass(SMSSubscriptionType, 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageIDType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageIDArrayType');
  RemClassRegistry.RegisterXSClass(MyMessagesFolderType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesExternalMessageIDType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesExternalMessageIDType');
  RemClassRegistry.RegisterXSClass(MyMessagesFolderSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderSummaryType');
  RemClassRegistry.RegisterXSClass(ValueRecommendationType, 'urn:ebay:apis:eBLBaseComponents', 'ValueRecommendationType');
  RemClassRegistry.RegisterXSClass(NameValueRelationshipType, 'urn:ebay:apis:eBLBaseComponents', 'NameValueRelationshipType');
  RemClassRegistry.RegisterXSClass(NameRecommendationType, 'urn:ebay:apis:eBLBaseComponents', 'NameRecommendationType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NameRecommendationType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSellerType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSellerType');
  RemClassRegistry.RegisterXSClass(PicturesType, 'urn:ebay:apis:eBLBaseComponents', 'PicturesType');
  RemClassRegistry.RegisterXSClass(ProductSuggestionType, 'urn:ebay:apis:eBLBaseComponents', 'ProductSuggestionType');
  RemClassRegistry.RegisterXSClass(TicketListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'TicketListingDetailsType');
  RemClassRegistry.RegisterXSClass(UserIdentityType, 'urn:ebay:apis:eBLBaseComponents', 'UserIdentityType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserIdentityType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSClass(TransactionReferenceType, 'urn:ebay:apis:eBLBaseComponents', 'TransactionReferenceType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionReferenceType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSClass(StorefrontType, 'urn:ebay:apis:eBLBaseComponents', 'StorefrontType');
  RemClassRegistry.RegisterXSClass(ItemTransactionIDType, 'urn:ebay:apis:eBLBaseComponents', 'ItemTransactionIDType');
  RemClassRegistry.RegisterXSClass(ItemPolicyViolationType, 'urn:ebay:apis:eBLBaseComponents', 'ItemPolicyViolationType');
  RemClassRegistry.RegisterXSClass(NameValueListType, 'urn:ebay:apis:eBLBaseComponents', 'NameValueListType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NameValueListType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NameValueListType), 'Value', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(GiftSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'GiftSummaryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GiftSummaryType), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(MaximumUnpaidItemStrikesDurationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumUnpaidItemStrikesDurationDetailsType');
  RemClassRegistry.RegisterXSClass(MessageMediaType, 'urn:ebay:apis:eBLBaseComponents', 'MessageMediaType');
  RemClassRegistry.RegisterXSClass(PolicyViolationDurationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PolicyViolationDurationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertIDType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertIDArrayType');
  RemClassRegistry.RegisterXSClass(ModifyNameType, 'urn:ebay:apis:eBLBaseComponents', 'ModifyNameType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ModifyNameType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ListingCheckoutRedirectPreferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ListingCheckoutRedirectPreferenceType');
  RemClassRegistry.RegisterXSClass(LineItemType, 'urn:ebay:apis:eBLBaseComponents', 'LineItemType');
  RemClassRegistry.RegisterXSClass(MetadataType, 'urn:ebay:apis:eBLBaseComponents', 'MetadataType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MetadataType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MetadataType), 'Value', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(ListingRecommendationType, 'urn:ebay:apis:eBLBaseComponents', 'ListingRecommendationType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingRecommendationType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingRecommendationType), 'Value', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingRecommendationType), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(LookupAttributeType, 'urn:ebay:apis:eBLBaseComponents', 'LookupAttributeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LookupAttributeType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ShipmentTrackingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShipmentTrackingDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShipmentTrackingDetailsType), 'ShipmentLineItem', '[ArrayItemName="LineItem"]');
  RemClassRegistry.RegisterXSClass(SellingManagerVendorDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerVendorDetailsType');
  RemClassRegistry.RegisterXSClass(SupportedSellerProfileType, 'urn:ebay:apis:eBLBaseComponents', 'SupportedSellerProfileType');
  RemClassRegistry.RegisterXSClass(TaxDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'TaxDetailsType');
  RemClassRegistry.RegisterXSClass(TaxIdentifierAttributeType, 'urn:ebay:apis:eBLBaseComponents', 'TaxIdentifierAttributeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaxIdentifierAttributeType), 'name_', '[ExtName="name"]');
  RemClassRegistry.RegisterXSClass(StoreFontType, 'urn:ebay:apis:eBLBaseComponents', 'StoreFontType');
  RemClassRegistry.RegisterXSClass(StoreColorType, 'urn:ebay:apis:eBLBaseComponents', 'StoreColorType');
  RemClassRegistry.RegisterXSClass(StoreColorSchemeType, 'urn:ebay:apis:eBLBaseComponents', 'StoreColorSchemeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreColorSchemeType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(StoreThemeType, 'urn:ebay:apis:eBLBaseComponents', 'StoreThemeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreThemeType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(StoreLogoType, 'urn:ebay:apis:eBLBaseComponents', 'StoreLogoType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreLogoType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(RefundTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'RefundTransactionType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundTransactionType), 'RefundLineArray', '[ArrayItemName="RefundLine"]');
  RemClassRegistry.RegisterXSClass(RefundFundingSourceType, 'urn:ebay:apis:eBLBaseComponents', 'RefundFundingSourceType');
  RemClassRegistry.RegisterXSClass(RateTableDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RateTableDetailsType');
  RemClassRegistry.RegisterXSClass(ReasonCodeDetailType, 'urn:ebay:apis:eBLBaseComponents', 'ReasonCodeDetailType');
  RemClassRegistry.RegisterXSClass(SellerPaymentProfileType, 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentProfileType');
  RemClassRegistry.RegisterXSClass(SellerDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'SellerDiscountType');
  RemClassRegistry.RegisterXSClass(SellerShippingProfileType, 'urn:ebay:apis:eBLBaseComponents', 'SellerShippingProfileType');
  RemClassRegistry.RegisterXSClass(SellerReturnProfileType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReturnProfileType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeExplanationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeExplanationCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeActivityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeActivityCodeType');
  RemClassRegistry.RegisterXSClass(EndItemResponseContainerType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemResponseContainerType');
  RemClassRegistry.RegisterXSClass(TokenStatusType, 'urn:ebay:apis:eBLBaseComponents', 'TokenStatusType');
  RemClassRegistry.RegisterXSClass(SiteDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingLocationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingLocationDetailsType');
  RemClassRegistry.RegisterXSClass(TimeZoneDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'TimeZoneDetailsType');
  RemClassRegistry.RegisterXSClass(URLDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'URLDetailsType');
  RemClassRegistry.RegisterXSClass(RegionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RegionDetailsType');
  RemClassRegistry.RegisterXSClass(DispatchTimeMaxDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DispatchTimeMaxDetailsType');
  RemClassRegistry.RegisterXSClass(VariationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'VariationDetailsType');
  RemClassRegistry.RegisterXSClass(ListingFeatureDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingFeatureDetailsType');
  RemClassRegistry.RegisterXSClass(SiteBuyerRequirementDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteBuyerRequirementDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteBuyerRequirementDetailsType), 'MinimumFeedbackScore', '[ArrayItemName="FeedbackScore"]');
  RemClassRegistry.RegisterXSClass(RecoupmentPolicyDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RecoupmentPolicyDetailsType');
  RemClassRegistry.RegisterXSClass(ExcludeShippingLocationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ExcludeShippingLocationDetailsType');
  RemClassRegistry.RegisterXSClass(RegionOfOriginDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RegionOfOriginDetailsType');
  RemClassRegistry.RegisterXSClass(UnitOfMeasurementDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'UnitOfMeasurementDetailsType');
  RemClassRegistry.RegisterXSClass(ItemSpecificDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificDetailsType');
  RemClassRegistry.RegisterXSClass(ReturnPolicyDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnPolicyDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingCarrierDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingCarrierDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingPackageDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingPackageDetailsType');
  RemClassRegistry.RegisterXSClass(SellingManagerSoldOrderType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSoldOrderType');
  RemClassRegistry.RegisterXSClass(SellingManagerEmailLogType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerEmailLogType');
  RemClassRegistry.RegisterXSClass(TimeRangeType, 'urn:ebay:apis:eBLBaseComponents', 'TimeRangeType');
  RemClassRegistry.RegisterXSClass(SellingManagerFolderDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerFolderDetailsType');
  RemClassRegistry.RegisterXSClass(PaymentHoldDetailType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentHoldDetailType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentHoldDetailType), 'RequiredSellerActionArray', '[ArrayItemName="RequiredSellerAction"]');
  RemClassRegistry.RegisterXSClass(NotificationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationDetailsType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(MyMessagesForwardDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesForwardDetailsType');
  RemClassRegistry.RegisterXSClass(MyMessagesResponseDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesResponseDetailsType');
  RemClassRegistry.RegisterXSClass(ListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDetailsType');
  RemClassRegistry.RegisterXSClass(MyMessagesAlertType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesAlertType), 'Read_', '[ExtName="Read"]');
end;

procedure RegisterTypeProc5;
begin
  RemClassRegistry.RegisterXSClass(MembershipDetailType, 'urn:ebay:apis:eBLBaseComponents', 'MembershipDetailType');
  RemClassRegistry.RegisterXSClass(MarkUpMarkDownEventType, 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownEventType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MarkUpMarkDownEventType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(UserAgreementInfoType, 'urn:ebay:apis:eBLBaseComponents', 'UserAgreementInfoType');
  RemClassRegistry.RegisterXSClass(StoreVacationPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'StoreVacationPreferencesType');
  RemClassRegistry.RegisterXSClass(PromotionalSaleDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleDetailsType');
  RemClassRegistry.RegisterXSClass(RefundType, 'urn:ebay:apis:eBLBaseComponents', 'RefundType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundType), 'RefundTransactionArray', '[ArrayItemName="RefundTransaction"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundType), 'RefundFundingSourceArray', '[ArrayItemName="RefundFundingSource"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeIDType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserIDType), 'urn:ebay:apis:eBLBaseComponents', 'UserIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'UserIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderIDType), 'urn:ebay:apis:eBLBaseComponents', 'OrderIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SecondChanceOfferDurationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SecondChanceOfferDurationCodeType');
  RemClassRegistry.RegisterXSClass(SellingManagerProductDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductDetailsType');
  RemClassRegistry.RegisterXSClass(AddItemRequestContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemRequestContainerType');
  RemClassRegistry.RegisterXSClass(AddItemResponseContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemResponseContainerType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseContainerType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseContainerType), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseContainerType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderRequestContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequestContainerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackDetailArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CommentTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CommentTypeCodeType');
  RemClassRegistry.RegisterXSClass(FeedbackInfoType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CommentTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CommentTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CountryCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CountryCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'AS_', 'AS');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'DO_', 'DO');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'IS_', 'IS');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'IN_', 'IN');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'TO_', 'TO');
  RemClassRegistry.RegisterXSClass(eBayPLUSPreferenceType, 'urn:ebay:apis:eBLBaseComponents', 'eBayPLUSPreferenceType');
  RemClassRegistry.RegisterXSClass(CountryDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'CountryDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_CountryCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_CountryCodeType');
  RemClassRegistry.RegisterXSClass(VeROReportItemType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NameValueListArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NameValueListArrayType');
  RemClassRegistry.RegisterXSClass(SellingManagerProductSpecificsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductSpecificsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellingManagerProductSpecificsType), 'ItemSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(VariationKeyType, 'urn:ebay:apis:eBLBaseComponents', 'VariationKeyType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationKeyType), 'VariationSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(VariationProductListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'VariationProductListingDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationProductListingDetailsType), 'NameValueList', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(VariationsType, 'urn:ebay:apis:eBLBaseComponents', 'VariationsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationsType), 'VariationSpecificsSet', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationsType), 'ModifyNameList', '[ArrayItemName="ModifyName"]');
  RemClassRegistry.RegisterXSClass(ItemCompatibilityType, 'urn:ebay:apis:eBLBaseComponents', 'ItemCompatibilityType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemCompatibilityType), 'NameValueList', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(ProductListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ProductListingDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductListingDetailsType), 'Copyright', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductListingDetailsType), 'NameValueList', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(VariationType, 'urn:ebay:apis:eBLBaseComponents', 'VariationType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationType), 'VariationSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSClass(ContextSearchAssetType, 'urn:ebay:apis:eBLBaseComponents', 'ContextSearchAssetType');
  RemClassRegistry.RegisterXSClass(ThemeGroupType, 'urn:ebay:apis:eBLBaseComponents', 'ThemeGroupType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ThemeGroupType), 'ThemeID', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSClass(PickupInStoreDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PickupInStoreDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesExternalMessageIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesExternalMessageIDArrayType');
  RemClassRegistry.RegisterXSClass(MyMessagesSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesSummaryType');
  RemClassRegistry.RegisterXSClass(ASQPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'ASQPreferencesType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ASQPreferencesType), 'Subject', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertArrayType');
  RemClassRegistry.RegisterXSClass(MyeBaySelectionType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBaySelectionType');
  RemClassRegistry.RegisterXSClass(BidAssistantListType, 'urn:ebay:apis:eBLBaseComponents', 'BidAssistantListType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSortTypeCodeType');
  RemClassRegistry.RegisterXSClass(ItemListCustomizationType, 'urn:ebay:apis:eBLBaseComponents', 'ItemListCustomizationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionPlatformCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionPlatformCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_TransactionPlatformCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_TransactionPlatformCodeType');
  RemClassRegistry.RegisterXSClass(SellingManagerSoldTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerSoldTransactionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MemberMessageExchangeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageExchangeArrayType');
  RemClassRegistry.RegisterXSClass(PaginatedTransactionArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedTransactionArrayType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaginatedTransactionArrayType), 'TransactionArray', '[ArrayItemName="Transaction"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MessageTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MessageTypeCodeType');
  RemClassRegistry.RegisterXSClass(MemberMessageType, 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MemberMessageType), 'RecipientID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingStatusCodeType');
  RemClassRegistry.RegisterXSClass(SellingStatusType, 'urn:ebay:apis:eBLBaseComponents', 'SellingStatusType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellingStatusType), 'SuggestedBidValues', '[ArrayItemName="BidValue"]');
  RemClassRegistry.RegisterXSClass(MyMessagesMessageType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesMessageType), 'Read_', '[ExtName="Read"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAllBiddersModeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersModeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OfferArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OfferArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferArrayType');
  RemClassRegistry.RegisterXSClass(ItemBestOffersType, 'urn:ebay:apis:eBLBaseComponents', 'ItemBestOffersType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemBestOffersType), 'BestOfferArray', '[ArrayItemName="BestOffer"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemBestOffersArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemBestOffersArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferIDType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_BestOfferIDType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_BestOfferIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CurrencyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CurrencyCodeType');
  RemClassRegistry.RegisterXSClass(OfferType, 'urn:ebay:apis:eBLBaseComponents', 'OfferType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OfferType), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(CurrencyDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'CurrencyDetailsType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSearchType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSearchType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyeBayFavoriteSearchType), 'SellerID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyeBayFavoriteSearchType), 'SellerIDExclude', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountHistorySelectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountHistorySelectionCodeType');
  RemClassRegistry.RegisterXSClass(PaginationType, 'urn:ebay:apis:eBLBaseComponents', 'PaginationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountEntrySortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountEntrySortTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountEntriesType), 'urn:ebay:apis:eBLBaseComponents', 'AccountEntriesType');
  RemClassRegistry.RegisterXSClass(PaginationResultType, 'urn:ebay:apis:eBLBaseComponents', 'PaginationResultType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MessageStatusTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MessageStatusTypeCodeType');
  RemClassRegistry.RegisterXSClass(MemberMessageExchangeType, 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageExchangeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MemberMessageExchangeType), 'Response', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(CategoryMappingType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryMappingType');
  RemClassRegistry.RegisterXSClass(CategoryItemSpecificsType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryItemSpecificsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryItemSpecificsType), 'ItemSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StringMatchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StringMatchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StringMatchCodeType), 'Contains_', 'Contains');
  RemClassRegistry.RegisterXSClass(RecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'RecommendationsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemArrayType');
  RemClassRegistry.RegisterXSClass(UserDefinedListType, 'urn:ebay:apis:eBLBaseComponents', 'UserDefinedListType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserDefinedListType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserDefinedListType), 'ItemArray', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterXSClass(PaginatedItemArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedItemArrayType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaginatedItemArrayType), 'ItemArray', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GranularityLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GranularityLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'CategoryArrayType');
  RemClassRegistry.RegisterXSClass(AmountType, 'urn:ebay:apis:eBLBaseComponents', 'AmountType');
  RemClassRegistry.RegisterXSClass(RefundLineType, 'urn:ebay:apis:eBLBaseComponents', 'RefundLineType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundLineType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSClass(UnitInfoType, 'urn:ebay:apis:eBLBaseComponents', 'UnitInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeatureIDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeatureIDCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_FeatureIDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_FeatureIDCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionSchemeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionSchemeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionMethodCodeType');
  RemClassRegistry.RegisterXSClass(PromotedItemType, 'urn:ebay:apis:eBLBaseComponents', 'PromotedItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GallerySortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GallerySortFilterCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSortFilterCodeType');
  RemClassRegistry.RegisterXSClass(CrossPromotionsType, 'urn:ebay:apis:eBLBaseComponents', 'CrossPromotionsType');
  RemClassRegistry.RegisterXSClass(DeliveryDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DeliveryDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DescriptionTemplateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DescriptionTemplateCodeType');
  RemClassRegistry.RegisterXSClass(DescriptionTemplateType, 'urn:ebay:apis:eBLBaseComponents', 'DescriptionTemplateType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionTemplateType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionTemplateType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(DigitalGoodDeliveryEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalGoodDeliveryEnabledDefinitionType');
end;

procedure RegisterTypeProc6;
begin
  RemClassRegistry.RegisterXSClass(DigitalDeliveryUserType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliveryUserType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryUserType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(DepositSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DepositSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(ConditionEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ConditionEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ConditionType, 'urn:ebay:apis:eBLBaseComponents', 'ConditionType');
  RemClassRegistry.RegisterXSClass(ConditionValuesDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ConditionValuesDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CombinedPaymentOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentOptionCodeType');
  RemClassRegistry.RegisterXSClass(CombinedPaymentPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentPreferencesType');
  RemClassRegistry.RegisterXSClass(CompatibleVehicleTypeDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'CompatibleVehicleTypeDefinitionType');
  RemClassRegistry.RegisterXSClass(CrossBorderTradeGBEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'CrossBorderTradeGBEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(CrossBorderTradeNorthAmericaEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'CrossBorderTradeNorthAmericaEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemFormatSortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemFormatSortFilterCodeType');
  RemClassRegistry.RegisterXSClass(CrossPromotionPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CrossPromotionPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DaysCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DaysCodeType');
  RemClassRegistry.RegisterXSClass(ContactHoursDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ContactHoursDetailsType');
  RemClassRegistry.RegisterXSClass(SellingManagerAutoRelistType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoRelistType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellingManagerAutoRelistType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSClass(DispatchCutoffTimePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'DispatchCutoffTimePreferencesType');
  RemClassRegistry.RegisterXSClass(SellingManagerAutoListAccordingToScheduleType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoListAccordingToScheduleType');
  RemClassRegistry.RegisterXSClass(SellingManagerAutoListMinActiveItemsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoListMinActiveItemsType');
  RemClassRegistry.RegisterXSClass(CrossBorderTradeAustraliaEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'CrossBorderTradeAustraliaEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(DigitalGoodInfoType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalGoodInfoType');
  RemClassRegistry.RegisterXSClass(EANEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'EANEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(EANIdentifierEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'EANIdentifierEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndOfAuctionLogoTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EndOfAuctionLogoTypeCodeType');
  RemClassRegistry.RegisterXSClass(EndOfAuctionEmailPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'EndOfAuctionEmailPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReturnsShipmentPayeeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReturnsShipmentPayeeCodeType');
  RemClassRegistry.RegisterXSClass(DomesticReturnsShipmentPayeeDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsShipmentPayeeDefinitionType');
  RemClassRegistry.RegisterXSClass(DutchBINEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DutchBINEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(EpidSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'EpidSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(ExtendedContactDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendedContactDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExtendedPictureDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'ExtendedPictureDetailsType');
  RemClassRegistry.RegisterXSClass(VariationSpecificPictureSetType, 'urn:ebay:apis:eBLBaseComponents', 'VariationSpecificPictureSetType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VariationSpecificPictureSetType), 'ExtendedPictureDetails', '[ArrayItemName="PictureURLs"]');
  RemClassRegistry.RegisterXSClass(PictureDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PictureDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureDetailsType), 'ExtendedPictureDetails', '[ArrayItemName="PictureURLs"]');
  RemClassRegistry.RegisterXSClass(PictureURLsType, 'urn:ebay:apis:eBLBaseComponents', 'PictureURLsType');
  RemClassRegistry.RegisterXSClass(ExpressConditionRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressConditionRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(ExpressEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ExpressPicturesRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressPicturesRequiredDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeRecordTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeStateCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MinimumAdvertisedPriceExposureCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MinimumAdvertisedPriceExposureCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PricingTreatmentCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PricingTreatmentCodeType');
  RemClassRegistry.RegisterXSClass(DiscountPriceInfoType, 'urn:ebay:apis:eBLBaseComponents', 'DiscountPriceInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeCreditEligibilityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeCreditEligibilityCodeType');
  RemClassRegistry.RegisterXSClass(DisputeType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeType');
  RemClassRegistry.RegisterXSClass(DomesticReturnsAcceptedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsAcceptedDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReturnsDurationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReturnsDurationCodeType');
  RemClassRegistry.RegisterXSClass(DomesticReturnsDurationDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsDurationDefinitionType');
  RemClassRegistry.RegisterXSClass(DistanceType, 'urn:ebay:apis:eBLBaseComponents', 'DistanceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReturnsRefundMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReturnsRefundMethodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReturnsAcceptedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ReturnsAcceptedCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DomesticReturnsShipmentPayeeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsShipmentPayeeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InternationalReturnsShipmentPayeeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsShipmentPayeeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DomesticRefundMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DomesticRefundMethodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InternationalReturnsAcceptedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsAcceptedCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DomesticReturnsDurationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsDurationCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InternationalReturnsDurationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsDurationCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InternationalRefundMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InternationalRefundMethodCodeType');
  RemClassRegistry.RegisterXSClass(FeatureDefinitionsType, 'urn:ebay:apis:eBLBaseComponents', 'FeatureDefinitionsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeatureDefinitionsType), 'DomesticRefundMethodValues', '[ArrayItemName="DomesticRefundMethod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeatureDefinitionsType), 'InternationalRefundMethodValues', '[ArrayItemName="InternationalRefundMethod"]');
  RemClassRegistry.RegisterXSClass(CharacteristicType, 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicType), 'Label_', '[ExtName="Label"]');
  RemClassRegistry.RegisterXSClass(LabelType, 'urn:ebay:apis:eBLBaseComponents', 'LabelType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LabelType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(CategoryGroupType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryGroupType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryGroupType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(ExtendedProductFinderIDType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendedProductFinderIDType');
  RemClassRegistry.RegisterXSClass(CharacteristicsSetType, 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicsSetType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicsSetType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeConversionEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeConversionEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemCompatibilityEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemCompatibilityEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ConditionEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ConditionEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeographicExposureCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GeographicExposureCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(INEscrowWorkflowTimelineCodeType), 'urn:ebay:apis:eBLBaseComponents', 'INEscrowWorkflowTimelineCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(INEscrowWorkflowTimelineCodeType), 'Default_', 'Default');
  RemClassRegistry.RegisterXSClass(ConditionValuesType, 'urn:ebay:apis:eBLBaseComponents', 'ConditionValuesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProfileCategoryGroupCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProfileCategoryGroupCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductRequiredEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductRequiredEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DomesticReturnsAcceptedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DomesticReturnsAcceptedCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductCreationEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductCreationEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductIdentiferEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductIdentiferEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentOptionsGroupEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentOptionsGroupEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityAffiliationTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationTypeCodeType');
  RemClassRegistry.RegisterXSClass(CharityAffiliationDetailType, 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationDetailType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdContactByAddressEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdContactByAddressEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdContactByEmailEnabledDefintionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdContactByEmailEnabledDefintionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdContactByPhoneEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdContactByPhoneEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdBestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdBestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdCompanyNameEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdCompanyNameEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdCounterOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdCounterOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdShippingMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdShippingMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdStreetCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdStreetCountDefinitionType');
  RemClassRegistry.RegisterXSClass(CombinedFixedPriceTreatmentEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'CombinedFixedPriceTreatmentEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdPayPerLeadEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPayPerLeadEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdPaymentMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPaymentMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdPhoneCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPhoneCountDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharityStatusCodeType');
  RemClassRegistry.RegisterXSClass(CharityInfoType, 'urn:ebay:apis:eBLBaseComponents', 'CharityInfoType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityInfoType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityInfoType), 'CharityDomain', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityAffiliationDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityAffiliationsType), 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationsType');
  RemClassRegistry.RegisterXSClass(CharityIDType, 'urn:ebay:apis:eBLBaseComponents', 'CharityIDType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityIDType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SocialAddressTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SocialAddressTypeCodeType');
  RemClassRegistry.RegisterXSClass(NonProfitSocialAddressType, 'urn:ebay:apis:eBLBaseComponents', 'NonProfitSocialAddressType');
  RemClassRegistry.RegisterXSClass(eBayPaymentMismatchDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'eBayPaymentMismatchDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerPaymentInstrumentCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerPaymentInstrumentCodeType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdAutoAcceptEnabledDefinitionType');
end;

procedure RegisterTypeProc7;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentTransactionStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentTransactionStatusCodeType');
  RemClassRegistry.RegisterXSClass(PaymentTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentTransactionType');
  RemClassRegistry.RegisterXSClass(RefundTransactionInfoType, 'urn:ebay:apis:eBLBaseComponents', 'RefundTransactionInfoType');
  RemClassRegistry.RegisterXSClass(Group1MaxFlatShippingCostDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'Group1MaxFlatShippingCostDefinitionType');
  RemClassRegistry.RegisterXSClass(Group2MaxFlatShippingCostDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'Group2MaxFlatShippingCostDefinitionType');
  RemClassRegistry.RegisterXSClass(Group3MaxFlatShippingCostDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'Group3MaxFlatShippingCostDefinitionType');
  RemClassRegistry.RegisterXSClass(StoreOwnerExtendedListingDurationsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreOwnerExtendedListingDurationsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(StoreOwnerExtendedListingDurationsDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreOwnerExtendedListingDurationsDefinitionType');
  RemClassRegistry.RegisterXSClass(PaymentMethodDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentMethodDefinitionType');
  RemClassRegistry.RegisterXSClass(MaxFlatShippingCostCBTExemptDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MaxFlatShippingCostCBTExemptDefinitionType');
  RemClassRegistry.RegisterXSClass(FreePicturePackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'FreePicturePackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ItemCompatibilityEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ItemCompatibilityEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(MaxItemCompatibilityDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MaxItemCompatibilityDefinitionType');
  RemClassRegistry.RegisterXSClass(MaxFlatShippingCostDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MaxFlatShippingCostDefinitionType');
  RemClassRegistry.RegisterXSClass(VariationsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'VariationsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(FreeGalleryPlusEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'FreeGalleryPlusEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketSellerContactDetailsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketSellerContactDetailsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SpecialitySubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SpecialitySubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(RegularSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'RegularSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketPaymentMethodCheckOutEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketPaymentMethodCheckOutEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketShippingMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketShippingMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketCounterOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketCounterOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(PremiumSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PremiumSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(PayPalRequiredForStoreOwnerDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PayPalRequiredForStoreOwnerDefinitionType');
  RemClassRegistry.RegisterXSClass(ReviseQuantityAllowedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseQuantityAllowedDefinitionType');
  RemClassRegistry.RegisterXSClass(RevisePriceAllowedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'RevisePriceAllowedDefinitionType');
  RemClassRegistry.RegisterXSClass(NonSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'NonSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(ReturnPolicyEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnPolicyEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(HandlingTimeEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'HandlingTimeEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(MinItemCompatibilityDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MinItemCompatibilityDefinitionType');
  RemClassRegistry.RegisterXSClass(InternationalReturnsShipmentPayeeDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsShipmentPayeeDefinitionType');
  RemClassRegistry.RegisterXSClass(ReturnPolicyDescriptionEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnPolicyDescriptionEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(FeatureEligibilityType, 'urn:ebay:apis:eBLBaseComponents', 'FeatureEligibilityType');
  RemClassRegistry.RegisterXSClass(ProductRequiredEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProductRequiredEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(InternationalReturnsAcceptedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsAcceptedDefinitionType');
  RemClassRegistry.RegisterXSClass(InternationalReturnsDurationDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'InternationalReturnsDurationDefinitionType');
  RemClassRegistry.RegisterXSClass(FeeType, 'urn:ebay:apis:eBLBaseComponents', 'FeeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeeType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSClass(FeedbackPeriodType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackPeriodType');
  RemClassRegistry.RegisterXSClass(FeedbackRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRequirementsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerRatingSummaryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SellerRatingSummaryArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackRatingStarCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRatingStarCodeType');
  RemClassRegistry.RegisterXSClass(FeedbackDetailType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackPeriodArrayType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackPeriodArrayType');
  RemClassRegistry.RegisterXSClass(FeedbackSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackSummaryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'BidRetractionFeedbackPeriodArray', '[ArrayItemName="FeedbackPeriod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'NegativeFeedbackPeriodArray', '[ArrayItemName="FeedbackPeriod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'NeutralFeedbackPeriodArray', '[ArrayItemName="FeedbackPeriod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'PositiveFeedbackPeriodArray', '[ArrayItemName="FeedbackPeriod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'TotalFeedbackPeriodArray', '[ArrayItemName="FeedbackPeriod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackSummaryType), 'SellerRatingSummaryArray', '[ArrayItemName="AverageRatingSummary"]');
  RemClassRegistry.RegisterXSClass(UPCEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'UPCEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(MaxGranularFitmentCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MaxGranularFitmentCountDefinitionType');
  RemClassRegistry.RegisterXSClass(PaymentOptionsGroupEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentOptionsGroupEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ValueCategoryDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ValueCategoryDefinitionType');
  RemClassRegistry.RegisterXSClass(ProductCreationEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProductCreationEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ISBNEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ISBNEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ProfileCategoryGroupDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProfileCategoryGroupDefinitionType');
  RemClassRegistry.RegisterXSClass(GlobalShippingEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'GlobalShippingEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(PickupDropOffEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PickupDropOffEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(KTypeSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'KTypeSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(VINSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'VINSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(VRMSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'VRMSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(SellerProvidedTitleSupportedDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SellerProvidedTitleSupportedDefinitionType');
  RemClassRegistry.RegisterXSClass(SkypeMeNonTransactionalEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SkypeMeNonTransactionalEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesRegularDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesRegularDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesSpecialtyDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesSpecialtyDefinitionType');
  RemClassRegistry.RegisterXSClass(SellerContactDetailsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SellerContactDetailsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(StoreInventoryEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreInventoryEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SkypeMeTransactionalEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SkypeMeTransactionalEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesNonSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesNonSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(ISBNIdentifierEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ISBNIdentifierEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(UPCIdentifierEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'UPCIdentifierEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(PayPalBuyerProtectionEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PayPalBuyerProtectionEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SafePaymentRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SafePaymentRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(ItemSpecificsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(PaisaPayFullEscrowEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PaisaPayFullEscrowEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(HomePageFeaturedEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'HomePageFeaturedEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ProPackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProPackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ValuePackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ValuePackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ListingDurationDefinitionsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationDefinitionsType');
  RemClassRegistry.RegisterXSClass(ShippingTermRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingTermRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(UserConsentRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'UserConsentRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(ProPackPlusEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProPackPlusEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketNonSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketNonSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(MinimumReservePriceDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MinimumReservePriceDefinitionType');
  RemClassRegistry.RegisterXSClass(TCREnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'TCREnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketSpecialitySubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketSpecialitySubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketRegularSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketRegularSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketPremiumSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketPremiumSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(ListingEnhancementDurationDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ListingEnhancementDurationDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketAdFormatEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketAdFormatEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketContactByPhoneEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketContactByPhoneEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketPhoneCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketPhoneCountDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProShippingMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProShippingMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProCounterOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProCounterOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProSellerContactDetailsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProSellerContactDetailsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketContactByAddressEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketContactByAddressEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketBestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketBestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketAutoAcceptEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketStreetCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketStreetCountDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketCompanyNameEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketCompanyNameEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketContactByEmailEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketContactByEmailEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProContactByPhoneEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProContactByPhoneEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProPhoneCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProPhoneCountDefinitionType');
end;

procedure RegisterTypeProc8;
begin
  RemClassRegistry.RegisterXSClass(eBayMotorsProContactByAddressEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProContactByAddressEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(INEscrowWorkflowTimelineDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'INEscrowWorkflowTimelineDefinitionType');
  RemClassRegistry.RegisterXSClass(PayPalRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PayPalRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProAdFormatEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProAdFormatEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProStreetCountDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProStreetCountDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProAutoAcceptEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProPaymentMethodCheckOutEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProCompanyNameEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProCompanyNameEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProContactByEmailEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProContactByEmailEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(eBayMotorsProBestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'eBayMotorsProBestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(StoreCustomPageType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCategoryUpdateActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCategoryUpdateActionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomCategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomCategoryArrayType');
  RemClassRegistry.RegisterXSClass(StoreType, 'urn:ebay:apis:eBLBaseComponents', 'StoreType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreType), 'CustomCategories', '[ArrayItemName="CustomCategory"]');
  RemClassRegistry.RegisterXSClass(StoreCustomCategoryType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomCategoryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomCategoryType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomCategoryType), 'ChildCategory', '[ArrayItemName="CustomCategory"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserNotesActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesActionCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackCommentArrayType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackCommentArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AutomatedLeaveFeedbackEventCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AutomatedLeaveFeedbackEventCodeType');
  RemClassRegistry.RegisterXSClass(ExpressItemRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressItemRequirementsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportItemsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DetailLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DetailLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_DetailLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_DetailLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureSetCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureSetCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureUploadPolicyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureUploadPolicyCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureWatermarkCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureWatermarkCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_PictureWatermarkCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_PictureWatermarkCodeType');
  RemClassRegistry.RegisterXSClass(SiteHostedPictureDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteHostedPictureDetailsType');
  RemClassRegistry.RegisterXSClass(InventoryFeesType, 'urn:ebay:apis:eBLBaseComponents', 'InventoryFeesType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InventoryFeesType), 'Fee', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesFolderOperationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderOperationCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreOwnerExtendedListingDurationsType), 'urn:ebay:apis:eBLBaseComponents', 'StoreOwnerExtendedListingDurationsType');
  RemClassRegistry.RegisterXSClass(DeliveryStatusType, 'urn:ebay:apis:eBLBaseComponents', 'DeliveryStatusType');
  RemClassRegistry.RegisterXSClass(DigitalDeliverySelectedType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliverySelectedType');
  RemClassRegistry.RegisterXSClass(ShippingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingDetailsType), 'TaxTable', '[ArrayItemName="TaxJurisdiction"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingDetailsType), 'ExcludeShipToLocation', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(ShipmentType, 'urn:ebay:apis:eBLBaseComponents', 'ShipmentType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShipmentType), 'ItemTransactionID', '[ArrayItemName="ItemTransactionID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShipmentType), 'ShipmentLineItem', '[ArrayItemName="LineItem"]');
  RemClassRegistry.RegisterXSClass(ShippingServiceDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingCategoryDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingCategoryDetailsType');
  RemClassRegistry.RegisterXSClass(PickupMethodSelectedType, 'urn:ebay:apis:eBLBaseComponents', 'PickupMethodSelectedType');
  RemClassRegistry.RegisterXSClass(PickupOptionsType, 'urn:ebay:apis:eBLBaseComponents', 'PickupOptionsType');
  RemClassRegistry.RegisterXSClass(ReturnPolicyType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnPolicyType');
  RemClassRegistry.RegisterXSClass(MultiLegShippingServiceType, 'urn:ebay:apis:eBLBaseComponents', 'MultiLegShippingServiceType');
  RemClassRegistry.RegisterXSClass(ShippingPackageInfoType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingPackageInfoType');
  RemClassRegistry.RegisterXSClass(ReturnsWithinDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnsWithinDetailsType');
  RemClassRegistry.RegisterXSClass(RestockingFeeValueDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RestockingFeeValueDetailsType');
  RemClassRegistry.RegisterXSClass(RefundDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RefundDetailsType');
  RemClassRegistry.RegisterXSClass(SellerDiscountsType, 'urn:ebay:apis:eBLBaseComponents', 'SellerDiscountsType');
  RemClassRegistry.RegisterXSClass(ShippingCostPaidByDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingCostPaidByDetailsType');
  RemClassRegistry.RegisterXSClass(WarrantyTypeDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'WarrantyTypeDetailsType');
  RemClassRegistry.RegisterXSClass(WarrantyOfferedDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'WarrantyOfferedDetailsType');
  RemClassRegistry.RegisterXSClass(ReturnsAcceptedDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ReturnsAcceptedDetailsType');
  RemClassRegistry.RegisterXSClass(WarrantyDurationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'WarrantyDurationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CheckoutMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CheckoutMethodCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InsuranceSelectedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InsuranceSelectedCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerPaymentMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerPaymentMethodCodeType');
  RemClassRegistry.RegisterXSClass(PaymentOptionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentOptionDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(Array_Of_BuyerPaymentMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'Array_Of_BuyerPaymentMethodCodeType');
  RemClassRegistry.RegisterXSClass(SellingManagerOrderStatusType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerOrderStatusType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CompleteStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CompleteStatusCodeType');
  RemClassRegistry.RegisterXSClass(CheckoutStatusType, 'urn:ebay:apis:eBLBaseComponents', 'CheckoutStatusType');
  RemClassRegistry.RegisterXSClass(TransactionStatusType, 'urn:ebay:apis:eBLBaseComponents', 'TransactionStatusType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RCSPaymentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RCSPaymentStatusCodeType');
  RemClassRegistry.RegisterXSClass(InventoryStatusType, 'urn:ebay:apis:eBLBaseComponents', 'InventoryStatusType');
  RemClassRegistry.RegisterXSClass(ExternalTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'ExternalTransactionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InsuranceOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InsuranceOptionCodeType');
  RemClassRegistry.RegisterXSClass(FlatShippingPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingPreferencesType');
  RemClassRegistry.RegisterXSClass(ShippingInsuranceType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingInsuranceType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemIDArrayType');
  RemClassRegistry.RegisterXSClass(SellerFavoriteItemPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerFavoriteItemPreferencesType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerFavoriteItemPreferencesType), 'FavoriteItemID', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ModifyActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ModifyActionCodeType');
  RemClassRegistry.RegisterXSClass(PromotionalSaleType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionalSaleType), 'PromotionalSaleItemIDArray', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterXSClass(InternationalShippingServiceOptionsType, 'urn:ebay:apis:eBLBaseComponents', 'InternationalShippingServiceOptionsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InternationalShippingServiceOptionsType), 'ShipToLocation', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(ShippingServiceOptionsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceOptionsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeResolutionReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionReasonCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ErrorHandlingCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ErrorHandlingCodeType');
  RemClassRegistry.RegisterXSClass(BiddingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'BiddingSummaryType');
  RemClassRegistry.RegisterXSClass(ItemBidDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemBidDetailsType');
  RemClassRegistry.RegisterXSClass(BrandMPNIdentifierEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BrandMPNIdentifierEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupItemStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupItemStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupStatusCodeType');
  RemClassRegistry.RegisterXSClass(BiddingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BiddingDetailsType');
  RemClassRegistry.RegisterXSClass(BrandMPNType, 'urn:ebay:apis:eBLBaseComponents', 'BrandMPNType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentInstructionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentInstructionCodeType');
  RemClassRegistry.RegisterXSClass(BuyerPackageEnclosureType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerPackageEnclosureType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerPackageEnclosureType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerPackageEnclosuresType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerPackageEnclosuresType');
  RemClassRegistry.RegisterXSClass(OrderType, 'urn:ebay:apis:eBLBaseComponents', 'OrderType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderType), 'TransactionArray', '[ArrayItemName="Transaction"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderType), 'RefundArray', '[ArrayItemName="Refund"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderType), 'PickupDetails', '[ArrayItemName="PickupOptions"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderType), 'BuyerPackageEnclosures', '[ArrayItemName="BuyerPackageEnclosure"]');
  RemClassRegistry.RegisterXSClass(BusinessSellerDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BusinessSellerDetailsType');
  RemClassRegistry.RegisterXSClass(BuyerGuaranteeEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerGuaranteeEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BasicAmountType, 'urn:ebay:apis:eBLBaseComponents', 'BasicAmountType');
  RemClassRegistry.RegisterXSClass(BasicUpgradePackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BasicUpgradePackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferAutoAcceptEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackSummaryPeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackSummaryPeriodCodeType');
  RemClassRegistry.RegisterXSClass(Base64BinaryType, 'urn:ebay:apis:eBLBaseComponents', 'Base64BinaryType');
  RemClassRegistry.RegisterXSClass(BestOfferAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BidGroupType, 'urn:ebay:apis:eBLBaseComponents', 'BidGroupType');
  RemClassRegistry.RegisterXSClass(BidGroupItemType, 'urn:ebay:apis:eBLBaseComponents', 'BidGroupItemType');
  RemClassRegistry.RegisterXSClass(BestOfferCounterEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferCounterEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferTypeCodeType');
  RemClassRegistry.RegisterXSClass(BestOfferDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferDetailsType');
  RemClassRegistry.RegisterXSClass(BestOfferType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferType');
end;

procedure RegisterTypeProc9;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(CalculatedShippingRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingRateOptionCodeType');
  RemClassRegistry.RegisterXSClass(CancelDetailType, 'urn:ebay:apis:eBLBaseComponents', 'CancelDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CalculatedShippingChargeOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingChargeOptionCodeType');
  RemClassRegistry.RegisterXSClass(CalculatedShippingPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingPreferencesType');
  RemClassRegistry.RegisterXSClass(CategoryType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryType), 'CategoryParentID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryType), 'CategoryParentName', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryType), 'Virtual_', '[ExtName="Virtual"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ClassifiedAdBestOfferEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdBestOfferEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSpecificsEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificsEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingEnhancementDurationReferenceType), 'urn:ebay:apis:eBLBaseComponents', 'ListingEnhancementDurationReferenceType');
  RemClassRegistry.RegisterXSClass(ListingDurationDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationDefinitionType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingDurationDefinitionType), 'Duration', '[ArrayItemName="Duration"]');
  RemClassRegistry.RegisterXSClass(ListingDurationReferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationReferenceType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingDurationReferenceType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AdFormatEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AdFormatEnabledCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ClassifiedAdPaymentMethodEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPaymentMethodEnabledCodeType');
  RemClassRegistry.RegisterXSClass(SiteDefaultsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteDefaultsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'GalleryFeaturedDurations', '[ArrayItemName="Duration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'StoreOwnerExtendedListingDurations', '[ArrayItemName="Duration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'DomesticReturnsAcceptedValues', '[ArrayItemName="DomesticReturnsAccepted"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'InternationalReturnsAcceptedValues', '[ArrayItemName="InternationalReturnsAccepted"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'DomesticReturnsDurationValues', '[ArrayItemName="DomesticReturnsDuration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'InternationalReturnsDurationValues', '[ArrayItemName="InternationalReturnsDuration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'DomesticReturnsShipmentPayeeValues', '[ArrayItemName="DomesticReturnsShipmentPayee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'InternationalReturnsShipmentPayeeValues', '[ArrayItemName="InternationalReturnsShipmentPayee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'DomesticRefundMethodValues', '[ArrayItemName="DomesticRefundMethod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteDefaultsType), 'InternationalRefundMethodValues', '[ArrayItemName="InternationalRefundMethod"]');
  RemClassRegistry.RegisterXSClass(CategoryFeatureType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryFeatureType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'GalleryFeaturedDurations', '[ArrayItemName="Duration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'StoreOwnerExtendedListingDurations', '[ArrayItemName="Duration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'DomesticReturnsAcceptedValues', '[ArrayItemName="DomesticReturnsAccepted"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'InternationalReturnsAcceptedValues', '[ArrayItemName="InternationalReturnsAccepted"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'DomesticReturnsDurationValues', '[ArrayItemName="DomesticReturnsDuration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'InternationalReturnsDurationValues', '[ArrayItemName="InternationalReturnsDuration"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'DomesticReturnsShipmentPayeeValues', '[ArrayItemName="DomesticReturnsShipmentPayee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'InternationalReturnsShipmentPayeeValues', '[ArrayItemName="InternationalReturnsShipmentPayee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'DomesticRefundMethodValues', '[ArrayItemName="DomesticRefundMethod"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryFeatureType), 'InternationalRefundMethodValues', '[ArrayItemName="InternationalRefundMethod"]');
  RemClassRegistry.RegisterXSClass(MaximumItemRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumItemRequirementsType');
  RemClassRegistry.RegisterXSClass(MaximumUnpaidItemStrikesInfoType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumUnpaidItemStrikesInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerProtectionSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionSourceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerProtectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionCodeType');
  RemClassRegistry.RegisterXSClass(BuyerProtectionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionDetailsType');
  RemClassRegistry.RegisterXSClass(BuyerRequirementDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerRequirementDetailsType');
  RemClassRegistry.RegisterXSClass(BuyerRoleMetricsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerRoleMetricsType');
  RemClassRegistry.RegisterXSClass(DiscountProfileType, 'urn:ebay:apis:eBLBaseComponents', 'DiscountProfileType');
  RemClassRegistry.RegisterXSClass(VATDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'VATDetailsType');
  RemClassRegistry.RegisterXSClass(SalesTaxType, 'urn:ebay:apis:eBLBaseComponents', 'SalesTaxType');
  RemClassRegistry.RegisterXSClass(CharityType, 'urn:ebay:apis:eBLBaseComponents', 'CharityType');
  RemClassRegistry.RegisterXSClass(SellingManagerAutoSecondChanceOfferType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerAutoSecondChanceOfferType');
  RemClassRegistry.RegisterXSClass(TaxJurisdictionType, 'urn:ebay:apis:eBLBaseComponents', 'TaxJurisdictionType');
  RemClassRegistry.RegisterXSClass(ListingStartPriceDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingStartPriceDetailsType');
  RemClassRegistry.RegisterXSClass(SellerFeeDiscountDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'SellerFeeDiscountDashboardType');
  RemClassRegistry.RegisterXSClass(SellerRoleMetricsType, 'urn:ebay:apis:eBLBaseComponents', 'SellerRoleMetricsType');
  RemClassRegistry.RegisterXSClass(VATRateType, 'urn:ebay:apis:eBLBaseComponents', 'VATRateType');
  RemClassRegistry.RegisterXSClass(SellingManagerTemplateDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerTemplateDetailsType');
  RemClassRegistry.RegisterXSClass(SellingManagerProductInventoryStatusType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductInventoryStatusType');
  RemClassRegistry.RegisterXSClass(TaxIdentifierType, 'urn:ebay:apis:eBLBaseComponents', 'TaxIdentifierType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaxIdentifierType), 'Type_', '[ExtName="Type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HandlingNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HandlingNameCodeType');
  RemClassRegistry.RegisterXSClass(CalculatedHandlingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedHandlingDiscountType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DiscountNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DiscountNameCodeType');
  RemClassRegistry.RegisterXSClass(CalculatedShippingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingDiscountType');
  RemClassRegistry.RegisterXSClass(FlatShippingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingDiscountType');
  RemClassRegistry.RegisterXSClass(PromotionalShippingDiscountDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalShippingDiscountDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerSatisfactionStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerSatisfactionStatusCodeType');
  RemClassRegistry.RegisterXSClass(BuyerSatisfactionDashboardType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerSatisfactionDashboardType');
  RemClassRegistry.RegisterXSClass(SellerDashboardAlertType, 'urn:ebay:apis:eBLBaseComponents', 'SellerDashboardAlertType');
  RemClassRegistry.RegisterXSClass(BuyerType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ErrorClassificationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ErrorClassificationCodeType');
  RemClassRegistry.RegisterXSClass(NonProfitAddressType, 'urn:ebay:apis:eBLBaseComponents', 'NonProfitAddressType');
  RemClassRegistry.RegisterXSClass(TransactionType, 'urn:ebay:apis:eBLBaseComponents', 'TransactionType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionType), 'RefundArray', '[ArrayItemName="Refund"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionType), 'Platform_', '[ExtName="Platform"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionType), 'PickupDetails', '[ArrayItemName="PickupOptions"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionType), 'BuyerPackageEnclosures', '[ArrayItemName="BuyerPackageEnclosure"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InvocationStatusType), 'urn:ebay:apis:eBLBaseComponents', 'InvocationStatusType');
  RemClassRegistry.RegisterXSClass(ErrorParameterType, 'urn:ebay:apis:eBLBaseComponents', 'ErrorParameterType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SeverityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SeverityCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MeasurementSystemCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MeasurementSystemCodeType');
  RemClassRegistry.RegisterXSClass(MeasureType, 'urn:ebay:apis:eBLBaseComponents', 'MeasureType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MeasureType), 'unit_', '[ExtName="unit"]');
  RemClassRegistry.RegisterXSClass(CalculatedShippingRateType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingRateType');
  RemClassRegistry.RegisterXSClass(ShipPackageDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShipPackageDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountStateCodeType');
  RemClassRegistry.RegisterXSClass(AdditionalAccountType, 'urn:ebay:apis:eBLBaseComponents', 'AdditionalAccountType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerPaymentMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentMethodCodeType');
  RemClassRegistry.RegisterXSClass(UserType, 'urn:ebay:apis:eBLBaseComponents', 'UserType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserType), 'CharityAffiliations', '[ArrayItemName="CharityID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserType), 'SkypeID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserType), 'Membership', '[ArrayItemName="Program"]');
  RemClassRegistry.RegisterXSClass(AccountSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'AccountSummaryType');
  RemClassRegistry.RegisterXSClass(SellerType, 'urn:ebay:apis:eBLBaseComponents', 'SellerType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerType), 'CharityAffiliationDetails', '[ArrayItemName="CharityAffiliationDetail"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerType), 'IntegratedMerchantCreditCardInfo', '[ArrayItemName="SupportedSite"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerType), 'TopRatedSellerDetails', '[ArrayItemName="TopRatedProgram"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerType), 'RecoupmentPolicyConsent', '[ArrayItemName="Site"]');
  RemClassRegistry.RegisterXSClass(QuantityType, 'urn:ebay:apis:eBLBaseComponents', 'QuantityType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(QuantityType), 'unit_', '[ExtName="unit"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountDetailEntryCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountDetailEntryCodeType');
  RemClassRegistry.RegisterXSClass(AccountEntryType, 'urn:ebay:apis:eBLBaseComponents', 'AccountEntryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AckCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AckCodeType');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderResponseContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponseContainerType');
  RemClassRegistry.RegisterXSClass(AbstractResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AbstractResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AbstractResponseType), 'Message_', '[ExtName="Message"]');
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(SellerReverseDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeResponse, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeResponse');
  RemClassRegistry.RegisterXSClass(SaveItemToSellingManagerTemplateResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SaveItemToSellingManagerTemplateResponseType');
  RemClassRegistry.RegisterSerializeOptions(SaveItemToSellingManagerTemplateResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SaveItemToSellingManagerTemplateResponse, 'urn:ebay:apis:eBLBaseComponents', 'SaveItemToSellingManagerTemplateResponse');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerTemplateResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerTemplateResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseSellingManagerTemplateResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerTemplateResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerTemplateResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerTemplateResponse');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerSaleRecordResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerSaleRecordResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerSaleRecordResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerSaleRecordResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerSaleRecordResponse');
  RemClassRegistry.RegisterXSClass(RevokeTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RevokeTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(RevokeTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RevokeTokenResponse, 'urn:ebay:apis:eBLBaseComponents', 'RevokeTokenResponse');
  RemClassRegistry.RegisterXSClass(ItemsCanceledEventType, 'urn:ebay:apis:eBLBaseComponents', 'ItemsCanceledEventType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemsCanceledEventType), 'CanceledItemIDArray', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterXSClass(ItemsCanceledEvent, 'urn:ebay:apis:eBLBaseComponents', 'ItemsCanceledEvent');
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleResponse');
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetNotificationPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesResponse');
  RemClassRegistry.RegisterXSClass(SendInvoiceResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceResponseType');
  RemClassRegistry.RegisterSerializeOptions(SendInvoiceResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SendInvoiceResponse, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceResponse');
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetMessagePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesResponse');
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseCheckoutStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusResponse');
  RemClassRegistry.RegisterXSClass(ReviseFixedPriceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseFixedPriceItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseFixedPriceItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseFixedPriceItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseFixedPriceItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseFixedPriceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseFixedPriceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseFixedPriceItemResponse');
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesFoldersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersResponse');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerProductResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerProductResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerProductResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerProductResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerProductResponse');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerInventoryFolderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerInventoryFolderResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerInventoryFolderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerInventoryFolderResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerInventoryFolderResponse');
  RemClassRegistry.RegisterXSClass(ReviseInventoryStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseInventoryStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseInventoryStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseInventoryStatusResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseInventoryStatusResponse');
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesResponse');
end;

procedure RegisterTypeProc10;
begin
  RemClassRegistry.RegisterXSClass(ReviseItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemResponse');
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesResponseType');
  RemClassRegistry.RegisterSerializeOptions(UploadSiteHostedPicturesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesResponse, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesResponse');
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationResponseType');
  RemClassRegistry.RegisterSerializeOptions(ValidateTestUserRegistrationResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationResponse, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationResponse');
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputResponseType');
  RemClassRegistry.RegisterSerializeOptions(ValidateChallengeInputResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputResponse, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputResponse');
  RemClassRegistry.RegisterXSClass(SetUserPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetUserPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserPreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesResponse');
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddSecondChanceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemResponse');
  RemClassRegistry.RegisterXSClass(VerifyAddItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyAddItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyAddItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyAddItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemResponse');
  RemClassRegistry.RegisterXSClass(VerifyRelistItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyRelistItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyRelistItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyRelistItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyRelistItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(VerifyRelistItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyRelistItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'VerifyRelistItemResponse');
  RemClassRegistry.RegisterXSClass(VeROReportItemsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsResponseType');
  RemClassRegistry.RegisterSerializeOptions(VeROReportItemsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VeROReportItemsResponse, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsResponse');
  RemClassRegistry.RegisterXSClass(VerifyAddFixedPriceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddFixedPriceItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyAddFixedPriceItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyAddFixedPriceItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddFixedPriceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddFixedPriceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddFixedPriceItemResponse');
  RemClassRegistry.RegisterXSClass(SetUserNotesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetUserNotesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserNotesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesResponse');
  RemClassRegistry.RegisterXSClass(SetSellingManagerTemplateAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerTemplateAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetSellingManagerTemplateAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerTemplateAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerTemplateAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerTemplateAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(SetStoreResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreResponse');
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetShippingDiscountProfilesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesResponse');
  RemClassRegistry.RegisterXSClass(SetSellingManagerItemAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerItemAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetSellingManagerItemAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerItemAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerItemAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerItemAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleListingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsResponse');
  RemClassRegistry.RegisterXSClass(SetSellingManagerFeedbackOptionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerFeedbackOptionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerFeedbackOptionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerFeedbackOptionsResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerFeedbackOptionsResponse');
  RemClassRegistry.RegisterXSClass(SetStorePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStorePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStorePreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesResponse');
  RemClassRegistry.RegisterXSClass(SetTaxTableResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetTaxTableResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetTaxTableResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableResponse');
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCustomPageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageResponse');
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetStoreCategoriesResponseType), 'CustomCategory', '[ArrayItemName="CustomCategory"]');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesResponse, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesResponse');
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryFeaturesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesResponse');
  RemClassRegistry.RegisterXSClass(GetBidderListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetBidderListResponseType), 'BidItemArray', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterSerializeOptions(GetBidderListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBidderListResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListResponse');
  RemClassRegistry.RegisterXSClass(GetCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetCategoriesResponseType), 'CategoryArray', '[ArrayItemName="Category"]');
  RemClassRegistry.RegisterSerializeOptions(GetCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoriesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesResponse');
  RemClassRegistry.RegisterXSClass(GetSellerListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerListResponseType), 'ItemArray', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellerListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerListResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListResponse');
  RemClassRegistry.RegisterXSClass(GetSellerEventsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerEventsResponseType), 'ItemArray', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellerEventsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerEventsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsResponse');
  RemClassRegistry.RegisterXSClass(GetChallengeTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetChallengeTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetChallengeTokenResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenResponse');
  RemClassRegistry.RegisterXSClass(GetCharitiesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCharitiesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCharitiesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesResponse');
  RemClassRegistry.RegisterXSClass(GetCategorySpecificsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategorySpecificsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategorySpecificsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsResponse');
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryMappingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsResponse');
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetAdFormatLeadsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsResponse');
  RemClassRegistry.RegisterXSClass(GetAccountResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetAccountResponseType), 'AccountEntries', '[ArrayItemName="AccountEntry"]');
  RemClassRegistry.RegisterSerializeOptions(GetAccountResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAccountResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountResponse');
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetShippingDiscountProfilesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesResponse');
  RemClassRegistry.RegisterXSClass(RespondToBestOfferResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RespondToBestOfferResponseType), 'RespondToBestOffer', '[ArrayItemName="BestOffer"]');
  RemClassRegistry.RegisterSerializeOptions(RespondToBestOfferResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToBestOfferResponse, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferResponse');
  RemClassRegistry.RegisterXSClass(GetBestOffersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetBestOffersResponseType), 'BestOfferArray', '[ArrayItemName="BestOffer"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetBestOffersResponseType), 'ItemBestOffersArray', '[ArrayItemName="ItemBestOffers"]');
  RemClassRegistry.RegisterSerializeOptions(GetBestOffersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBestOffersResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersResponse');
  RemClassRegistry.RegisterXSClass(GetAllBiddersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetAllBiddersResponseType), 'BidArray', '[ArrayItemName="Offer"]');
  RemClassRegistry.RegisterSerializeOptions(GetAllBiddersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAllBiddersResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersResponse');
  RemClassRegistry.RegisterXSClass(GetApiAccessRulesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetApiAccessRulesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetApiAccessRulesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesResponse');
  RemClassRegistry.RegisterXSClass(GetMemberMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMemberMessagesResponseType), 'MemberMessage', '[ArrayItemName="MemberMessageExchange"]');
  RemClassRegistry.RegisterSerializeOptions(GetMemberMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMemberMessagesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesResponse');
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemsAwaitingFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackResponse');
  RemClassRegistry.RegisterXSClass(GetItemTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetItemTransactionsResponseType), 'TransactionArray', '[ArrayItemName="Transaction"]');
  RemClassRegistry.RegisterSerializeOptions(GetItemTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemTransactionsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsResponse');
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerTransactionsResponseType), 'TransactionArray', '[ArrayItemName="Transaction"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellerTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsResponse');
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyeBayBuyingResponseType), 'SecondChanceOffer', '[ArrayItemName="Item"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyeBayBuyingResponseType), 'BidAssistantList', '[ArrayItemName="BidGroup"]');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayBuyingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingResponse');
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMessagePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesResponse');
  RemClassRegistry.RegisterXSClass(GetMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyMessagesResponseType), 'Alerts', '[ArrayItemName="Alert"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyMessagesResponseType), 'Messages', '[ArrayItemName="Message"]');
  RemClassRegistry.RegisterSerializeOptions(GetMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyMessagesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesResponse');
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetDescriptionTemplatesResponseType), 'ObsoleteLayoutID', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetDescriptionTemplatesResponseType), 'ObsoleteThemeID', '[ArrayItemName="Count"]');
  RemClassRegistry.RegisterSerializeOptions(GetDescriptionTemplatesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesResponse');
  RemClassRegistry.RegisterXSClass(GetDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDisputeResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeResponse');
  RemClassRegistry.RegisterXSClass(GetClientAlertsAuthTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetClientAlertsAuthTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetClientAlertsAuthTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetClientAlertsAuthTokenResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetClientAlertsAuthTokenResponse');
  RemClassRegistry.RegisterXSClass(GetContextualKeywordsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetContextualKeywordsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetContextualKeywordsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsResponse');
  RemClassRegistry.RegisterXSClass(GetItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetItemResponse');
  RemClassRegistry.RegisterXSClass(GetItemShippingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemShippingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemShippingResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingResponse');
end;

procedure RegisterTypeProc11;
begin
  RemClassRegistry.RegisterXSClass(GetFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetFeedbackResponseType), 'FeedbackDetailArray', '[ArrayItemName="FeedbackDetail"]');
  RemClassRegistry.RegisterSerializeOptions(GetFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetFeedbackResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackResponse');
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageRTQResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQResponse');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessagesAAQToBidderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponse');
  RemClassRegistry.RegisterXSClass(AddItemsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemsResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddItemsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemsResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddItemsResponse');
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageAAQToPartnerResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerResponse');
  RemClassRegistry.RegisterXSClass(AddSellingManagerInventoryFolderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerInventoryFolderResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerInventoryFolderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerInventoryFolderResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerInventoryFolderResponse');
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddSecondChanceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemResponse');
  RemClassRegistry.RegisterXSClass(AddOrderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddOrderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddOrderResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderResponse');
  RemClassRegistry.RegisterXSClass(GetUserDisputesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetUserDisputesResponseType), 'DisputeArray', '[ArrayItemName="Dispute"]');
  RemClassRegistry.RegisterSerializeOptions(GetUserDisputesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserDisputesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesResponse');
  RemClassRegistry.RegisterXSClass(AddDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponse');
  RemClassRegistry.RegisterXSClass(NotificationMessageType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationMessageType');
  RemClassRegistry.RegisterXSClass(NotificationMessage, 'urn:ebay:apis:eBLBaseComponents', 'NotificationMessage');
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerInventoryResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerItemAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerItemAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellingManagerItemAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerItemAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerItemAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerItemAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerSaleRecordResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSaleRecordResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerSaleRecordResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerSaleRecordResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSaleRecordResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryFolderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryFolderResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerInventoryFolderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryFolderResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryFolderResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerEmailLogResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerEmailLogResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerEmailLogResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerEmailLogResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerEmailLogResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerAlertsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerAlertsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerAlertsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerAlertsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerAlertsResponse');
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCategoryUpdateStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusResponse');
  RemClassRegistry.RegisterXSClass(GetStoreResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerSoldListingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSoldListingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerSoldListingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerSoldListingsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSoldListingsResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplateAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplateAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellingManagerTemplateAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerTemplateAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplateAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplateAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(GetSessionIDResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSessionIDResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSessionIDResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSessionIDResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSessionIDResponse');
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplatesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplatesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellingManagerTemplatesResponseType), 'SellingManagerTemplateDetailsArray', '[ArrayItemName="SellingManagerTemplateDetails"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerTemplatesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplatesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplatesResponse');
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetNotificationPreferencesResponseType), 'UserDeliveryPreferenceArray', '[ArrayItemName="NotificationEnable"]');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesResponse');
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetNotificationsUsageResponseType), 'NotificationDetailsArray', '[ArrayItemName="NotificationDetails"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetNotificationsUsageResponseType), 'MarkUpMarkDownHistory', '[ArrayItemName="MarkUpMarkDownEvent"]');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationsUsageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageResponse');
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBaySellingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingResponse');
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayRemindersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersResponse');
  RemClassRegistry.RegisterXSClass(GetSellerDashboardResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerDashboardResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerDashboardResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerDashboardResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerDashboardResponse');
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrderTransactionsResponseType), 'OrderArray', '[ArrayItemName="Order"]');
  RemClassRegistry.RegisterSerializeOptions(GetOrderTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsResponse');
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetPromotionalSaleDetailsResponseType), 'PromotionalSaleDetails', '[ArrayItemName="PromotionalSale"]');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionalSaleDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsResponse');
  RemClassRegistry.RegisterXSClass(GetOrdersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrdersResponseType), 'OrderArray', '[ArrayItemName="Order"]');
  RemClassRegistry.RegisterSerializeOptions(GetOrdersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrdersResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersResponse');
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetStoreCustomPageResponseType), 'CustomPageArray', '[ArrayItemName="CustomPage"]');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCustomPageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageResponse');
  RemClassRegistry.RegisterXSClass(GeteBayDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GeteBayDetailsResponseType), 'TaxJurisdiction', '[ArrayItemName="TaxJurisdiction"]');
  RemClassRegistry.RegisterSerializeOptions(GeteBayDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayDetailsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsResponse');
  RemClassRegistry.RegisterXSClass(RelistItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(RelistItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemResponse');
  RemClassRegistry.RegisterXSClass(RelistFixedPriceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RelistFixedPriceItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistFixedPriceItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistFixedPriceItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistFixedPriceItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(RelistFixedPriceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistFixedPriceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'RelistFixedPriceItemResponse');
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListResponseType');
  RemClassRegistry.RegisterSerializeOptions(RemoveFromWatchListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListResponse, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListResponse');
  RemClassRegistry.RegisterXSClass(RespondToFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(RespondToFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToFeedbackResponse, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackResponse');
  RemClassRegistry.RegisterXSClass(LeaveFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(LeaveFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(LeaveFeedbackResponse, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackResponse');
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeResponseType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayOfficialTimeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeResponse, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeResponse');
  RemClassRegistry.RegisterXSClass(PlaceOfferResponseType, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferResponseType');
  RemClassRegistry.RegisterSerializeOptions(PlaceOfferResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(PlaceOfferResponse, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferResponse');
  RemClassRegistry.RegisterXSClass(MoveSellingManagerInventoryFolderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'MoveSellingManagerInventoryFolderResponseType');
  RemClassRegistry.RegisterSerializeOptions(MoveSellingManagerInventoryFolderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(MoveSellingManagerInventoryFolderResponse, 'urn:ebay:apis:eBLBaseComponents', 'MoveSellingManagerInventoryFolderResponse');
  RemClassRegistry.RegisterXSClass(GetTokenStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetTokenStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetTokenStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTokenStatusResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetTokenStatusResponse');
  RemClassRegistry.RegisterXSClass(GetTaxTableResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetTaxTableResponseType), 'TaxTable', '[ArrayItemName="TaxJurisdiction"]');
  RemClassRegistry.RegisterSerializeOptions(GetTaxTableResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTaxTableResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableResponse');
  RemClassRegistry.RegisterXSClass(GetUserResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetUserResponse');
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserContactDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsResponse');
  RemClassRegistry.RegisterXSClass(GetStoreOptionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetStoreOptionsResponseType), 'LogoArray', '[ArrayItemName="Logo"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetStoreOptionsResponseType), 'SubscriptionArray', '[ArrayItemName="Subscription"]');
  RemClassRegistry.RegisterSerializeOptions(GetStoreOptionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreOptionsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsResponse');
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSuggestedCategoriesResponseType), 'SuggestedCategoryArray', '[ArrayItemName="SuggestedCategory"]');
  RemClassRegistry.RegisterSerializeOptions(GetSuggestedCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesResponse');
  RemClassRegistry.RegisterXSClass(GetStorePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStorePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStorePreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesResponse');
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetVeROReasonCodeDetailsResponseType), 'VeROReasonCodeDetails', '[ArrayItemName="VeROSiteDetail"]');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReasonCodeDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsResponse');
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetVeROReportStatusResponseType), 'ReportedItemDetails', '[ArrayItemName="ReportedItem"]');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReportStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusResponse');
end;

procedure RegisterTypeProc12;
begin
  RemClassRegistry.RegisterXSClass(GetUserPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetUserPreferencesResponseType), 'SellerExcludeShipToLocationPreferences', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(GetUserPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserPreferencesResponse, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesResponse');
  RemClassRegistry.RegisterXSClass(CompleteSaleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleResponseType');
  RemClassRegistry.RegisterSerializeOptions(CompleteSaleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(CompleteSaleResponse, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleResponse');
  RemClassRegistry.RegisterXSClass(ConfirmIdentityResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ConfirmIdentityResponseType');
  RemClassRegistry.RegisterSerializeOptions(ConfirmIdentityResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ConfirmIdentityResponse, 'urn:ebay:apis:eBLBaseComponents', 'ConfirmIdentityResponse');
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(DeleteMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesResponse');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerInventoryFolderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerInventoryFolderResponseType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerInventoryFolderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerInventoryFolderResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerInventoryFolderResponse');
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddToItemDescriptionResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionResponse');
  RemClassRegistry.RegisterXSClass(AddSellingManagerProductResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerProductResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerProductResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerProductResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerProductResponse');
  RemClassRegistry.RegisterXSClass(AddSellingManagerTemplateResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerTemplateResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddSellingManagerTemplateResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerTemplateResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerTemplateResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerTemplateResponse');
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddTransactionConfirmationItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemResponse');
  RemClassRegistry.RegisterXSClass(AddToWatchListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddToWatchListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToWatchListResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListResponse');
  RemClassRegistry.RegisterXSClass(EndItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(EndItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'EndItemResponse');
  RemClassRegistry.RegisterXSClass(EndFixedPriceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'EndFixedPriceItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(EndFixedPriceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndFixedPriceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'EndFixedPriceItemResponse');
  RemClassRegistry.RegisterXSClass(EndItemsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemsResponseType');
  RemClassRegistry.RegisterSerializeOptions(EndItemsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemsResponse, 'urn:ebay:apis:eBLBaseComponents', 'EndItemsResponse');
  RemClassRegistry.RegisterXSClass(ExtendSiteHostedPicturesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendSiteHostedPicturesResponseType');
  RemClassRegistry.RegisterSerializeOptions(ExtendSiteHostedPicturesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ExtendSiteHostedPicturesResponse, 'urn:ebay:apis:eBLBaseComponents', 'ExtendSiteHostedPicturesResponse');
  RemClassRegistry.RegisterXSClass(FetchTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(FetchTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(FetchTokenResponse, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenResponse');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerProductResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerProductResponseType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerProductResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerProductResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerProductResponse');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerItemAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerItemAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeleteSellingManagerItemAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerItemAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerItemAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerItemAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(DisableUnpaidItemAssistanceResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DisableUnpaidItemAssistanceResponseType');
  RemClassRegistry.RegisterSerializeOptions(DisableUnpaidItemAssistanceResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DisableUnpaidItemAssistanceResponse, 'urn:ebay:apis:eBLBaseComponents', 'DisableUnpaidItemAssistanceResponse');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateResponseType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerTemplateResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateResponse');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateAutomationRuleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateAutomationRuleResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeleteSellingManagerTemplateAutomationRuleResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerTemplateAutomationRuleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateAutomationRuleResponse, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateAutomationRuleResponse');
  RemClassRegistry.RegisterXSClass(AddFixedPriceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddFixedPriceItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddFixedPriceItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddFixedPriceItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddFixedPriceItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(AddFixedPriceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddFixedPriceItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddFixedPriceItemResponse');
  RemClassRegistry.RegisterXSClass(AddItemFromSellingManagerTemplateResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemFromSellingManagerTemplateResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemFromSellingManagerTemplateResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterSerializeOptions(AddItemFromSellingManagerTemplateResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemFromSellingManagerTemplateResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddItemFromSellingManagerTemplateResponse');
  RemClassRegistry.RegisterXSClass(AddItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseType), 'Fees', '[ArrayItemName="Fee"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseType), 'ProductSuggestions', '[ArrayItemName="ProductSuggestion"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddItemResponseType), 'ListingRecommendations', '[ArrayItemName="Recommendation"]');
  RemClassRegistry.RegisterSerializeOptions(AddItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddItemResponse');
  RemClassRegistry.RegisterXSClass(AddDisputeResponseResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponseResponse, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseResponse');
  RemClassRegistry.RegisterXSClass(ErrorType, 'urn:ebay:apis:eBLBaseComponents', 'ErrorType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UUIDType), 'urn:ebay:apis:eBLBaseComponents', 'UUIDType');
  RemClassRegistry.RegisterXSClass(DuplicateInvocationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DuplicateInvocationDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WarningLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'WarningLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WarningLevelCodeType), 'Low_', 'Low');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WarningLevelCodeType), 'High_', 'High');
  RemClassRegistry.RegisterXSClass(AbstractRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AbstractRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AbstractRequestType), 'OutputSelector', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(SellerReverseDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeRequest, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeRequest');
  RemClassRegistry.RegisterXSClass(SendInvoiceRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceRequestType');
  RemClassRegistry.RegisterSerializeOptions(SendInvoiceRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SendInvoiceRequest, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceRequest');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerTemplateRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerTemplateRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseSellingManagerTemplateRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerTemplateRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerTemplateRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerTemplateRequest');
  RemClassRegistry.RegisterXSClass(SaveItemToSellingManagerTemplateRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SaveItemToSellingManagerTemplateRequestType');
  RemClassRegistry.RegisterSerializeOptions(SaveItemToSellingManagerTemplateRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SaveItemToSellingManagerTemplateRequest, 'urn:ebay:apis:eBLBaseComponents', 'SaveItemToSellingManagerTemplateRequest');
  RemClassRegistry.RegisterXSClass(RevokeTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RevokeTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(RevokeTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RevokeTokenRequest, 'urn:ebay:apis:eBLBaseComponents', 'RevokeTokenRequest');
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleRequest');
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RemoveFromWatchListRequestType), 'ItemID', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterSerializeOptions(RemoveFromWatchListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListRequest, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListRequest');
  RemClassRegistry.RegisterXSClass(AddToWatchListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddToWatchListRequestType), 'ItemID', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterSerializeOptions(AddToWatchListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToWatchListRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListRequest');
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetPromotionalSaleListingsRequestType), 'PromotionalSaleItemIDArray', '[ArrayItemName="ItemID"]');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleListingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsRequest');
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetNotificationPreferencesRequestType), 'UserDeliveryPreferenceArray', '[ArrayItemName="NotificationEnable"]');
  RemClassRegistry.RegisterSerializeOptions(SetNotificationPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesRequest');
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetMessagePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesRequest');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerSaleRecordRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerSaleRecordRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerSaleRecordRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerSaleRecordRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerSaleRecordRequest');
  RemClassRegistry.RegisterXSClass(ReviseFixedPriceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseFixedPriceItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseFixedPriceItemRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseFixedPriceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseFixedPriceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseFixedPriceItemRequest');
  RemClassRegistry.RegisterXSClass(ReviseInventoryStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseInventoryStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseInventoryStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseInventoryStatusRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseInventoryStatusRequest');
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseCheckoutStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusRequest');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerInventoryFolderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerInventoryFolderRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerInventoryFolderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerInventoryFolderRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerInventoryFolderRequest');
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerProductRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerProductRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseSellingManagerProductRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseSellingManagerProductRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseSellingManagerProductRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseSellingManagerProductRequest');
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseMyMessagesFoldersRequestType), 'FolderName', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesFoldersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersRequest');
  RemClassRegistry.RegisterXSClass(ReviseItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseItemRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemRequest');
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseMyMessagesRequestType), 'MessageIDs', '[ArrayItemName="MessageID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseMyMessagesRequestType), 'AlertIDs', '[ArrayItemName="AlertID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseMyMessagesRequestType), 'Read_', '[ExtName="Read"]');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesRequest, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesRequest');
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputRequestType');
  RemClassRegistry.RegisterSerializeOptions(ValidateChallengeInputRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputRequest, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputRequest');
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationRequestType');
  RemClassRegistry.RegisterSerializeOptions(ValidateTestUserRegistrationRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationRequest, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationRequest');
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesRequestType');
  RemClassRegistry.RegisterSerializeOptions(UploadSiteHostedPicturesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesRequest, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesRequest');
  RemClassRegistry.RegisterXSClass(SetUserPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetUserPreferencesRequestType, [xoLiteralParam]);
end;

procedure RegisterTypeProc13;
begin
  RemClassRegistry.RegisterXSClass(SetUserPreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesRequest');
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddSecondChanceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemRequest');
  RemClassRegistry.RegisterXSClass(VerifyRelistItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyRelistItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VerifyRelistItemRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(VerifyRelistItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyRelistItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'VerifyRelistItemRequest');
  RemClassRegistry.RegisterXSClass(VerifyAddItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemRequest');
  RemClassRegistry.RegisterXSClass(VeROReportItemsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VeROReportItemsRequestType), 'ReportItems', '[ArrayItemName="ReportItem"]');
  RemClassRegistry.RegisterSerializeOptions(VeROReportItemsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VeROReportItemsRequest, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsRequest');
  RemClassRegistry.RegisterXSClass(VerifyAddFixedPriceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddFixedPriceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddFixedPriceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddFixedPriceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddFixedPriceItemRequest');
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetShippingDiscountProfilesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesRequest');
  RemClassRegistry.RegisterXSClass(SetSellingManagerTemplateAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerTemplateAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerTemplateAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerTemplateAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerTemplateAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(SetStoreRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreRequest');
  RemClassRegistry.RegisterXSClass(SetSellingManagerFeedbackOptionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerFeedbackOptionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetSellingManagerFeedbackOptionsRequestType), 'StoredComments', '[ArrayItemName="StoredCommentText"]');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerFeedbackOptionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerFeedbackOptionsRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerFeedbackOptionsRequest');
  RemClassRegistry.RegisterXSClass(SetSellingManagerItemAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerItemAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetSellingManagerItemAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetSellingManagerItemAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetSellingManagerItemAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(SetTaxTableRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetTaxTableRequestType), 'TaxTable', '[ArrayItemName="TaxJurisdiction"]');
  RemClassRegistry.RegisterSerializeOptions(SetTaxTableRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetTaxTableRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableRequest');
  RemClassRegistry.RegisterXSClass(SetStorePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStorePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStorePreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesRequest');
  RemClassRegistry.RegisterXSClass(SetUserNotesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetUserNotesRequestType), 'VariationSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterSerializeOptions(SetUserNotesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserNotesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesRequest');
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetStoreCategoriesRequestType), 'StoreCategories', '[ArrayItemName="CustomCategory"]');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesRequest');
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCustomPageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageRequest, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageRequest');
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryFeaturesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesRequest');
  RemClassRegistry.RegisterXSClass(GetSellerListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerListRequestType), 'MotorsDealerUsers', '[ArrayItemName="UserID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerListRequestType), 'SKUArray', '[ArrayItemName="SKU"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellerListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerListRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListRequest');
  RemClassRegistry.RegisterXSClass(GetCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetCategoriesRequestType), 'CategoryParent', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(GetCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoriesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesRequest');
  RemClassRegistry.RegisterXSClass(GetChallengeTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetChallengeTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetChallengeTokenRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenRequest');
  RemClassRegistry.RegisterXSClass(GetCharitiesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCharitiesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCharitiesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesRequest');
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryMappingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsRequest');
  RemClassRegistry.RegisterXSClass(GetCategorySpecificsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetCategorySpecificsRequestType), 'CategoryID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetCategorySpecificsRequestType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterSerializeOptions(GetCategorySpecificsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategorySpecificsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsRequest');
  RemClassRegistry.RegisterXSClass(GetBidderListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetBidderListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBidderListRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListRequest');
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAdFormatLeadsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsRequest');
  RemClassRegistry.RegisterXSClass(GetAllBiddersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAllBiddersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAllBiddersRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersRequest');
  RemClassRegistry.RegisterXSClass(RespondToBestOfferRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferRequestType');
  RemClassRegistry.RegisterSerializeOptions(RespondToBestOfferRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToBestOfferRequest, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferRequest');
  RemClassRegistry.RegisterXSClass(GetBestOffersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetBestOffersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBestOffersRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersRequest');
  RemClassRegistry.RegisterXSClass(GetApiAccessRulesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetApiAccessRulesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetApiAccessRulesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesRequest');
  RemClassRegistry.RegisterXSClass(GetMemberMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMemberMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMemberMessagesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesRequest');
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMessagePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesRequest');
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerTransactionsRequestType), 'SKUArray', '[ArrayItemName="SKU"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerTransactionsRequestType), 'Platform_', '[ExtName="Platform"]');
  RemClassRegistry.RegisterSerializeOptions(GetSellerTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsRequest');
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrderTransactionsRequestType), 'ItemTransactionIDArray', '[ArrayItemName="ItemTransactionID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrderTransactionsRequestType), 'OrderIDArray', '[ArrayItemName="OrderID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrderTransactionsRequestType), 'Platform_', '[ExtName="Platform"]');
  RemClassRegistry.RegisterSerializeOptions(GetOrderTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsRequest');
  RemClassRegistry.RegisterXSClass(GetItemTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetItemTransactionsRequestType), 'Platform_', '[ExtName="Platform"]');
  RemClassRegistry.RegisterSerializeOptions(GetItemTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemTransactionsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsRequest');
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetItemsAwaitingFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackRequest');
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayBuyingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingRequest');
  RemClassRegistry.RegisterXSClass(GetMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyMessagesRequestType), 'AlertIDs', '[ArrayItemName="AlertID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyMessagesRequestType), 'MessageIDs', '[ArrayItemName="MessageID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetMyMessagesRequestType), 'ExternalMessageIDs', '[ArrayItemName="ExternalMessageID"]');
  RemClassRegistry.RegisterSerializeOptions(GetMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyMessagesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesRequest');
  RemClassRegistry.RegisterXSClass(GetDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDisputeRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeRequest');
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetDescriptionTemplatesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesRequest');
  RemClassRegistry.RegisterXSClass(GetClientAlertsAuthTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetClientAlertsAuthTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetClientAlertsAuthTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetClientAlertsAuthTokenRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetClientAlertsAuthTokenRequest');
  RemClassRegistry.RegisterXSClass(GetContextualKeywordsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetContextualKeywordsRequestType), 'CategoryID', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(GetContextualKeywordsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetContextualKeywordsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsRequest');
  RemClassRegistry.RegisterXSClass(GetItemShippingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetItemShippingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemShippingRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingRequest');
  RemClassRegistry.RegisterXSClass(PlaceOfferRequestType, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PlaceOfferRequestType), 'VariationSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterSerializeOptions(PlaceOfferRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(PlaceOfferRequest, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferRequest');
  RemClassRegistry.RegisterXSClass(GetItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetItemRequestType), 'VariationSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterSerializeOptions(GetItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetItemRequest');
  RemClassRegistry.RegisterXSClass(LeaveFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LeaveFeedbackRequestType), 'SellerItemRatingDetailArray', '[ArrayItemName="ItemRatingDetails"]');
  RemClassRegistry.RegisterSerializeOptions(LeaveFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(LeaveFeedbackRequest, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackRequest');
  RemClassRegistry.RegisterXSClass(GetFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetFeedbackRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackRequest');
  RemClassRegistry.RegisterXSClass(GetAccountRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAccountRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAccountRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountRequest');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessagesAAQToBidderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequest');
  RemClassRegistry.RegisterXSClass(AddOrderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddOrderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddOrderRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderRequest');
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageRTQRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQRequest');
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageAAQToPartnerRequestType, [xoLiteralParam]);
end;

procedure RegisterTypeProc14;
begin
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerRequest');
  RemClassRegistry.RegisterXSClass(AddSellingManagerInventoryFolderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerInventoryFolderRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerInventoryFolderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerInventoryFolderRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerInventoryFolderRequest');
  RemClassRegistry.RegisterXSClass(AddSellingManagerProductRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerProductRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerProductRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerProductRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerProductRequest');
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddTransactionConfirmationItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerSaleRecordRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSaleRecordRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerSaleRecordRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerSaleRecordRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSaleRecordRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerEmailLogRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerEmailLogRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerEmailLogRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerEmailLogRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerEmailLogRequest');
  RemClassRegistry.RegisterXSClass(GetStoreRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreRequest');
  RemClassRegistry.RegisterXSClass(GetSellerEventsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerEventsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerEventsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsRequest');
  RemClassRegistry.RegisterXSClass(RespondToFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(RespondToFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToFeedbackRequest, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackRequest');
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddSecondChanceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemRequest');
  RemClassRegistry.RegisterXSClass(AddItemsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemsRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddItemsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemsRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddItemsRequest');
  RemClassRegistry.RegisterXSClass(AddDisputeResponseRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponseRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseRequest');
  RemClassRegistry.RegisterXSClass(DisableUnpaidItemAssistanceRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DisableUnpaidItemAssistanceRequestType');
  RemClassRegistry.RegisterSerializeOptions(DisableUnpaidItemAssistanceRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DisableUnpaidItemAssistanceRequest, 'urn:ebay:apis:eBLBaseComponents', 'DisableUnpaidItemAssistanceRequest');
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationsUsageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageRequest');
  RemClassRegistry.RegisterXSClass(GetOrdersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrdersRequestType), 'OrderIDArray', '[ArrayItemName="OrderID"]');
  RemClassRegistry.RegisterSerializeOptions(GetOrdersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrdersRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersRequest');
  RemClassRegistry.RegisterXSClass(GetUserDisputesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserDisputesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserDisputesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesRequest');
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReportStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusRequest');
  RemClassRegistry.RegisterXSClass(AddItemFromSellingManagerTemplateRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemFromSellingManagerTemplateRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddItemFromSellingManagerTemplateRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemFromSellingManagerTemplateRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddItemFromSellingManagerTemplateRequest');
  RemClassRegistry.RegisterXSClass(AddDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerInventoryRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryFolderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryFolderRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerInventoryFolderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerInventoryFolderRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerInventoryFolderRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerItemAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerItemAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerItemAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerItemAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerItemAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerAlertsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerAlertsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerAlertsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerAlertsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerAlertsRequest');
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCustomPageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageRequest');
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCategoryUpdateStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplateAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplateAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerTemplateAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplateAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplateAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerSoldListingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSoldListingsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerSoldListingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerSoldListingsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerSoldListingsRequest');
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplatesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplatesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellingManagerTemplatesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellingManagerTemplatesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellingManagerTemplatesRequest');
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetShippingDiscountProfilesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesRequest');
  RemClassRegistry.RegisterXSClass(GetSessionIDRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSessionIDRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSessionIDRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSessionIDRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSessionIDRequest');
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesRequest');
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBaySellingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingRequest');
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayRemindersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersRequest');
  RemClassRegistry.RegisterXSClass(GetSellerDashboardRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerDashboardRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerDashboardRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerDashboardRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerDashboardRequest');
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionalSaleDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsRequest');
  RemClassRegistry.RegisterXSClass(RelistItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistItemRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(RelistItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemRequest');
  RemClassRegistry.RegisterXSClass(RelistFixedPriceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RelistFixedPriceItemRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RelistFixedPriceItemRequestType), 'DeletedField', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterSerializeOptions(RelistFixedPriceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistFixedPriceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'RelistFixedPriceItemRequest');
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeRequestType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayOfficialTimeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeRequest, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeRequest');
  RemClassRegistry.RegisterXSClass(MoveSellingManagerInventoryFolderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'MoveSellingManagerInventoryFolderRequestType');
  RemClassRegistry.RegisterSerializeOptions(MoveSellingManagerInventoryFolderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(MoveSellingManagerInventoryFolderRequest, 'urn:ebay:apis:eBLBaseComponents', 'MoveSellingManagerInventoryFolderRequest');
  RemClassRegistry.RegisterXSClass(GetUserRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetUserRequest');
  RemClassRegistry.RegisterXSClass(GetTokenStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetTokenStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetTokenStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTokenStatusRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetTokenStatusRequest');
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserContactDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsRequest');
  RemClassRegistry.RegisterXSClass(GetStoreOptionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreOptionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreOptionsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsRequest');
  RemClassRegistry.RegisterXSClass(GetStorePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStorePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStorePreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesRequest');
  RemClassRegistry.RegisterXSClass(GetTaxTableRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetTaxTableRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTaxTableRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableRequest');
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSuggestedCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesRequest');
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReasonCodeDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsRequest');
  RemClassRegistry.RegisterXSClass(GeteBayDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayDetailsRequest, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsRequest');
  RemClassRegistry.RegisterXSClass(GetUserPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserPreferencesRequest, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesRequest');
  RemClassRegistry.RegisterXSClass(ConfirmIdentityRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ConfirmIdentityRequestType');
  RemClassRegistry.RegisterSerializeOptions(ConfirmIdentityRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ConfirmIdentityRequest, 'urn:ebay:apis:eBLBaseComponents', 'ConfirmIdentityRequest');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerInventoryFolderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerInventoryFolderRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerInventoryFolderRequestType, [xoLiteralParam]);
end;

procedure RegisterTypeProc15;
begin
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerInventoryFolderRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerInventoryFolderRequest');
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeleteMyMessagesRequestType), 'AlertIDs', '[ArrayItemName="AlertID"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeleteMyMessagesRequestType), 'MessageIDs', '[ArrayItemName="MessageID"]');
  RemClassRegistry.RegisterSerializeOptions(DeleteMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesRequest');
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddToItemDescriptionRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionRequest');
  RemClassRegistry.RegisterXSClass(AddSellingManagerTemplateRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerTemplateRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddSellingManagerTemplateRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSellingManagerTemplateRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddSellingManagerTemplateRequest');
  RemClassRegistry.RegisterXSClass(CompleteSaleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleRequestType');
  RemClassRegistry.RegisterSerializeOptions(CompleteSaleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(CompleteSaleRequest, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleRequest');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerItemAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerItemAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerItemAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerItemAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerItemAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(EndItemsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemsRequestType');
  RemClassRegistry.RegisterSerializeOptions(EndItemsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemsRequest, 'urn:ebay:apis:eBLBaseComponents', 'EndItemsRequest');
  RemClassRegistry.RegisterXSClass(EndItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(EndItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'EndItemRequest');
  RemClassRegistry.RegisterXSClass(FetchTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(FetchTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(FetchTokenRequest, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenRequest');
  RemClassRegistry.RegisterXSClass(ExtendSiteHostedPicturesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendSiteHostedPicturesRequestType');
  RemClassRegistry.RegisterSerializeOptions(ExtendSiteHostedPicturesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ExtendSiteHostedPicturesRequest, 'urn:ebay:apis:eBLBaseComponents', 'ExtendSiteHostedPicturesRequest');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerProductRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerProductRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerProductRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerProductRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerProductRequest');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerTemplateRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateRequest');
  RemClassRegistry.RegisterXSClass(EndFixedPriceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'EndFixedPriceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(EndFixedPriceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndFixedPriceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'EndFixedPriceItemRequest');
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateAutomationRuleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateAutomationRuleRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteSellingManagerTemplateAutomationRuleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteSellingManagerTemplateAutomationRuleRequest, 'urn:ebay:apis:eBLBaseComponents', 'DeleteSellingManagerTemplateAutomationRuleRequest');
  RemClassRegistry.RegisterXSClass(AddFixedPriceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddFixedPriceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddFixedPriceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddFixedPriceItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddFixedPriceItemRequest');
  RemClassRegistry.RegisterXSClass(AddItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemRequest, 'urn:ebay:apis:eBLBaseComponents', 'AddItemRequest');
  RemClassRegistry.RegisterXSClass(BotBlockRequestType, 'urn:ebay:apis:eBLBaseComponents', 'BotBlockRequestType');
  RemClassRegistry.RegisterXSClass(BotBlockResponseType, 'urn:ebay:apis:eBLBaseComponents', 'BotBlockResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeMessageSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeMessageSourceCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeResolutionRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionRecordTypeCodeType');
  RemClassRegistry.RegisterXSClass(DisputeResolutionType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionType');
  RemClassRegistry.RegisterXSClass(CustomSecurityHeaderType, 'urn:ebay:apis:eBLBaseComponents', 'CustomSecurityHeaderType');
  RemClassRegistry.RegisterXSClass(RequesterCredentials, 'urn:ebay:apis:eBLBaseComponents', 'RequesterCredentials');
  RemClassRegistry.RegisterXSClass(UserIdPasswordType, 'urn:ebay:apis:eBLBaseComponents', 'UserIdPasswordType');
  RemClassRegistry.RegisterXSClass(DisputeMessageType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeMessageType');
  RemClassRegistry.RegisterXSClass(AdFormatEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'AdFormatEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeArrayType');
  RemClassRegistry.RegisterXSClass(AttributeType, 'urn:ebay:apis:eBLBaseComponents', 'AttributeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EnableCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EnableCodeType');
  RemClassRegistry.RegisterXSClass(DeliveryURLDetailType, 'urn:ebay:apis:eBLBaseComponents', 'DeliveryURLDetailType');
  RemClassRegistry.RegisterXSClass(NotificationEnableType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationEnableType');
  RemClassRegistry.RegisterXSClass(ProStoresDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ProStoresDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationPayloadTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationPayloadTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DeviceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DeviceTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceTypeCodeType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterXSClass(ApplicationDeliveryPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'ApplicationDeliveryPreferencesType');
  RemClassRegistry.RegisterXSClass(AttributeConversionEnabledFeatureDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'AttributeConversionEnabledFeatureDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AverageRatingDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AverageRatingDetailArrayType');
  RemClassRegistry.RegisterXSClass(AverageRatingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'AverageRatingSummaryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AverageRatingSummaryType), 'AverageRatingDetails', '[ArrayItemName="AverageRatingDetails"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackRatingDetailCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRatingDetailCodeType');
  RemClassRegistry.RegisterXSClass(AverageRatingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'AverageRatingDetailsType');
  RemClassRegistry.RegisterXSClass(ItemRatingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemRatingDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeSetArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeSetArrayType');
  RemClassRegistry.RegisterXSClass(ItemType, 'urn:ebay:apis:eBLBaseComponents', 'ItemType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'AttributeSetArray', '[ArrayItemName="AttributeSet"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'AttributeArray', '[ArrayItemName="Attribute"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'LookupAttributeArray', '[ArrayItemName="LookupAttribute"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'ShipToLocations', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'ItemSpecifics', '[ArrayItemName="NameValueList"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'CrossBorderTrade', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'PaymentAllowedSite', '[ArrayItemName="SupportedSite"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemType), 'ShippingServiceCostOverrideList', '[ArrayItemName="ShippingServiceCostOverride"]');
  RemClassRegistry.RegisterXSClass(AttributeSetType, 'urn:ebay:apis:eBLBaseComponents', 'AttributeSetType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AttributeSetType), 'Attribute', '[ArrayItemName="Attribute"]');
  RemClassRegistry.RegisterXSClass(ValType, 'urn:ebay:apis:eBLBaseComponents', 'ValType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ValType), 'SuggestedValueLiteral', '[ArrayItemName="ExcludeShipToLocation"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressAttributeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressAttributeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressOwnerCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressOwnerCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AdFormatLeadStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AdFormatLeadStatusCodeType');
  RemClassRegistry.RegisterXSClass(AdFormatLeadType, 'urn:ebay:apis:eBLBaseComponents', 'AdFormatLeadType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AdFormatLeadType), 'MemberMessage', '[ArrayItemName="MemberMessageExchange"]');
  RemClassRegistry.RegisterXSClass(AdditionalCompatibilityEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'AdditionalCompatibilityEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(AddressAttributeType, 'urn:ebay:apis:eBLBaseComponents', 'AddressAttributeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressAttributeType), 'type_', '[ExtName="type"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressRecordTypeCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AnnouncementMessageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AnnouncementMessageCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessRuleCurrentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccessRuleCurrentStatusCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessRuleStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccessRuleStatusCodeType');
  RemClassRegistry.RegisterXSClass(ApiAccessRuleType, 'urn:ebay:apis:eBLBaseComponents', 'ApiAccessRuleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressUsageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressUsageCodeType');
  RemClassRegistry.RegisterXSClass(AddressType, 'urn:ebay:apis:eBLBaseComponents', 'AddressType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressType), 'Name_', '[ExtName="Name"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ApplicationDeviceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ApplicationDeviceTypeCodeType');
  RemClassRegistry.RegisterXSClass(AffiliateTrackingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'AffiliateTrackingDetailsType');
  RemClassRegistry.RegisterXSClass(AnnouncementMessageType, 'urn:ebay:apis:eBLBaseComponents', 'AnnouncementMessageType');
end;

procedure RegisterTypeProc16;
begin
end;

initialization
  { eBayAPIInterface }
  InvRegistry.RegisterInterface(TypeInfo(eBayAPIInterface), 'urn:ebay:apis:eBLBaseComponents', 'UTF-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(eBayAPIInterface), '');
  InvRegistry.RegisterInvokeOptions(TypeInfo(eBayAPIInterface), ioDocument);
  InvRegistry.RegisterInvokeOptions(TypeInfo(eBayAPIInterface), ioLiteral);
  InvRegistry.RegisterHeaderClass(TypeInfo(eBayAPIInterface), RequesterCredentials, 'RequesterCredentials', 'urn:ebay:apis:eBLBaseComponents');
  RegisterTypeProc0;
  RegisterTypeProc1;
  RegisterTypeProc2;
  RegisterTypeProc3;
  RegisterTypeProc4;
  RegisterTypeProc5;
  RegisterTypeProc6;
  RegisterTypeProc7;
  RegisterTypeProc8;
  RegisterTypeProc9;
  RegisterTypeProc10;
  RegisterTypeProc11;
  RegisterTypeProc12;
  RegisterTypeProc13;
  RegisterTypeProc14;
  RegisterTypeProc15;

end.