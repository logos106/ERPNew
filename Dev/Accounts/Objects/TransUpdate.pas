unit TransUpdate;
{ Date     Version  Who  What
 -------- -------- ---  ------------------------------------------------------
 19/05/05  1.00.01 BJ  call getTransUpdateSQLs to get the SQLs for trans update
                             Params :
                                    objTablename :name of the table - if blank will return all objects
                                    IDs :IDs of the records to be processed. If blank all records will be processed
                                        IDS can be mucltiple separated with comas
}
interface

uses classes;

    function   getTransUpdateSQLs(objTablename :String=''; IDs :String='') :TStringList;
implementation

uses AppEnvironment, sysutils, FastFuncs, tcDataUtils, tcConst;

function getTransUpdateSQLs(objTablename :String=''; IDs :String='') :TStringList;
var
    TableName :String;
    SummarisedTransDate :TDatetime ;
    INSERT_INTO_String :String;
    INSERT_INTO_StringFixedAssets :String;
    fsFilter :String;

    Procedure Addtranstype(transtype , IDFieldName :String);
    begin
        transtype :='TT.Type like ''' +transtype + '''';
        transtype := '(' + Fastfuncs.AnsiStringReplace(transtype  , ',' , ''' OR TT.Type = ''' , [rfIgnoreCase,rfReplaceAll]) + ')';
        if IDs <> '' then transtype := '(' + transtype  + ' AND  ( TT.' + IDFieldName + ' in (' + IDs+')))';
        if transtype <> '' then begin 
            if fsFilter <> '' then fsFilter := fsFilter + ' OR ' ;
            fsFilter := fsFilter + ' ( ' + transtype + ') ';
        end;
    end;
    Procedure checkTrans;
    var
        types :String;
    begin
        fsFilter := '';
	    if (Objtablename = '') or (SameText(objTablename , 'tblSales'))         then begin
            types := 'Invoice,Refund,Cash Sale' ;
            If AppEnv.CompanyPrefs.IncludeUnInvoicedSOtoGL then types := types + ',UnInvoiced SO';
            Addtranstype(types , 'SaleID');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            types := 'PO,Bill,Cheque,Credit';
            If AppEnv.CompanyPrefs.IncludeUnInvoicedSOtoGL then types := types + ',UnInvoiced PO';
            Addtranstype(types , 'PurchaseOrderID');
        end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblgroupbuild'))    then begin
            types := 'Group Build,Group Build Lines';
            Addtranstype(types , 'SaleID');
	    end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblvargroupbuild')) then begin
            types := 'Variable Group Build,Variable Group Build Lines';
            Addtranstype(types , 'SaleID');
	    end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblprepayments'))   then begin
            types := 'Customer Prepayment,Supplier Prepayment';
            Addtranstype(types , 'PrepaymentID');
	    end;

	    if (Objtablename = '') or (SameText(objTablename , 'tblbankdeposit'))   then begin
            types := 'Deposit Entry,Bank Deposit';
            Addtranstype(types , 'PaymentID');
	    end;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocktransfer')) then begin
            types := 'Stock Transfer';
            Addtranstype(types , 'SaleID');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblstockadjust'))   then begin
            types := 'Stock Adjustment';
            Addtranstype(types , 'SaleID');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocklastcostadjustments'))  then  begin
            types := 'Last Cost Asset Adjustment -%';
        end;
	    if (Objtablename = '') or (SameText(objTablename , 'tbldeposits'))      then  begin
            types := 'Customer Payment';
            Addtranstype(types , 'PaymentID');
        end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblwithdrawal'))    then  begin
            types := 'Supplier Payment';
            Addtranstype(types , 'PaymentID');
        end;

        if (Objtablename = '') or (SameText(objTablename , 'tblgeneraljournal')) then  begin
            types := 'Journal Entry';
            Addtranstype(types , 'FixedAssetID');
        end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblfixedassets'))   then  begin
            types := 'Fixed Asset%';
            Addtranstype(types , 'FixedAssetID');
        end;
	    if (Objtablename = '') or (SameText(objTablename , 'tblpays'))          then  begin
            types := 'Payroll%';
            Addtranstype(types , 'SaleID');
        end;
    end;
begin

    TableName := 'tblTrans';
    INSERT_INTO_String := 'UNLOCK TABLES; INSERT HIGH_PRIORITY INTO ' + TableName +
      ' (Date,Type,GlobalRef,' +
      'ClassID,SaleID,PurchaseOrderID,PaymentID,PrepaymentID,FixedAssetID,AccountID,ClientID,' +
      'ProductDesc,ProductName,ProductGroup,EmployeeID,Reconciled,Notes,TaxCode,TaxRate,TaxID,DebitsEx,CreditsEx,DebitsInc,CreditsInc,CASH_DebitsEx,CASH_CreditsEx,CASH_DebitsInc,CASH_CreditsInc,`Chq/Ref`) ';
    INSERT_INTO_StringFixedAssets := 'UNLOCK TABLES; INSERT HIGH_PRIORITY INTO ' + TableName +
      ' (Date,Type,GlobalRef,ClassID,SaleID,PurchaseOrderID,PaymentID,PrepaymentID,FixedAssetID,AccountID,ClientID,' +
      'ProductDesc,ProductName,ProductGroup,EmployeeID,Reconciled,Notes,TaxCode,TaxRate,TaxID,DebitsEx,CreditsEx,DebitsInc,CreditsInc,CASH_DebitsEx,CASH_CreditsEx,CASH_DebitsInc,CASH_CreditsInc,`Chq/Ref`,Active) ';
    SummarisedTransDate := AppEnv.CompanyPrefs.SummarisedTransDate;
    checkTrans;
    Result := TStringList.Create;
    With REsult do begin
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String); //14
            Add('SELECT STRAIGHT_JOIN tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSales.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('Sum(tblSalesLines.TotalLineAmountInc) as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('Sum(tblSalesLines.TotalLineAmountInc)  as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('Sum(tblSalesLines.TotalLineAmountInc) as  CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('Sum(tblSalesLines.TotalLineAmountInc) as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (tblSales.IsInvoice="T") AND tblSales.Deleted="F" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T"');
            Add('GROUP BY  tblSales.SaleID;');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.INCOMEACCNTID, ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblSalesLines.TotalLineAmount as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblSalesLines.TotalLineAmountInc as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblSalesLines.TotalLineAmount  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblSalesLines.TotalLineAmountInc  as CASH_CreditsInc,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales   ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE tblSales.IsInvoice="T" AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T" ;');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.ASSETACCNTID, ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE tblSales.IsInvoice="T" AND tblSales.IsSalesOrder="F" AND tblSales.IsQuote="F" AND tblSales.Deleted="F" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T" AND (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem");');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" asType, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.COGSACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE tblSales.IsInvoice="T" AND tblSales.IsSalesOrder="F" AND tblSales.IsQuote="F" AND tblSales.Deleted="F" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T" AND (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem");');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED)) +',' );
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('tblSalesLines.LineTax as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblSalesLines.LineTax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID =tblSales.SaleID ');
            Add('WHERE tblSales.IsInvoice="T" AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T" ');
            Add('AND tblSalesLines.LineTaxCode<>"WC";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+', ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID =  tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WEG))+' ');
            Add('WHERE (tblSales.IsInvoice="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F" ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_WET))+', ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WET))+' ');
            Add('WHERE (tblSales.IsInvoice="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F" ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WEG))+' ');
            Add('WHERE (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_WET))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WET))+' ');
            Add('WHERE (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WEG))+' ');
            Add('WHERE tblSales.IsRefund ="T" AND tblSales.IsInvoice="F" AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Invoice" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_WET))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('Name  as TaxCode, ');
            Add('Rate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('(Shipped * LinePrice) * Rate as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(Shipped * LinePrice) * Rate as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc, ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('INNER JOIN tbltaxcodes ON  tbltaxcodes.TaxCodeID = '+ FastFuncs.IntToStr(tcDataUtils.GetGLTaxCodeIDForName(tcConst.GLACCOUNT_TAX_WET))+' ');
            Add('WHERE tblSales.IsRefund ="T" AND tblSales.IsInvoice="F" AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.LineTaxCode="WC"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT STRAIGHT_JOIN tblSales.SaleDate as "Date", ');
            Add('"Refund" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSales.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0 as "DebitsEx", ');
            Add('-Sum(tblSalesLines.TotalLineAmountInc) as "CreditsEx", ');
            Add('0 as "DebitsInc", ');
            Add('-Sum(tblSalesLines.TotalLineAmountInc) as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('-Sum(tblSalesLines.TotalLineAmountInc) as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('-Sum(tblSalesLines.TotalLineAmountInc) as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSales.SaleID = tblSalesLines.SaleID ');
            Add('WHERE tblSales.IsRefund ="T" AND tblSales.Deleted="F" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('AND tblSalesLines.Invoiced="T" ');
            Add('GROUP BY tblSales.SaleID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Refund" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.ASSETACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,-tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,-tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,-tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,-tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND (tblSales.IsRefund ="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Refund" asType, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.COGSACCNTID, ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('-tblSalesLines.LineCost*tblSalesLines.Shipped as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('-tblSalesLines.LineCost*tblSalesLines.Shipped as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('-tblSalesLines.LineCost*tblSalesLines.Shipped  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('-tblSalesLines.LineCost*tblSalesLines.Shipped  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales   ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND (tblSales.IsRefund ="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Refund" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('-tblSalesLines.LineTax as "CreditsEx", ');
            Add('0.00 as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('-tblSalesLines.LineTax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales   ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE tblSales.IsRefund ="T" AND tblSales.IsInvoice="F" AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSalesLines.LineTaxCode<>"WC"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Cash Sale" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSales.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('Sum(tblSalesLines.TotalLineAmountInc) as "DebitsEx", ');
            Add('0 as "CreditsEx", ');
            Add('Sum(tblSalesLines.TotalLineAmountInc) as "DebitsInc", ');
            Add('0 as "CreditsInc",');
            Add('Sum(tblSalesLines.TotalLineAmountInc)  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('Sum(tblSalesLines.TotalLineAmountInc)  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales  ');
            Add('INNER JOIN tblSalesLines ON  tblSales.SaleID = tblSalesLines.SaleID ');
            Add('WHERE (tblSales.IsCashSale="T") ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSalesLines.Invoiced="T" AND tblSales.Deleted="F" ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY  tblSales.SaleID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Cash Sale" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.INCOMEACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblSalesLines.TotalLineAmount as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblSalesLines.TotalLineAmountInc as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblSalesLines.TotalLineAmount  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblSalesLines.TotalLineAmountInc  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);  //33
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Cash Sale" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.ASSETACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00) as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('If(tblSalesLines.LineCost*tblSalesLines.Shipped<>0.00 ,tblSalesLines.LineCost*tblSalesLines.Shipped,0.00)  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Cash Sale" asType, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSalesLines.COGSACCNTID, ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblSalesLines.LineCost*tblSalesLines.Shipped as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tblSalesLines.LineCost*tblSalesLines.Shipped as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblSalesLines.LineCost*tblSalesLines.Shipped  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblSalesLines.LineCost*tblSalesLines.Shipped  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales   ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblSales.SaleDate as "Date", ');
            Add('"Cash Sale" as Type, ');
            Add('tblSales.GlobalRef as "Global #", ');
            Add('tblSales.ClassID, ');
            Add('tblSales.SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "CreditsEx", ');
            Add('tblSalesLines.LineTax as "DebitsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblSalesLines.LineTax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblSales ');
            Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
            Add('WHERE (tblSales.IsCashSale="T") AND tblSalesLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
            Add('AND tblSales.IsSalesOrder="F" And tblSales.IsQuote="F" AND tblSales.Deleted="F"  ');
            Add(' AND tblSalesLines.LineTaxCode<>"WC"  ');
            Add(' AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            If AppEnv.CompanyPrefs.IncludeUnInvoicedSOtoGL then Begin
                Add(INSERT_INTO_String);
                Add('SELECT STRAIGHT_JOIN tblSales.SaleDate as "Date", ');
                Add('"UnInvoiced SO" as Type, ');
                Add('tblSales.GlobalRef as "Global #", ');
                Add('tblSales.ClassID, ');
                Add('tblSales.SaleID, ');
                Add('0 as PurchaseOrderID, ');
                Add('0 as PaymentID, ');
                Add('0 as PrepaymentID, ');
                Add('0 as FixedAssetID, ');
                Add(FastFuncs.IntToStr(AppEnv.CompanyPrefs.UnInvoicedSOAccount) + ',');
                Add('ClientID as ClientID, ');
                Add('""  as ProductDesc, ');
                Add('""  as ProductName, ');
                Add('""  as ProductGroup, ');
                Add('EmployeeID  as EmployeeID, ');
                Add('"F" as Reconciled, ');
                Add('SUBSTRING(Comments,1,255) as Notes, ');
                Add('""  as TaxCode, ');
                Add('0.00  as TaxRate, ');
                Add('0  as TaxID, ');
                If (AppEnv.CompanyPrefs.UnInvoicedSOType = 0) then Begin //Income
                  Add('Sum(tblSalesLines.TotalLineAmountInc) as "DebitsEx", ');
                  Add('0.00 as "CreditsEx", ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc)  as "DebitsInc", ');
                  Add('0.00 as "CreditsInc", ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc) as  CASH_DebitsEx, ');
                  Add('0.00  as CASH_CreditsEx, ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc) as CASH_DebitsInc, ');
                  Add('0.00  as CASH_CreditsInc, ');
                end else If (AppEnv.CompanyPrefs.UnInvoicedSOType = 1) then Begin //Cost
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as "DebitsEx", ');
                  Add('0.00 as "CreditsEx", ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as "DebitsInc", ');
                  Add('0.00 as "CreditsInc", ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as CASH_DebitsEx, ');
                  Add('0.00 as CASH_CreditsEx, ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as CASH_DebitsInc, ');
                  Add('0.00 as CASH_CreditsInc, ');
                end;
                Add('""  as `Chq/Ref` ');
                Add('FROM tblSales ');
                Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
                Add('WHERE tblSales.IsSalesOrder="T" AND tblSales.Deleted="F" and `Converted` = "F" ');
                if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
                Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
                Add('AND tblSalesLines.Invoiced="T" ');
                Add('GROUP BY  tblSales.SaleID; ');
            end;
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblSales')) then begin
            If AppEnv.CompanyPrefs.IncludeUnInvoicedSOtoGL then Begin
                Add(INSERT_INTO_String);
                Add('SELECT STRAIGHT_JOIN tblSales.SaleDate as "Date", ');
                Add('"UnInvoiced SO" as Type, ');
                Add('tblSales.GlobalRef as "Global #", ');
                Add('tblSales.ClassID, ');
                Add('tblSales.SaleID, ');
                Add('0 as PurchaseOrderID, ');
                Add('0 as PaymentID, ');
                Add('0 as PrepaymentID, ');
                Add('0 as FixedAssetID, ');
                Add(FastFuncs.IntToStr(tcDataUtils.getAccountID('UnInvoiced SO'))+',');
                Add('ClientID as ClientID, ');
                Add('""  as ProductDesc, ');
                Add('""  as ProductName, ');
                Add('""  as ProductGroup, ');
                Add('EmployeeID  as EmployeeID, ');
                Add('"F" as Reconciled, ');
                Add('SUBSTRING(Comments,1,255) as Notes, ');
                Add('""  as TaxCode, ');
                Add('0.00  as TaxRate, ');
                Add('0  as TaxID, ');
                If (AppEnv.CompanyPrefs.UnInvoicedSOType = 0) then Begin //Income
                  Add('0.00 as "DebitsEx", ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc) as "CreditsEx", ');
                  Add('0.00  as "DebitsInc", ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc) as "CreditsInc", ');
                  Add('0.00 as  CASH_DebitsEx, ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc)  as CASH_CreditsEx, ');
                  Add('0.00 as CASH_DebitsInc, ');
                  Add('Sum(tblSalesLines.TotalLineAmountInc)  as CASH_CreditsInc, ');
                end else If (AppEnv.CompanyPrefs.UnInvoicedSOType = 1) then Begin //Cost
                  Add('0.00 as "DebitsEx", ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as "CreditsEx", ');
                  Add('0.00 as "DebitsInc", ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as "CreditsInc", ');
                  Add('0.00 as CASH_DebitsEx, ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as CASH_CreditsEx, ');
                  Add('0.00 as CASH_DebitsInc, ');
                  Add('Sum(tblSalesLines.LineCost*tblSalesLines.Shipped) as CASH_CreditsInc, ');
                end;
                Add('""  as `Chq/Ref` ');
                Add('FROM tblSales ');
                Add('INNER JOIN tblSalesLines ON tblSalesLines.SaleID = tblSales.SaleID ');
                Add('WHERE tblSales.IsSalesOrder="T" AND tblSales.Deleted="F" and `Converted` = "F" ');
                if IDs <> '' then Add(' AND  tblSales.SaleID in (' + IDs+')');
                Add('AND tblSales.SaleDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
                Add('AND tblSalesLines.Invoiced="T" ');
                Add('GROUP BY  tblSales.SaleID; ');
            end;
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseOrders.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('tblPurchaseLines.Product_Description as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0 as "DebitsEx", ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "CreditsEx", ');
            Add('0 as "DebitsInc", ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc)  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as CASH_CreditsInc,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And (tblPurchaseOrders.IsPO="T") ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND tblPurchaseOrders.Deleted="F" AND (Length(tblPurchaseOrders.InvoiceNumber))>0  ');
            Add('AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd',SummarisedTransDate)+'" ');
            Add('GROUP BY  tblPurchaseLines.ClassID,tblPurchaseOrders.PurchaseOrderID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseLines.COGSACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.TotalLineAmount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tblPurchaseLines.TotalLineAmount as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.TotalLineAmount  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblPurchaseLines.TotalLineAmount  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseLines.PurchaseOrderID = tblPurchaseOrders.PurchaseOrderID ');
            Add('WHERE PARTTYPE = "NONINV" AND tblPurchaseLines.Invoiced="T" And tblPurchaseOrders.IsPO="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND If((IsPO="T"),Length(tblPurchaseOrders.InvoiceNumber),1)>0  ');
            Add(' AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseLines.COGSACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.COGSTotalLineAmount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tblPurchaseLines.COGSTotalLineAmount as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.COGSTotalLineAmount  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblPurchaseLines.COGSTotalLineAmount  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON tblPurchaseLines.PurchaseOrderID = tblPurchaseOrders.PurchaseOrderID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND tblPurchaseLines.Invoiced="T" And (tblPurchaseOrders.IsPO="T") AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND If((IsPO="T"),Length(tblPurchaseOrders.InvoiceNumber),1)>0 And (tblPurchaseLines.COGSTotalLineAmountInc<>0)  ');
            Add(' AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseLines.INCOMEACCNTID , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.TotalLineAmount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tblPurchaseLines.TotalLineAmountInc as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblPurchaseLines.TotalLineAmount  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblPurchaseLines.TotalLineAmountInc  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON tblPurchaseLines.PurchaseOrderID = tblPurchaseOrders.PurchaseOrderID ');
            Add('WHERE (PARTTYPE = "OTHER") AND tblPurchaseLines.Invoiced="T" And tblPurchaseOrders.IsPO="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND If((IsPO="T"),Length(tblPurchaseOrders.InvoiceNumber),1)>0  ');
            Add(' AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseLines.ASSETACCNTID  , ');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('(tblPurchaseLines.TotalLineAmount-tblPurchaseLines.COGSTotalLineAmount) as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('(tblPurchaseLines.TotalLineAmountInc-tblPurchaseLines.COGSTotalLineAmount) as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('(tblPurchaseLines.TotalLineAmount-tblPurchaseLines.COGSTotalLineAmount)  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('(tblPurchaseLines.TotalLineAmountInc-tblPurchaseLines.COGSTotalLineAmount)  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND tblPurchaseLines.Invoiced="T" And tblPurchaseOrders.IsPO="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND If((IsPO="T"),Length(tblPurchaseOrders.InvoiceNumber),1)>0  ');
            Add(' AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.InvoiceDate as "Date", ');
            Add('"PO" as Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_PAID))+',');
            Add('ClientID as ClientID, ');
            Add('Product_Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.Linetax as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.Linetax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And (tblPurchaseOrders.IsPO="T") AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND If((IsPO="T"),Length(tblPurchaseOrders.InvoiceNumber),1)>0  ');
            Add(' AND tblPurchaseOrders.InvoiceDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Bill" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseOrders.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('tblPurchaseLines.Product_Description as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0 as "DebitsEx", ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "CreditsEx", ');
            Add('0 as "DebitsInc", ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND IsBill="T" AND tblPurchaseOrders.Deleted="F" ');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY  tblPurchaseLines.ClassID,tblPurchaseOrders.PurchaseOrderID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date",  ');
            Add('"Bill" AS Type,  ');
            Add('tblPurchaseOrders.GlobalRef as "Global #",  ');
            Add('tblPurchaseLines.ClassID,  ');
            Add('0 as SaleID,  ');
            Add('tblPurchaseOrders.PurchaseOrderID,  ');
            Add('0 as PaymentID,  ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblchartofaccounts.AccountID as AccountID,  ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Product_Description as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.LineCost as "DebitsEx",  ');
            Add('0.00 as "CreditsEx",  ');
            Add('tblPurchaseLines.LineCostInc as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.LineCost  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblPurchaseLines.LineCostInc  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON tblPurchaseLines.PurchaseOrderID = tblPurchaseOrders.PurchaseOrderID  ');
            Add('INNER JOIN tblchartofaccounts ON  tblchartofaccounts.AccountName = tblPurchaseLines.AccountName ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And IsBill="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Bill" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_PAID))+',');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.LineTax as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.LineTax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And (IsBill="T") AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd',SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Credit" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseOrders.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "DebitsEx", ');
            Add('0 as "CreditsEx", ');
            Add('Sum(tblPurchaseLines.TotalLineAmountInc) as "DebitsInc", ');
            Add('0 as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add('AND IsCredit="T" AND tblPurchaseOrders.Deleted="F" ');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY  tblPurchaseLines.ClassID,tblPurchaseOrders.PurchaseOrderID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date",  ');
            Add('"Credit" AS Type,  ');
            Add('tblPurchaseOrders.GlobalRef as "Global #",  ');
            Add('tblPurchaseLines.ClassID,  ');
            Add('0 as SaleID,  ');
            Add('tblPurchaseOrders.PurchaseOrderID,  ');
            Add('0 as PaymentID,  ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblchartofaccounts.AccountID as AccountID,  ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Product_Description as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx",  ');
            Add('tblPurchaseLines.LineCost as "CreditsEx",  ');
            Add('0.00 as "DebitsInc", ');
            Add('tblPurchaseLines.LineCostInc as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblPurchaseLines.LineCost  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblPurchaseLines.LineCostInc  as CASH_CreditsInc ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines  ON tblPurchaseLines.PurchaseOrderID = tblPurchaseOrders.PurchaseOrderID ');
            Add('INNER JOIN tblchartofaccounts ON tblchartofaccounts.AccountName = tblPurchaseLines.AccountName ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And IsCredit="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd',SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Credit" as Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_PAID))+',');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0  as "DebitsEx", ');
            Add('tblPurchaseLines.Linetax as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblPurchaseLines.Linetax  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And (tblPurchaseOrders.IsCredit="T") AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            If AppEnv.CompanyPrefs.IncludeUnInvoicedPOtoGL then Begin
                Add(INSERT_INTO_String);
                Add('SELECT tblPurchaseLines.ReceivedDate as "Date", ');
                Add('"UnInvoiced PO" AS Type, ');
                Add('tblPurchaseOrders.GlobalRef as "Global #", ');
                Add('tblPurchaseLines.ClassID, ');
                Add('0 as SaleID, ');
                Add('tblPurchaseOrders.PurchaseOrderID, ');
                Add('0 as PaymentID, ');
                Add('0 as PrepaymentID, ');
                Add('0 as FixedAssetID, ');
                Add('tblPurchaseLines.ASSETACCNTID, ');
                Add('ClientID as ClientID, ');
                Add('Product_Description  as ProductDesc, ');
                Add('ProductName  as ProductName, ');
                Add('ProductGroup  as ProductGroup, ');
                Add('EmployeeID  as EmployeeID, ');
                Add('"F" as Reconciled, ');
                Add('SUBSTRING(Comments,1,255) as Notes, ');
                Add('LineTaxCode  as TaxCode, ');
                Add('LineTaxRate  as TaxRate, ');
                Add('0  as TaxID, ');
                Add('(tblPurchaseLines.TotalLineAmount) as "DebitsEx", ');
                Add('0.00 as "CreditsEx", ');
                Add('(tblPurchaseLines.TotalLineAmount) as "DebitsInc", ');
                Add('0.00 as "CreditsInc", ');
                Add('(tblPurchaseLines.TotalLineAmount)  as CASH_DebitsEx, ');
                Add('0.00  as CASH_CreditsEx, ');
                Add('(tblPurchaseLines.TotalLineAmount)  as CASH_DebitsInc, ');
                Add('0.00  as CASH_CreditsInc ,  ');
                Add('""  as `Chq/Ref` ');
                Add('FROM tblPurchaseOrders  ');
                Add('INNER JOIN tblPurchaseLines ON tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
                Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND tblPurchaseLines.Invoiced="T" And tblPurchaseOrders.IsPO="T" AND tblPurchaseOrders.Deleted="F"  ');
                if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
                Add('AND (Length(tblPurchaseOrders.InvoiceNumber)=0 OR IsNull(tblPurchaseOrders.InvoiceNumber))  ');
                Add(' AND tblPurchaseLines.ReceivedDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
            end;
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            If AppEnv.CompanyPrefs.IncludeUnInvoicedPOtoGL then Begin
                Add(INSERT_INTO_String);
                Add('SELECT tblPurchaseLines.ReceivedDate as "Date", ');
                Add('"UnInvoiced PO" AS Type, ');
                Add('tblPurchaseOrders.GlobalRef as "Global #", ');
                Add('tblPurchaseLines.ClassID, ');
                Add('0 as SaleID, ');
                Add('tblPurchaseOrders.PurchaseOrderID, ');
                Add('0 as PaymentID, ');
                Add('0 as PrepaymentID, ');
                Add('0 as FixedAssetID, ');
                Add(FastFuncs.IntToStr(AppEnv.CompanyPrefs.UnInvoicedPOAccount) + ',');
                Add('ClientID as ClientID, ');
                Add('Product_Description  as ProductDesc, ');
                Add('ProductName  as ProductName, ');
                Add('ProductGroup  as ProductGroup, ');
                Add('EmployeeID  as EmployeeID, ');
                Add('"F" as Reconciled, ');
                Add('SUBSTRING(Comments,1,255) as Notes, ');
                Add('LineTaxCode  as TaxCode, ');
                Add('LineTaxRate  as TaxRate, ');
                Add('0  as TaxID, ');
                Add('0.00 as "DebitsEx", ');
                Add('(tblPurchaseLines.TotalLineAmount) as "CreditsEx", ');
                Add('0.00 as "DebitsInc", ');
                Add('(tblPurchaseLines.TotalLineAmount) as "CreditsInc", ');
                Add('0.00  as CASH_DebitsEx, ');
                Add('(tblPurchaseLines.TotalLineAmount)  as CASH_CreditsEx, ');
                Add('0.00  as CASH_DebitsInc, ');
                Add('(tblPurchaseLines.TotalLineAmount)  as CASH_CreditsInc ,  ');
                Add('""  as `Chq/Ref` ');
                Add('FROM tblPurchaseOrders  ');
                Add('INNER JOIN tblPurchaseLines ON tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
                Add('WHERE (PARTTYPE = "INV" OR PARTTYPE = "GRP" OR PARTTYPE = "Assem") AND tblPurchaseLines.Invoiced="T" And tblPurchaseOrders.IsPO="T" AND tblPurchaseOrders.Deleted="F"  ');
                if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
                Add('AND (Length(tblPurchaseOrders.InvoiceNumber)=0 OR IsNull(tblPurchaseOrders.InvoiceNumber))  ');
                Add(' AND tblPurchaseLines.ReceivedDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
            end;
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Cheque" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblPurchaseOrders.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblPurchaseOrders.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('""  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblPurchaseLines.TotalLineAmountInc as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblPurchaseLines.TotalLineAmountInc as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblPurchaseLines.TotalLineAmountInc  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblPurchaseLines.TotalLineAmountInc  as CASH_CreditsInc  ,  ');
            Add('InvoiceNumber  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders  ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE IsCheque="T" AND tblPurchaseOrders.Deleted="F"   ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Cheque" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblchartofaccounts.AccountID, ');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblPurchaseOrders.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.TotalLineAmount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tblPurchaseLines.TotalLineAmountInc as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblPurchaseLines.TotalLineAmount  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblPurchaseLines.TotalLineAmountInc  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('InvoiceNumber  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('INNER JOIN tblchartofaccounts ON  tblPurchaseLines.AccountName = tblchartofaccounts.AccountName  ');
            Add('WHERE IsCheque="T" AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpurchaseorders')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblPurchaseOrders.OrderDate as "Date", ');
            Add('"Cheque" AS Type, ');
            Add('tblPurchaseOrders.GlobalRef as "Global #", ');
            Add('tblPurchaseLines.ClassID, ');
            Add('0 as SaleID, ');
            Add('tblPurchaseOrders.PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_PAID))+',');
            Add('ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('LineTaxCode  as TaxCode, ');
            Add('LineTaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblPurchaseLines.LineTax as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tblPurchaseLines.LineTax  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblPurchaseOrders ');
            Add('INNER JOIN tblPurchaseLines ON  tblPurchaseOrders.PurchaseOrderID = tblPurchaseLines.PurchaseOrderID ');
            Add('WHERE tblPurchaseLines.Invoiced="T" And (IsCheque="T") AND tblPurchaseOrders.Deleted="F"  ');
            if IDs <> '' then Add(' AND  tblPurchaseOrders.PurchaseOrderID in (' + IDs+')');
            Add(' AND tblPurchaseOrders.OrderDate >=  "' + FormatDateTime('yyyy-mm-dd',SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocktransfer')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblstocktransfer.DateTransferred as "Date", ');
            Add('"Stock Transfer" as Type, ');
            Add('tblstocktransfer.GlobalRef as "Global #", ');
            Add('tblstocktransfer.TransferFromID, ');
            Add('tblstocktransfer.TransferID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblstocktransferlines.AccountID, ');
            Add('0 as ClientID, ');
            Add('PartDesc  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('tblstocktransfer.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(tblstocktransfer.Notes,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as DebitsEx, ');
            Add('(TransferQty*AssetValue) as CreditsEx, ');
            Add('0.00 as DebitsInc, ');
            Add('(TransferQty*AssetValue) as CreditsInc, ');
            Add('0.00  as CASH_DebitsEx, ');
            Add('(TransferQty*AssetValue)  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('(TransferQty*AssetValue)  as CASH_CreditsInc  , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstocktransfer ');
            Add('INNER JOIN tblstocktransferlines USING(TransferID) ');
            Add('INNER JOIN tblParts On tblParts.PartsID = tblstocktransferlines.PartsID ');
            Add('WHERE tblstocktransfer.Deleted<>"T" AND tblstocktransfer.DateTransferred >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            if IDs <> '' then Add(' AND  tblstocktransfer.TransferID in (' + IDs+')');
            Add('GROUP BY tblstocktransfer.TransferID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocktransfer')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblstocktransfer.DateTransferred as "Date", ');
            Add('"Stock Transfer" as Type, ');
            Add('tblstocktransfer.GlobalRef as "Global #", ');
            Add('tblstocktransferlines.ClassIDTo, ');
            Add('tblstocktransfer.TransferID, ');
            Add('0 as PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblstocktransferlines.AccountID, ');
            Add('0 as ClientID, ');
            Add('PartDesc  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('ProductGroup  as ProductGroup, ');
            Add('tblstocktransfer.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(tblstocktransfer.Notes,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('(TransferQty*AssetValue) as DebitsEx, ');
            Add('0.00 as CreditsEx, ');
            Add('(TransferQty*AssetValue) as DebitsInc, ');
            Add('0.00 as CreditsInc, ');
            Add('(TransferQty*AssetValue)  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('(TransferQty*AssetValue)  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstocktransfer ');
            Add('INNER JOIN tblstocktransferlines USING(TransferID) ');
            Add('INNER JOIN tblParts On tblParts.PartsID = tblstocktransferlines.PartsID ');
            Add('WHERE tblstocktransfer.Deleted<>"T" ');
            if IDs <> '' then Add(' AND  tblstocktransfer.TransferID in (' + IDs+')');
            Add('AND tblstocktransfer.DateTransferred >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tblstocktransfer.TransferID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstockadjust')) then begin
            Add(INSERT_INTO_String); //60
            Add('SELECT AdjustmentDate as "Date",  ');
            Add('"Stock Adjustment" as Type,  ');
            Add('tblstockadjustment.GlobalRef as "Global #", ');
            Add('tblstockadjustment.ClassID, ');
            Add('tblstockadjustment.StockAdjustmentNo as SaleID,  ');
            Add('0 AS PurchaseOrderID,  ');
            Add('0 as PaymentID,  ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblstockadjustment.AccountID,  ');
            Add('0 as ClientID, ');
            Add('tblstockadjustment.Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Notes,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx",  ');
            Add('Value as  "CreditsEx",  ');
            Add('0.00 as "DebitsInc",  ');
            Add('Value as "CreditsInc", ');
            Add('0.00  as CASH_DebitsEx, ');
            Add('Value  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('Value as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstockadjustment  ');
            Add('INNER JOIN tblstockadjust USING(StockAdjustmentNo) ');
            Add('Where tblstockadjust.Deleted<>"T" AND Value <>0.00  ');
            if IDs <> '' then Add(' AND  tblstockadjustment.StockAdjustmentNo in (' + IDs+')');
            Add(' AND AdjustmentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstockadjust')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT AdjustmentDate as "Date",  ');
            Add('"Stock Adjustment" as Type,  ');
            Add('tblstockadjustment.GlobalRef  as "Global #", ');
            Add('tblstockadjustment.ClassID, ');
            Add('tblstockadjustment.StockAdjustmentNo as SaleID,  ');
            Add('0 AS PurchaseOrderID,  ');
            Add('0 as PaymentID,  ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblstockadjustment.AssetAccountID,  ');
            Add('0 as ClientID, ');
            Add('tblstockadjustment.Description  as ProductDesc, ');
            Add('ProductName  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Notes,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('Value as "DebitsEx",  ');
            Add('0.00 as  "CreditsEx",  ');
            Add('Value as "DebitsInc",  ');
            Add('0.00 as "CreditsInc", ');
            Add('Value  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('Value  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstockadjustment  ');
            Add('INNER JOIN tblstockadjust USING(StockAdjustmentNo) ');
            Add('Where tblstockadjust.Deleted<>"T" AND Value <>0.00  ');
            if IDs <> '' then Add(' AND  tblstockadjustment.StockAdjustmentNo in (' + IDs+')');
            Add(' AND AdjustmentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocklastcostadjustments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblstocklastcostadjustments.Date, ');
            Add('Concat_WS("","Last Cost Asset Adjustment - ",tblstocklastcostadjustments.TransType) as Type, ');
            Add('""  as "Global #", ');
            Add('tblstocklastcostadjustments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblstocklastcostadjustments.AdjValue as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblstocklastcostadjustments.AdjValue as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblstocklastcostadjustments.AdjValue as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblstocklastcostadjustments.AdjValue as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstocklastcostadjustments ');
            Add('INNER JOIN tblParts P ON P.PARTSID=tblstocklastcostadjustments.ProductID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.ASSETACCNT ');
            Add('WHERE tblstocklastcostadjustments.AdjValue<>0 ');
            if IDs <> '' then Add(' AND  tblstocklastcostadjustments.AdjID in (' + IDs+')');
            Add('AND tblstocklastcostadjustments.Date >=  "' +  FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblstocklastcostadjustments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblstocklastcostadjustments.Date, ');
            Add('Concat_WS("","Last Cost Asset Adjustment - ",tblstocklastcostadjustments.TransType) as Type, ');
            Add('""  as "Global #", ');
            Add('tblstocklastcostadjustments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblstocklastcostadjustments.AdjValue as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblstocklastcostadjustments.AdjValue as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblstocklastcostadjustments.AdjValue as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblstocklastcostadjustments.AdjValue as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblstocklastcostadjustments ');
            Add('INNER JOIN tblParts P ON P.PARTSID = tblstocklastcostadjustments.ProductID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.COGSACCNT ');
            Add('WHERE tblstocklastcostadjustments.AdjValue<>0 ');
            if IDs <> '' then Add(' AND  tblstocklastcostadjustments.AdjID in (' + IDs+')');
            Add('AND tblstocklastcostadjustments.Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        end;
        if (Objtablename = '') or (SameText(objTablename , 'tblgroupbuild')) then begin
            // Group Builds ASSET
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblgroupbuild.BuildDate, ');
            Add('"Group Build" as Type, ');
            Add('tblgroupbuild.GlobalRef  as "Global #", ');
            Add('tblgroupbuild.ClassID, ');
            Add('tblgroupbuild.BuildID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblgroupbuild.BuildQty * Sum(tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblgroupbuild.BuildQty * Sum(tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblgroupbuild.BuildQty * Sum(tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblgroupbuild.BuildQty * Sum(tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblgroupbuild ');
            Add('INNER JOIN tblgroupbuildlines on tblgroupbuildlines.GroupBuildID = tblgroupbuild.BuildID ');
            Add('INNER JOIN tblParts P ON P.PARTSID = tblgroupbuild.GroupPartID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.ASSETACCNT ');
            Add('WHERE tblgroupbuild.Deleted<>"T" ');
            if IDs <> '' then Add(' AND  tblgroupbuild.BuildID in (' + IDs+')');
            Add('AND tblgroupbuild.BuildDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('Group by tblgroupbuild.BuildID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblgroupbuild')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblgroupbuild.BuildDate, ');
            Add('"Group Build Lines" as Type, ');
            Add('tblgroupbuild.GlobalRef  as "Global #", ');
            Add('tblgroupbuild.ClassID, ');
            Add('tblgroupbuild.BuildID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblgroupbuild.BuildQty * (tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblgroupbuild.BuildQty * (tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblgroupbuild.BuildQty * (tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblgroupbuild.BuildQty * (tblgroupbuildlines.CostPriceEx * tblgroupbuildlines.Qty) as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblgroupbuild ');
            Add('INNER JOIN tblgroupbuildlines on tblgroupbuildlines.GroupBuildID = tblgroupbuild.BuildID ');
            Add('INNER JOIN tblParts P ON P.PARTSID = tblgroupbuildlines.PartsID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.ASSETACCNT ');
            Add('WHERE tblgroupbuild.Deleted<>"T" ');
            if IDs <> '' then Add(' AND  tblgroupbuild.BuildID in (' + IDs+')');
            Add('AND tblgroupbuild.BuildDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblvargroupbuild')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblvargroupbuild.BuildDate, ');
            Add('"Variable Group Build" as Type, ');
            Add('tblvargroupbuild.GlobalRef  as "Global #", ');
            Add('tblvargroupbuild.ClassID, ');
            Add('tblvargroupbuild.BuildID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblvargroupbuild.BuildQty * Sum(tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblvargroupbuild.BuildQty * Sum(tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblvargroupbuild.BuildQty * Sum(tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblvargroupbuild.BuildQty * Sum(tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblvargroupbuild ');
            Add('INNER JOIN tblvargroupbuildlines on tblvargroupbuildlines.GroupBuildID = tblvargroupbuild.BuildID ');
            Add('INNER JOIN tblParts P ON P.PARTSID = tblvargroupbuild.GroupPartID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.ASSETACCNT ');
            Add('WHERE tblvargroupbuildlines.Deleted<>"T" ');
            if IDs <> '' then Add(' AND  tblvargroupbuild.BuildID in (' + IDs+')');
            Add('AND tblvargroupbuild.BuildDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('Group by tblvargroupbuild.BuildID;');

        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblvargroupbuild')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblvargroupbuild.BuildDate, ');
            Add('"Variable Group Build Lines" as Type, ');
            Add('tblvargroupbuild.GlobalRef  as "Global #", ');
            Add('tblvargroupbuild.ClassID, ');
            Add('tblvargroupbuild.BuildID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('AccountID, ');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('P.PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblvargroupbuild.BuildQty * (tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblvargroupbuild.BuildQty * (tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblvargroupbuild.BuildQty * (tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblvargroupbuild.BuildQty * (tblvargroupbuildlines.CostPriceEx * tblvargroupbuildlines.Qty) as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblvargroupbuild ');
            Add('INNER JOIN tblvargroupbuildlines on tblvargroupbuildlines.GroupBuildID = tblvargroupbuild.BuildID ');
            Add('INNER JOIN tblParts P ON P.PARTSID = tblvargroupbuildlines.PartsID ');
            Add('INNER JOIN tblchartofaccounts CA on CA.AccountName = P.ASSETACCNT ');
            Add('WHERE tblvargroupbuildlines.Deleted<>"T" ');
            if IDs <> '' then Add(' AND  tblvargroupbuild.BuildID in (' + IDs+')');
            Add('AND tblvargroupbuild.BuildDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tbldeposits')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tbldeposits.PaymentDate as "Date", ');
            Add('"Customer Payment" AS Type, ');
            Add('tbldeposits.GlobalRef  as "Global #", ');
            Add('tbldeposits.ClassID, ');
            Add('If(tbldepositline.TrnType="Prepayment",0,tbldepositline.SaleID) as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tbldeposits.PaymentID, ');
            Add('If(tbldepositline.TrnType="Prepayment",tbldepositline.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tbldeposits.AccountID, ');
            Add('tbldeposits.CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tbldeposits.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tbldeposits.Amount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('tbldeposits.Amount as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('tbldeposits.Amount  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tbldeposits.Amount  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tbldeposits  ');
            Add('INNER JOIN tbldepositline USING(PaymentID) ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tbldeposits.EmployeeID ');
            Add('WHERE tbldeposits.Deleted = "F" AND tbldeposits.Amount<>0.00 ');
            if IDs <> '' then Add(' AND  tbldeposits.PaymentID in (' + IDs+')');
            Add(' AND tbldeposits.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tbldeposits.PaymentID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tbldeposits')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tbldeposits.PaymentDate as "Date", ');
            Add('"Customer Payment" AS Type, ');
            Add('tbldeposits.GlobalRef  as "Global #", ');
            Add('tbldeposits.ClassID, ');
            Add('If(tbldepositline.TrnType="Prepayment",0,tbldepositline.SaleID) as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tbldeposits.PaymentID, ');
            Add('If(tbldepositline.TrnType="Prepayment",tbldepositline.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tbldeposits.ForeignVariationAccountID, ');
            Add('tbldeposits.CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tbldeposits.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('-tbldeposits.ForeignVariationAmount as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('-tbldeposits.ForeignVariationAmount as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('-tbldeposits.ForeignVariationAmount as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('-tbldeposits.ForeignVariationAmount as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tbldeposits  ');
            Add('INNER JOIN tbldepositline USING(PaymentID) ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tbldeposits.EmployeeID ');
            Add('WHERE tbldeposits.Deleted = "F" AND tbldeposits.ForeignVariationAmount<>0.00 ');
            if IDs <> '' then Add(' AND  tbldeposits.PaymentID in (' + IDs+')');
            Add(' AND tbldeposits.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tbldeposits.PaymentID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tbldeposits')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tbldeposits.PaymentDate as "Date", ');
            Add('"Customer Payment" AS Type, ');
            Add('tbldeposits.GlobalRef  as "Global #", ');
            Add('tbldeposits.ClassID, ');
            Add('If(tbldepositline.TrnType="Prepayment",0,tbldepositline.SaleID) as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tbldeposits.PaymentID, ');
            Add('If(tbldepositline.TrnType="Prepayment",tbldepositline.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(GetAccountID('Customer Prepayments')) + ',');
            Add('tbldeposits.CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tbldeposits.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('-tbldepositline.Payment as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('-tbldepositline.Payment as "DebitsInc", ');
            Add('0.00 as "CreditsInc",');
            Add('-tbldepositline.Payment  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('-tbldepositline.Payment  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tbldeposits  ');
            Add('INNER JOIN tbldepositline USING(PaymentID) ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tbldeposits.EmployeeID ');
            Add('WHERE tbldeposits.Deleted = "F" AND TrnType = "Prepayment" ');
            if IDs <> '' then Add(' AND  tbldeposits.PaymentID in (' + IDs+')');
            Add(' AND tbldeposits.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tbldeposits')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tbldeposits.PaymentDate as "Date", ');
            Add('"Customer Payment" AS Type, ');
            Add('tbldeposits.GlobalRef  as "Global #", ');
            Add('tbldeposits.ClassID, ');
            Add('If(tbldepositline.TrnType="Prepayment",0,tbldepositline.SaleID) as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tbldeposits.PaymentID, ');
            Add('If(tbldepositline.TrnType="Prepayment",tbldepositline.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblSales.AccountID, ');
            Add('tbldeposits.CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tbldeposits.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tbldepositline.Payment as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tbldepositline.Payment as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tbldepositline.Payment as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tbldepositline.Payment as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tbldeposits ');
            Add('INNER JOIN tbldepositline ON tbldepositline.PaymentID = tbldeposits.PaymentID ');
            Add('INNER JOIN tblSales ON tblSales.SaleID = tbldepositline.SaleID ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID = tbldeposits.EmployeeID ');
            Add('WHERE tbldeposits.Deleted = "F" ');
            if IDs <> '' then Add(' AND  tbldeposits.PaymentID in (' + IDs+')');
            Add('AND tbldeposits.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblprepayments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblprepayments.PrePaymentDate, ');
            Add('"Customer Prepayment" AS Type, ');
            Add('tblprepayments.GlobalRef  as "Global #", ');
            Add('tblprepayments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('tblprepayments.PrePaymentID as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblprepayments.BankAccountID, ');
            Add('ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblprepayments.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('tblprepayments.Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblprepayments.PayAmount as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblprepayments.PayAmount as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblprepayments.PayAmount as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblprepayments.PayAmount as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblprepayments ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblprepayments.EmployeeID ');
            Add('WHERE tblprepayments.Deleted<>"T" AND tblprepayments.Customer="T" ');
            if IDs <> '' then Add(' AND  tblprepayments.PrePaymentID in (' + IDs+')');
            Add('AND tblprepayments.PrePaymentDate >= "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblprepayments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblprepayments.PrePaymentDate, ');
            Add('"Customer Prepayment" AS Type, ');
            Add('tblprepayments.GlobalRef  as "Global #", ');
            Add('tblprepayments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('tblprepayments.PrePaymentID as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblprepayments.MasterAccountID , ');
            Add('ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblprepayments.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblprepayments.PayAmount as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblprepayments.PayAmount as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblprepayments.PayAmount as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblprepayments.PayAmount as "CASH_CreditsInc" , ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblprepayments ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblprepayments.EmployeeID ');
            Add('WHERE tblprepayments.Deleted<>"T" AND tblprepayments.Customer="T" ');
            if IDs <> '' then Add(' AND  tblprepayments.PrePaymentID in (' + IDs+')');
            Add('AND tblprepayments.PrePaymentDate >= "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblprepayments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblprepayments.PrePaymentDate, ');
            Add('"Supplier Prepayment" AS Type, ');
            Add('tblprepayments.GlobalRef  as "Global #", ');
            Add('tblprepayments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('tblprepayments.PrePaymentID as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblprepayments.BankAccountID , ');
            Add('ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblprepayments.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblprepayments.PayAmount as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblprepayments.PayAmount as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblprepayments.PayAmount as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblprepayments.PayAmount as "CASH_CreditsInc" , ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblprepayments ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblprepayments.EmployeeID ');
            Add('WHERE tblprepayments.Deleted<>"T" AND tblprepayments.Supplier="T" ');
            if IDs <> '' then Add(' AND  tblprepayments.PrePaymentID in (' + IDs+')');
            Add('AND tblprepayments.PrePaymentDate >= "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblprepayments')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblprepayments.PrePaymentDate, ');
            Add('"Supplier Prepayment" AS Type, ');
            Add('tblprepayments.GlobalRef  as "Global #", ');
            Add('tblprepayments.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('tblprepayments.PrePaymentID as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblprepayments.MasterAccountID , ');
            Add('ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblprepayments.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblprepayments.PayAmount as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblprepayments.PayAmount as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblprepayments.PayAmount as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblprepayments.PayAmount as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblprepayments ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblprepayments.EmployeeID ');
            Add('WHERE tblprepayments.Deleted<>"T" And tblprepayments.Supplier="T" ');
            if IDs <> '' then Add(' AND  tblprepayments.PrePaymentID in (' + IDs+')');
            Add('AND tblprepayments.PrePaymentDate >= "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');

        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblwithdrawal')) then begin
            Add(INSERT_INTO_String); // Prepayment Account
            Add('SELECT tblwithdrawal.PaymentDate as "Date", ');
            Add('"Supplier Payment" AS Type, ');
            Add('tblwithdrawal.GlobalRef  as "Global #", ');
            Add('tblwithdrawal.ClassID, ');
            Add('0 as SaleID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",0,tblwithdrawallines.POID) as PurchaseOrderID, ');
            Add('tblwithdrawal.PaymentID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",tblwithdrawallines.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(GetAccountID('Supplier Prepayments')) + ' ,');
            Add('SupplierID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductName, ');
            Add('tblwithdrawal.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('-tblwithdrawallines.Payment as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('-tblwithdrawallines.Payment as "CreditsInc", ');
            Add('0.00  as CASH_DebitsEx, ');
            Add('-tblwithdrawallines.Payment  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('-tblwithdrawallines.Payment  as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblwithdrawal ');
            Add('INNER JOIN tblwithdrawallines ON tblwithdrawallines.PaymentID =tblwithdrawal.PaymentID  ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblwithdrawal.EmployeeID ');
            Add('WHERE tblwithdrawal.Deleted = "F" AND TrnType = "Prepayment" ');
            if IDs <> '' then Add(' AND  tblwithdrawal.PaymentID in (' + IDs+')');
            Add(' AND tblwithdrawal.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblwithdrawal')) then begin
            Add(INSERT_INTO_String); //BANK ACCOUNT
            Add('SELECT tblwithdrawal.PaymentDate as "Date", ');
            Add('"Supplier Payment" AS Type, ');
            Add('tblwithdrawal.GlobalRef  as "Global #", ');
            Add('tblwithdrawal.ClassID, ');
            Add('0 as SaleID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",0,tblwithdrawallines.POID) as PurchaseOrderID, ');
            Add('tblwithdrawal.PaymentID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",tblwithdrawallines.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblwithdrawal.AccountID, ');
            Add('SupplierID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductName, ');
            Add('tblwithdrawal.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblwithdrawal.Amount as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblwithdrawal.Amount as "CreditsInc", ');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblwithdrawal.Amount as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblwithdrawal.Amount as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblwithdrawal ');
            Add('INNER JOIN tblwithdrawallines ON tblwithdrawallines.PaymentID =tblwithdrawal.PaymentID  ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblwithdrawal.EmployeeID ');
            Add('WHERE tblwithdrawal.Deleted = "F" AND tblwithdrawal.Amount<>0.00 ');
            if IDs <> '' then Add(' AND  tblwithdrawal.PaymentID in (' + IDs+')');
            Add(' AND tblwithdrawal.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tblwithdrawal.PaymentID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblwithdrawal')) then begin
            Add(INSERT_INTO_String); //Variation ACCOUNT
            Add('SELECT tblwithdrawal.PaymentDate as "Date", ');
            Add('"Supplier Payment" AS Type, ');
            Add('tblwithdrawal.GlobalRef  as "Global #", ');
            Add('tblwithdrawal.ClassID, ');
            Add('0 as SaleID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",0,tblwithdrawallines.POID) as PurchaseOrderID, ');
            Add('tblwithdrawal.PaymentID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",tblwithdrawallines.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblwithdrawal.ForeignVariationAccountID, ');
            Add('SupplierID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductName, ');
            Add('tblwithdrawal.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('-tblwithdrawal.ForeignVariationAmount as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('-tblwithdrawal.ForeignVariationAmount as "CreditsInc", ');
            Add('0.00  as CASH_DebitsEx, ');
            Add('-tblwithdrawal.ForeignVariationAmount as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('-tblwithdrawal.ForeignVariationAmount as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblwithdrawal ');
            Add('INNER JOIN tblwithdrawallines ON tblwithdrawallines.PaymentID =tblwithdrawal.PaymentID  ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblwithdrawal.EmployeeID ');
            Add('WHERE tblwithdrawal.Deleted = "F" AND tblwithdrawal.ForeignVariationAmount<>0.00 ');
            if IDs <> '' then Add(' AND  tblwithdrawal.PaymentID in (' + IDs+')');
            Add(' AND tblwithdrawal.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tblwithdrawal.PaymentID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblwithdrawal')) then begin
            Add(INSERT_INTO_String); // AP Account
            Add('SELECT tblwithdrawal.PaymentDate as "Date", ');
            Add('"Supplier Payment" AS Type, ');
            Add('tblwithdrawal.GlobalRef  as "Global #", ');
            Add('tblwithdrawal.ClassID, ');
            Add('0 as SaleID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",0,tblwithdrawallines.POID) as PurchaseOrderID, ');
            Add('tblwithdrawal.PaymentID, ');
            Add('If(tblwithdrawallines.TrnType="Prepayment",tblwithdrawallines.PrePaymentID,0) as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblchartofaccounts.AccountID, ');
            Add('SupplierID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblwithdrawal.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('SUBSTRING(Comments,1,255) as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblwithdrawallines.Payment as "DebitsEx", ');
            Add('0.00 as "CreditsEx",  ');
            Add('tblwithdrawallines.Payment as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblwithdrawallines.Payment  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('tblwithdrawallines.Payment  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('ReferenceNo  as `Chq/Ref` ');
            Add('FROM tblwithdrawal ');
            Add('INNER JOIN tblwithdrawallines ON tblwithdrawallines.PaymentID = tblwithdrawal.PaymentID  ');
            Add('INNER JOIN tblpurchaseorders ON  tblpurchaseorders.PurchaseOrderID = tblwithdrawallines.POID  ');
            Add('INNER JOIN tblchartofaccounts ON tblchartofaccounts.AccountName=tblpurchaseorders.Account ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblwithdrawal.EmployeeID ');
            Add('WHERE tblwithdrawal.Deleted = "F" ');
            if IDs <> '' then Add(' AND  tblwithdrawal.PaymentID in (' + IDs+')');
            Add(' AND tblwithdrawal.PaymentDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblbankdeposit')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblbankdeposit.DepositDate as "Date", ');
            Add('if (TrnsType="Deposit Entry","Deposit Entry","Bank Deposit") AS Type, ');
            Add('tblbankdeposit.GlobalRef  as "Global #", ');
            Add('tblbankdepositlines.ClassID as ClassID, ');
            Add('0 as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tblbankdeposit.DepositID as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblbankdeposit.AccountID, ');
            Add('CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblbankdeposit.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('tblbankdeposit.Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('Deposit as "DebitsEx", ');
            Add('0.00 as "CreditsEx", ');
            Add('Deposit as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('Deposit  as CASH_DebitsEx, ');
            Add('0.00  as CASH_CreditsEx, ');
            Add('Deposit  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblbankdeposit  ');
            Add('INNER JOIN tblbankdepositlines ON tblbankdepositlines.DepositID = tblbankdeposit.DepositID ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblbankdeposit.EmployeeID ');
            Add('Where (tblbankdepositlines.TrnsType = "Customer Payment" OR tblbankdepositlines.TrnsType = "Deposit Entry" OR ');
            Add('tblbankdepositlines.TrnsType = "Cash Sale" OR tblbankdepositlines.TrnsType = "Refund" OR tblbankdepositlines.TrnsType = "Prepayment") ');
            if IDs <> '' then Add(' AND  tblbankdeposit.DepositID in (' + IDs+')');
            Add('And tblbankdepositlines.FromDeposited ="T" ');
            Add('And tblbankdeposit.Deleted <>"T" ');
            Add(' AND tblbankdeposit.DepositDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '" ');
            Add('GROUP BY tblbankdeposit.DepositID;');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblbankdeposit')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT tblbankdeposit.DepositDate as "Date", ');
            Add('if (TrnsType="Deposit Entry","Deposit Entry","Bank Deposit") AS Type, ');
            Add('tblbankdeposit.GlobalRef  as "Global #", ');
            Add('tblbankdepositlines.ClassID as ClassID, ');
            Add('0 as SaleID, ');
            Add('0 as PurchaseOrderID, ');
            Add('tblbankdeposit.DepositID as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblbankdepositlines.AccountID, ');
            Add('tblbankdepositlines.CusID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblbankdeposit.EmployeeID  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('tblbankdeposit.Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblbankdepositlines.Amount as "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblbankdepositlines.Amount as "CreditsInc",');
            Add('0.00  as CASH_DebitsEx, ');
            Add('tblbankdepositlines.Amount  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('tblbankdepositlines.Amount  as CASH_CreditsInc  ,  ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblbankdeposit  ');
            Add('INNER JOIN tblbankdepositlines ON tblbankdepositlines.DepositID = tblbankdeposit.DepositID ');
            Add('LEFT JOIN tbldeposits ON tblbankdepositlines.PaymentID =tbldeposits.PaymentID ');
            Add('LEFT JOIN tblemployees ON tblemployees.EmployeeID=tblbankdeposit.EmployeeID ');
            Add('Where (tblbankdepositlines.TrnsType = "Customer Payment" OR tblbankdepositlines.TrnsType = "Deposit Entry" OR ');
            Add('tblbankdepositlines.TrnsType = "Cash Sale" OR tblbankdepositlines.TrnsType = "Refund" OR tblbankdepositlines.TrnsType = "Prepayment") ');
            if IDs <> '' then Add(' AND  tblbankdeposit.DepositID in (' + IDs+')');
            Add('And tblbankdepositlines.FromDeposited ="T" ');
            Add('And tblbankdeposit.Deleted <>"T" ');
            Add('AND tblbankdeposit.DepositDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblgeneraljournal')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT TransactionDate as "Date", ');
            Add('"Journal Entry" as Type, ');
            Add('tblgeneraljournal.GlobalRef  as "Global #", ');
            Add('tblgeneraljournaldetails.ClassID, ');
            Add('tblgeneraljournal.GJID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('IF(tblgeneraljournal.TaxSelect="OUTPUT",99,98) as FixedAssetID, '); //UK Issue VAT
            Add('tblgeneraljournaldetails.AccountID, ');
            Add('tblgeneraljournaldetails.ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Memo as Notes, ');
            Add('tblgeneraljournaldetails.TaxCode  as TaxCode, ');
            Add('tblgeneraljournaldetails.TaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(DebitAmount>0.00,(DebitAmount),0.00) as "DebitsEx", ');
            Add('If(CreditAmount>0.00,(CreditAmount),0.00) as  "CreditsEx", ');
            Add('If(DebitAmount>0.00,(DebitAmount + TaxAmount),0.00) as "DebitsInc", ');
            Add('If(CreditAmount>0.00,(CreditAmount + TaxAmount),0.00) as "CreditsInc",');
            Add('If(DebitAmount>0.00,(DebitAmount),0.00) as "CASH_DebitsEx", ');
            Add('If(CreditAmount>0.00,(CreditAmount),0.00) as  "CASH_CreditsEx", ');
            Add('If(DebitAmount>0.00,(DebitAmount + TaxAmount),0.00) as "CASH_DebitsInc", ');
            Add('If(CreditAmount>0.00,(CreditAmount + TaxAmount),0.00) as "CASH_CreditsInc",  ');
            Add('TransactionNo  as `Chq/Ref` ');
            Add('FROM tblgeneraljournaldetails ');
            Add('INNER JOIN tblgeneraljournal ON tblgeneraljournal.GJID = tblgeneraljournaldetails.GJID ');
            Add(' AND TransactionDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblgeneraljournal')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT TransactionDate as "Date", ');
            Add('"Journal Entry" as Type, ');
            Add('tblgeneraljournal.GlobalRef  as "Global #", ');
            Add('tblgeneraljournaldetails.ClassID, ');
            Add('tblgeneraljournal.GJID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('IF(tblgeneraljournal.TaxSelect="OUTPUT",99,98) as FixedAssetID, '); //UK Issue VAT
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_PAID))+',');
            Add('tblgeneraljournaldetails.ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Memo as Notes, ');
            Add('tblgeneraljournaldetails.TaxCode  as TaxCode, ');
            Add('tblgeneraljournaldetails.TaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(DebitAmount>0.00,(TaxAmount),0.00) as "DebitsEx", ');
            Add('If(CreditAmount>0.00,(TaxAmount),0.00) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('If(DebitAmount>0.00,(TaxAmount),0.00) as "CASH_DebitsEx", ');
            Add('If(CreditAmount>0.00,(TaxAmount),0.00) as  "CASH_CreditsEx", ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc  ,  ');
            Add('TransactionNo  as `Chq/Ref` ');
            Add('FROM tblgeneraljournaldetails  ');
            Add('INNER JOIN tblgeneraljournal ON tblgeneraljournal.GJID = tblgeneraljournaldetails.GJID ');
            Add('WHERE TaxSelect = "INPUT" AND TaxAmount<>0  AND Not IsNull(TaxAmount) ');
            if IDs <> '' then Add(' AND  tblgeneraljournal.GJID in (' + IDs+')');
            Add(' AND TransactionDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblgeneraljournal')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT TransactionDate as "Date", ');
            Add('"Journal Entry" as Type, ');
            Add('tblgeneraljournal.GlobalRef  as "Global #", ');
            Add('tblgeneraljournaldetails.ClassID, ');
            Add('tblgeneraljournal.GJID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('IF(tblgeneraljournal.TaxSelect="OUTPUT",99,98) as FixedAssetID, '); //UK Issue VAT
            Add(FastFuncs.IntToStr(tcDataUtils.getAccountID(tcConst.GLACCOUNT_TAX_COLLECTED))+',');
            Add('tblgeneraljournaldetails.ClientID as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0  as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Memo as Notes, ');
            Add('tblgeneraljournaldetails.TaxCode  as TaxCode, ');
            Add('tblgeneraljournaldetails.TaxRate  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(DebitAmount>0.00 ,(TaxAmount),0.00) as "DebitsEx", ');
            Add('If(CreditAmount>0.00 ,(TaxAmount),0.00) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('If(DebitAmount>0.00 ,(TaxAmount),0.00)  as CASH_DebitsEx, ');
            Add('If(CreditAmount>0.00 ,(TaxAmount),0.00)  as CASH_CreditsEx, ');
            Add('0.00  as CASH_DebitsInc, ');
            Add('0.00  as CASH_CreditsInc ,  ');
            Add('TransactionNo  as `Chq/Ref` ');
            Add('FROM tblgeneraljournaldetails  ');
            Add('INNER JOIN tblgeneraljournal ON tblgeneraljournal.GJID = tblgeneraljournaldetails.GJID ');
            Add('WHERE TaxSelect = "OUTPUT" AND TaxAmount<>0 AND Not IsNull(TaxAmount)  ');
            if IDs <> '' then Add(' AND  tblgeneraljournal.GJID in (' + IDs+')');
            Add(' AND TransactionDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"; ');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblfixedassets')) then begin
            Add(INSERT_INTO_String); //70
            Add('SELECT ');
            Add('tblfixedassets.PurchDate as Date, ');
            Add('"Fixed Asset" AS Type, ');
            Add('tblfixedassets.GlobalRef  as "Global #", ');
            Add('FAP.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('tblfixedassets.AssetID as FixedAssetID, ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then
              Add('tblfixedassets.FixedAssetCostAccountID2, ')
            else Add('tblfixedassets.FixedAssetCostAccountID, ');
            Add('0 as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblfixedassets ');
            Add('INNER JOIN tblFixedAssetPercentages FAP ON FAP.AssetID=tblfixedassets.AssetID ');
            Add('WHERE tblfixedassets.Active="T" AND tblfixedassets.PurchCost<>0.00 ');
            if IDs <> '' then Add(' AND  tblfixedassets.AssetID in (' + IDs+')');
            Add('AND tblfixedassets.PurchDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblfixedassets')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('tblfixedassets.PurchDate as Date, ');
            Add('"Fixed Asset" AS Type, ');
            Add('tblfixedassets.GlobalRef  as "Global #", ');
            Add('FAP.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('tblfixedassets.AssetID as FixedAssetID, ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then
                 Add('tblfixedassets.ClearingAccountID2,')
            else Add('tblfixedassets.ClearingAccountID, ');
            Add('0 as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00 as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('tblfixedassets.PurchCost*(FAP.Cost/100) as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblfixedassets ');
            Add('INNER JOIN tblFixedAssetPercentages FAP ON FAP.AssetID=tblfixedassets.AssetID ');
            Add('WHERE tblfixedassets.Active="T" AND tblfixedassets.PurchCost<>0.00 ');
            if IDs <> '' then Add(' AND  tblfixedassets.AssetID in (' + IDs+')');
            Add('AND tblfixedassets.PurchDate >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblfixedassets')) then begin
            Add(INSERT_INTO_StringFixedAssets);
            Add('SELECT ');
            Add('FAD.Date as Date, ');
            Add('"Fixed Asset Depreciation" AS Type, ');
            Add('tblfixedassets.GlobalRef  as "Global #", ');
            Add('FAP.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('tblfixedassets.AssetID as FixedAssetID, ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then
                 Add('tblfixedassets.FixedAssetDepreciationAssetAccountID2,')
            else Add('tblfixedassets.FixedAssetDepreciationAssetAccountID,');
            Add('0 as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('0.00 as "DebitsEx", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as  "CreditsEx", ');
            Add('0.00 as "DebitsInc", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "CreditsInc", ');
            Add('0.00 as "CASH_DebitsEx", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as  "CASH_CreditsEx", ');
            Add('0.00 as "CASH_DebitsInc", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref`, ');
            Add('If(FAD.Date>CURDATE(),"F","T")  as `Active` ');
            Add('FROM tblfixedassets ');
            Add('INNER JOIN tblFixedAssetPercentages FAP ON FAP.AssetID=tblfixedassets.AssetID ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then begin
              Add('INNER JOIN tblfixedassetsdepreciationdetails2 FAD ON FAD.AssetID=tblfixedassets.AssetID');
            end else begin
              Add('INNER JOIN tblfixedassetsdepreciationdetails FAD ON FAD.AssetID= tblfixedassets.AssetID');
            end;
            Add('WHERE tblfixedassets.Active="T" AND FAD.Depreciation<>0.00 ');
            if IDs <> '' then Add(' AND  tblfixedassets.AssetID in (' + IDs+')');
            Add('AND FAD.Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblfixedassets')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT ');
            Add('FAD.Date as Date, ');
            Add('"Fixed Asset Depreciation" AS Type, ');
            Add('tblfixedassets.GlobalRef  as "Global #", ');
            Add('FAP.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('tblfixedassets.AssetID as FixedAssetID, ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then
              Add('tblfixedassets.FixedAssetDepreciationAccountID2, ')
            else
              Add('tblfixedassets.FixedAssetDepreciationAccountID, ');
            Add('0 as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('PARTNAME  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('0 as EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('Notes as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00 as TaxRate, ');
            Add('0  as TaxID, ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "DebitsEx", ');
            Add('0.00 as  "CreditsEx", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "DebitsInc", ');
            Add('0.00 as "CreditsInc", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "CASH_DebitsEx", ');
            Add('0.00 as  "CASH_CreditsEx", ');
            Add('FAD.Depreciation*(FAP.Depreciation/100) as "CASH_DebitsInc", ');
            Add('0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblfixedassets ');
            Add('INNER JOIN tblFixedAssetPercentages FAP ON FAP.AssetID=tblfixedassets.AssetID ');
            if (AppEnv.CompanyPrefs.DepreciationForTransactions = 2) then begin
              Add('INNER JOIN tblfixedassetsdepreciationdetails2 FAD ON FAD.AssetID=tblfixedassets.AssetID ');
            end else begin
              Add('INNER JOIN tblfixedassetsdepreciationdetails FAD ON FAD.AssetID=tblfixedassets.AssetID ');
            end;
            Add('WHERE tblfixedassets.Active="T" AND FAD.Depreciation<>0.00 ');
            if IDs <> '' then Add(' AND  tblfixedassets.AssetID in (' + IDs+')');
            Add('AND FAD.Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblpays')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT Date, ');
            Add('Type, ');
            Add('tblpays.GlobalRef  as "Global #", ');
            Add('tblpaystransactions.ClassID, ');
            Add('tblpaystransactions.PayID as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add('tblpaystransactions.AccountID, ');
            Add('tblpaystransactions.ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('tblpaystransactions.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(tblpaystransactions.Amount<0 ,-tblpaystransactions.Amount,0.00)+0.00 as "DebitsEx", ');
            Add('If(tblpaystransactions.Amount>0 ,tblpaystransactions.Amount,0.00)+0.00 as  "CreditsEx", ');
            Add('If(tblpaystransactions.Amount<0 ,-tblpaystransactions.Amount,0.00)+0.00 as "DebitsInc", ');
            Add('If(tblpaystransactions.Amount>0 ,tblpaystransactions.Amount,0.00)+0.00 as "CreditsInc", ');
            Add('If(tblpaystransactions.Amount<0 ,-tblpaystransactions.Amount,0.00)+0.00 as "CASH_DebitsEx", ');
            Add('If(tblpaystransactions.Amount>0 ,tblpaystransactions.Amount,0.00)+0.00 as  "CASH_CreditsEx", ');
            Add('If(tblpaystransactions.Amount<0 ,-tblpaystransactions.Amount,0.00)+0.00 as "CASH_DebitsInc", ');
            Add('If(tblpaystransactions.Amount>0 ,tblpaystransactions.Amount,0.00)+0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblpaystransactions ');
            Add('INNER JOIN tblpays USING(PayID)');
            Add('WHERE Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '"');
            if IDs <> '' then Add(' AND  tblpays.PayID in (' + IDs+')');
            Add(';');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblleaveaccruals')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT Date, ');
            Add('"Payroll Accrued Leave Adjustment" as Type, ');
            Add('LA.GlobalRef  as "Global #", ');
            Add('L.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(AppEnv.PayPrefs.LeaveProvisionAccountID) + ',');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('LA.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "DebitsEx", ');
            Add('If(-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+( If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as  "CreditsEx", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+( If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "DebitsInc", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+( If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CreditsInc", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+( If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_DebitsEx", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as  "CASH_CreditsEx", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_DebitsInc", ');
            Add('If(-Round(LA.AccruedHours*(  If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              '+(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblleaveaccruals LA ');
            Add('INNER JOIN tblEmployees E On E.EmployeeID=LA.EmployeeID ');
            Add('INNER JOIN tblemployeepayrates EPR ON EPR.EmployeeID=LA.EmployeeID  ');
            Add('INNER JOIN tblpayrates PR ON (EPR.PayRateID=PR.RateID) AND (Multiplier=1) ');
            Add('INNER JOIN tblleave L On (L.EmployeeID=LA.EmployeeID AND L.Type=LA.LeaveType) ');
            Add('WHERE LA.AccrualType="Adjustment" AND LA.LeaveType="Annual Leave" ');
            if IDs <> '' then Add(' AND  LA.AccrualID in (' + IDs+')');
            Add('AND Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if (Objtablename = '') or (SameText(objTablename , 'tblleaveaccruals')) then begin
            Add(INSERT_INTO_String);
            Add('SELECT Date, ');
            Add('"Payroll Accrued Leave Adjustment" as Type, ');
            Add('LA.GlobalRef  as "Global #", ');
            Add('L.ClassID, ');
            Add('0 as SaleID, ');
            Add('0 AS PurchaseOrderID, ');
            Add('0 as PaymentID, ');
            Add('0 as PrepaymentID, ');
            Add('0 as FixedAssetID, ');
            Add(FastFuncs.IntToStr(AppEnv.PayPrefs.LeaveLiabilityAccountID) + ',');
            Add('"" as ClientID, ');
            Add('""  as ProductDesc, ');
            Add('""  as ProductName, ');
            Add('""  as ProductGroup, ');
            Add('LA.EmployeeID, ');
            Add('"F" as Reconciled, ');
            Add('"" as Notes, ');
            Add('""  as TaxCode, ');
            Add('0.00  as TaxRate, ');
            Add('0  as TaxID, ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "DebitsEx", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as  "CreditsEx", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "DebitsInc", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CreditsInc", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_DebitsEx", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as  "CASH_CreditsEx", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)<0 ,' +
              '-Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_DebitsInc", ');
            Add('If(Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty))' +
              ' +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2)>0 ,' +
              'Round(LA.AccruedHours*(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) +(If(IsNull(EPR.LineTotal/EPR.Qty),HourlyRate,(EPR.LineTotal/EPR.Qty)) *(E.LeaveLoading/100))),2),0.00)+0.00 as "CASH_CreditsInc" , ');
            Add('""  as `Chq/Ref` ');
            Add('FROM tblleaveaccruals LA ');
            Add('INNER JOIN tblEmployees E On E.EmployeeID=LA.EmployeeID ');
            Add('INNER JOIN tblemployeepayrates EPR ON EPR.EmployeeID=LA.EmployeeID ');
            Add('INNER JOIN tblpayrates PR ON (EPR.PayRateID=PR.RateID) AND (Multiplier=1) ');
            Add('INNER JOIN tblleave L On (L.EmployeeID=LA.EmployeeID AND L.Type=LA.LeaveType) ');
            Add('WHERE LA.AccrualType="Adjustment" AND LA.LeaveType="Annual Leave" ');
            if IDs <> '' then Add(' AND  LA.AccrualID in (' + IDs+')');
            Add('AND Date >=  "' + FormatDateTime('yyyy-mm-dd', SummarisedTransDate) + '";');
        End;
        if fsFilter <> '' then begin
            Add('update ' + tablename + ' as TT  inner join tblchartofaccounts as COA on TT.AccountId = COA.AccountId ' );
            add('Set TT.AccountName = COA.AccountName , ');
            add('TT.AccountGroupLevels =  Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)), ');
            add('TT.Level1 =  SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",1) , ');
            add('TT.Level2 =  MID(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",2), ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",1))+2, ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",2))- ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",1))) , ');
            add('TT.Level1 =  MID(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",3), ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",2))+2, ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",3))- ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",2))) , ');
            add('TT.Level1 =  MID(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",4), ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",3))+2, ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",4))-  ');
            Add('Length(SUBSTRING_INDEX( Concat_WS("^",IF(Length(COA.AccountGroup)=0,Null,COA.AccountGroup) ,Trim(COA.AccountName)) ,"^",3)))  ');
            Add(' where ' +fsFilter +';');
            Add('update ' + tablename + ' as TT  inner join tblemployees as EMP on TT.EmployeeID = EMP.EmployeeID ' );
            add('Set TT.RepName = concat_WS(" " , EMP.firstName , EMP.LastName)');
            Add(' where ' +fsFilter +';');
            Add('update ' + tablename + ' as TT  inner join tblclients as CL on TT.ClientID= CL.ClientID ' );
            add('Set TT.ClientName = CL.Company');
            Add(' where ' +fsFilter +';');
        end;
    end;
end;


end.
